diff --git "a/temp\\src\\java/kg.java" "b/src\\main\\java/Arrow.java"
similarity index 72%
rename from "temp\\src\\java/kg.java"
rename to "src\\main\\java/Arrow.java"
index b0c35b9..13976d2 100644
--- "a/temp\\src\\java/kg.java"
+++ "b/src\\main\\java/Arrow.java"
@@ -1,50 +1,46 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.List;
-import java.util.Random;
-
-public class kg extends kh
+public class Arrow extends kh
 {
 
-    private int b;
-    private int c;
-    private int d;
-    private int e;
-    private boolean f;
-    public int a;
-    private ge g;
+    private int xTile;
+    private int yTile;
+    private int zTile;
+    private int inTile;
+    private boolean inGround;
+    public int shake;
+    private Mob g;
     private int h;
     private int i;
 
-    public kg(cn cn1)
+    public Arrow(World world1)
     {
-        super(cn1);
-        b = -1;
-        c = -1;
-        d = -1;
-        e = 0;
-        f = false;
-        a = 0;
+        super(world1);
+        xTile = -1;
+        yTile = -1;
+        zTile = -1;
+        inTile = 0;
+        inGround = false;
+        shake = 0;
         i = 0;
         a(0.5F, 0.5F);
     }
 
-    public kg(cn cn1, ge ge1)
+    public Arrow(World world1, Mob mob1)
     {
-        super(cn1);
-        b = -1;
-        c = -1;
-        d = -1;
-        e = 0;
-        f = false;
-        a = 0;
+        super(world1);
+        xTile = -1;
+        yTile = -1;
+        zTile = -1;
+        inTile = 0;
+        inGround = false;
+        shake = 0;
         i = 0;
-        g = ge1;
+        g = mob1;
         a(0.5F, 0.5F);
-        c(ge1.ak, ge1.al, ge1.am, ge1.aq, ge1.ar);
+        c(mob1.ak, mob1.al, mob1.am, mob1.aq, mob1.ar);
         ak -= eo.b((aq / 180F) * 3.141593F) * 0.16F;
         al -= 0.10000000149011612D;
         am -= eo.a((aq / 180F) * 3.141593F) * 0.16F;
@@ -81,14 +77,14 @@ public class kg extends kh
     public void e_()
     {
         super.e_();
-        if(a > 0)
-            a--;
-        if(f)
+        if(shake > 0)
+            shake--;
+        if(inGround)
         {
-            int j = ag.a(b, c, d);
-            if(j != e)
+            int j = ag.a(xTile, yTile, zTile);
+            if(j != inTile)
             {
-                f = false;
+                inGround = false;
                 an *= aQ.nextFloat() * 0.2F;
                 ao *= aQ.nextFloat() * 0.2F;
                 ap *= aQ.nextFloat() * 0.2F;
@@ -153,10 +149,10 @@ public class kg extends kh
                 }
             } else
             {
-                b = mf1.b;
-                c = mf1.c;
-                d = mf1.d;
-                e = ag.a(b, c, d);
+                xTile = mf1.b;
+                yTile = mf1.c;
+                zTile = mf1.d;
+                inTile = ag.a(xTile, yTile, zTile);
                 an = (float)(mf1.f.a - ak);
                 ao = (float)(mf1.f.b - al);
                 ap = (float)(mf1.f.c - am);
@@ -165,8 +161,8 @@ public class kg extends kh
                 al -= (ao / (double)f1) * 0.05000000074505806D;
                 am -= (ap / (double)f1) * 0.05000000074505806D;
                 ag.a(((kh) (this)), "random.drr", 1.0F, 1.2F / (aQ.nextFloat() * 0.2F + 0.9F));
-                f = true;
-                a = 7;
+                inGround = true;
+                shake = 7;
             }
         ak += an;
         al += ao;
@@ -198,32 +194,32 @@ public class kg extends kh
         a(ak, al, am);
     }
 
-    public void a(hm hm1)
+    public void a(TagCompound tagCompound1)
     {
-        hm1.a("xTile", (short)b);
-        hm1.a("yTile", (short)c);
-        hm1.a("zTile", (short)d);
-        hm1.a("inTile", (byte)e);
-        hm1.a("shake", (byte)a);
-        hm1.a("inGround", (byte)(f ? 1 : 0));
+        tagCompound1.set("xTile", (short) xTile);
+        tagCompound1.set("yTile", (short) yTile);
+        tagCompound1.set("zTile", (short) zTile);
+        tagCompound1.set("inTile", (byte) inTile);
+        tagCompound1.set("shake", (byte) shake);
+        tagCompound1.set("inGround", (byte)(inGround ? 1 : 0));
     }
 
-    public void b(hm hm1)
+    public void b(TagCompound tagCompound1)
     {
-        b = ((int) (hm1.d("xTile")));
-        c = ((int) (hm1.d("yTile")));
-        d = ((int) (hm1.d("zTile")));
-        e = hm1.c("inTile") & 0xff;
-        a = hm1.c("shake") & 0xff;
-        f = hm1.c("inGround") == 1;
+        xTile = ((int) (tagCompound1.getShort("xTile")));
+        yTile = ((int) (tagCompound1.getShort("yTile")));
+        zTile = ((int) (tagCompound1.getShort("zTile")));
+        inTile = tagCompound1.getByte("inTile") & 0xff;
+        shake = tagCompound1.getByte("shake") & 0xff;
+        inGround = tagCompound1.getByte("inGround") == 1;
     }
 
-    public void b(dm dm1)
+    public void b(Player player1)
     {
-        if(f && g == dm1 && a <= 0 && dm1.b.a(new ev(di.j.aS, 1)))
+        if(inGround && g == player1 && shake <= 0 && player1.b.a(new ev(di.j.aS, 1)))
         {
             ag.a(((kh) (this)), "random.pop", 0.2F, ((aQ.nextFloat() - aQ.nextFloat()) * 0.7F + 1.0F) * 2.0F);
-            dm1.a_(((kh) (this)), 1);
+            player1.a_(((kh) (this)), 1);
             F();
         }
     }
diff --git "a/temp\\src\\java/dc.java" "b/src\\main\\java/Boat.java"
similarity index 92%
rename from "temp\\src\\java/dc.java"
rename to "src\\main\\java/Boat.java"
index b3dc447..cd58a7a 100644
--- "a/temp\\src\\java/dc.java"
+++ "b/src\\main\\java/Boat.java"
@@ -1,21 +1,17 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.List;
-import java.util.Random;
-
-public class dc extends kh
+public class Boat extends kh
 {
 
     public int a;
     public int b;
     public int c;
 
-    public dc(cn cn1)
+    public Boat(World world1)
     {
-        super(cn1);
+        super(world1);
         a = 0;
         b = 0;
         c = 1;
@@ -40,9 +36,9 @@ public class dc extends kh
         return true;
     }
 
-    public dc(cn cn1, double d, double d1, double d2)
+    public Boat(World world1, double d, double d1, double d2)
     {
-        this(cn1);
+        this(world1);
         a(d, d1 + (double)aB, d2);
         an = 0.0D;
         ao = 0.0D;
@@ -183,7 +179,7 @@ public class dc extends kh
             for(int j1 = 0; j1 < list.size(); j1++)
             {
                 kh kh1 = (kh)list.get(j1);
-                if(kh1 != ae && kh1.d_() && (kh1 instanceof dc))
+                if(kh1 != ae && kh1.d_() && (kh1 instanceof Boat))
                     kh1.f(((kh) (this)));
             }
 
@@ -199,11 +195,11 @@ public class dc extends kh
         ae.a(ak + d, al + h() + ae.v(), am + d1);
     }
 
-    protected void a(hm hm)
+    protected void a(TagCompound tagCompound)
     {
     }
 
-    protected void b(hm hm)
+    protected void b(TagCompound tagCompound)
     {
     }
 
@@ -212,9 +208,9 @@ public class dc extends kh
         return 0.0F;
     }
 
-    public boolean a(dm dm1)
+    public boolean a(Player player1)
     {
-        dm1.g(((kh) (this)));
+        player1.g(((kh) (this)));
         return true;
     }
 }
diff --git "a/src\\main\\java/Chest.java" "b/src\\main\\java/Chest.java"
new file mode 100644
index 0000000..09ce5aa
--- /dev/null
+++ "b/src\\main\\java/Chest.java"
@@ -0,0 +1,97 @@
+// Jad home page: http://www.kpdus.com/jad.html
+// Decompiler options: fullnames deadcode fieldsfirst safe 
+// Source File Name:   SourceFile
+
+
+public class Chest extends ic
+    implements gh
+{
+
+    private ev a[];
+
+    public Chest()
+    {
+        a = new ev[36];
+    }
+
+    public int c()
+    {
+        return 27;
+    }
+
+    public ev c(int i)
+    {
+        return a[i];
+    }
+
+    public ev a(int i, int j)
+    {
+        if(a[i] != null)
+        {
+            if(a[i].count <= j)
+            {
+                ev ev1 = a[i];
+                a[i] = null;
+                j_();
+                return ev1;
+            }
+            ev ev2 = a[i].a(j);
+            if(a[i].count == 0)
+                a[i] = null;
+            j_();
+            return ev2;
+        } else
+        {
+            return null;
+        }
+    }
+
+    public void a(int i, ev ev1)
+    {
+        a[i] = ev1;
+        if(ev1 != null && ev1.count > e())
+            ev1.count = e();
+        j_();
+    }
+
+    public String d()
+    {
+        return "Chest";
+    }
+
+    public void a(TagCompound tagCompound1)
+    {
+        super.a(tagCompound1);
+        TagList tagList1 = tagCompound1.l("Items");
+        a = new ev[c()];
+        for(int i = 0; i < tagList1.c(); i++)
+        {
+            TagCompound tagCompound2 = (TagCompound) tagList1.a(i);
+            int j = tagCompound2.getByte("Slot") & 0xff;
+            if(j >= 0 && j < a.length)
+                a[j] = new ev(tagCompound2);
+        }
+
+    }
+
+    public void b(TagCompound tagCompound1)
+    {
+        super.b(tagCompound1);
+        TagList tagList1 = new TagList();
+        for(int slot = 0; slot < a.length; slot++)
+            if(a[slot] != null)
+            {
+                TagCompound tagCompound2 = new TagCompound();
+                tagCompound2.set("Slot", (byte)slot);
+                a[slot].writeCompound(tagCompound2);
+                tagList1.a(((Tag) (tagCompound2)));
+            }
+
+        tagCompound1.set("Items", ((Tag) (tagList1)));
+    }
+
+    public int e()
+    {
+        return 64;
+    }
+}
diff --git "a/temp\\src\\java/mz.java" "b/src\\main\\java/Chicken.java"
similarity index 76%
rename from "temp\\src\\java/mz.java"
rename to "src\\main\\java/Chicken.java"
index e4fb25a..7168be5 100644
--- "a/temp\\src\\java/mz.java"
+++ "b/src\\main\\java/Chicken.java"
@@ -1,11 +1,8 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
-public class mz extends ag
+public class Chicken extends Passive
 {
 
     public boolean a;
@@ -16,16 +13,16 @@ public class mz extends ag
     public float h;
     public int i;
 
-    public mz(cn cn1)
+    public Chicken(World world1)
     {
-        super(cn1);
+        super(world1);
         a = false;
         b = 0.0F;
         c = 0.0F;
         h = 1.0F;
-        u = "/mob/chicken.png";
+        texture = "/mob/chicken.png";
         a(0.3F, 0.4F);
-        E = 4;
+        health = 4;
         i = aQ.nextInt(6000) + 6000;
     }
 
@@ -57,27 +54,27 @@ public class mz extends ag
     {
     }
 
-    public void a(hm hm)
+    public void a(TagCompound tagCompound)
     {
-        super.a(hm);
+        super.a(tagCompound);
     }
 
-    public void b(hm hm)
+    public void b(TagCompound tagCompound)
     {
-        super.b(hm);
+        super.b(tagCompound);
     }
 
-    protected java.lang.String c()
+    protected String c()
     {
         return "mob.chicken";
     }
 
-    protected java.lang.String d()
+    protected String d()
     {
         return "mob.chickenhurt";
     }
 
-    protected java.lang.String e()
+    protected String e()
     {
         return "mob.chickenhurt";
     }
diff --git "a/temp\\src\\java/ga.java" "b/src\\main\\java/Chunk.java"
similarity index 85%
rename from "temp\\src\\java/ga.java"
rename to "src\\main\\java/Chunk.java"
index aae3fcb..c291e43 100644
--- "a/temp\\src\\java/ga.java"
+++ "b/src\\main\\java/Chunk.java"
@@ -1,22 +1,18 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.PrintStream;
 import java.util.ArrayList;
 import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
 import java.util.Random;
 
-public class ga
+public class Chunk
 {
 
     public static boolean a;
     public byte b[];
     public boolean c;
-    public cn d;
+    public World d;
     public mu e;
     public mu f;
     public mu g;
@@ -33,7 +29,7 @@ public class ga
     public boolean r;
     public long s;
 
-    public ga(cn cn1, int i1, int j1)
+    public Chunk(World world1, int i1, int j1)
     {
         l = ((java.util.Map) (new HashMap()));
         m = new java.util.List[8];
@@ -42,7 +38,7 @@ public class ga
         q = false;
         r = false;
         s = 0L;
-        d = cn1;
+        d = world1;
         j = i1;
         k = j1;
         h = new byte[256];
@@ -51,9 +47,9 @@ public class ga
 
     }
 
-    public ga(cn cn1, byte abyte0[], int i1, int j1)
+    public Chunk(World world1, byte abyte0[], int i1, int j1)
     {
-        this(cn1, i1, j1);
+        this(world1, i1, j1);
         b = abyte0;
         e = new mu(abyte0.length);
         f = new mu(abyte0.length);
@@ -318,7 +314,7 @@ public class ga
         int i1 = eo.b(kh1.ak / 16D);
         int j1 = eo.b(kh1.am / 16D);
         if(i1 != j || j1 != k)
-            java.lang.System.out.println((new StringBuilder()).append("Wrong location! ").append(((java.lang.Object) (kh1))).toString());
+            java.lang.System.out.println((new StringBuilder()).append("Wrong location! ").append(((Object) (kh1))).toString());
         int k1 = eo.b(kh1.al / 16D);
         if(k1 < 0)
             k1 = 0;
@@ -328,7 +324,7 @@ public class ga
         kh1.ba = j;
         kh1.bb = k1;
         kh1.bc = k;
-        m[k1].add(((java.lang.Object) (kh1)));
+        m[k1].add(((Object) (kh1)));
     }
 
     public void b(kh kh1)
@@ -342,7 +338,7 @@ public class ga
             i1 = 0;
         if(i1 >= m.length)
             i1 = m.length - 1;
-        m[i1].remove(((java.lang.Object) (kh1)));
+        m[i1].remove(((Object) (kh1)));
     }
 
     public boolean c(int i1, int j1, int k1)
@@ -353,7 +349,7 @@ public class ga
     public ic d(int i1, int j1, int k1)
     {
         mt mt1 = new mt(i1, j1, k1);
-        ic ic1 = (ic)l.get(((java.lang.Object) (mt1)));
+        ic ic1 = (ic)l.get(((Object) (mt1)));
         if(ic1 == null)
         {
             int l1 = a(i1, j1, k1);
@@ -361,16 +357,16 @@ public class ga
                 return null;
             jt jt1 = (jt)ly.n[l1];
             jt1.e(d, j * 16 + i1, j1, k * 16 + k1);
-            ic1 = (ic)l.get(((java.lang.Object) (mt1)));
+            ic1 = (ic)l.get(((Object) (mt1)));
         }
         return ic1;
     }
 
     public void a(ic ic1)
     {
-        int i1 = ic1.f - j * 16;
-        int j1 = ic1.g;
-        int k1 = ic1.h - k * 16;
+        int i1 = ic1.x - j * 16;
+        int j1 = ic1.y;
+        int k1 = ic1.z - k * 16;
         a(i1, j1, k1, ic1);
     }
 
@@ -378,9 +374,9 @@ public class ga
     {
         mt mt1 = new mt(i1, j1, k1);
         ic1.e = d;
-        ic1.f = j * 16 + i1;
-        ic1.g = j1;
-        ic1.h = k * 16 + k1;
+        ic1.x = j * 16 + i1;
+        ic1.y = j1;
+        ic1.z = k * 16 + k1;
         if(a(i1, j1, k1) == 0 || !(ly.n[a(i1, j1, k1)] instanceof jt))
         {
             java.lang.System.out.println("Attempted to place a tile entity where there was no entity tile!");
@@ -388,18 +384,18 @@ public class ga
         }
         if(c)
         {
-            if(l.get(((java.lang.Object) (mt1))) != null)
-                d.b.remove(l.get(((java.lang.Object) (mt1))));
-            d.b.add(((java.lang.Object) (ic1)));
+            if(l.get(((Object) (mt1))) != null)
+                d.b.remove(l.get(((Object) (mt1))));
+            d.b.add(((Object) (ic1)));
         }
-        l.put(((java.lang.Object) (mt1)), ((java.lang.Object) (ic1)));
+        l.put(((Object) (mt1)), ((Object) (ic1)));
     }
 
     public void e(int i1, int j1, int k1)
     {
         mt mt1 = new mt(i1, j1, k1);
         if(c)
-            d.b.remove(l.remove(((java.lang.Object) (mt1))));
+            d.b.remove(l.remove(((Object) (mt1))));
     }
 
     public void d()
@@ -440,7 +436,7 @@ public class ga
             {
                 kh kh2 = (kh)list1.get(l1);
                 if(kh2 != kh1 && kh2.au.a(cf1))
-                    list.add(((java.lang.Object) (kh2)));
+                    list.add(((Object) (kh2)));
             }
 
         }
@@ -461,8 +457,8 @@ public class ga
             for(int l1 = 0; l1 < list1.size(); l1++)
             {
                 kh kh1 = (kh)list1.get(l1);
-                if(class1.isAssignableFrom(((java.lang.Object) (kh1)).getClass()) && kh1.au.a(cf1))
-                    list.add(((java.lang.Object) (kh1)));
+                if(class1.isAssignableFrom(((Object) (kh1)).getClass()) && kh1.au.a(cf1))
+                    list.add(((Object) (kh1)));
             }
 
         }
@@ -473,7 +469,7 @@ public class ga
     {
         if(p)
             return false;
-        if(r && d.c != s)
+        if(r && d.time != s)
             return true;
         else
             return o;
@@ -488,7 +484,7 @@ public class ga
             {
                 int l4 = l2 << 11 | l3 << 7 | j1;
                 int l5 = i2 - j1;
-                java.lang.System.arraycopy(((java.lang.Object) (abyte0)), k2, ((java.lang.Object) (b)), l4, l5);
+                java.lang.System.arraycopy(((Object) (abyte0)), k2, ((Object) (b)), l4, l5);
                 k2 += l5;
             }
 
@@ -501,7 +497,7 @@ public class ga
             {
                 int i5 = (i3 << 11 | i4 << 7 | j1) >> 1;
                 int i6 = (i2 - j1) / 2;
-                java.lang.System.arraycopy(((java.lang.Object) (abyte0)), k2, ((java.lang.Object) (e.a)), i5, i6);
+                java.lang.System.arraycopy(((Object) (abyte0)), k2, ((Object) (e.a)), i5, i6);
                 k2 += i6;
             }
 
@@ -513,7 +509,7 @@ public class ga
             {
                 int j5 = (j3 << 11 | j4 << 7 | j1) >> 1;
                 int j6 = (i2 - j1) / 2;
-                java.lang.System.arraycopy(((java.lang.Object) (abyte0)), k2, ((java.lang.Object) (g.a)), j5, j6);
+                java.lang.System.arraycopy(((Object) (abyte0)), k2, ((Object) (g.a)), j5, j6);
                 k2 += j6;
             }
 
@@ -525,7 +521,7 @@ public class ga
             {
                 int k5 = (k3 << 11 | k4 << 7 | j1) >> 1;
                 int k6 = (i2 - j1) / 2;
-                java.lang.System.arraycopy(((java.lang.Object) (abyte0)), k2, ((java.lang.Object) (f.a)), k5, k6);
+                java.lang.System.arraycopy(((Object) (abyte0)), k2, ((Object) (f.a)), k5, k6);
                 k2 += k6;
             }
 
@@ -536,6 +532,6 @@ public class ga
 
     public java.util.Random a(long l1)
     {
-        return new Random(d.u + (long)(j * j * 0x4c1906) + (long)(j * 0x5ac0db) + (long)(k * k) * 0x4307a7L + (long)(k * 0x5f24f) ^ l1);
+        return new Random(d.randomSeed + (long)(j * j * 0x4c1906) + (long)(j * 0x5ac0db) + (long)(k * k) * 0x4307a7L + (long)(k * 0x5f24f) ^ l1);
     }
 }
diff --git "a/temp\\src\\java/am.java" "b/src\\main\\java/Cow.java"
similarity index 54%
rename from "temp\\src\\java/am.java"
rename to "src\\main\\java/Cow.java"
index 8d2975a..abe1784 100644
--- "a/temp\\src\\java/am.java"
+++ "b/src\\main\\java/Cow.java"
@@ -1,43 +1,42 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
 
-public class am extends ag
+public class Cow extends Passive
 {
 
     public boolean a;
 
-    public am(cn cn)
+    public Cow(World world)
     {
-        super(cn);
+        super(world);
         a = false;
-        u = "/mob/cow.png";
+        texture = "/mob/cow.png";
         a(0.9F, 1.3F);
     }
 
-    public void a(hm hm)
+    public void a(TagCompound tagCompound)
     {
-        super.a(hm);
+        super.a(tagCompound);
     }
 
-    public void b(hm hm)
+    public void b(TagCompound tagCompound)
     {
-        super.b(hm);
+        super.b(tagCompound);
     }
 
-    protected java.lang.String c()
+    protected String c()
     {
         return "mob.cow";
     }
 
-    protected java.lang.String d()
+    protected String d()
     {
         return "mob.cowhurt";
     }
 
-    protected java.lang.String e()
+    protected String e()
     {
         return "mob.cowhurt";
     }
@@ -52,12 +51,12 @@ public class am extends ag
         return di.aD.aS;
     }
 
-    public boolean a(dm dm1)
+    public boolean a(Player player1)
     {
-        ev ev1 = dm1.b.a();
-        if(ev1 != null && ev1.c == di.au.aS)
+        ev ev1 = player1.b.a();
+        if(ev1 != null && ev1.id == di.au.aS)
         {
-            dm1.b.a(dm1.b.d, new ev(di.aE));
+            player1.b.a(player1.b.d, new ev(di.aE));
             return true;
         } else
         {
diff --git "a/temp\\src\\java/dd.java" "b/src\\main\\java/Creeper.java"
similarity index 75%
rename from "temp\\src\\java/dd.java"
rename to "src\\main\\java/Creeper.java"
index 409be1b..7457073 100644
--- "a/temp\\src\\java/dd.java"
+++ "b/src\\main\\java/Creeper.java"
@@ -1,11 +1,8 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
-public class dd extends dq
+public class Creeper extends Monster
 {
 
     int a;
@@ -13,22 +10,22 @@ public class dd extends dq
     int c;
     int d;
 
-    public dd(cn cn1)
+    public Creeper(World world1)
     {
-        super(cn1);
+        super(world1);
         c = 30;
         d = -1;
-        u = "/mob/creeper.png";
+        texture = "/mob/creeper.png";
     }
 
-    public void a(hm hm)
+    public void a(TagCompound tagCompound)
     {
-        super.a(hm);
+        super.a(tagCompound);
     }
 
-    public void b(hm hm)
+    public void b(TagCompound tagCompound)
     {
-        super.b(hm);
+        super.b(tagCompound);
     }
 
     protected void b_()
@@ -43,12 +40,12 @@ public class dd extends dq
             d = -1;
     }
 
-    protected java.lang.String d()
+    protected String d()
     {
         return "mob.creeper";
     }
 
-    protected java.lang.String e()
+    protected String e()
     {
         return "mob.creeperdeath";
     }
@@ -56,7 +53,7 @@ public class dd extends dq
     public void b(kh kh)
     {
         super.b(kh);
-        if(kh instanceof cw)
+        if(kh instanceof Skeleton)
             b(di.aQ.aS + aQ.nextInt(2), 1);
     }
 
diff --git "a/temp\\src\\java/ek.java" "b/src\\main\\java/Entity.java"
similarity index 95%
rename from "temp\\src\\java/ek.java"
rename to "src\\main\\java/Entity.java"
index a17b0f6..3705d2a 100644
--- "a/temp\\src\\java/ek.java"
+++ "b/src\\main\\java/Entity.java"
@@ -1,20 +1,17 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
-public class ek extends ge
+public class Entity extends Mob
 {
 
     private bl a;
     protected kh f;
     protected boolean g;
 
-    public ek(cn cn1)
+    public Entity(World world1)
     {
-        super(cn1);
+        super(world1);
         g = false;
     }
 
diff --git "a/temp\\src\\java/ff.java" "b/src\\main\\java/FallingSand.java"
similarity index 67%
rename from "temp\\src\\java/ff.java"
rename to "src\\main\\java/FallingSand.java"
index 786ee77..87e9b09 100644
--- "a/temp\\src\\java/ff.java"
+++ "b/src\\main\\java/FallingSand.java"
@@ -1,26 +1,25 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
 
-public class ff extends kh
+public class FallingSand extends kh
 {
 
-    public int a;
+    public int tile;
     public int b;
 
-    public ff(cn cn1)
+    public FallingSand(World world1)
     {
-        super(cn1);
+        super(world1);
         b = 0;
     }
 
-    public ff(cn cn1, float f, float f1, float f2, int j)
+    public FallingSand(World world1, float f, float f1, float f2, int j)
     {
-        super(cn1);
+        super(world1);
         b = 0;
-        a = j;
+        tile = j;
         ad = true;
         a(0.98F, 0.98F);
         aB = aD / 2.0F;
@@ -41,7 +40,7 @@ public class ff extends kh
 
     public void e_()
     {
-        if(a == 0)
+        if(tile == 0)
         {
             F();
             return;
@@ -58,7 +57,7 @@ public class ff extends kh
         int j = eo.b(ak);
         int k = eo.b(al);
         int l = eo.b(am);
-        if(ag.a(j, k, l) == a)
+        if(ag.a(j, k, l) == tile)
             ag.d(j, k, l, 0);
         if(av)
         {
@@ -66,24 +65,24 @@ public class ff extends kh
             ap *= 0.69999998807907104D;
             ao *= -0.5D;
             F();
-            if(!ag.a(a, j, k, l, true) || !ag.d(j, k, l, a))
-                b(a, 1);
+            if(!ag.a(tile, j, k, l, true) || !ag.d(j, k, l, tile))
+                b(tile, 1);
         } else
         if(b > 100)
         {
-            b(a, 1);
+            b(tile, 1);
             F();
         }
     }
 
-    protected void a(hm hm1)
+    protected void a(TagCompound tagCompound1)
     {
-        hm1.a("Tile", (byte)a);
+        tagCompound1.set("Tile", (byte) tile);
     }
 
-    protected void b(hm hm1)
+    protected void b(TagCompound tagCompound1)
     {
-        a = hm1.c("Tile") & 0xff;
+        tile = tagCompound1.getByte("Tile") & 0xff;
     }
 
     public float h_()
@@ -91,7 +90,7 @@ public class ff extends kh
         return 0.0F;
     }
 
-    public cn i()
+    public World i()
     {
         return ag;
     }
diff --git "a/temp\\src\\java/ke.java" "b/src\\main\\java/Furnace.java"
similarity index 57%
rename from "temp\\src\\java/ke.java"
rename to "src\\main\\java/Furnace.java"
index 520a5b0..e2a2ff3 100644
--- "a/temp\\src\\java/ke.java"
+++ "b/src\\main\\java/Furnace.java"
@@ -1,24 +1,23 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
 
-public class ke extends ic
+public class Furnace extends ic
     implements gh
 {
 
     private ev a[];
-    private int b;
+    private int burnTime;
     private int c;
-    private int d;
+    private int cookTime;
 
-    public ke()
+    public Furnace()
     {
         a = new ev[3];
-        b = 0;
+        burnTime = 0;
         c = 0;
-        d = 0;
+        cookTime = 0;
     }
 
     public int c()
@@ -35,14 +34,14 @@ public class ke extends ic
     {
         if(a[k] != null)
         {
-            if(a[k].a <= l)
+            if(a[k].count <= l)
             {
                 ev ev1 = a[k];
                 a[k] = null;
                 return ev1;
             }
             ev ev2 = a[k].a(l);
-            if(a[k].a == 0)
+            if(a[k].count == 0)
                 a[k] = null;
             return ev2;
         } else
@@ -54,49 +53,49 @@ public class ke extends ic
     public void a(int k, ev ev1)
     {
         a[k] = ev1;
-        if(ev1 != null && ev1.a > e())
-            ev1.a = e();
+        if(ev1 != null && ev1.count > e())
+            ev1.count = e();
     }
 
-    public java.lang.String d()
+    public String d()
     {
         return "Chest";
     }
 
-    public void a(hm hm1)
+    public void a(TagCompound tagCompound1)
     {
-        super.a(hm1);
-        ki ki1 = hm1.l("Items");
+        super.a(tagCompound1);
+        TagList tagList1 = tagCompound1.l("Items");
         a = new ev[c()];
-        for(int k = 0; k < ki1.c(); k++)
+        for(int k = 0; k < tagList1.c(); k++)
         {
-            hm hm2 = (hm)ki1.a(k);
-            byte byte0 = hm2.c("Slot");
-            if(byte0 >= 0 && byte0 < a.length)
-                a[byte0] = new ev(hm2);
+            TagCompound tagCompound2 = (TagCompound) tagList1.a(k);
+            byte slot = tagCompound2.getByte("Slot");
+            if(slot >= 0 && slot < a.length)
+                a[slot] = new ev(tagCompound2);
         }
 
-        b = ((int) (hm1.d("BurnTime")));
-        d = ((int) (hm1.d("CookTime")));
+        burnTime = ((int) (tagCompound1.getShort("BurnTime")));
+        cookTime = ((int) (tagCompound1.getShort("CookTime")));
         c = a(a[1]);
     }
 
-    public void b(hm hm1)
+    public void b(TagCompound tagCompound1)
     {
-        super.b(hm1);
-        hm1.a("BurnTime", (short)b);
-        hm1.a("CookTime", (short)d);
-        ki ki1 = new ki();
-        for(int k = 0; k < a.length; k++)
-            if(a[k] != null)
+        super.b(tagCompound1);
+        tagCompound1.set("BurnTime", (short) burnTime);
+        tagCompound1.set("CookTime", (short) cookTime);
+        TagList tagList1 = new TagList();
+        for(int slot = 0; slot < a.length; slot++)
+            if(a[slot] != null)
             {
-                hm hm2 = new hm();
-                hm2.a("Slot", (byte)k);
-                a[k].a(hm2);
-                ki1.a(((el) (hm2)));
+                TagCompound tagCompound2 = new TagCompound();
+                tagCompound2.set("Slot", (byte)slot);
+                a[slot].writeCompound(tagCompound2);
+                tagList1.a(((Tag) (tagCompound2)));
             }
 
-        hm1.a("Items", ((el) (ki1)));
+        tagCompound1.set("Items", ((Tag) (tagList1)));
     }
 
     public int e()
@@ -106,60 +105,60 @@ public class ke extends ic
 
     public int a(int k)
     {
-        return (d * k) / 200;
+        return (cookTime * k) / 200;
     }
 
     public int b(int k)
     {
         if(c == 0)
             c = 200;
-        return (b * k) / c;
+        return (burnTime * k) / c;
     }
 
     public boolean a()
     {
-        return b > 0;
+        return burnTime > 0;
     }
 
     public void b()
     {
-        boolean flag = b > 0;
+        boolean flag = burnTime > 0;
         boolean flag1 = false;
-        if(b > 0)
-            b--;
+        if(burnTime > 0)
+            burnTime--;
         if(!e.y)
         {
-            if(b == 0 && j())
+            if(burnTime == 0 && j())
             {
-                c = b = a(a[1]);
-                if(b > 0)
+                c = burnTime = a(a[1]);
+                if(burnTime > 0)
                 {
                     flag1 = true;
                     if(a[1] != null)
                     {
-                        a[1].a--;
-                        if(a[1].a == 0)
+                        a[1].count--;
+                        if(a[1].count == 0)
                             a[1] = null;
                     }
                 }
             }
             if(a() && j())
             {
-                d++;
-                if(d == 200)
+                cookTime++;
+                if(cookTime == 200)
                 {
-                    d = 0;
+                    cookTime = 0;
                     i();
                     flag1 = true;
                 }
             } else
             {
-                d = 0;
+                cookTime = 0;
             }
-            if(flag != (b > 0))
+            if(flag != (burnTime > 0))
             {
                 flag1 = true;
-                ku.a(b > 0, e, f, g, h);
+                ku.a(burnTime > 0, e, x, y, z);
             }
         }
         if(flag1)
@@ -175,11 +174,11 @@ public class ke extends ic
             return false;
         if(a[2] == null)
             return true;
-        if(a[2].c != k)
+        if(a[2].id != k)
             return false;
-        if(a[2].a < e() && a[2].a < a[2].c())
+        if(a[2].count < e() && a[2].count < a[2].c())
             return true;
-        return a[2].a < di.c[k].b();
+        return a[2].count < di.c[k].b();
     }
 
     public void i()
@@ -190,10 +189,10 @@ public class ke extends ic
         if(a[2] == null)
             a[2] = new ev(k, 1);
         else
-        if(a[2].c == k)
-            a[2].a++;
-        a[0].a--;
-        if(a[0].a <= 0)
+        if(a[2].id == k)
+            a[2].count++;
+        a[0].count--;
+        if(a[0].count <= 0)
             a[0] = null;
     }
 
diff --git "a/temp\\src\\java/hl.java" "b/src\\main\\java/Giant.java"
similarity index 65%
rename from "temp\\src\\java/hl.java"
rename to "src\\main\\java/Giant.java"
index bba4adc..1caf532 100644
--- "a/temp\\src\\java/hl.java"
+++ "b/src\\main\\java/Giant.java"
@@ -1,19 +1,18 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
 
-public class hl extends dq
+public class Giant extends Monster
 {
 
-    public hl(cn cn1)
+    public Giant(World world1)
     {
-        super(cn1);
-        u = "/mob/zombie.png";
+        super(world1);
+        texture = "/mob/zombie.png";
         aa = 0.5F;
         e = 50;
-        E *= 10;
+        health *= 10;
         aB *= 6F;
         a(aC * 6F, aD * 6F);
     }
diff --git "a/src\\main\\java/IChunkProvider.java" "b/src\\main\\java/IChunkProvider.java"
new file mode 100644
index 0000000..f681ce5
--- /dev/null
+++ "b/src\\main\\java/IChunkProvider.java"
@@ -0,0 +1,20 @@
+// Jad home page: http://www.kpdus.com/jad.html
+// Decompiler options: fullnames deadcode fieldsfirst safe 
+// Source File Name:   SourceFile
+
+
+public interface IChunkProvider
+{
+
+    public abstract boolean chunkExists(int x, int y);
+
+    public abstract Chunk provideChunk(int x, int y);
+
+    public abstract void a(IChunkProvider iChunkProvider1, int i, int j);
+
+    public abstract boolean saveChunks(boolean flag, IProgressUpdate iProgressUpdate);
+
+    public abstract boolean unloadQueuedChunks();
+
+    public abstract boolean canSave();
+}
diff --git "a/src\\main\\java/IProgressUpdate.java" "b/src\\main\\java/IProgressUpdate.java"
new file mode 100644
index 0000000..f5efe84
--- /dev/null
+++ "b/src\\main\\java/IProgressUpdate.java"
@@ -0,0 +1,14 @@
+// Jad home page: http://www.kpdus.com/jad.html
+// Decompiler options: fullnames deadcode fieldsfirst safe 
+// Source File Name:   SourceFile
+
+
+public interface IProgressUpdate
+{
+
+    public abstract void setState1(String state);
+
+    public abstract void setState2(String state);
+
+    public abstract void onProgress(int value);
+}
diff --git "a/temp\\src\\java/dx.java" "b/src\\main\\java/Item.java"
similarity index 80%
rename from "temp\\src\\java/dx.java"
rename to "src\\main\\java/Item.java"
index 20f5035..cb97043 100644
--- "a/temp\\src\\java/dx.java"
+++ "b/src\\main\\java/Item.java"
@@ -1,26 +1,23 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
-public class dx extends kh
+public class Item extends kh
 {
 
     public ev a;
     private int e;
-    public int b;
+    public int age;
     public int c;
-    private int f;
+    private int health;
     public float d;
 
-    public dx(cn cn1, double d1, double d2, double d3, 
-            ev ev1)
+    public Item(World world1, double d1, double d2, double d3,
+                ev ev1)
     {
-        super(cn1);
-        b = 0;
-        f = 5;
+        super(world1);
+        age = 0;
+        health = 5;
         d = (float)(java.lang.Math.random() * 3.1415926535897931D * 2D);
         a(0.25F, 0.25F);
         aB = aD / 2.0F;
@@ -33,11 +30,11 @@ public class dx extends kh
         aG = false;
     }
 
-    public dx(cn cn1)
+    public Item(World world1)
     {
-        super(cn1);
-        b = 0;
-        f = 5;
+        super(world1);
+        age = 0;
+        health = 5;
         d = (float)(java.lang.Math.random() * 3.1415926535897931D * 2D);
         a(0.25F, 0.25F);
         aB = aD / 2.0F;
@@ -76,8 +73,8 @@ public class dx extends kh
         if(av)
             ao *= -0.5D;
         e++;
-        b++;
-        if(b >= 6000)
+        age++;
+        if(age >= 6000)
             F();
     }
 
@@ -158,36 +155,36 @@ public class dx extends kh
 
     public boolean a(kh kh1, int i)
     {
-        f -= i;
-        if(f <= 0)
+        health -= i;
+        if(health <= 0)
             F();
         return false;
     }
 
-    public void a(hm hm1)
+    public void a(TagCompound tagCompound1)
     {
-        hm1.a("Health", (byte)f);
-        hm1.a("Age", (short)b);
-        hm1.a("Item", a.a(new hm()));
+        tagCompound1.set("Health", (short) health);
+        tagCompound1.set("Age", (short) age);
+        tagCompound1.set("Item", a.writeCompound(new TagCompound()));
     }
 
-    public void b(hm hm1)
+    public void b(TagCompound tagCompound1)
     {
-        f = hm1.d("Health") & 0xff;
-        b = ((int) (hm1.d("Age")));
-        hm hm2 = hm1.k("Item");
-        a = new ev(hm2);
+        health = tagCompound1.getShort("Health") & 0xff;
+        age = ((int) (tagCompound1.getShort("Age")));
+        TagCompound tagCompound2 = tagCompound1.k("Item");
+        a = new ev(tagCompound2);
     }
 
-    public void b(dm dm1)
+    public void b(Player player1)
     {
         if(ag.y)
             return;
-        int i = a.a;
-        if(c == 0 && dm1.b.a(a))
+        int i = a.count;
+        if(c == 0 && player1.b.a(a))
         {
             ag.a(((kh) (this)), "random.pop", 0.2F, ((aQ.nextFloat() - aQ.nextFloat()) * 0.7F + 1.0F) * 2.0F);
-            dm1.a_(((kh) (this)), i);
+            player1.a_(((kh) (this)), i);
             F();
         }
     }
diff --git "a/temp\\src\\java/oc.java" "b/src\\main\\java/Minecart.java"
similarity index 80%
rename from "temp\\src\\java/oc.java"
rename to "src\\main\\java/Minecart.java"
index a98598e..e8deab1 100644
--- "a/temp\\src\\java/oc.java"
+++ "b/src\\main\\java/Minecart.java"
@@ -1,12 +1,8 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.List;
-import java.util.Random;
-
-public class oc extends kh
+public class Minecart extends kh
     implements gh
 {
 
@@ -15,10 +11,10 @@ public class oc extends kh
     public int b;
     public int c;
     private boolean i;
-    public int d;
-    public int e;
-    public double f;
-    public double g;
+    public int type;
+    public int fuel;
+    public double pushX;
+    public double pushZ;
     private static final int j[][][] = {
         {
             {
@@ -89,9 +85,9 @@ public class oc extends kh
     private double o;
     private double p;
 
-    public oc(cn cn1)
+    public Minecart(World world1)
     {
-        super(cn1);
+        super(world1);
         h = new ev[36];
         a = 0;
         b = 0;
@@ -118,10 +114,10 @@ public class oc extends kh
         return true;
     }
 
-    public oc(cn cn1, double d1, double d2, double d3, 
-            int i1)
+    public Minecart(World world1, double d1, double d2, double d3,
+                    int i1)
     {
-        this(cn1);
+        this(world1);
         a(d1, d2 + (double)aB, d3);
         an = 0.0D;
         ao = 0.0D;
@@ -129,7 +125,7 @@ public class oc extends kh
         ah = d1;
         ai = d2;
         aj = d3;
-        d = i1;
+        type = i1;
     }
 
     public double h()
@@ -145,10 +141,10 @@ public class oc extends kh
         if(a > 40)
         {
             a(di.ax.aS, 1, 0.0F);
-            if(d == 1)
+            if(type == 1)
                 a(ly.av.bc, 1, 0.0F);
             else
-            if(d == 2)
+            if(type == 2)
                 a(ly.aC.bc, 1, 0.0F);
             F();
         }
@@ -173,18 +169,18 @@ label0:
             float f3 = aQ.nextFloat() * 0.8F + 0.1F;
             do
             {
-                if(ev1.a <= 0)
+                if(ev1.count <= 0)
                     continue label0;
                 int j1 = aQ.nextInt(21) + 10;
-                if(j1 > ev1.a)
-                    j1 = ev1.a;
-                ev1.a -= j1;
-                dx dx1 = new dx(ag, ak + (double)f1, al + (double)f2, am + (double)f3, new ev(ev1.c, j1, ev1.d));
+                if(j1 > ev1.count)
+                    j1 = ev1.count;
+                ev1.count -= j1;
+                Item item1 = new Item(ag, ak + (double)f1, al + (double)f2, am + (double)f3, new ev(ev1.id, j1, ev1.damage));
                 float f4 = 0.05F;
-                dx1.an = (float)aQ.nextGaussian() * f4;
-                dx1.ao = (float)aQ.nextGaussian() * f4 + 0.2F;
-                dx1.ap = (float)aQ.nextGaussian() * f4;
-                ag.a(((kh) (dx1)));
+                item1.an = (float)aQ.nextGaussian() * f4;
+                item1.ao = (float)aQ.nextGaussian() * f4 + 0.2F;
+                item1.ap = (float)aQ.nextGaussian() * f4;
+                ag.a(((kh) (item1)));
             } while(true);
         }
 
@@ -313,20 +309,20 @@ label0:
                 ap *= 0.99699997901916504D;
             } else
             {
-                if(d == 2)
+                if(type == 2)
                 {
-                    double d27 = eo.a(f * f + g * g);
+                    double d27 = eo.a(pushX * pushX + pushZ * pushZ);
                     if(d27 > 0.01D)
                     {
                         flag = true;
-                        f /= d27;
-                        g /= d27;
+                        pushX /= d27;
+                        pushZ /= d27;
                         double d29 = 0.040000000000000001D;
                         an *= 0.80000001192092896D;
                         ao *= 0.0D;
                         ap *= 0.80000001192092896D;
-                        an += f * d29;
-                        ap += g * d29;
+                        an += pushX * d29;
+                        ap += pushZ * d29;
                     } else
                     {
                         an *= 0.89999997615814209D;
@@ -358,21 +354,21 @@ label0:
                 an = d16 * (double)(j2 - i1);
                 ap = d16 * (double)(k2 - k1);
             }
-            if(d == 2)
+            if(type == 2)
             {
-                double d30 = eo.a(f * f + g * g);
+                double d30 = eo.a(pushX * pushX + pushZ * pushZ);
                 if(d30 > 0.01D && an * an + ap * ap > 0.001D)
                 {
-                    f /= d30;
-                    g /= d30;
-                    if(f * an + g * ap < 0.0D)
+                    pushX /= d30;
+                    pushZ /= d30;
+                    if(pushX * an + pushZ * ap < 0.0D)
                     {
-                        f = 0.0D;
-                        g = 0.0D;
+                        pushX = 0.0D;
+                        pushZ = 0.0D;
                     } else
                     {
-                        f = an;
-                        g = ap;
+                        pushX = an;
+                        pushZ = ap;
                     }
                 }
             }
@@ -424,7 +420,7 @@ label0:
             for(int i2 = 0; i2 < list.size(); i2++)
             {
                 kh kh1 = (kh)list.get(i2);
-                if(kh1 != ae && kh1.d_() && (kh1 instanceof oc))
+                if(kh1 != ae && kh1.d_() && (kh1 instanceof Minecart))
                     kh1.f(((kh) (this)));
             }
 
@@ -433,9 +429,9 @@ label0:
             ae = null;
         if(flag && aQ.nextInt(4) == 0)
         {
-            e--;
-            if(e < 0)
-                f = g = 0.0D;
+            fuel--;
+            if(fuel < 0)
+                pushX = pushZ = 0.0D;
             ag.a("largesmoke", ak, al + 0.80000000000000004D, am, 0.0D, 0.0D, 0.0D);
         }
     }
@@ -527,50 +523,50 @@ label0:
         }
     }
 
-    protected void a(hm hm1)
+    protected void a(TagCompound tagCompound1)
     {
-        hm1.a("Type", d);
-        if(d == 2)
+        tagCompound1.set("Type", type);
+        if(type == 2)
         {
-            hm1.a("PushX", f);
-            hm1.a("PushZ", g);
-            hm1.a("Fuel", (short)e);
+            tagCompound1.set("PushX", pushX);
+            tagCompound1.set("PushZ", pushZ);
+            tagCompound1.set("Fuel", (short) fuel);
         } else
-        if(d == 1)
+        if(type == 1)
         {
-            ki ki1 = new ki();
-            for(int i1 = 0; i1 < h.length; i1++)
-                if(h[i1] != null)
+            TagList items = new TagList();
+            for(int slot = 0; slot < h.length; slot++)
+                if(h[slot] != null)
                 {
-                    hm hm2 = new hm();
-                    hm2.a("Slot", (byte)i1);
-                    h[i1].a(hm2);
-                    ki1.a(((el) (hm2)));
+                    TagCompound tagCompound2 = new TagCompound();
+                    tagCompound2.set("Slot", (byte)slot);
+                    h[slot].writeCompound(tagCompound2);
+                    items.a(((Tag) (tagCompound2)));
                 }
 
-            hm1.a("Items", ((el) (ki1)));
+            tagCompound1.set("Items", ((Tag) (items)));
         }
     }
 
-    protected void b(hm hm1)
+    protected void b(TagCompound tagCompound1)
     {
-        d = hm1.e("Type");
-        if(d == 2)
+        type = tagCompound1.getInt("Type");
+        if(type == 2)
         {
-            f = hm1.h("PushX");
-            g = hm1.h("PushZ");
-            e = ((int) (hm1.d("Fuel")));
+            pushX = tagCompound1.getDouble("PushX");
+            pushZ = tagCompound1.getDouble("PushZ");
+            fuel = ((int) (tagCompound1.getShort("Fuel")));
         } else
-        if(d == 1)
+        if(type == 1)
         {
-            ki ki1 = hm1.l("Items");
+            TagList tagList1 = tagCompound1.l("Items");
             h = new ev[c()];
-            for(int i1 = 0; i1 < ki1.c(); i1++)
+            for(int i1 = 0; i1 < tagList1.c(); i1++)
             {
-                hm hm2 = (hm)ki1.a(i1);
-                int j1 = hm2.c("Slot") & 0xff;
+                TagCompound tagCompound2 = (TagCompound) tagList1.a(i1);
+                int j1 = tagCompound2.getByte("Slot") & 0xff;
                 if(j1 >= 0 && j1 < h.length)
-                    h[j1] = new ev(hm2);
+                    h[j1] = new ev(tagCompound2);
             }
 
         }
@@ -585,7 +581,7 @@ label0:
     {
         if(kh1 == ae)
             return;
-        if((kh1 instanceof ge) && !(kh1 instanceof dm) && d == 0 && an * an + ap * ap > 0.01D && ae == null && kh1.af == null)
+        if((kh1 instanceof Mob) && !(kh1 instanceof Player) && type == 0 && an * an + ap * ap > 0.01D && ae == null && kh1.af == null)
             kh1.g(((kh) (this)));
         double d1 = kh1.ak - ak;
         double d2 = kh1.am - am;
@@ -606,11 +602,11 @@ label0:
             d2 *= 1.0F - aO;
             d1 *= 0.5D;
             d2 *= 0.5D;
-            if(kh1 instanceof oc)
+            if(kh1 instanceof Minecart)
             {
                 double d5 = kh1.an + an;
                 double d6 = kh1.ap + ap;
-                if(((oc)kh1).d == 2 && d != 2)
+                if(((Minecart)kh1).type == 2 && type != 2)
                 {
                     an *= 0.20000000298023224D;
                     ap *= 0.20000000298023224D;
@@ -618,7 +614,7 @@ label0:
                     kh1.an *= 0.69999998807907104D;
                     kh1.ap *= 0.69999998807907104D;
                 } else
-                if(((oc)kh1).d != 2 && d == 2)
+                if(((Minecart)kh1).type != 2 && type == 2)
                 {
                     kh1.an *= 0.20000000298023224D;
                     kh1.ap *= 0.20000000298023224D;
@@ -658,14 +654,14 @@ label0:
     {
         if(h[i1] != null)
         {
-            if(h[i1].a <= j1)
+            if(h[i1].count <= j1)
             {
                 ev ev1 = h[i1];
                 h[i1] = null;
                 return ev1;
             }
             ev ev2 = h[i1].a(j1);
-            if(h[i1].a == 0)
+            if(h[i1].count == 0)
                 h[i1] = null;
             return ev2;
         } else
@@ -677,11 +673,11 @@ label0:
     public void a(int i1, ev ev1)
     {
         h[i1] = ev1;
-        if(ev1 != null && ev1.a > e())
-            ev1.a = e();
+        if(ev1 != null && ev1.count > e())
+            ev1.count = e();
     }
 
-    public java.lang.String d()
+    public String d()
     {
         return "Minecart";
     }
@@ -695,25 +691,25 @@ label0:
     {
     }
 
-    public boolean a(dm dm1)
+    public boolean a(Player player1)
     {
-        if(d == 0)
-            dm1.g(((kh) (this)));
+        if(type == 0)
+            player1.g(((kh) (this)));
         else
-        if(d == 1)
-            dm1.a(((gh) (this)));
+        if(type == 1)
+            player1.a(((gh) (this)));
         else
-        if(d == 2)
+        if(type == 2)
         {
-            ev ev1 = dm1.b.a();
-            if(ev1 != null && ev1.c == di.k.aS)
+            ev ev1 = player1.b.a();
+            if(ev1 != null && ev1.id == di.k.aS)
             {
-                if(--ev1.a == 0)
-                    dm1.b.a(dm1.b.d, ((ev) (null)));
-                e += 1200;
+                if(--ev1.count == 0)
+                    player1.b.a(player1.b.d, ((ev) (null)));
+                fuel += 1200;
             }
-            f = ak - dm1.ak;
-            g = am - dm1.am;
+            pushX = ak - player1.ak;
+            pushZ = am - player1.am;
         }
         return true;
     }
diff --git "a/temp\\src\\java/Minecraft.java" "b/src\\main\\java/Minecraft.java"
index 3156343..11175c8 100644
--- "a/temp\\src\\java/Minecraft.java"
+++ "b/src\\main\\java/Minecraft.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -50,14 +49,9 @@
 //import iy;
 import java.awt.BorderLayout;
 import java.awt.Canvas;
-import java.awt.Color;
-import java.awt.Component;
 import java.awt.Dimension;
 import java.awt.Frame;
-import java.awt.Graphics;
 import java.io.File;
-import java.io.IOException;
-import java.io.PrintStream;
 //import jh;
 //import jz;
 //import kd;
@@ -74,13 +68,7 @@ import java.io.PrintStream;
 //import nr;
 //import of;
 import org.lwjgl.LWJGLException;
-import org.lwjgl.input.Controllers;
-import org.lwjgl.input.Keyboard;
-import org.lwjgl.input.Mouse;
-import org.lwjgl.opengl.Display;
 import org.lwjgl.opengl.DisplayMode;
-import org.lwjgl.opengl.GL11;
-import org.lwjgl.util.glu.GLU;
 
 // Referenced classes of package net.minecraft.client:
 //            MinecraftApplet
@@ -95,12 +83,12 @@ public abstract class Minecraft
     public int d;
     private be L;
     private ir M;
-    public cn e;
+    public World world;
     public e f;
     public bi g;
     public bq h;
     public dl i;
-    public java.lang.String j;
+    public String j;
     public java.awt.Canvas k;
     public boolean l;
     public volatile boolean m;
@@ -114,7 +102,7 @@ public abstract class Minecraft
     private int P;
     private int Q;
     private int R;
-    public java.lang.String s;
+    public String s;
     public int t;
     public lu u;
     public boolean v;
@@ -127,13 +115,13 @@ public abstract class Minecraft
     public java.io.File C;
     public static long D[] = new long[512];
     public static int E = 0;
-    private java.lang.String S;
+    private String S;
     private int T;
     private ml U;
     private at V;
     private static java.io.File W = null;
     public volatile boolean F;
-    public java.lang.String G;
+    public String G;
     long H;
     public boolean I;
     private int X;
@@ -182,7 +170,7 @@ public abstract class Minecraft
 
     public abstract void a(go go1);
 
-    public void a(java.lang.String s1, int i1)
+    public void a(String s1, int i1)
     {
         S = s1;
         T = i1;
@@ -270,7 +258,7 @@ public abstract class Minecraft
         n.a(((z) (new jz(1))));
         f = new e(this, n);
         org.lwjgl.opengl.GL11.glViewport(0, 0, c, d);
-        h = new bq(e, n);
+        h = new bq(world, n);
         try
         {
             N = new bf(C, this);
@@ -343,9 +331,9 @@ public abstract class Minecraft
         return W;
     }
 
-    public static java.io.File a(java.lang.String s1)
+    public static java.io.File a(String s1)
     {
-        java.lang.String s2 = java.lang.System.getProperty("user.home", ".");
+        String s2 = java.lang.System.getProperty("user.home", ".");
         java.io.File file;
         switch(fq.a[Minecraft.q().ordinal()])
         {
@@ -355,7 +343,7 @@ public abstract class Minecraft
             break;
 
         case 3: // '\003'
-            java.lang.String s3 = java.lang.System.getenv("APPDATA");
+            String s3 = java.lang.System.getenv("APPDATA");
             if(s3 != null)
                 file = new File(s3, (new StringBuilder()).append(".").append(s1).append('/').toString());
             else
@@ -371,14 +359,14 @@ public abstract class Minecraft
             break;
         }
         if(!file.exists() && !file.mkdirs())
-            throw new RuntimeException((new StringBuilder()).append("The working directory could not be created: ").append(((java.lang.Object) (file))).toString());
+            throw new RuntimeException((new StringBuilder()).append("The working directory could not be created: ").append(((Object) (file))).toString());
         else
             return file;
     }
 
     private static ih q()
     {
-        java.lang.String s1 = java.lang.System.getProperty("os.name").toLowerCase();
+        String s1 = java.lang.System.getProperty("os.name").toLowerCase();
         if(s1.contains("win"))
             return ih.c;
         if(s1.contains("mac"))
@@ -401,10 +389,10 @@ public abstract class Minecraft
             return;
         if(p != null)
             p.h();
-        if(bh1 == null && e == null)
+        if(bh1 == null && world == null)
             bh1 = ((bh) (new cx()));
         else
-        if(bh1 == null && g.E <= 0)
+        if(bh1 == null && g.health <= 0)
             bh1 = ((bh) (new au()));
         p = bh1;
         if(bh1 != null)
@@ -421,12 +409,12 @@ public abstract class Minecraft
         }
     }
 
-    private void c(java.lang.String s1)
+    private void c(String s1)
     {
         int i1 = org.lwjgl.opengl.GL11.glGetError();
         if(i1 != 0)
         {
-            java.lang.String s2 = org.lwjgl.util.glu.GLU.gluErrorString(i1);
+            String s2 = org.lwjgl.util.glu.GLU.gluErrorString(i1);
             java.lang.System.out.println("########## GL ERROR ##########");
             java.lang.System.out.println((new StringBuilder()).append("@ ").append(s1).toString());
             java.lang.System.out.println((new StringBuilder()).append(i1).append(": ").append(s2).toString());
@@ -447,7 +435,7 @@ public abstract class Minecraft
         try
         {
         java.lang.System.out.println("Stopping!");
-        a(((cn) (null)));
+        a(((World) (null)));
         try
         {
             df.a();
@@ -487,7 +475,7 @@ public abstract class Minecraft
                 aj.a();
                 if(k == null && org.lwjgl.opengl.Display.isCloseRequested())
                     d();
-                if(m && e != null)
+                if(m && world != null)
                 {
                     float f1 = M.c;
                     M.a();
@@ -506,17 +494,17 @@ public abstract class Minecraft
                     }
                     catch(lx lx1)
                     {
-                        e = null;
+                        world = null;
                     }
-                    a(((cn) (null)));
+                    a(((World) (null)));
                     a(((bh) (new iv())));
                 }
 
                 c("Pre render");
-                A.a(((ge) (g)), M.c);
+                A.a(((Mob) (g)), M.c);
                 org.lwjgl.opengl.GL11.glEnable(3553);
-                if(e != null)
-                    while(e.e()) ;
+                if(world != null)
+                    while(world.e()) ;
                 if(!v)
                 {
                     if(b != null)
@@ -562,7 +550,7 @@ public abstract class Minecraft
         catch(nr nr1) { }
         catch(java.lang.Throwable throwable)
         {
-            e = null;
+            world = null;
             throwable.printStackTrace();
             a(new go("Unexpected error", throwable));
         }
@@ -712,24 +700,24 @@ public abstract class Minecraft
             int k1 = x.c;
             int i2 = x.d;
             int j2 = x.e;
-            ly ly1 = ly.n[e.a(j1, k1, i2)];
+            ly ly1 = ly.n[world.a(j1, k1, i2)];
             if(i1 == 0)
             {
-                e.i(j1, k1, i2, x.e);
+                world.i(j1, k1, i2, x.e);
                 if(ly1 != ly.A || g.c >= 100)
                     b.a(j1, k1, i2, x.e);
             } else
             {
                 ev ev3 = g.b.a();
-                int k2 = ev3 == null ? 0 : ev3.a;
-                if(b.a(((dm) (g)), e, ev3, j1, k1, i2, j2))
+                int k2 = ev3 == null ? 0 : ev3.count;
+                if(b.a(((Player) (g)), world, ev3, j1, k1, i2, j2))
                     g.w();
                 if(ev3 == null)
                     return;
-                if(ev3.a == 0)
-                    g.b.a[g.b.d] = null;
+                if(ev3.count == 0)
+                    g.b.slots1[g.b.d] = null;
                 else
-                if(ev3.a != k2)
+                if(ev3.count != k2)
                     r.a.b();
             }
         }
@@ -738,14 +726,14 @@ public abstract class Minecraft
             ev ev1 = g.b.a();
             if(ev1 != null)
             {
-                int l1 = ev1.a;
-                ev ev2 = ev1.a(e, ((dm) (g)));
-                if(ev2 != ev1 || ev2 != null && ev2.a != l1)
+                int l1 = ev1.count;
+                ev ev2 = ev1.a(world, ((Player) (g)));
+                if(ev2 != ev1 || ev2 != null && ev2.count != l1)
                 {
-                    g.b.a[g.b.d] = ev2;
+                    g.b.slots1[g.b.d] = ev2;
                     r.a.c();
-                    if(ev2.a == 0)
-                        g.b.a[g.b.d] = null;
+                    if(ev2.count == 0)
+                        g.b.slots1[g.b.d] = null;
                 }
             }
         }
@@ -823,7 +811,7 @@ public abstract class Minecraft
     {
         if(x != null)
         {
-            int i1 = e.a(x.b, x.c, x.d);
+            int i1 = world.a(x.b, x.c, x.d);
             if(i1 == ly.v.bc)
                 i1 = ly.w.bc;
             if(i1 == ly.ak.bc)
@@ -840,12 +828,12 @@ public abstract class Minecraft
         r.a(1.0F);
         if(g != null)
             g.n();
-        if(!m && e != null)
+        if(!m && world != null)
             b.c();
         org.lwjgl.opengl.GL11.glBindTexture(3553, n.a("/terrain.png"));
         if(!m)
             n.a();
-        if(p == null && g != null && g.E <= 0)
+        if(p == null && g != null && g.health <= 0)
             a(((bh) (null)));
         if(p != null)
             X = O + 10000;
@@ -917,7 +905,7 @@ public abstract class Minecraft
                             if(org.lwjgl.input.Keyboard.getEventKey() == 63)
                                 y.x = !y.x;
                             if(org.lwjgl.input.Keyboard.getEventKey() == y.o.b)
-                                a(((bh) (new lo(((gh) (g.b)), g.b.c))));
+                                a(((bh) (new lo(((gh) (g.b)), g.b.slots3))));
                             if(org.lwjgl.input.Keyboard.getEventKey() == y.p.b)
                                 g.a(g.b.a(g.b.d, 1), false);
                             if(j() && org.lwjgl.input.Keyboard.getEventKey() == y.q.b)
@@ -946,7 +934,7 @@ public abstract class Minecraft
             }
             a(0, p == null && org.lwjgl.input.Mouse.isButtonDown(0) && I);
         }
-        if(e != null)
+        if(world != null)
         {
             if(g != null)
             {
@@ -954,20 +942,20 @@ public abstract class Minecraft
                 if(Y == 30)
                 {
                     Y = 0;
-                    e.f(((kh) (g)));
+                    world.f(((kh) (g)));
                 }
             }
-            e.l = y.w;
+            world.l = y.w;
             if(!m)
                 r.a();
             if(!m)
                 f.d();
             if(!m)
-                e.c();
+                world.c();
             if(!m || j())
-                e.g();
-            if(!m && e != null)
-                e.m(eo.b(g.ak), eo.b(g.al), eo.b(g.am));
+                world.g();
+            if(!m && world != null)
+                world.m(eo.b(g.ak), eo.b(g.al), eo.b(g.am));
             if(!m)
                 h.a();
         }
@@ -984,61 +972,61 @@ public abstract class Minecraft
 
     public boolean j()
     {
-        return e != null && e.y;
+        return world != null && world.y;
     }
 
-    public void b(java.lang.String s1)
+    public void b(String s1)
     {
-        a(((cn) (null)));
+        a(((World) (null)));
         java.lang.System.gc();
-        cn cn1 = new cn(new File(Minecraft.b(), "saves"), s1);
-        if(cn1.r)
-            a(cn1, "Generating level");
+        World world1 = new World(new File(Minecraft.b(), "saves"), s1);
+        if(world1.r)
+            a(world1, "Generating level");
         else
-            a(cn1, "Loading level");
+            a(world1, "Loading level");
     }
 
-    public void a(cn cn1)
+    public void a(World world1)
     {
-        a(cn1, "");
+        a(world1, "");
     }
 
-    public void a(cn cn1, java.lang.String s1)
+    public void a(World world1, String s1)
     {
-        A.a(((java.lang.String) (null)), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
-        if(e != null)
-            e.a(((nu) (q)));
-        e = cn1;
-        if(cn1 != null)
+        A.a(((String) (null)), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
+        if(world != null)
+            world.a(((IProgressUpdate) (q)));
+        world = world1;
+        if(world1 != null)
         {
-            b.a(cn1);
-            cn1.m = ((java.lang.Object) (o));
+            b.a(world1);
+            world1.m = ((Object) (o));
             if(!j())
-                g = (bi)cn1.a(bi.class);
+                g = (bi) world1.a(bi.class);
             else
             if(g != null)
             {
                 g.q();
-                if(cn1 != null)
-                    cn1.a(((kh) (g)));
+                if(world1 != null)
+                    world1.a(((kh) (g)));
             }
-            if(!cn1.y)
+            if(!world1.y)
                 d(s1);
             if(g == null)
             {
-                g = (bi)b.b(cn1);
+                g = (bi)b.b(world1);
                 g.q();
-                b.a(((dm) (g)));
+                b.a(((Player) (g)));
             }
             g.a = ((lv) (new gd(y)));
             if(f != null)
-                f.a(cn1);
+                f.a(world1);
             if(h != null)
-                h.a(cn1);
-            b.b(((dm) (g)));
-            cn1.a(((dm) (g)));
-            if(cn1.r)
-                cn1.a(((nu) (q)));
+                h.a(world1);
+            b.b(((Player) (g)));
+            world1.a(((Player) (g)));
+            if(world1.r)
+                world1.a(((IProgressUpdate) (q)));
         } else
         {
             g = null;
@@ -1047,18 +1035,18 @@ public abstract class Minecraft
         K = 0L;
     }
 
-    private void d(java.lang.String s1)
+    private void d(String s1)
     {
         q.a(s1);
-        q.d("Building terrain");
+        q.setState2("Building terrain");
         char c1 = '\200';
         int i1 = 0;
         int j1 = (c1 * 2) / 16 + 1;
         j1 *= j1;
         for(int k1 = -c1; k1 <= c1; k1 += 16)
         {
-            int l1 = e.o;
-            int i2 = e.q;
+            int l1 = world.spawnX;
+            int i2 = world.spawnZ;
             if(g != null)
             {
                 l1 = (int)g.ak;
@@ -1066,22 +1054,22 @@ public abstract class Minecraft
             }
             for(int j2 = -c1; j2 <= c1; j2 += 16)
             {
-                q.a((i1++ * 100) / j1);
-                e.a(l1 + k1, 64, i2 + j2);
-                while(e.e()) ;
+                q.onProgress((i1++ * 100) / j1);
+                world.a(l1 + k1, 64, i2 + j2);
+                while(world.e()) ;
             }
 
         }
 
-        q.d("Simulating world for a bit");
+        q.setState2("Simulating world for a bit");
         j1 = 2000;
-        e.j();
+        world.j();
     }
 
-    public void a(java.lang.String s1, java.io.File file)
+    public void a(String s1, java.io.File file)
     {
         int i1 = s1.indexOf("/");
-        java.lang.String s2 = s1.substring(0, i1);
+        String s2 = s1.substring(0, i1);
         s1 = s1.substring(i1 + 1);
         if(s2.equalsIgnoreCase("sound"))
             A.a(s1, file);
@@ -1104,44 +1092,44 @@ public abstract class Minecraft
         return L;
     }
 
-    public java.lang.String l()
+    public String l()
     {
         return f.b();
     }
 
-    public java.lang.String m()
+    public String m()
     {
         return f.c();
     }
 
-    public java.lang.String n()
+    public String n()
     {
-        return (new StringBuilder()).append("P: ").append(h.b()).append(". T: ").append(e.d()).toString();
+        return (new StringBuilder()).append("P: ").append(h.b()).append(". T: ").append(world.d()).toString();
     }
 
     public void o()
     {
-        e.a();
+        world.a();
         if(g != null)
-            e.d(((kh) (g)));
-        g = (bi)b.b(e);
+            world.d(((kh) (g)));
+        g = (bi)b.b(world);
         g.q();
-        b.a(((dm) (g)));
-        e.a(((dm) (g)));
+        b.a(((Player) (g)));
+        world.a(((Player) (g)));
         g.a = ((lv) (new gd(y)));
-        b.b(((dm) (g)));
+        b.b(((Player) (g)));
         d("Respawning");
     }
 
-    public static void a(java.lang.String s1, java.lang.String s2)
+    public static void a(String s1, String s2)
     {
-        Minecraft.a(s1, s2, ((java.lang.String) (null)));
+        Minecraft.a(s1, s2, ((String) (null)));
     }
 
-    public static void a(java.lang.String s1, java.lang.String s2, java.lang.String s3)
+    public static void a(String s1, String s2, String s3)
     {
         boolean flag = false;
-        java.lang.String s4 = s1;
+        String s4 = s1;
         java.awt.Frame frame = new Frame("Minecraft");
         java.awt.Canvas canvas = new Canvas();
         frame.setLayout(((java.awt.LayoutManager) (new BorderLayout())));
@@ -1160,7 +1148,7 @@ public abstract class Minecraft
             fm1.i = new dl((new StringBuilder()).append("Player").append(java.lang.System.currentTimeMillis() % 1000L).toString(), "");
         if(s3 != null)
         {
-            java.lang.String as1[] = s3.split(":");
+            String as1[] = s3.split(":");
             ((Minecraft) (fm1)).a(as1[0], java.lang.Integer.parseInt(as1[1]));
         }
         frame.setVisible(true);
@@ -1168,12 +1156,12 @@ public abstract class Minecraft
         thread.start();
     }
 
-    public static void main(java.lang.String args[])
+    public static void main(String args[])
     {
-        java.lang.String s1 = (new StringBuilder()).append("Player").append(java.lang.System.currentTimeMillis() % 1000L).toString();
+        String s1 = (new StringBuilder()).append("Player").append(java.lang.System.currentTimeMillis() % 1000L).toString();
         if(args.length > 0)
             s1 = args[0];
-        java.lang.String s2 = "-";
+        String s2 = "-";
         if(args.length > 1)
             s2 = args[1];
         Minecraft.a(s1, s2);
diff --git "a/temp\\src\\java/MinecraftApplet.java" "b/src\\main\\java/MinecraftApplet.java"
index 1ea38e5..83d3a82 100644
--- "a/temp\\src\\java/MinecraftApplet.java"
+++ "b/src\\main\\java/MinecraftApplet.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -8,11 +7,8 @@
 //import dl;
 //import g;
 //import h;
-import java.applet.Applet;
+
 import java.awt.BorderLayout;
-import java.awt.Canvas;
-import java.io.PrintStream;
-import java.net.URL;
 
 // Referenced classes of package net.minecraft.client:
 //            Minecraft
diff --git "a/temp\\src\\java/ge.java" "b/src\\main\\java/Mob.java"
similarity index 88%
rename from "temp\\src\\java/ge.java"
rename to "src\\main\\java/Mob.java"
index 7e1e76f..e760f32 100644
--- "a/temp\\src\\java/ge.java"
+++ "b/src\\main\\java/Mob.java"
@@ -1,12 +1,8 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.List;
-import java.util.Random;
-
-public class ge extends kh
+public class Mob extends kh
 {
 
     public int j;
@@ -20,24 +16,24 @@ public class ge extends kh
     protected float r;
     protected float s;
     protected boolean t;
-    protected java.lang.String u;
+    protected String texture;
     protected boolean v;
     protected float w;
-    protected java.lang.String x;
+    protected String x;
     protected float y;
     protected int z;
     protected float A;
     public boolean B;
     public float C;
     public float D;
-    public int E;
+    public int health;
     public int F;
     private int a;
-    public int G;
+    public int hurtTime;
     public int H;
     public float I;
-    public int J;
-    public int K;
+    public int deathTime;
+    public int attackTime;
     public float L;
     public float M;
     protected boolean N;
@@ -63,14 +59,14 @@ public class ge extends kh
     private kh h;
     private int i;
 
-    public ge(cn cn1)
+    public Mob(World world1)
     {
-        super(cn1);
+        super(world1);
         j = 20;
         n = 0.0F;
         o = 0.0F;
         t = true;
-        u = "/char.png";
+        texture = "/char.png";
         v = true;
         w = 0.0F;
         x = null;
@@ -79,8 +75,8 @@ public class ge extends kh
         A = 0.0F;
         B = false;
         I = 0.0F;
-        J = 0;
-        K = 0;
+        deathTime = 0;
+        attackTime = 0;
         N = false;
         O = -1;
         P = (float)(java.lang.Math.random() * 0.89999997615814209D + 0.10000000149011612D);
@@ -90,7 +86,7 @@ public class ge extends kh
         Z = 0.0F;
         aa = 0.7F;
         i = 0;
-        E = 10;
+        health = 10;
         ad = true;
         m = (float)(java.lang.Math.random() + 1.0D) * 0.01F;
         a(ak, al, am);
@@ -105,9 +101,9 @@ public class ge extends kh
         return ag.a(((aj)null).b(ak, al + (double)s(), am), ((aj)null).b(kh1.ak, kh1.al + (double)kh1.s(), kh1.am)) == null;
     }
 
-    public java.lang.String x()
+    public String x()
     {
-        return u;
+        return texture;
     }
 
     public boolean c_()
@@ -137,7 +133,7 @@ public class ge extends kh
         if(aQ.nextInt(1000) < a++)
         {
             a = -b();
-            java.lang.String s1 = c();
+            String s1 = c();
             if(s1 != null)
                 ag.a(((kh) (this)), s1, f(), (aQ.nextFloat() - aQ.nextFloat()) * 0.2F + 1.0F);
         }
@@ -165,16 +161,16 @@ public class ge extends kh
             aX = aU;
         }
         L = M;
-        if(K > 0)
-            K--;
-        if(G > 0)
-            G--;
+        if(attackTime > 0)
+            attackTime--;
+        if(hurtTime > 0)
+            hurtTime--;
         if(aW > 0)
             aW--;
-        if(E <= 0)
+        if(health <= 0)
         {
-            J++;
-            if(J > 20)
+            deathTime++;
+            if(deathTime > 20)
             {
                 D();
                 F();
@@ -281,11 +277,11 @@ public class ge extends kh
 
     public void b(int i1)
     {
-        if(E <= 0)
+        if(health <= 0)
             return;
-        E += i1;
-        if(E > 20)
-            E = 20;
+        health += i1;
+        if(health > 20)
+            health = 20;
         aW = j / 2;
     }
 
@@ -294,20 +290,20 @@ public class ge extends kh
         if(ag.y)
             i1 = 0;
         U = 0;
-        if(E <= 0)
+        if(health <= 0)
             return false;
         R = 1.5F;
         if((float)aW > (float)j / 2.0F)
         {
-            if(F - i1 >= E)
+            if(F - i1 >= health)
                 return false;
-            E = F - i1;
+            health = F - i1;
         } else
         {
-            F = E;
+            F = health;
             aW = j;
-            E -= i1;
-            G = H = 10;
+            health -= i1;
+            hurtTime = H = 10;
         }
         I = 0.0F;
         if(kh1 != null)
@@ -323,7 +319,7 @@ public class ge extends kh
         {
             I = (int)(java.lang.Math.random() * 2D) * 180;
         }
-        if(E <= 0)
+        if(health <= 0)
         {
             ag.a(((kh) (this)), e(), f(), (aQ.nextFloat() - aQ.nextFloat()) * 0.2F + 1.0F);
             b(kh1);
@@ -339,17 +335,17 @@ public class ge extends kh
         return 1.0F;
     }
 
-    protected java.lang.String c()
+    protected String c()
     {
         return null;
     }
 
-    protected java.lang.String d()
+    protected String d()
     {
         return "random.hurt";
     }
 
-    protected java.lang.String e()
+    protected String e()
     {
         return "random.hurt";
     }
@@ -480,27 +476,27 @@ public class ge extends kh
         return ag.a(i1, j1, k1) == ly.aG.bc || ag.a(i1, j1 + 1, k1) == ly.aG.bc;
     }
 
-    public void a(hm hm1)
+    public void a(TagCompound tagCompound1)
     {
-        hm1.a("Health", (short)E);
-        hm1.a("HurtTime", (short)G);
-        hm1.a("DeathTime", (short)J);
-        hm1.a("AttackTime", (short)K);
+        tagCompound1.set("Health", (short) health);
+        tagCompound1.set("HurtTime", (short) hurtTime);
+        tagCompound1.set("DeathTime", (short) deathTime);
+        tagCompound1.set("AttackTime", (short) attackTime);
     }
 
-    public void b(hm hm1)
+    public void b(TagCompound tagCompound1)
     {
-        E = ((int) (hm1.d("Health")));
-        if(!hm1.b("Health"))
-            E = 10;
-        G = ((int) (hm1.d("HurtTime")));
-        J = ((int) (hm1.d("DeathTime")));
-        K = ((int) (hm1.d("AttackTime")));
+        health = ((int) (tagCompound1.getShort("Health")));
+        if(!tagCompound1.b("Health"))
+            health = 10;
+        hurtTime = ((int) (tagCompound1.getShort("HurtTime")));
+        deathTime = ((int) (tagCompound1.getShort("DeathTime")));
+        attackTime = ((int) (tagCompound1.getShort("AttackTime")));
     }
 
     public boolean B()
     {
-        return !aA && E > 0;
+        return !aA && health > 0;
     }
 
     public void j()
@@ -519,7 +515,7 @@ public class ge extends kh
             a(d1, d2, d3);
             c(aq, ar);
         }
-        if(E <= 0)
+        if(health <= 0)
         {
             Y = false;
             V = 0.0F;
@@ -564,12 +560,12 @@ public class ge extends kh
     protected void b_()
     {
         U++;
-        dm dm = ag.a(((kh) (this)), -1D);
-        if(dm != null)
+        Player player = ag.a(((kh) (this)), -1D);
+        if(player != null)
         {
-            double d1 = ((kh) (dm)).ak - ak;
-            double d2 = ((kh) (dm)).al - al;
-            double d3 = ((kh) (dm)).am - am;
+            double d1 = ((kh) (player)).ak - ak;
+            double d2 = ((kh) (player)).al - al;
+            double d3 = ((kh) (player)).am - am;
             double d4 = d1 * d1 + d2 * d2 + d3 * d3;
             if(d4 > 16384D)
                 F();
@@ -584,10 +580,10 @@ public class ge extends kh
         float f1 = 8F;
         if(aQ.nextFloat() < 0.02F)
         {
-            dm dm1 = ag.a(((kh) (this)), f1);
-            if(dm1 != null)
+            Player player1 = ag.a(((kh) (this)), f1);
+            if(player1 != null)
             {
-                h = ((kh) (dm1));
+                h = ((kh) (player1));
                 i = 10 + aQ.nextInt(20);
             } else
             {
@@ -617,10 +613,10 @@ public class ge extends kh
         double d1 = kh1.ak - ak;
         double d3 = kh1.am - am;
         double d2;
-        if(kh1 instanceof ge)
+        if(kh1 instanceof Mob)
         {
-            ge ge1 = (ge)kh1;
-            d2 = (ge1.al + (double)ge1.s()) - (al + (double)s());
+            Mob mob1 = (Mob)kh1;
+            d2 = (mob1.al + (double) mob1.s()) - (al + (double)s());
         } else
         {
             d2 = (kh1.au.b + kh1.au.e) / 2D - (al + (double)s());
diff --git "a/src\\main\\java/MobSpawner.java" "b/src\\main\\java/MobSpawner.java"
new file mode 100644
index 0000000..a395fa8
--- /dev/null
+++ "b/src\\main\\java/MobSpawner.java"
@@ -0,0 +1,104 @@
+// Jad home page: http://www.kpdus.com/jad.html
+// Decompiler options: fullnames deadcode fieldsfirst safe 
+// Source File Name:   SourceFile
+
+public class MobSpawner extends ic
+{
+
+    public int delay;
+    public String entityId;
+    public double c;
+    public double d;
+
+    public MobSpawner()
+    {
+        delay = -1;
+        d = 0.0D;
+        entityId = "Pig";
+        delay = 20;
+    }
+
+    public boolean a()
+    {
+        return e.a((double) x + 0.5D, (double) y + 0.5D, (double) z + 0.5D, 16D) != null;
+    }
+
+    public void b()
+    {
+        d = c;
+        if(!a())
+            return;
+        double d1 = (float) x + e.n.nextFloat();
+        double d3 = (float) y + e.n.nextFloat();
+        double d5 = (float) z + e.n.nextFloat();
+        e.a("smoke", d1, d3, d5, 0.0D, 0.0D, 0.0D);
+        e.a("flame", d1, d3, d5, 0.0D, 0.0D, 0.0D);
+        for(c += 1000F / ((float) delay + 200F); c > 360D;)
+        {
+            c -= 360D;
+            d -= 360D;
+        }
+
+        if(delay == -1)
+            c();
+        if(delay > 0)
+        {
+            delay--;
+            return;
+        }
+        byte byte0 = 4;
+        for(int i = 0; i < byte0; i++)
+        {
+            Mob mob1 = (Mob)(Mob)ew.a(entityId, e);
+            if(mob1 == null)
+                return;
+            int j = e.a(((Object) (mob1)).getClass(), cf.b(x, y, z, x + 1, y + 1, z + 1).b(8D, 4D, 8D)).size();
+            if(j >= 6)
+            {
+                c();
+                return;
+            }
+            if(mob1 == null)
+                continue;
+            double d7 = (double) x + (e.n.nextDouble() - e.n.nextDouble()) * 4D;
+            double d8 = (y + e.n.nextInt(3)) - 1;
+            double d9 = (double) z + (e.n.nextDouble() - e.n.nextDouble()) * 4D;
+            mob1.c(d7, d8, d9, e.n.nextFloat() * 360F, 0.0F);
+            if(!mob1.a())
+                continue;
+            e.a(((kh) (mob1)));
+            for(int k = 0; k < 20; k++)
+            {
+                double d2 = (double) x + 0.5D + ((double)e.n.nextFloat() - 0.5D) * 2D;
+                double d4 = (double) y + 0.5D + ((double)e.n.nextFloat() - 0.5D) * 2D;
+                double d6 = (double) z + 0.5D + ((double)e.n.nextFloat() - 0.5D) * 2D;
+                e.a("smoke", d2, d4, d6, 0.0D, 0.0D, 0.0D);
+                e.a("flame", d2, d4, d6, 0.0D, 0.0D, 0.0D);
+            }
+
+            mob1.z();
+            c();
+        }
+
+        super.b();
+    }
+
+    private void c()
+    {
+        delay = 200 + e.n.nextInt(600);
+    }
+
+    public void a(TagCompound tagCompound1)
+    {
+        super.a(tagCompound1);
+        entityId = tagCompound1.getString("EntityId");
+        delay = ((int) (tagCompound1.getShort("Delay")));
+    }
+
+    public void b(TagCompound tagCompound1)
+    {
+        super.b(tagCompound1);
+        tagCompound1.set("EntityId", entityId);
+        tagCompound1.set("Delay", (short) delay);
+    }
+}
diff --git "a/temp\\src\\java/dq.java" "b/src\\main\\java/Monster.java"
similarity index 77%
rename from "temp\\src\\java/dq.java"
rename to "src\\main\\java/Monster.java"
index 4abe8e1..900ce60 100644
--- "a/temp\\src\\java/dq.java"
+++ "b/src\\main\\java/Monster.java"
@@ -1,21 +1,18 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
-public class dq extends ek
+public class Monster extends Entity
     implements co
 {
 
     protected int e;
 
-    public dq(cn cn1)
+    public Monster(World world1)
     {
-        super(cn1);
+        super(world1);
         e = 2;
-        E = 20;
+        health = 20;
     }
 
     public void j()
@@ -35,9 +32,9 @@ public class dq extends ek
 
     protected kh i()
     {
-        dm dm = ag.a(((kh) (this)), 16D);
-        if(dm != null && c(((kh) (dm))))
-            return ((kh) (dm));
+        Player player = ag.a(((kh) (this)), 16D);
+        if(player != null && c(((kh) (player))))
+            return ((kh) (player));
         else
             return null;
     }
@@ -61,7 +58,7 @@ public class dq extends ek
     {
         if((double)f < 2.5D && kh1.au.e > au.b && kh1.au.b < au.e)
         {
-            K = 20;
+            attackTime = 20;
             kh1.a(((kh) (this)), e);
         }
     }
@@ -71,14 +68,14 @@ public class dq extends ek
         return 0.5F - ag.c(k, l, i1);
     }
 
-    public void a(hm hm)
+    public void a(TagCompound tagCompound)
     {
-        super.a(hm);
+        super.a(tagCompound);
     }
 
-    public void b(hm hm)
+    public void b(TagCompound tagCompound)
     {
-        super.b(hm);
+        super.b(tagCompound);
     }
 
     public boolean a()
diff --git "a/temp\\src\\java/jc.java" "b/src\\main\\java/Painting.java"
similarity index 64%
rename from "temp\\src\\java/jc.java"
rename to "src\\main\\java/Painting.java"
index ca041eb..af669a5 100644
--- "a/temp\\src\\java/jc.java"
+++ "b/src\\main\\java/Painting.java"
@@ -1,37 +1,34 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
 import java.util.ArrayList;
-import java.util.List;
-import java.util.Random;
 
-public class jc extends kh
+public class Painting extends kh
 {
 
     private int c;
-    public int a;
-    private int d;
-    private int e;
-    private int f;
+    public int dir;
+    private int tileX;
+    private int tileY;
+    private int tileZ;
     public er b;
 
-    public jc(cn cn1)
+    public Painting(World world1)
     {
-        super(cn1);
+        super(world1);
         c = 0;
-        a = 0;
+        dir = 0;
         aB = 0.0F;
         a(0.5F, 0.5F);
     }
 
-    public jc(cn cn1, int j, int k, int l, int i1)
+    public Painting(World world1, int j, int k, int l, int i1)
     {
-        this(cn1);
-        d = j;
-        e = k;
-        f = l;
+        this(world1);
+        tileX = j;
+        tileY = k;
+        tileZ = l;
         java.util.ArrayList arraylist = new ArrayList();
         er aer[] = er.values();
         int j1 = aer.length;
@@ -41,7 +38,7 @@ public class jc extends kh
             b = er1;
             b(i1);
             if(i())
-                ((java.util.List) (arraylist)).add(((java.lang.Object) (er1)));
+                ((java.util.List) (arraylist)).add(((Object) (er1)));
         }
 
         if(((java.util.List) (arraylist)).size() > 0)
@@ -51,7 +48,7 @@ public class jc extends kh
 
     public void b(int j)
     {
-        a = j;
+        dir = j;
         as = aq = j * 90;
         float f1 = b.z;
         float f2 = b.A;
@@ -63,9 +60,9 @@ public class jc extends kh
         f1 /= 32F;
         f2 /= 32F;
         f3 /= 32F;
-        float f4 = (float)d + 0.5F;
-        float f5 = (float)e + 0.5F;
-        float f6 = (float)f + 0.5F;
+        float f4 = (float) tileX + 0.5F;
+        float f5 = (float) tileY + 0.5F;
+        float f6 = (float) tileZ + 0.5F;
         float f7 = 0.5625F;
         if(j == 0)
             f6 -= f7;
@@ -102,7 +99,7 @@ public class jc extends kh
         {
             c = 0;
             F();
-            ag.a(((kh) (new dx(ag, ak, al, am, new ev(di.aq)))));
+            ag.a(((kh) (new Item(ag, ak, al, am, new ev(di.aq)))));
         }
     }
 
@@ -112,16 +109,16 @@ public class jc extends kh
             return false;
         int j = b.z / 16;
         int k = b.A / 16;
-        int l = d;
-        int i1 = e;
-        int j1 = f;
-        if(a == 0)
+        int l = tileX;
+        int i1 = tileY;
+        int j1 = tileZ;
+        if(dir == 0)
             l = eo.b(ak - (double)((float)b.z / 32F));
-        if(a == 1)
+        if(dir == 1)
             j1 = eo.b(am - (double)((float)b.z / 32F));
-        if(a == 2)
+        if(dir == 2)
             l = eo.b(ak - (double)((float)b.z / 32F));
-        if(a == 3)
+        if(dir == 3)
             j1 = eo.b(am - (double)((float)b.z / 32F));
         i1 = eo.b(al - (double)((float)b.A / 32F));
         for(int k1 = 0; k1 < j; k1++)
@@ -129,10 +126,10 @@ public class jc extends kh
             for(int l1 = 0; l1 < k; l1++)
             {
                 gb gb1;
-                if(a == 0 || a == 2)
-                    gb1 = ag.f(l + k1, i1 + l1, f);
+                if(dir == 0 || dir == 2)
+                    gb1 = ag.f(l + k1, i1 + l1, tileZ);
                 else
-                    gb1 = ag.f(d, i1 + l1, j1 + k1);
+                    gb1 = ag.f(tileX, i1 + l1, j1 + k1);
                 if(!gb1.a())
                     return false;
             }
@@ -141,7 +138,7 @@ public class jc extends kh
 
         java.util.List list = ag.b(((kh) (this)), au);
         for(int i2 = 0; i2 < list.size(); i2++)
-            if(list.get(i2) instanceof jc)
+            if(list.get(i2) instanceof Painting)
                 return false;
 
         return true;
@@ -155,37 +152,37 @@ public class jc extends kh
     public boolean a(kh kh1, int j)
     {
         F();
-        ag.a(((kh) (new dx(ag, ak, al, am, new ev(di.aq)))));
+        ag.a(((kh) (new Item(ag, ak, al, am, new ev(di.aq)))));
         return true;
     }
 
-    public void a(hm hm1)
+    public void a(TagCompound tagCompound1)
     {
-        hm1.a("Dir", (byte)a);
-        hm1.a("Motive", b.y);
-        hm1.a("TileX", d);
-        hm1.a("TileY", e);
-        hm1.a("TileZ", f);
+        tagCompound1.set("Dir", (byte) dir);
+        tagCompound1.set("Motive", b.motive);
+        tagCompound1.set("TileX", tileX);
+        tagCompound1.set("TileY", tileY);
+        tagCompound1.set("TileZ", tileZ);
     }
 
-    public void b(hm hm1)
+    public void b(TagCompound tagCompound1)
     {
-        a = ((int) (hm1.c("Dir")));
-        d = hm1.e("TileX");
-        e = hm1.e("TileY");
-        f = hm1.e("TileZ");
-        java.lang.String s = hm1.i("Motive");
+        dir = ((int) (tagCompound1.getByte("Dir")));
+        tileX = tagCompound1.getInt("TileX");
+        tileY = tagCompound1.getInt("TileY");
+        tileZ = tagCompound1.getInt("TileZ");
+        String s = tagCompound1.getString("Motive");
         er aer[] = er.values();
         int j = aer.length;
         for(int k = 0; k < j; k++)
         {
             er er1 = aer[k];
-            if(er1.y.equals(((java.lang.Object) (s))))
+            if(er1.motive.equals(((Object) (s))))
                 b = er1;
         }
 
         if(b == null)
             b = er.a;
-        b(a);
+        b(dir);
     }
 }
diff --git "a/temp\\src\\java/ag.java" "b/src\\main\\java/Passive.java"
similarity index 71%
rename from "temp\\src\\java/ag.java"
rename to "src\\main\\java/Passive.java"
index a5cfd89..d208a49 100644
--- "a/temp\\src\\java/ag.java"
+++ "b/src\\main\\java/Passive.java"
@@ -1,15 +1,14 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
 
-public abstract class ag extends ek
+public abstract class Passive extends Entity
 {
 
-    public ag(cn cn1)
+    public Passive(World world1)
     {
-        super(cn1);
+        super(world1);
     }
 
     protected float a(int i, int j, int k)
@@ -20,14 +19,14 @@ public abstract class ag extends ek
             return ag.c(i, j, k) - 0.5F;
     }
 
-    public void a(hm hm)
+    public void a(TagCompound tagCompound)
     {
-        super.a(hm);
+        super.a(tagCompound);
     }
 
-    public void b(hm hm)
+    public void b(TagCompound tagCompound)
     {
-        super.b(hm);
+        super.b(tagCompound);
     }
 
     public boolean a()
diff --git "a/src\\main\\java/Pig.java" "b/src\\main\\java/Pig.java"
new file mode 100644
index 0000000..f5ef39b
--- /dev/null
+++ "b/src\\main\\java/Pig.java"
@@ -0,0 +1,63 @@
+// Jad home page: http://www.kpdus.com/jad.html
+// Decompiler options: fullnames deadcode fieldsfirst safe 
+// Source File Name:   SourceFile
+
+
+public class Pig extends Passive
+{
+
+    public boolean saddle;
+
+    public Pig(World world)
+    {
+        super(world);
+        saddle = false;
+        texture = "/mob/pig.png";
+        a(0.9F, 0.9F);
+        saddle = false;
+    }
+
+    public void a(TagCompound tagCompound1)
+    {
+        super.a(tagCompound1);
+        tagCompound1.set("Saddle", saddle);
+    }
+
+    public void b(TagCompound tagCompound1)
+    {
+        super.b(tagCompound1);
+        saddle = tagCompound1.isTrueByte("Saddle");
+    }
+
+    protected String c()
+    {
+        return "mob.pig";
+    }
+
+    protected String d()
+    {
+        return "mob.pig";
+    }
+
+    protected String e()
+    {
+        return "mob.pigdeath";
+    }
+
+    public boolean a(Player player1)
+    {
+        if(saddle)
+        {
+            player1.g(((kh) (this)));
+            return true;
+        } else
+        {
+            return false;
+        }
+    }
+
+    protected int g()
+    {
+        return di.ao.aS;
+    }
+}
diff --git "a/temp\\src\\java/dm.java" "b/src\\main\\java/Player.java"
similarity index 67%
rename from "temp\\src\\java/dm.java"
rename to "src\\main\\java/Player.java"
index bf2e818..20d7213 100644
--- "a/temp\\src\\java/dm.java"
+++ "b/src\\main\\java/Player.java"
@@ -1,40 +1,37 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.List;
-import java.util.Random;
-
-public class dm extends ge
+public class Player extends Mob
 {
 
     public eu b;
     public byte c;
-    public int d;
+    public int score;
     public float e;
     public float f;
     public boolean g;
     public int h;
-    public java.lang.String i;
+    public String i;
     private int a;
 
-    public dm(cn cn1)
+    public Player(World world1)
     {
-        super(cn1);
+        super(world1);
         b = new eu(this);
         c = 0;
-        d = 0;
+        score = 0;
         g = false;
         h = 0;
         a = 0;
         aB = 1.62F;
-        c((double)cn1.o + 0.5D, cn1.p + 1, (double)cn1.q + 0.5D, 0.0F, 0.0F);
-        E = 20;
+        System.out.println("new Player: " + (world1.spawnX + 0.5D) + ", " + (world1.spawnY + 1) + ", " + ((double) world1.spawnZ + 0.5D));
+        c((double) world1.spawnX + 0.5D, world1.spawnY + 1, (double) world1.spawnZ + 0.5D, 0.0F, 0.0F);
+        health = 20;
         x = "humanoid";
         w = 180F;
         aS = 20;
-        u = "/char.png";
+        texture = "/char.png";
     }
 
     public void p()
@@ -49,8 +46,8 @@ public class dm extends ge
         aB = 1.62F;
         a(0.6F, 1.8F);
         super.q();
-        E = 20;
-        J = 0;
+        health = 20;
+        deathTime = 0;
     }
 
     protected void b_()
@@ -72,7 +69,7 @@ public class dm extends ge
 
     public void j()
     {
-        if(ag.l == 0 && E < 20 && (aR % 20) * 4 == 0)
+        if(ag.l == 0 && health < 20 && (aR % 20) * 4 == 0)
             b(1);
         b.b();
         e = f;
@@ -81,13 +78,13 @@ public class dm extends ge
         float f2 = (float)java.lang.Math.atan(-ao * 0.20000000298023224D) * 15F;
         if(f1 > 0.1F)
             f1 = 0.1F;
-        if(!av || E <= 0)
+        if(!av || health <= 0)
             f1 = 0.0F;
-        if(av || E <= 0)
+        if(av || health <= 0)
             f2 = 0.0F;
         f += (f1 - f) * 0.4F;
         M += (f2 - M) * 0.8F;
-        if(E > 0)
+        if(health > 0)
         {
             java.util.List list = ag.b(((kh) (this)), au.b(1.0D, 0.0D, 1.0D));
             if(list != null)
@@ -106,7 +103,7 @@ public class dm extends ge
 
     public int r()
     {
-        return d;
+        return score;
     }
 
     public void b(kh kh1)
@@ -130,7 +127,7 @@ public class dm extends ge
 
     public void b(kh kh1, int k)
     {
-        d += k;
+        score += k;
     }
 
     public void a(ev ev1)
@@ -142,35 +139,35 @@ public class dm extends ge
     {
         if(ev1 == null)
             return;
-        dx dx1 = new dx(ag, ak, (al - 0.30000001192092896D) + (double)s(), am, ev1);
-        dx1.c = 40;
+        Item item1 = new Item(ag, ak, (al - 0.30000001192092896D) + (double)s(), am, ev1);
+        item1.c = 40;
         float f1 = 0.1F;
         if(flag)
         {
             float f3 = aQ.nextFloat() * 0.5F;
             float f5 = aQ.nextFloat() * 3.141593F * 2.0F;
-            dx1.an = -eo.a(f5) * f3;
-            dx1.ap = eo.b(f5) * f3;
-            dx1.ao = 0.20000000298023224D;
+            item1.an = -eo.a(f5) * f3;
+            item1.ap = eo.b(f5) * f3;
+            item1.ao = 0.20000000298023224D;
         } else
         {
             float f2 = 0.3F;
-            dx1.an = -eo.a((aq / 180F) * 3.141593F) * eo.b((ar / 180F) * 3.141593F) * f2;
-            dx1.ap = eo.b((aq / 180F) * 3.141593F) * eo.b((ar / 180F) * 3.141593F) * f2;
-            dx1.ao = -eo.a((ar / 180F) * 3.141593F) * f2 + 0.1F;
+            item1.an = -eo.a((aq / 180F) * 3.141593F) * eo.b((ar / 180F) * 3.141593F) * f2;
+            item1.ap = eo.b((aq / 180F) * 3.141593F) * eo.b((ar / 180F) * 3.141593F) * f2;
+            item1.ao = -eo.a((ar / 180F) * 3.141593F) * f2 + 0.1F;
             f2 = 0.02F;
             float f4 = aQ.nextFloat() * 3.141593F * 2.0F;
             f2 *= aQ.nextFloat();
-            dx1.an += java.lang.Math.cos(f4) * (double)f2;
-            dx1.ao += (aQ.nextFloat() - aQ.nextFloat()) * 0.1F;
-            dx1.ap += java.lang.Math.sin(f4) * (double)f2;
+            item1.an += java.lang.Math.cos(f4) * (double)f2;
+            item1.ao += (aQ.nextFloat() - aQ.nextFloat()) * 0.1F;
+            item1.ap += java.lang.Math.sin(f4) * (double)f2;
         }
-        a(dx1);
+        a(item1);
     }
 
-    protected void a(dx dx1)
+    protected void a(Item item1)
     {
-        ag.a(((kh) (dx1)));
+        ag.a(((kh) (item1)));
     }
 
     public float a(ly ly)
@@ -188,17 +185,17 @@ public class dm extends ge
         return b.b(ly);
     }
 
-    public void b(hm hm1)
+    public void b(TagCompound tagCompound1)
     {
-        super.b(hm1);
-        ki ki1 = hm1.l("Inventory");
-        b.b(ki1);
+        super.b(tagCompound1);
+        TagList tagList1 = tagCompound1.l("Inventory");
+        b.b(tagList1);
     }
 
-    public void a(hm hm1)
+    public void a(TagCompound tagCompound1)
     {
-        super.a(hm1);
-        hm1.a("Inventory", ((el) (b.a(new ki()))));
+        super.a(tagCompound1);
+        tagCompound1.set("Inventory", ((Tag) (b.a(new TagList()))));
     }
 
     public void a(gh gh)
@@ -221,11 +218,11 @@ public class dm extends ge
     public boolean a(kh kh1, int k)
     {
         U = 0;
-        if(E <= 0)
+        if(health <= 0)
             return false;
         if((float)aW > (float)j / 2.0F)
             return false;
-        if((kh1 instanceof dq) || (kh1 instanceof kg))
+        if((kh1 instanceof Monster) || (kh1 instanceof Arrow))
         {
             if(ag.l == 0)
                 k = 0;
@@ -245,11 +242,11 @@ public class dm extends ge
             return super.a(kh1, k);
     }
 
-    public void a(ke ke)
+    public void a(Furnace furnace)
     {
     }
 
-    public void a(ob ob)
+    public void a(Sign sign)
     {
     }
 
diff --git "a/temp\\src\\java/jd.java" "b/src\\main\\java/PrimedTnt.java"
similarity index 79%
rename from "temp\\src\\java/jd.java"
rename to "src\\main\\java/PrimedTnt.java"
index c97b0fe..ed285b9 100644
--- "a/temp\\src\\java/jd.java"
+++ "b/src\\main\\java/PrimedTnt.java"
@@ -1,26 +1,25 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
 
-public class jd extends kh
+public class PrimedTnt extends kh
 {
 
     public int a;
 
-    public jd(cn cn1)
+    public PrimedTnt(World world1)
     {
-        super(cn1);
+        super(world1);
         a = 0;
         ad = true;
         a(0.98F, 0.98F);
         aB = aD / 2.0F;
     }
 
-    public jd(cn cn1, float f, float f1, float f2)
+    public PrimedTnt(World world1, float f, float f1, float f2)
     {
-        this(cn1);
+        this(world1);
         a((double)f, (double)f1, (double)f2);
         float f3 = (float)(java.lang.Math.random() * 3.1415927410125732D * 2D);
         an = -eo.a((f3 * 3.141593F) / 180F) * 0.02F;
@@ -70,14 +69,14 @@ public class jd extends kh
         ag.a(((kh) (null)), ak, al, am, f);
     }
 
-    protected void a(hm hm1)
+    protected void a(TagCompound tagCompound1)
     {
-        hm1.a("Fuse", (byte)a);
+        tagCompound1.set("Fuse", (byte)a);
     }
 
-    protected void b(hm hm1)
+    protected void b(TagCompound tagCompound1)
     {
-        a = ((int) (hm1.c("Fuse")));
+        a = ((int) (tagCompound1.getByte("Fuse")));
     }
 
     public float h_()
diff --git "a/src\\main\\java/Sheep.java" "b/src\\main\\java/Sheep.java"
new file mode 100644
index 0000000..c1296dc
--- /dev/null
+++ "b/src\\main\\java/Sheep.java"
@@ -0,0 +1,62 @@
+// Jad home page: http://www.kpdus.com/jad.html
+// Decompiler options: fullnames deadcode fieldsfirst safe 
+// Source File Name:   SourceFile
+
+public class Sheep extends Passive
+{
+
+    public boolean sheared;
+
+    public Sheep(World world)
+    {
+        super(world);
+        sheared = false;
+        texture = "/mob/sheep.png";
+        a(0.9F, 1.3F);
+    }
+
+    public boolean a(kh kh, int i)
+    {
+        if(!sheared && (kh instanceof Mob))
+        {
+            sheared = true;
+            int j = 1 + aQ.nextInt(3);
+            for(int k = 0; k < j; k++)
+            {
+                Item item1 = a(ly.ac.bc, 1, 1.0F);
+                item1.ao += aQ.nextFloat() * 0.05F;
+                item1.an += (aQ.nextFloat() - aQ.nextFloat()) * 0.1F;
+                item1.ap += (aQ.nextFloat() - aQ.nextFloat()) * 0.1F;
+            }
+
+        }
+        return super.a(kh, i);
+    }
+
+    public void a(TagCompound tagCompound1)
+    {
+        super.a(tagCompound1);
+        tagCompound1.set("Sheared", sheared);
+    }
+
+    public void b(TagCompound tagCompound1)
+    {
+        super.b(tagCompound1);
+        sheared = tagCompound1.isTrueByte("Sheared");
+    }
+
+    protected String c()
+    {
+        return "mob.sheep";
+    }
+
+    protected String d()
+    {
+        return "mob.sheep";
+    }
+
+    protected String e()
+    {
+        return "mob.sheep";
+    }
+}
diff --git "a/src\\main\\java/Sign.java" "b/src\\main\\java/Sign.java"
new file mode 100644
index 0000000..44a0358
--- /dev/null
+++ "b/src\\main\\java/Sign.java"
@@ -0,0 +1,39 @@
+// Jad home page: http://www.kpdus.com/jad.html
+// Decompiler options: fullnames deadcode fieldsfirst safe 
+// Source File Name:   SourceFile
+
+
+public class Sign extends ic
+{
+
+    public String lines[] = {
+        "", "", "", ""
+    };
+    public int b;
+
+    public Sign()
+    {
+        b = -1;
+    }
+
+    public void b(TagCompound tagCompound1)
+    {
+        super.b(tagCompound1);
+        tagCompound1.set("Text1", lines[0]);
+        tagCompound1.set("Text2", lines[1]);
+        tagCompound1.set("Text3", lines[2]);
+        tagCompound1.set("Text4", lines[3]);
+    }
+
+    public void a(TagCompound tagCompound1)
+    {
+        super.a(tagCompound1);
+        for(int i = 0; i < 4; i++)
+        {
+            lines[i] = tagCompound1.getString((new StringBuilder()).append("Text").append(i + 1).toString());
+            if(lines[i].length() > 15)
+                lines[i] = lines[i].substring(0, 15);
+        }
+
+    }
+}
diff --git "a/temp\\src\\java/cw.java" "b/src\\main\\java/Skeleton.java"
similarity index 61%
rename from "temp\\src\\java/cw.java"
rename to "src\\main\\java/Skeleton.java"
index a3b9469..74d1f2e 100644
--- "a/temp\\src\\java/cw.java"
+++ "b/src\\main\\java/Skeleton.java"
@@ -1,30 +1,27 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
-public class cw extends dq
+public class Skeleton extends Monster
 {
 
-    public cw(cn cn1)
+    public Skeleton(World world1)
     {
-        super(cn1);
-        u = "/mob/skeleton.png";
+        super(world1);
+        texture = "/mob/skeleton.png";
     }
 
-    protected java.lang.String c()
+    protected String c()
     {
         return "mob.skeleton";
     }
 
-    protected java.lang.String d()
+    protected String d()
     {
         return "mob.skeletonhurt";
     }
 
-    protected java.lang.String e()
+    protected String e()
     {
         return "mob.skeletonhurt";
     }
@@ -46,30 +43,30 @@ public class cw extends dq
         {
             double d1 = kh1.ak - ak;
             double d2 = kh1.am - am;
-            if(K == 0)
+            if(attackTime == 0)
             {
-                kg kg1 = new kg(ag, ((ge) (this)));
-                kg1.al += 1.3999999761581421D;
-                double d3 = kh1.al - 0.20000000298023224D - kg1.al;
+                Arrow arrow1 = new Arrow(ag, ((Mob) (this)));
+                arrow1.al += 1.3999999761581421D;
+                double d3 = kh1.al - 0.20000000298023224D - arrow1.al;
                 float f1 = eo.a(d1 * d1 + d2 * d2) * 0.2F;
                 ag.a(((kh) (this)), "random.bow", 1.0F, 1.0F / (aQ.nextFloat() * 0.4F + 0.8F));
-                ag.a(((kh) (kg1)));
-                kg1.a(d1, d3 + (double)f1, d2, 0.6F, 12F);
-                K = 30;
+                ag.a(((kh) (arrow1)));
+                arrow1.a(d1, d3 + (double)f1, d2, 0.6F, 12F);
+                attackTime = 30;
             }
             aq = (float)((java.lang.Math.atan2(d2, d1) * 180D) / 3.1415927410125732D) - 90F;
             g = true;
         }
     }
 
-    public void a(hm hm)
+    public void a(TagCompound tagCompound)
     {
-        super.a(hm);
+        super.a(tagCompound);
     }
 
-    public void b(hm hm)
+    public void b(TagCompound tagCompound)
     {
-        super.b(hm);
+        super.b(tagCompound);
     }
 
     protected int g()
diff --git "a/temp\\src\\java/ma.java" "b/src\\main\\java/Slime.java"
similarity index 67%
rename from "temp\\src\\java/ma.java"
rename to "src\\main\\java/Slime.java"
index 87d4828..9344c02 100644
--- "a/temp\\src\\java/ma.java"
+++ "b/src\\main\\java/Slime.java"
@@ -1,11 +1,8 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
-public class ma extends ge
+public class Slime extends Mob
     implements co
 {
 
@@ -14,12 +11,12 @@ public class ma extends ge
     private int d;
     public int c;
 
-    public ma(cn cn1)
+    public Slime(World world1)
     {
-        super(cn1);
+        super(world1);
         d = 0;
         c = 1;
-        u = "/mob/slime.png";
+        texture = "/mob/slime.png";
         c = 1 << aQ.nextInt(3);
         aB = 0.0F;
         d = aQ.nextInt(20) + 10;
@@ -30,20 +27,20 @@ public class ma extends ge
     {
         c = i;
         a(0.6F * (float)i, 0.6F * (float)i);
-        E = i * i;
+        health = i * i;
         a(ak, al, am);
     }
 
-    public void a(hm hm1)
+    public void a(TagCompound tagCompound1)
     {
-        super.a(hm1);
-        hm1.a("Size", c - 1);
+        super.a(tagCompound1);
+        tagCompound1.set("Size", c - 1);
     }
 
-    public void b(hm hm1)
+    public void b(TagCompound tagCompound1)
     {
-        super.b(hm1);
-        c = hm1.e("Size") + 1;
+        super.b(tagCompound1);
+        c = tagCompound1.getInt("Size") + 1;
     }
 
     public void e_()
@@ -71,13 +68,13 @@ public class ma extends ge
 
     protected void b_()
     {
-        dm dm1 = ag.a(((kh) (this)), 16D);
-        if(dm1 != null)
-            b(((kh) (dm1)), 10F);
+        Player player1 = ag.a(((kh) (this)), 16D);
+        if(player1 != null)
+            b(((kh) (player1)), 10F);
         if(av && d-- <= 0)
         {
             d = aQ.nextInt(20) + 10;
-            if(dm1 != null)
+            if(player1 != null)
                 d /= 3;
             Y = true;
             if(c > 1)
@@ -95,34 +92,34 @@ public class ma extends ge
 
     public void F()
     {
-        if(c > 1 && E == 0)
+        if(c > 1 && health == 0)
         {
             for(int i = 0; i < 4; i++)
             {
                 float f1 = (((float)(i % 2) - 0.5F) * (float)c) / 4F;
                 float f2 = (((float)(i / 2) - 0.5F) * (float)c) / 4F;
-                ma ma1 = new ma(ag);
-                ma1.c(c / 2);
-                ma1.c(ak + (double)f1, al + 0.5D, am + (double)f2, aQ.nextFloat() * 360F, 0.0F);
-                ag.a(((kh) (ma1)));
+                Slime slime1 = new Slime(ag);
+                slime1.c(c / 2);
+                slime1.c(ak + (double)f1, al + 0.5D, am + (double)f2, aQ.nextFloat() * 360F, 0.0F);
+                ag.a(((kh) (slime1)));
             }
 
         }
         super.F();
     }
 
-    public void b(dm dm1)
+    public void b(Player player1)
     {
-        if(c > 1 && c(((kh) (dm1))) && (double)d(((kh) (dm1))) < 0.59999999999999998D * (double)c && dm1.a(((kh) (this)), c))
+        if(c > 1 && c(((kh) (player1))) && (double)d(((kh) (player1))) < 0.59999999999999998D * (double)c && player1.a(((kh) (this)), c))
             ag.a(((kh) (this)), "mob.slimeattack", 1.0F, (aQ.nextFloat() - aQ.nextFloat()) * 0.2F + 1.0F);
     }
 
-    protected java.lang.String d()
+    protected String d()
     {
         return "mob.slime";
     }
 
-    protected java.lang.String e()
+    protected String e()
     {
         return "mob.slime";
     }
@@ -137,8 +134,8 @@ public class ma extends ge
 
     public boolean a()
     {
-        ga ga1 = ag.a(eo.b(ak), eo.b(al));
-        return (c == 1 || ag.l > 0) && aQ.nextInt(10) == 0 && ga1.a(0x3ad8025fL).nextInt(10) == 0 && al < 16D;
+        Chunk chunk1 = ag.a(eo.b(ak), eo.b(al));
+        return (c == 1 || ag.l > 0) && aQ.nextInt(10) == 0 && chunk1.a(0x3ad8025fL).nextInt(10) == 0 && al < 16D;
     }
 
     protected float f()
diff --git "a/temp\\src\\java/ao.java" "b/src\\main\\java/Snowball.java"
similarity index 72%
rename from "temp\\src\\java/ao.java"
rename to "src\\main\\java/Snowball.java"
index 45227fb..2dcdd5b 100644
--- "a/temp\\src\\java/ao.java"
+++ "b/src\\main\\java/Snowball.java"
@@ -1,33 +1,29 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.List;
-import java.util.Random;
-
-public class ao extends kh
+public class Snowball extends kh
 {
 
-    private int b;
-    private int c;
-    private int d;
-    private int e;
-    private boolean f;
-    public int a;
-    private ge g;
+    private int xTile;
+    private int yTile;
+    private int zTile;
+    private int inTile;
+    private boolean inGround;
+    public int shake;
+    private Mob g;
     private int h;
     private int i;
 
-    public ao(cn cn1)
+    public Snowball(World world1)
     {
-        super(cn1);
-        b = -1;
-        c = -1;
-        d = -1;
-        e = 0;
-        f = false;
-        a = 0;
+        super(world1);
+        xTile = -1;
+        yTile = -1;
+        zTile = -1;
+        inTile = 0;
+        inGround = false;
+        shake = 0;
         i = 0;
         a(0.25F, 0.25F);
     }
@@ -39,19 +35,19 @@ public class ao extends kh
         return d1 < d2 * d2;
     }
 
-    public ao(cn cn1, ge ge1)
+    public Snowball(World world1, Mob mob1)
     {
-        super(cn1);
-        b = -1;
-        c = -1;
-        d = -1;
-        e = 0;
-        f = false;
-        a = 0;
+        super(world1);
+        xTile = -1;
+        yTile = -1;
+        zTile = -1;
+        inTile = 0;
+        inGround = false;
+        shake = 0;
         i = 0;
-        g = ge1;
+        g = mob1;
         a(0.25F, 0.25F);
-        c(ge1.ak, ge1.al, ge1.am, ge1.aq, ge1.ar);
+        c(mob1.ak, mob1.al, mob1.am, mob1.aq, mob1.ar);
         ak -= eo.b((aq / 180F) * 3.141593F) * 0.16F;
         al -= 0.10000000149011612D;
         am -= eo.a((aq / 180F) * 3.141593F) * 0.16F;
@@ -89,14 +85,14 @@ public class ao extends kh
     public void e_()
     {
         super.e_();
-        if(a > 0)
-            a--;
-        if(f)
+        if(shake > 0)
+            shake--;
+        if(inGround)
         {
-            int j = ag.a(b, c, d);
-            if(j != e)
+            int j = ag.a(xTile, yTile, zTile);
+            if(j != inTile)
             {
-                f = false;
+                inGround = false;
                 an *= aQ.nextFloat() * 0.2F;
                 ao *= aQ.nextFloat() * 0.2F;
                 ap *= aQ.nextFloat() * 0.2F;
@@ -182,32 +178,32 @@ public class ao extends kh
         a(ak, al, am);
     }
 
-    public void a(hm hm1)
+    public void a(TagCompound tagCompound1)
     {
-        hm1.a("xTile", (short)b);
-        hm1.a("yTile", (short)c);
-        hm1.a("zTile", (short)d);
-        hm1.a("inTile", (byte)e);
-        hm1.a("shake", (byte)a);
-        hm1.a("inGround", (byte)(f ? 1 : 0));
+        tagCompound1.set("xTile", (short) xTile);
+        tagCompound1.set("yTile", (short) yTile);
+        tagCompound1.set("zTile", (short) zTile);
+        tagCompound1.set("inTile", (byte) inTile);
+        tagCompound1.set("shake", (byte) shake);
+        tagCompound1.set("inGround", (byte)(inGround ? 1 : 0));
     }
 
-    public void b(hm hm1)
+    public void b(TagCompound tagCompound1)
     {
-        b = ((int) (hm1.d("xTile")));
-        c = ((int) (hm1.d("yTile")));
-        d = ((int) (hm1.d("zTile")));
-        e = hm1.c("inTile") & 0xff;
-        a = hm1.c("shake") & 0xff;
-        f = hm1.c("inGround") == 1;
+        xTile = ((int) (tagCompound1.getShort("xTile")));
+        yTile = ((int) (tagCompound1.getShort("yTile")));
+        zTile = ((int) (tagCompound1.getShort("zTile")));
+        inTile = tagCompound1.getByte("inTile") & 0xff;
+        shake = tagCompound1.getByte("shake") & 0xff;
+        inGround = tagCompound1.getByte("inGround") == 1;
     }
 
-    public void b(dm dm1)
+    public void b(Player player1)
     {
-        if(f && g == dm1 && a <= 0 && dm1.b.a(new ev(di.j.aS, 1)))
+        if(inGround && g == player1 && shake <= 0 && player1.b.a(new ev(di.j.aS, 1)))
         {
             ag.a(((kh) (this)), "random.pop", 0.2F, ((aQ.nextFloat() - aQ.nextFloat()) * 0.7F + 1.0F) * 2.0F);
-            dm1.a_(((kh) (this)), 1);
+            player1.a_(((kh) (this)), 1);
             F();
         }
     }
diff --git "a/temp\\src\\java/ax.java" "b/src\\main\\java/Spider.java"
similarity index 79%
rename from "temp\\src\\java/ax.java"
rename to "src\\main\\java/Spider.java"
index a1eac64..47a40ab 100644
--- "a/temp\\src\\java/ax.java"
+++ "b/src\\main\\java/Spider.java"
@@ -1,17 +1,14 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
-public class ax extends dq
+public class Spider extends Monster
 {
 
-    public ax(cn cn1)
+    public Spider(World world1)
     {
-        super(cn1);
-        u = "/mob/spider.png";
+        super(world1);
+        texture = "/mob/spider.png";
         a(1.4F, 0.9F);
         aa = 0.8F;
     }
@@ -34,17 +31,17 @@ public class ax extends dq
         }
     }
 
-    protected java.lang.String c()
+    protected String c()
     {
         return "mob.spider";
     }
 
-    protected java.lang.String d()
+    protected String d()
     {
         return "mob.spider";
     }
 
-    protected java.lang.String e()
+    protected String e()
     {
         return "mob.spiderdeath";
     }
@@ -74,14 +71,14 @@ public class ax extends dq
         }
     }
 
-    public void a(hm hm)
+    public void a(TagCompound tagCompound)
     {
-        super.a(hm);
+        super.a(tagCompound);
     }
 
-    public void b(hm hm)
+    public void b(TagCompound tagCompound)
     {
-        super.b(hm);
+        super.b(tagCompound);
     }
 
     protected int g()
diff --git "a/temp\\src\\java/el.java" "b/src\\main\\java/Tag.java"
similarity index 67%
rename from "temp\\src\\java/el.java"
rename to "src\\main\\java/Tag.java"
index b30c204..958e801 100644
--- "a/temp\\src\\java/el.java"
+++ "b/src\\main\\java/Tag.java"
@@ -1,18 +1,15 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.DataInput;
-import java.io.DataOutput;
 import java.io.IOException;
 
-public abstract class el
+public abstract class Tag
 {
 
-    private java.lang.String a;
+    private String a;
 
-    public el()
+    public Tag()
     {
         a = null;
     }
@@ -23,7 +20,7 @@ public abstract class el
 
     public abstract byte a();
 
-    public java.lang.String b()
+    public String b()
     {
         if(a == null)
             return "";
@@ -31,28 +28,28 @@ public abstract class el
             return a;
     }
 
-    public el a(java.lang.String s)
+    public Tag a(String s)
     {
         a = s;
         return this;
     }
 
-    public static el b(java.io.DataInput datainput) throws IOException
+    public static Tag b(java.io.DataInput datainput) throws IOException
     {
         byte byte0 = datainput.readByte();
         if(byte0 == 0)
         {
-            return ((el) (new fy()));
+            return ((Tag) (new TagEnd()));
         } else
         {
-            el el1 = el.a(byte0);
+            Tag el1 = Tag.getTagByCode(byte0);
             el1.a = datainput.readUTF();
             el1.a(datainput);
             return el1;
         }
     }
 
-    public static void a(el el1, java.io.DataOutput dataoutput) throws IOException
+    public static void a(Tag el1, java.io.DataOutput dataoutput) throws IOException
     {
         dataoutput.writeByte(((int) (el1.a())));
         if(el1.a() == 0)
@@ -66,47 +63,47 @@ public abstract class el
         }
     }
 
-    public static el a(byte byte0)
+    public static Tag getTagByCode(byte byte0)
     {
         switch(byte0)
         {
         case 0: // '\0'
-            return ((el) (new fy()));
+            return ((Tag) (new TagEnd()));
 
         case 1: // '\001'
-            return ((el) (new ix()));
+            return ((Tag) (new TagByte()));
 
         case 2: // '\002'
-            return ((el) (new ls()));
+            return ((Tag) (new TagShort()));
 
         case 3: // '\003'
-            return ((el) (new io()));
+            return ((Tag) (new TagInt()));
 
         case 4: // '\004'
-            return ((el) (new gn()));
+            return ((Tag) (new TagLong()));
 
         case 5: // '\005'
-            return ((el) (new f()));
+            return ((Tag) (new TagFloat()));
 
         case 6: // '\006'
-            return ((el) (new kr()));
+            return ((Tag) (new TagDouble()));
 
         case 7: // '\007'
-            return ((el) (new dy()));
+            return ((Tag) (new TagByteArray()));
 
         case 8: // '\b'
-            return ((el) (new ne()));
+            return ((Tag) (new TagString()));
 
         case 9: // '\t'
-            return ((el) (new ki()));
+            return ((Tag) (new TagList()));
 
         case 10: // '\n'
-            return ((el) (new hm()));
+            return ((Tag) (new TagCompound()));
         }
         return null;
     }
 
-    public static java.lang.String b(byte byte0)
+    public static String getTagNameByCode(byte byte0)
     {
         switch(byte0)
         {
diff --git "a/temp\\src\\java/ix.java" "b/src\\main\\java/TagByte.java"
similarity index 73%
rename from "temp\\src\\java/ix.java"
rename to "src\\main\\java/TagByte.java"
index cb3a2fc..d4bf451 100644
--- "a/temp\\src\\java/ix.java"
+++ "b/src\\main\\java/TagByte.java"
@@ -1,22 +1,19 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.DataInput;
-import java.io.DataOutput;
 import java.io.IOException;
 
-public class ix extends el
+public class TagByte extends Tag
 {
 
     public byte a;
 
-    public ix()
+    public TagByte()
     {
     }
 
-    public ix(byte byte0)
+    public TagByte(byte byte0)
     {
         a = byte0;
     }
@@ -36,7 +33,7 @@ public class ix extends el
         return 1;
     }
 
-    public java.lang.String toString()
+    public String toString()
     {
         return (new StringBuilder()).append("").append(((int) (a))).toString();
     }
diff --git "a/temp\\src\\java/dy.java" "b/src\\main\\java/TagByteArray.java"
similarity index 75%
rename from "temp\\src\\java/dy.java"
rename to "src\\main\\java/TagByteArray.java"
index 3c6cad0..4f4d532 100644
--- "a/temp\\src\\java/dy.java"
+++ "b/src\\main\\java/TagByteArray.java"
@@ -1,22 +1,19 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.DataInput;
-import java.io.DataOutput;
 import java.io.IOException;
 
-public class dy extends el
+public class TagByteArray extends Tag
 {
 
     public byte a[];
 
-    public dy()
+    public TagByteArray()
     {
     }
 
-    public dy(byte abyte0[])
+    public TagByteArray(byte abyte0[])
     {
         a = abyte0;
     }
@@ -39,7 +36,7 @@ public class dy extends el
         return 7;
     }
 
-    public java.lang.String toString()
+    public String toString()
     {
         return (new StringBuilder()).append("[").append(a.length).append(" bytes]").toString();
     }
diff --git "a/src\\main\\java/TagCompound.java" "b/src\\main\\java/TagCompound.java"
new file mode 100644
index 0000000..cbb6377
--- /dev/null
+++ "b/src\\main\\java/TagCompound.java"
@@ -0,0 +1,188 @@
+// Jad home page: http://www.kpdus.com/jad.html
+// Decompiler options: fullnames deadcode fieldsfirst safe 
+// Source File Name:   SourceFile
+
+import java.io.IOException;
+import java.util.HashMap;
+
+public class TagCompound extends Tag
+{
+
+    private java.util.Map keyvalue;
+
+    public TagCompound()
+    {
+        keyvalue = ((java.util.Map) (new HashMap()));
+    }
+
+    void a(java.io.DataOutput dataoutput) throws IOException
+    {
+        Tag el1;
+        for(java.util.Iterator iterator = keyvalue.values().iterator(); iterator.hasNext(); Tag.a(el1, dataoutput))
+            el1 = (Tag)iterator.next();
+
+        dataoutput.writeByte(0);
+    }
+
+    void a(java.io.DataInput datainput) throws IOException
+    {
+        keyvalue.clear();
+        Tag el1;
+        for(; (el1 = Tag.b(datainput)).a() != 0; keyvalue.put(((Object) (el1.b())), ((Object) (el1))));
+    }
+
+    public byte a()
+    {
+        return 10;
+    }
+
+    public void set(String s, Tag el1)
+    {
+        keyvalue.put(((Object) (s)), ((Object) (el1.a(s))));
+    }
+
+    public void set(String s, byte byte0)
+    {
+        keyvalue.put(((Object) (s)), ((Object) ((new TagByte(byte0)).a(s))));
+    }
+
+    public void set(String s, short word0)
+    {
+        keyvalue.put(((Object) (s)), ((Object) ((new TagShort(word0)).a(s))));
+    }
+
+    public void set(String s, int i1)
+    {
+        keyvalue.put(((Object) (s)), ((Object) ((new TagInt(i1)).a(s))));
+    }
+
+    public void set(String s, long l1)
+    {
+        keyvalue.put(((Object) (s)), ((Object) ((new TagLong(l1)).a(s))));
+    }
+
+    public void set(String s, float f1)
+    {
+        keyvalue.put(((Object) (s)), ((Object) ((new TagFloat(f1)).a(s))));
+    }
+
+    public void set(String s, double d1)
+    {
+        keyvalue.put(((Object) (s)), ((Object) ((new TagDouble(d1)).a(s))));
+    }
+
+    public void set(String s, String s1)
+    {
+        keyvalue.put(((Object) (s)), ((Object) ((new TagString(s1)).a(s))));
+    }
+
+    public void set(String s, byte abyte0[])
+    {
+        keyvalue.put(((Object) (s)), ((Object) ((new TagByteArray(abyte0)).a(s))));
+    }
+
+    public void set(String s, TagCompound tagCompound1)
+    {
+        keyvalue.put(((Object) (s)), ((Object) (tagCompound1.a(s))));
+    }
+
+    public void set(String s, boolean flag)
+    {
+        set(s, ((byte)(flag ? 1 : 0)));
+    }
+
+    public boolean b(String s)
+    {
+        return keyvalue.containsKey(((Object) (s)));
+    }
+
+    public byte getByte(String s)
+    {
+        if(!keyvalue.containsKey(((Object) (s))))
+            return 0;
+        else
+            return ((TagByte) keyvalue.get(((Object) (s)))).a;
+    }
+
+    public short getShort(String s)
+    {
+        if(!keyvalue.containsKey(((Object) (s))))
+            return 0;
+        else
+            return ((TagShort) keyvalue.get(((Object) (s)))).a;
+    }
+
+    public int getInt(String s)
+    {
+        if(!keyvalue.containsKey(((Object) (s))))
+            return 0;
+        else
+            return ((TagInt) keyvalue.get(((Object) (s)))).a;
+    }
+
+    public long getLong(String s)
+    {
+        if(!keyvalue.containsKey(((Object) (s))))
+            return 0L;
+        else
+            return ((TagLong) keyvalue.get(((Object) (s)))).a;
+    }
+
+    public float getFloat(String s)
+    {
+        if(!keyvalue.containsKey(((Object) (s))))
+            return 0.0F;
+        else
+            return ((TagFloat) keyvalue.get(((Object) (s)))).a;
+    }
+
+    public double getDouble(String s)
+    {
+        if(!keyvalue.containsKey(((Object) (s))))
+            return 0.0D;
+        else
+            return ((TagDouble) keyvalue.get(((Object) (s)))).a;
+    }
+
+    public String getString(String s)
+    {
+        if(!keyvalue.containsKey(((Object) (s))))
+            return "";
+        else
+            return ((TagString) keyvalue.get(((Object) (s)))).a;
+    }
+
+    public byte[] getByteArray(String s)
+    {
+        if(!keyvalue.containsKey(((Object) (s))))
+            return new byte[0];
+        else
+            return ((TagByteArray) keyvalue.get(((Object) (s)))).a;
+    }
+
+    public TagCompound k(String s)
+    {
+        if(!keyvalue.containsKey(((Object) (s))))
+            return new TagCompound();
+        else
+            return (TagCompound) keyvalue.get(((Object) (s)));
+    }
+
+    public TagList l(String s)
+    {
+        if(!keyvalue.containsKey(((Object) (s))))
+            return new TagList();
+        else
+            return (TagList) keyvalue.get(((Object) (s)));
+    }
+
+    public boolean isTrueByte(String s)
+    {
+        return getByte(s) != 0;
+    }
+
+    public String toString()
+    {
+        return (new StringBuilder()).append("").append(keyvalue.size()).append(" entries").toString();
+    }
+}
diff --git "a/temp\\src\\java/kr.java" "b/src\\main\\java/TagDouble.java"
similarity index 72%
rename from "temp\\src\\java/kr.java"
rename to "src\\main\\java/TagDouble.java"
index 7844fc3..15cb5cf 100644
--- "a/temp\\src\\java/kr.java"
+++ "b/src\\main\\java/TagDouble.java"
@@ -1,22 +1,19 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.DataInput;
-import java.io.DataOutput;
 import java.io.IOException;
 
-public class kr extends el
+public class TagDouble extends Tag
 {
 
     public double a;
 
-    public kr()
+    public TagDouble()
     {
     }
 
-    public kr(double d)
+    public TagDouble(double d)
     {
         a = d;
     }
@@ -36,7 +33,7 @@ public class kr extends el
         return 6;
     }
 
-    public java.lang.String toString()
+    public String toString()
     {
         return (new StringBuilder()).append("").append(a).toString();
     }
diff --git "a/temp\\src\\java/fy.java" "b/src\\main\\java/TagEnd.java"
similarity index 60%
rename from "temp\\src\\java/fy.java"
rename to "src\\main\\java/TagEnd.java"
index 937bfd3..909349c 100644
--- "a/temp\\src\\java/fy.java"
+++ "b/src\\main\\java/TagEnd.java"
@@ -1,16 +1,11 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.DataInput;
-import java.io.DataOutput;
-import java.io.IOException;
-
-public class fy extends el
+public class TagEnd extends Tag
 {
 
-    public fy()
+    public TagEnd()
     {
     }
 
@@ -27,7 +22,7 @@ public class fy extends el
         return 0;
     }
 
-    public java.lang.String toString()
+    public String toString()
     {
         return "END";
     }
diff --git "a/temp\\src\\java/f.java" "b/src\\main\\java/TagFloat.java"
similarity index 72%
rename from "temp\\src\\java/f.java"
rename to "src\\main\\java/TagFloat.java"
index 5176d60..8c0a098 100644
--- "a/temp\\src\\java/f.java"
+++ "b/src\\main\\java/TagFloat.java"
@@ -1,22 +1,19 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.DataInput;
-import java.io.DataOutput;
 import java.io.IOException;
 
-public class f extends el
+public class TagFloat extends Tag
 {
 
     public float a;
 
-    public f()
+    public TagFloat()
     {
     }
 
-    public f(float f1)
+    public TagFloat(float f1)
     {
         a = f1;
     }
@@ -36,7 +33,7 @@ public class f extends el
         return 5;
     }
 
-    public java.lang.String toString()
+    public String toString()
     {
         return (new StringBuilder()).append("").append(a).toString();
     }
diff --git "a/temp\\src\\java/io.java" "b/src\\main\\java/TagInt.java"
similarity index 72%
rename from "temp\\src\\java/io.java"
rename to "src\\main\\java/TagInt.java"
index 3099eb8..1979bee 100644
--- "a/temp\\src\\java/io.java"
+++ "b/src\\main\\java/TagInt.java"
@@ -1,22 +1,19 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.DataInput;
-import java.io.DataOutput;
 import java.io.IOException;
 
-public class io extends el
+public class TagInt extends Tag
 {
 
     public int a;
 
-    public io()
+    public TagInt()
     {
     }
 
-    public io(int i)
+    public TagInt(int i)
     {
         a = i;
     }
@@ -36,7 +33,7 @@ public class io extends el
         return 3;
     }
 
-    public java.lang.String toString()
+    public String toString()
     {
         return (new StringBuilder()).append("").append(a).toString();
     }
diff --git "a/temp\\src\\java/ki.java" "b/src\\main\\java/TagList.java"
similarity index 66%
rename from "temp\\src\\java/ki.java"
rename to "src\\main\\java/TagList.java"
index 08b50c4..2c16708 100644
--- "a/temp\\src\\java/ki.java"
+++ "b/src\\main\\java/TagList.java"
@@ -1,21 +1,17 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.DataInput;
-import java.io.DataOutput;
 import java.io.IOException;
 import java.util.ArrayList;
-import java.util.List;
 
-public class ki extends el
+public class TagList extends Tag
 {
 
     private java.util.List a;
     private byte b;
 
-    public ki()
+    public TagList()
     {
         a = ((java.util.List) (new ArrayList()));
     }
@@ -23,13 +19,13 @@ public class ki extends el
     void a(java.io.DataOutput dataoutput) throws IOException
     {
         if(a.size() > 0)
-            b = ((el)a.get(0)).a();
+            b = ((Tag)a.get(0)).a();
         else
             b = 1;
         dataoutput.writeByte(((int) (b)));
         dataoutput.writeInt(a.size());
         for(int i = 0; i < a.size(); i++)
-            ((el)a.get(i)).a(dataoutput);
+            ((Tag)a.get(i)).a(dataoutput);
 
     }
 
@@ -40,9 +36,9 @@ public class ki extends el
         a = ((java.util.List) (new ArrayList()));
         for(int j = 0; j < i; j++)
         {
-            el el1 = el.a(b);
+            Tag el1 = Tag.getTagByCode(b);
             el1.a(datainput);
-            a.add(((java.lang.Object) (el1)));
+            a.add(((Object) (el1)));
         }
 
     }
@@ -52,20 +48,20 @@ public class ki extends el
         return 9;
     }
 
-    public java.lang.String toString()
+    public String toString()
     {
-        return (new StringBuilder()).append("").append(a.size()).append(" entries of type ").append(el.b(b)).toString();
+        return (new StringBuilder()).append("").append(a.size()).append(" entries of type ").append(Tag.getTagNameByCode(b)).toString();
     }
 
-    public void a(el el1)
+    public void a(Tag el1)
     {
         b = el1.a();
-        a.add(((java.lang.Object) (el1)));
+        a.add(((Object) (el1)));
     }
 
-    public el a(int i)
+    public Tag a(int i)
     {
-        return (el)a.get(i);
+        return (Tag)a.get(i);
     }
 
     public int c()
diff --git "a/temp\\src\\java/gn.java" "b/src\\main\\java/TagLong.java"
similarity index 72%
rename from "temp\\src\\java/gn.java"
rename to "src\\main\\java/TagLong.java"
index b8085f7..c1f9402 100644
--- "a/temp\\src\\java/gn.java"
+++ "b/src\\main\\java/TagLong.java"
@@ -1,22 +1,19 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.DataInput;
-import java.io.DataOutput;
 import java.io.IOException;
 
-public class gn extends el
+public class TagLong extends Tag
 {
 
     public long a;
 
-    public gn()
+    public TagLong()
     {
     }
 
-    public gn(long l)
+    public TagLong(long l)
     {
         a = l;
     }
@@ -36,7 +33,7 @@ public class gn extends el
         return 4;
     }
 
-    public java.lang.String toString()
+    public String toString()
     {
         return (new StringBuilder()).append("").append(a).toString();
     }
diff --git "a/temp\\src\\java/ls.java" "b/src\\main\\java/TagShort.java"
similarity index 73%
rename from "temp\\src\\java/ls.java"
rename to "src\\main\\java/TagShort.java"
index 8124316..b0a0096 100644
--- "a/temp\\src\\java/ls.java"
+++ "b/src\\main\\java/TagShort.java"
@@ -1,22 +1,19 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.DataInput;
-import java.io.DataOutput;
 import java.io.IOException;
 
-public class ls extends el
+public class TagShort extends Tag
 {
 
     public short a;
 
-    public ls()
+    public TagShort()
     {
     }
 
-    public ls(short word0)
+    public TagShort(short word0)
     {
         a = word0;
     }
@@ -36,7 +33,7 @@ public class ls extends el
         return 2;
     }
 
-    public java.lang.String toString()
+    public String toString()
     {
         return (new StringBuilder()).append("").append(((int) (a))).toString();
     }
diff --git "a/temp\\src\\java/ne.java" "b/src\\main\\java/TagString.java"
similarity index 72%
rename from "temp\\src\\java/ne.java"
rename to "src\\main\\java/TagString.java"
index 15d7ade..e39a0f4 100644
--- "a/temp\\src\\java/ne.java"
+++ "b/src\\main\\java/TagString.java"
@@ -1,22 +1,19 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.DataInput;
-import java.io.DataOutput;
 import java.io.IOException;
 
-public class ne extends el
+public class TagString extends Tag
 {
 
-    public java.lang.String a;
+    public String a;
 
-    public ne()
+    public TagString()
     {
     }
 
-    public ne(java.lang.String s)
+    public TagString(String s)
     {
         a = s;
         if(s == null)
@@ -40,7 +37,7 @@ public class ne extends el
         return 8;
     }
 
-    public java.lang.String toString()
+    public String toString()
     {
         return (new StringBuilder()).append("").append(a).toString();
     }
diff --git "a/temp\\src\\java/cn.java" "b/src\\main\\java/World.java"
similarity index 84%
rename from "temp\\src\\java/cn.java"
rename to "src\\main\\java/World.java"
index d9d9895..f697a54 100644
--- "a/temp\\src\\java/cn.java"
+++ "b/src\\main\\java/World.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -8,17 +7,12 @@ import java.io.DataOutputStream;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.PrintStream;
 import java.util.ArrayList;
 import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
 import java.util.Random;
-import java.util.Set;
 import java.util.TreeSet;
 
-public class cn
+public class World
     implements nm
 {
 
@@ -28,8 +22,8 @@ public class cn
     private java.util.TreeSet B;
     private java.util.Set C;
     public java.util.List b;
-    public long c;
-    public boolean d;
+    public long time;
+    public boolean snowCovered;
     private long D;
     private long E;
     private long F;
@@ -42,19 +36,19 @@ public class cn
     protected int j;
     public java.util.List k;
     public int l;
-    public java.lang.Object m;
+    public Object m;
     public java.util.Random n;
-    public int o;
-    public int p;
-    public int q;
+    public int spawnX;
+    public int spawnY;
+    public int spawnZ;
     public boolean r;
     protected java.util.List s;
-    private aw H;
+    private IChunkProvider H;
     public java.io.File t;
-    public long u;
-    private hm I;
-    public long v;
-    public final java.lang.String w;
+    public long randomSeed;
+    private TagCompound I;
+    public long sizeOnDisk;
+    public final String w;
     public boolean x;
     private java.util.ArrayList J;
     private java.util.Set K;
@@ -62,7 +56,7 @@ public class cn
     private java.util.List M;
     public boolean y;
 
-    public static hm a(java.io.File file, java.lang.String s1)
+    public static TagCompound a(java.io.File file, String s1)
     {
         java.io.File file1 = new File(file, "saves");
         java.io.File file2 = new File(file1, s1);
@@ -72,9 +66,9 @@ public class cn
         if(file3.exists())
             try
             {
-                hm hm1 = ((x)null).a(((java.io.InputStream) (new FileInputStream(file3))));
-                hm hm2 = hm1.k("Data");
-                return hm2;
+                TagCompound tagCompound1 = ((x)null).a(((java.io.InputStream) (new FileInputStream(file3))));
+                TagCompound tagCompound2 = tagCompound1.k("Data");
+                return tagCompound2;
             }
             catch(java.lang.Exception exception)
             {
@@ -83,7 +77,7 @@ public class cn
         return null;
     }
 
-    public static void b(java.io.File file, java.lang.String s1)
+    public static void b(java.io.File file, String s1)
     {
         java.io.File file1 = new File(file, "saves");
         java.io.File file2 = new File(file1, s1);
@@ -92,7 +86,7 @@ public class cn
             return;
         } else
         {
-            cn.a(file2.listFiles());
+            World.a(file2.listFiles());
             file2.delete();
             return;
         }
@@ -103,18 +97,18 @@ public class cn
         for(int i1 = 0; i1 < afile.length; i1++)
         {
             if(afile[i1].isDirectory())
-                cn.a(afile[i1].listFiles());
+                World.a(afile[i1].listFiles());
             afile[i1].delete();
         }
 
     }
 
-    public cn(java.io.File file, java.lang.String s1)
+    public World(java.io.File file, String s1)
     {
         this(file, s1, (new Random()).nextLong());
     }
 
-    public cn(java.lang.String s1)
+    public World(String s1)
     {
         z = ((java.util.List) (new ArrayList()));
         a = ((java.util.List) (new ArrayList()));
@@ -122,8 +116,8 @@ public class cn
         B = new TreeSet();
         C = ((java.util.Set) (new HashSet()));
         b = ((java.util.List) (new ArrayList()));
-        c = 0L;
-        d = false;
+        time = 0L;
+        snowCovered = false;
         D = 0x88bbffL;
         E = 0xc0d8ffL;
         F = 0xffffffL;
@@ -137,8 +131,8 @@ public class cn
         n = new Random();
         r = false;
         s = ((java.util.List) (new ArrayList()));
-        u = 0L;
-        v = 0L;
+        randomSeed = 0L;
+        sizeOnDisk = 0L;
         J = new ArrayList();
         K = ((java.util.Set) (new HashSet()));
         L = n.nextInt(12000);
@@ -149,16 +143,17 @@ public class cn
         f();
     }
 
-    public cn(java.io.File file, java.lang.String s1, long l1)
+    public World(java.io.File file, String s1, long randomSeed)
     {
+        randomSeed = 1L; // HARDCODE SEED
         z = ((java.util.List) (new ArrayList()));
         a = ((java.util.List) (new ArrayList()));
         A = ((java.util.List) (new ArrayList()));
         B = new TreeSet();
         C = ((java.util.Set) (new HashSet()));
         b = ((java.util.List) (new ArrayList()));
-        c = 0L;
-        d = false;
+        time = 0L;
+        snowCovered = false;
         D = 0x88bbffL;
         E = 0xc0d8ffL;
         F = 0xffffffL;
@@ -172,8 +167,8 @@ public class cn
         n = new Random();
         r = false;
         s = ((java.util.List) (new ArrayList()));
-        u = 0L;
-        v = 0L;
+        this.randomSeed = 0L;
+        sizeOnDisk = 0L;
         J = new ArrayList();
         K = ((java.util.Set) (new HashSet()));
         L = n.nextInt(12000);
@@ -206,38 +201,42 @@ public class cn
         if(file2.exists())
             try
             {
-                hm hm1 = ((x)null).a(((java.io.InputStream) (new FileInputStream(file2))));
-                hm hm2 = hm1.k("Data");
-                u = hm2.f("RandomSeed");
-                o = hm2.e("SpawnX");
-                p = hm2.e("SpawnY");
-                q = hm2.e("SpawnZ");
-                c = hm2.f("Time");
-                v = hm2.f("SizeOnDisk");
-                d = hm2.m("SnowCovered");
-                if(hm2.b("Player"))
-                    I = hm2.k("Player");
+                TagCompound tagCompound1 = ((x)null).a(((java.io.InputStream) (new FileInputStream(file2))));
+                TagCompound tagCompound2 = tagCompound1.k("Data");
+                this.randomSeed = tagCompound2.getLong("RandomSeed");
+                System.out.println("Readed world file randomSeed: " + this.randomSeed);
+                spawnX = tagCompound2.getInt("SpawnX");
+                spawnY = tagCompound2.getInt("SpawnY");
+                spawnZ = tagCompound2.getInt("SpawnZ");
+                time = tagCompound2.getLong("Time");
+                sizeOnDisk = tagCompound2.getLong("SizeOnDisk");
+                snowCovered = tagCompound2.isTrueByte("SnowCovered");
+                if(tagCompound2.b("Player"))
+                    I = tagCompound2.k("Player");
             }
             catch(java.lang.Exception exception)
             {
                 exception.printStackTrace();
             }
         else
-            d = n.nextInt(4) == 0;
+            snowCovered = n.nextInt(4) == 0;
         boolean flag = false;
-        if(u == 0L)
+        if(this.randomSeed == 0L)
         {
-            u = l1;
+            this.randomSeed = randomSeed;
             flag = true;
         }
         H = a(t);
         if(flag)
         {
             x = true;
-            o = 0;
-            p = 64;
-            for(q = 0; !f(o, q); q += n.nextInt(64) - n.nextInt(64))
-                o += n.nextInt(64) - n.nextInt(64);
+            spawnX = 0;
+            spawnY = 64;
+
+            // HARDCODED Z AND COMMENTED RANDOM SPAWN TO TESTS
+            spawnZ = 0;
+            /*for(spawnZ = 0; !f(spawnX, spawnZ); spawnZ += n.nextInt(64) - n.nextInt(64))
+                spawnX += n.nextInt(64) - n.nextInt(64);*/
 
             x = false;
         }
@@ -245,17 +244,17 @@ public class cn
         return;
     }
 
-    protected aw a(java.io.File file)
+    protected IChunkProvider a(java.io.File file)
     {
-        return ((aw) (new ft(this, ((af) (new le(file, true))), ((aw) (new nw(this, u))))));
+        return ((IChunkProvider) (new ft(this, ((af) (new le(file, true))), ((IChunkProvider) (new nw(this, randomSeed))))));
     }
 
     public void a()
     {
-        if(p <= 0)
-            p = 64;
-        for(; g(o, q) == 0; q += n.nextInt(8) - n.nextInt(8))
-            o += n.nextInt(8) - n.nextInt(8);
+        if(spawnY <= 0)
+            spawnY = 64;
+        for(; g(spawnX, spawnZ) == 0; spawnZ += n.nextInt(8) - n.nextInt(8))
+            spawnX += n.nextInt(8) - n.nextInt(8);
 
     }
 
@@ -272,16 +271,16 @@ public class cn
         return a(i1, k1, j1);
     }
 
-    public void a(dm dm1)
+    public void a(Player player1)
     {
         try
         {
             if(I != null)
             {
-                dm1.e(I);
+                player1.e(I);
                 I = null;
             }
-            a(((kh) (dm1)));
+            a(((kh) (player1)));
         }
         catch(java.lang.Exception exception)
         {
@@ -289,47 +288,47 @@ public class cn
         }
     }
 
-    public void a(boolean flag, nu nu1)
+    public void a(boolean flag, IProgressUpdate iProgressUpdate)
     {
-        if(!H.b())
+        if(!H.canSave())
             return;
-        if(nu1 != null)
-            nu1.b("Saving level");
+        if(iProgressUpdate != null)
+            iProgressUpdate.setState1("Saving level");
         m();
-        if(nu1 != null)
-            nu1.d("Saving chunks");
-        H.a(flag, nu1);
+        if(iProgressUpdate != null)
+            iProgressUpdate.setState2("Saving chunks");
+        H.saveChunks(flag, iProgressUpdate);
     }
 
     private void m()
     {
         l();
-        hm hm1 = new hm();
-        hm1.a("RandomSeed", u);
-        hm1.a("SpawnX", o);
-        hm1.a("SpawnY", p);
-        hm1.a("SpawnZ", q);
-        hm1.a("Time", c);
-        hm1.a("SizeOnDisk", v);
-        hm1.a("SnowCovered", d);
-        hm1.a("LastPlayed", java.lang.System.currentTimeMillis());
-        dm dm1 = null;
+        TagCompound tagCompound1 = new TagCompound();
+        tagCompound1.set("RandomSeed", randomSeed);
+        tagCompound1.set("SpawnX", spawnX);
+        tagCompound1.set("SpawnY", spawnY);
+        tagCompound1.set("SpawnZ", spawnZ);
+        tagCompound1.set("Time", time);
+        tagCompound1.set("SizeOnDisk", sizeOnDisk);
+        tagCompound1.set("SnowCovered", snowCovered);
+        tagCompound1.set("LastPlayed", java.lang.System.currentTimeMillis());
+        Player player1 = null;
         if(k.size() > 0)
-            dm1 = (dm)k.get(0);
-        if(dm1 != null)
+            player1 = (Player)k.get(0);
+        if(player1 != null)
         {
-            hm hm2 = new hm();
-            dm1.d(hm2);
-            hm1.a("Player", hm2);
+            TagCompound tagCompound2 = new TagCompound();
+            player1.d(tagCompound2);
+            tagCompound1.set("Player", tagCompound2);
         }
-        hm hm3 = new hm();
-        hm3.a("Data", ((el) (hm1)));
+        TagCompound tagCompound3 = new TagCompound();
+        tagCompound3.set("Data", ((Tag) (tagCompound1)));
         try
         {
             java.io.File file = new File(t, "level.dat_new");
             java.io.File file1 = new File(t, "level.dat_old");
             java.io.File file2 = new File(t, "level.dat");
-            ((x)null).a(hm3, ((java.io.OutputStream) (new FileOutputStream(file))));
+            ((x)null).a(tagCompound3, ((java.io.OutputStream) (new FileOutputStream(file))));
             if(file1.exists())
                 file1.delete();
             file2.renameTo(file1);
@@ -347,11 +346,11 @@ public class cn
 
     public boolean a(int i1)
     {
-        if(!H.b())
+        if(!H.canSave())
             return true;
         if(i1 == 0)
             m();
-        return H.a(false, ((nu) (null)));
+        return H.saveChunks(false, ((IProgressUpdate) (null)));
     }
 
     public int a(int i1, int j1, int k1)
@@ -397,17 +396,17 @@ public class cn
 
     private boolean h(int i1, int j1)
     {
-        return H.a(i1, j1);
+        return H.chunkExists(i1, j1);
     }
 
-    public ga a(int i1, int j1)
+    public Chunk a(int i1, int j1)
     {
         return b(i1 >> 4, j1 >> 4);
     }
 
-    public ga b(int i1, int j1)
+    public Chunk b(int i1, int j1)
     {
-        return H.b(i1, j1);
+        return H.provideChunk(i1, j1);
     }
 
     public boolean a(int i1, int j1, int k1, int l1, int i2)
@@ -421,8 +420,8 @@ public class cn
             return false;
         } else
         {
-            ga ga1 = b(i1 >> 4, k1 >> 4);
-            return ga1.a(i1 & 0xf, j1, k1 & 0xf, l1, i2);
+            Chunk chunk1 = b(i1 >> 4, k1 >> 4);
+            return chunk1.a(i1 & 0xf, j1, k1 & 0xf, l1, i2);
         }
     }
 
@@ -437,8 +436,8 @@ public class cn
             return false;
         } else
         {
-            ga ga1 = b(i1 >> 4, k1 >> 4);
-            return ga1.a(i1 & 0xf, j1, k1 & 0xf, l1);
+            Chunk chunk1 = b(i1 >> 4, k1 >> 4);
+            return chunk1.a(i1 & 0xf, j1, k1 & 0xf, l1);
         }
     }
 
@@ -462,10 +461,10 @@ public class cn
             return 0;
         } else
         {
-            ga ga1 = b(i1 >> 4, k1 >> 4);
+            Chunk chunk1 = b(i1 >> 4, k1 >> 4);
             i1 &= 0xf;
             k1 &= 0xf;
-            return ga1.b(i1, j1, k1);
+            return chunk1.b(i1, j1, k1);
         }
     }
 
@@ -485,10 +484,10 @@ public class cn
             return false;
         } else
         {
-            ga ga1 = b(i1 >> 4, k1 >> 4);
+            Chunk chunk1 = b(i1 >> 4, k1 >> 4);
             i1 &= 0xf;
             k1 &= 0xf;
-            ga1.b(i1, j1, k1, l1);
+            chunk1.b(i1, j1, k1, l1);
             return true;
         }
     }
@@ -612,10 +611,10 @@ public class cn
             return i2;
         } else
         {
-            ga ga1 = b(i1 >> 4, k1 >> 4);
+            Chunk chunk1 = b(i1 >> 4, k1 >> 4);
             i1 &= 0xf;
             k1 &= 0xf;
-            return ga1.c(i1, j1, k1, e);
+            return chunk1.c(i1, j1, k1, e);
         }
     }
 
@@ -632,10 +631,10 @@ public class cn
             return false;
         } else
         {
-            ga ga1 = b(i1 >> 4, k1 >> 4);
+            Chunk chunk1 = b(i1 >> 4, k1 >> 4);
             i1 &= 0xf;
             k1 &= 0xf;
-            return ga1.c(i1, j1, k1);
+            return chunk1.c(i1, j1, k1);
         }
     }
 
@@ -648,8 +647,8 @@ public class cn
             return 0;
         } else
         {
-            ga ga1 = b(i1 >> 4, j1 >> 4);
-            return ga1.b(i1 & 0xf, j1 & 0xf);
+            Chunk chunk1 = b(i1 >> 4, j1 >> 4);
+            return chunk1.b(i1 & 0xf, j1 & 0xf);
         }
     }
 
@@ -683,8 +682,8 @@ public class cn
             return 0;
         } else
         {
-            ga ga1 = b(l1, i2);
-            return ga1.a(by1, i1 & 0xf, j1, k1 & 0xf);
+            Chunk chunk1 = b(l1, i2);
+            return chunk1.a(by1, i1 & 0xf, j1, k1 & 0xf);
         }
     }
 
@@ -698,8 +697,8 @@ public class cn
             return;
         if(!h(i1 >> 4, k1 >> 4))
             return;
-        ga ga1 = b(i1 >> 4, k1 >> 4);
-        ga1.a(by1, i1 & 0xf, j1, k1 & 0xf, l1);
+        Chunk chunk1 = b(i1 >> 4, k1 >> 4);
+        chunk1.a(by1, i1 & 0xf, j1, k1 & 0xf, l1);
         for(int i2 = 0; i2 < s.size(); i2++)
             ((im)s.get(i2)).a(i1, j1, k1);
 
@@ -828,14 +827,14 @@ public class cn
         return null;
     }
 
-    public void a(kh kh1, java.lang.String s1, float f1, float f2)
+    public void a(kh kh1, String s1, float f1, float f2)
     {
         for(int i1 = 0; i1 < s.size(); i1++)
             ((im)s.get(i1)).a(s1, kh1.ak, kh1.al - (double)kh1.aB, kh1.am, f1, f2);
 
     }
 
-    public void a(double d1, double d2, double d3, java.lang.String s1, 
+    public void a(double d1, double d2, double d3, String s1, 
             float f1, float f2)
     {
         for(int i1 = 0; i1 < s.size(); i1++)
@@ -843,14 +842,14 @@ public class cn
 
     }
 
-    public void a(java.lang.String s1, int i1, int j1, int k1)
+    public void a(String s1, int i1, int j1, int k1)
     {
         for(int l1 = 0; l1 < s.size(); l1++)
             ((im)s.get(l1)).a(s1, i1, j1, k1);
 
     }
 
-    public void a(java.lang.String s1, double d1, double d2, double d3, 
+    public void a(String s1, double d1, double d2, double d3, 
             double d4, double d5, double d6)
     {
         for(int i1 = 0; i1 < s.size(); i1++)
@@ -863,17 +862,17 @@ public class cn
         int i1 = eo.b(kh1.ak / 16D);
         int j1 = eo.b(kh1.am / 16D);
         boolean flag = false;
-        if(kh1 instanceof dm)
+        if(kh1 instanceof Player)
             flag = true;
         if(flag || h(i1, j1))
         {
-            if(kh1 instanceof dm)
+            if(kh1 instanceof Player)
             {
-                k.add(((java.lang.Object) ((dm)kh1)));
+                k.add(((Object) ((Player)kh1)));
                 java.lang.System.out.println((new StringBuilder()).append("Player count: ").append(k.size()).toString());
             }
             b(i1, j1).a(kh1);
-            a.add(((java.lang.Object) (kh1)));
+            a.add(((Object) (kh1)));
             b(kh1);
             return true;
         } else
@@ -899,21 +898,21 @@ public class cn
     public void d(kh kh1)
     {
         kh1.F();
-        if(kh1 instanceof dm)
+        if(kh1 instanceof Player)
         {
-            k.remove(((java.lang.Object) ((dm)kh1)));
+            k.remove(((Object) ((Player)kh1)));
             java.lang.System.out.println((new StringBuilder()).append("Player count: ").append(k.size()).toString());
         }
     }
 
     public void a(im im1)
     {
-        s.add(((java.lang.Object) (im1)));
+        s.add(((Object) (im1)));
     }
 
     public void b(im im1)
     {
-        s.remove(((java.lang.Object) (im1)));
+        s.remove(((Object) (im1)));
     }
 
     public java.util.List a(kh kh1, cf cf1)
@@ -948,10 +947,10 @@ public class cn
         {
             cf cf2 = ((kh)list.get(j3)).f_();
             if(cf2 != null && cf2.a(cf1))
-                J.add(((java.lang.Object) (cf2)));
+                J.add(((Object) (cf2)));
             cf2 = kh1.b_((kh)list.get(j3));
             if(cf2 != null && cf2.a(cf1))
-                J.add(((java.lang.Object) (cf2)));
+                J.add(((Object) (cf2)));
         }
 
         return ((java.util.List) (J));
@@ -987,7 +986,7 @@ public class cn
 
     public float c(float f1)
     {
-        int i1 = (int)(c % 24000L);
+        int i1 = (int)(time % 24000L);
         float f2 = ((float)i1 + f1) / 24000F - 0.25F;
         if(f2 < 0.0F)
             f2++;
@@ -1035,13 +1034,13 @@ public class cn
 
     public int d(int i1, int j1)
     {
-        ga ga1 = a(i1, j1);
+        Chunk chunk1 = a(i1, j1);
         int k1 = 127;
         i1 &= 0xf;
         j1 &= 0xf;
         while(k1 > 0) 
         {
-            int l1 = ga1.a(i1, k1, j1);
+            int l1 = chunk1.a(i1, k1, j1);
             if(l1 == 0 || !ly.n[l1].bn.c() && !ly.n[l1].bn.d())
                 k1--;
             else
@@ -1073,11 +1072,11 @@ public class cn
         if(a(i1 - byte0, j1 - byte0, k1 - byte0, i1 + byte0, j1 + byte0, k1 + byte0))
         {
             if(l1 > 0)
-                jf1.a((long)ly.n[l1].a() + c);
-            if(!C.contains(((java.lang.Object) (jf1))))
+                jf1.a((long)ly.n[l1].a() + time);
+            if(!C.contains(((Object) (jf1))))
             {
-                C.add(((java.lang.Object) (jf1)));
-                B.add(((java.lang.Object) (jf1)));
+                C.add(((Object) (jf1)));
+                B.add(((Object) (jf1)));
             }
         }
     }
@@ -1413,32 +1412,32 @@ public class cn
         return null;
     }
 
-    public java.lang.String d()
+    public String d()
     {
         return (new StringBuilder()).append("All: ").append(a.size()).toString();
     }
 
     public ic b(int i1, int j1, int k1)
     {
-        ga ga1 = b(i1 >> 4, k1 >> 4);
-        if(ga1 != null)
-            return ga1.d(i1 & 0xf, j1, k1 & 0xf);
+        Chunk chunk1 = b(i1 >> 4, k1 >> 4);
+        if(chunk1 != null)
+            return chunk1.d(i1 & 0xf, j1, k1 & 0xf);
         else
             return null;
     }
 
     public void a(int i1, int j1, int k1, ic ic1)
     {
-        ga ga1 = b(i1 >> 4, k1 >> 4);
-        if(ga1 != null)
-            ga1.a(i1 & 0xf, j1, k1 & 0xf, ic1);
+        Chunk chunk1 = b(i1 >> 4, k1 >> 4);
+        if(chunk1 != null)
+            chunk1.a(i1 & 0xf, j1, k1 & 0xf, ic1);
     }
 
     public void l(int i1, int j1, int k1)
     {
-        ga ga1 = b(i1 >> 4, k1 >> 4);
-        if(ga1 != null)
-            ga1.e(i1 & 0xf, j1, k1 & 0xf);
+        Chunk chunk1 = b(i1 >> 4, k1 >> 4);
+        if(chunk1 != null)
+            chunk1.e(i1 & 0xf, j1, k1 & 0xf);
     }
 
     public boolean g(int i1, int j1, int k1)
@@ -1450,9 +1449,9 @@ public class cn
             return ly1.b();
     }
 
-    public void a(nu nu1)
+    public void a(IProgressUpdate iProgressUpdate)
     {
-        a(true, nu1);
+        a(true, iProgressUpdate);
     }
 
     public boolean e()
@@ -1491,7 +1490,7 @@ public class cn
             }
 
         }
-        z.add(((java.lang.Object) (new kn(by1, i1, j1, k1, l1, i2, j2))));
+        z.add(((Object) (new kn(by1, i1, j1, k1, l1, i2, j2))));
         if(z.size() > 0x186a0)
             for(; z.size() > 50000; e());
     }
@@ -1505,7 +1504,7 @@ public class cn
 
     public void g()
     {
-        H.a();
+        H.unloadQueuedChunks();
         int i1 = a(1.0F);
         if(i1 != e)
         {
@@ -1514,9 +1513,9 @@ public class cn
                 ((im)s.get(j1)).e();
 
         }
-        c++;
-        if(c % (long)j == 0L)
-            a(false, ((nu) (null)));
+        time++;
+        if(time % (long)j == 0L)
+            a(false, ((IProgressUpdate) (null)));
         a(false);
         h();
     }
@@ -1526,14 +1525,14 @@ public class cn
         K.clear();
         for(int i1 = 0; i1 < k.size(); i1++)
         {
-            dm dm1 = (dm)k.get(i1);
-            int j1 = eo.b(dm1.ak / 16D);
-            int l1 = eo.b(dm1.am / 16D);
+            Player player1 = (Player)k.get(i1);
+            int j1 = eo.b(player1.ak / 16D);
+            int l1 = eo.b(player1.am / 16D);
             byte byte0 = 9;
             for(int j2 = -byte0; j2 <= byte0; j2++)
             {
                 for(int j3 = -byte0; j3 <= byte0; j3++)
-                    K.add(((java.lang.Object) (new ol(j2 + j1, j3 + l1))));
+                    K.add(((Object) (new ol(j2 + j1, j3 + l1))));
 
             }
 
@@ -1546,7 +1545,7 @@ public class cn
             ol ol1 = (ol)iterator.next();
             int k1 = ol1.a * 16;
             int i2 = ol1.b * 16;
-            ga ga1 = b(ol1.a, ol1.b);
+            Chunk chunk1 = b(ol1.a, ol1.b);
             if(L == 0)
             {
                 f = f * 3 + g;
@@ -1554,32 +1553,32 @@ public class cn
                 int k3 = k2 & 0xf;
                 int j4 = k2 >> 8 & 0xf;
                 int i5 = k2 >> 16 & 0x7f;
-                int l5 = ga1.a(k3, i5, j4);
+                int l5 = chunk1.a(k3, i5, j4);
                 k3 += k1;
                 j4 += i2;
                 if(l5 == 0 && j(k3, i5, j4) <= n.nextInt(8) && a(by.a, k3, i5, j4) <= 0)
                 {
-                    dm dm2 = a((double)k3 + 0.5D, (double)i5 + 0.5D, (double)j4 + 0.5D, 8D);
-                    if(dm2 != null && dm2.d((double)k3 + 0.5D, (double)i5 + 0.5D, (double)j4 + 0.5D) > 4D)
+                    Player player2 = a((double)k3 + 0.5D, (double)i5 + 0.5D, (double)j4 + 0.5D, 8D);
+                    if(player2 != null && player2.d((double)k3 + 0.5D, (double)i5 + 0.5D, (double)j4 + 0.5D) > 4D)
                     {
                         a((double)k3 + 0.5D, (double)i5 + 0.5D, (double)j4 + 0.5D, "ambient.cave.cave", 0.7F, 0.8F + n.nextFloat() * 0.2F);
                         L = n.nextInt(12000) + 6000;
                     }
                 }
             }
-            if(d && n.nextInt(4) == 0)
+            if(snowCovered && n.nextInt(4) == 0)
             {
                 f = f * 3 + g;
                 int l2 = f >> 2;
                 int l3 = l2 & 0xf;
                 int k4 = l2 >> 8 & 0xf;
                 int j5 = d(l3 + k1, k4 + i2);
-                if(j5 >= 0 && j5 < 128 && ga1.a(by.b, l3, j5, k4) < 10)
+                if(j5 >= 0 && j5 < 128 && chunk1.a(by.b, l3, j5, k4) < 10)
                 {
-                    int i6 = ga1.a(l3, j5 - 1, k4);
-                    if(ga1.a(l3, j5, k4) == 0 && ly.aT.a(this, l3 + k1, j5, k4 + i2))
+                    int i6 = chunk1.a(l3, j5 - 1, k4);
+                    if(chunk1.a(l3, j5, k4) == 0 && ly.aT.a(this, l3 + k1, j5, k4 + i2))
                         d(l3 + k1, j5, k4 + i2, ly.aT.bc);
-                    if(i6 == ly.C.bc && ga1.b(l3, j5 - 1, k4) == 0)
+                    if(i6 == ly.C.bc && chunk1.b(l3, j5 - 1, k4) == 0)
                         d(l3 + k1, j5 - 1, k4 + i2, ly.aU.bc);
                 }
             }
@@ -1591,7 +1590,7 @@ public class cn
                 int l4 = i4 & 0xf;
                 int k5 = i4 >> 8 & 0xf;
                 int j6 = i4 >> 16 & 0x7f;
-                byte byte1 = ga1.b[l4 << 11 | k5 << 7 | j6];
+                byte byte1 = chunk1.b[l4 << 11 | k5 << 7 | j6];
                 if(ly.o[byte1])
                     ly.n[byte1].a(this, l4 + k1, j6, k5 + i2, n);
                 i3++;
@@ -1610,10 +1609,10 @@ public class cn
         for(int j1 = 0; j1 < i1; j1++)
         {
             jf jf1 = (jf)B.first();
-            if(!flag && jf1.e > c)
+            if(!flag && jf1.e > time)
                 break;
-            B.remove(((java.lang.Object) (jf1)));
-            C.remove(((java.lang.Object) (jf1)));
+            B.remove(((Object) (jf1)));
+            C.remove(((Object) (jf1)));
             byte byte0 = 8;
             if(!a(jf1.a - byte0, jf1.b - byte0, jf1.c - byte0, jf1.a + byte0, jf1.b + byte0, jf1.c + byte0))
                 continue;
@@ -1697,7 +1696,7 @@ public class cn
         for(int j1 = 0; j1 < a.size(); j1++)
         {
             kh kh1 = (kh)a.get(j1);
-            if(class1.isAssignableFrom(((java.lang.Object) (kh1)).getClass()))
+            if(class1.isAssignableFrom(((Object) (kh1)).getClass()))
                 i1++;
         }
 
@@ -1719,7 +1718,7 @@ public class cn
 
     public void j()
     {
-        while(H.a()) ;
+        while(H.unloadQueuedChunks()) ;
     }
 
     public boolean a(int i1, int j1, int k1, int l1, boolean flag)
@@ -1819,27 +1818,27 @@ public class cn
         return k(i1 + 1, j1, k1, 5);
     }
 
-    public dm a(kh kh1, double d1)
+    public Player a(kh kh1, double d1)
     {
         return a(kh1.ak, kh1.al, kh1.am, d1);
     }
 
-    public dm a(double d1, double d2, double d3, double d4)
+    public Player a(double d1, double d2, double d3, double d4)
     {
         double d5 = -1D;
-        dm dm1 = null;
+        Player player1 = null;
         for(int i1 = 0; i1 < k.size(); i1++)
         {
-            dm dm2 = (dm)k.get(i1);
-            double d6 = dm2.d(d1, d2, d3);
+            Player player2 = (Player)k.get(i1);
+            double d6 = player2.d(d1, d2, d3);
             if((d4 < 0.0D || d6 < d4 * d4) && (d5 == -1D || d6 < d5))
             {
                 d5 = d6;
-                dm1 = dm2;
+                player1 = player2;
             }
         }
 
-        return dm1;
+        return player1;
     }
 
     public void a(int i1, int j1, int k1, int l1, int i2, int j2, byte abyte0[])
@@ -1907,7 +1906,7 @@ public class cn
 
     public void a(long l1)
     {
-        c = l1;
+        time = l1;
     }
 
     public void f(kh kh1)
@@ -1922,10 +1921,10 @@ public class cn
 
         }
 
-        if(!a.contains(((java.lang.Object) (kh1))))
+        if(!a.contains(((Object) (kh1))))
         {
             java.lang.System.out.println("REINSERTING PLAYER!");
-            a.add(((java.lang.Object) (kh1)));
+            a.add(((Object) (kh1)));
         }
     }
 
diff --git "a/temp\\src\\java/mb.java" "b/src\\main\\java/Zombie.java"
similarity index 68%
rename from "temp\\src\\java/mb.java"
rename to "src\\main\\java/Zombie.java"
index e6106b2..6f880e8 100644
--- "a/temp\\src\\java/mb.java"
+++ "b/src\\main\\java/Zombie.java"
@@ -1,17 +1,14 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
-public class mb extends dq
+public class Zombie extends Monster
 {
 
-    public mb(cn cn1)
+    public Zombie(World world1)
     {
-        super(cn1);
-        u = "/mob/zombie.png";
+        super(world1);
+        texture = "/mob/zombie.png";
         aa = 0.5F;
         e = 5;
     }
@@ -27,17 +24,17 @@ public class mb extends dq
         super.j();
     }
 
-    protected java.lang.String c()
+    protected String c()
     {
         return "mob.zombie";
     }
 
-    protected java.lang.String d()
+    protected String d()
     {
         return "mob.zombiehurt";
     }
 
-    protected java.lang.String e()
+    protected String e()
     {
         return "mob.zombiedeath";
     }
diff --git "a/temp\\src\\java/a.java" "b/src\\main\\java/a.java"
index 9b52b45..c0e4e9d 100644
--- "a/temp\\src\\java/a.java"
+++ "b/src\\main\\java/a.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -36,7 +35,7 @@ public class a
         return eo.c(f1 * f1 + f2 * f2 + f3 * f3);
     }
 
-    public boolean equals(java.lang.Object obj)
+    public boolean equals(Object obj)
     {
         return ((a)obj).d == d;
     }
@@ -51,7 +50,7 @@ public class a
         return e >= 0;
     }
 
-    public java.lang.String toString()
+    public String toString()
     {
         return (new StringBuilder()).append(a).append(", ").append(b).append(", ").append(c).toString();
     }
diff --git "a/temp\\src\\java/aa.java" "b/src\\main\\java/aa.java"
index 02fa717..675b12c 100644
--- "a/temp\\src\\java/aa.java"
+++ "b/src\\main\\java/aa.java"
@@ -1,11 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.awt.image.BufferedImage;
-import java.io.IOException;
-import javax.imageio.ImageIO;
 //import Minecraft;
 
 public class aa extends z
@@ -63,10 +59,10 @@ public class aa extends z
         }
 
         double d = 0.0D;
-        if(i.e != null && i.g != null)
+        if(i.world != null && i.g != null)
         {
-            double d1 = (double)i.e.o - i.g.ak;
-            double d3 = (double)i.e.q - i.g.am;
+            double d1 = (double)i.world.spawnX - i.g.ak;
+            double d3 = (double)i.world.spawnZ - i.g.am;
             d = ((double)(i.g.aq - 90F) * 3.1415926535897931D) / 180D - java.lang.Math.atan2(d3, d1);
         }
         double d2;
diff --git "a/temp\\src\\java/ab.java" "b/src\\main\\java/ab.java"
index 43c16d4..8e9bfb6 100644
--- "a/temp\\src\\java/ab.java"
+++ "b/src\\main\\java/ab.java"
@@ -1,10 +1,8 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
 import java.util.Random;
-import org.lwjgl.opengl.GL11;
 
 public class ab extends ak
 {
@@ -20,29 +18,29 @@ public class ab extends ak
         c = 0.75F;
     }
 
-    public void a(dx dx1, double d1, double d2, double d3, 
-            float f, float f1)
+    public void a(Item item1, double d1, double d2, double d3,
+                  float f, float f1)
     {
         e.setSeed(187L);
-        ev ev1 = dx1.a;
+        ev ev1 = item1.a;
         org.lwjgl.opengl.GL11.glPushMatrix();
-        float f2 = eo.a(((float)dx1.b + f1) / 10F + dx1.d) * 0.1F + 0.1F;
-        float f3 = (((float)dx1.b + f1) / 20F + dx1.d) * 57.29578F;
+        float f2 = eo.a(((float) item1.age + f1) / 10F + item1.d) * 0.1F + 0.1F;
+        float f3 = (((float) item1.age + f1) / 20F + item1.d) * 57.29578F;
         byte byte0 = 1;
-        if(dx1.a.a > 1)
+        if(item1.a.count > 1)
             byte0 = 2;
-        if(dx1.a.a > 5)
+        if(item1.a.count > 5)
             byte0 = 3;
-        if(dx1.a.a > 20)
+        if(item1.a.count > 20)
             byte0 = 4;
         org.lwjgl.opengl.GL11.glTranslatef((float)d1, (float)d2 + f2, (float)d3);
         org.lwjgl.opengl.GL11.glEnable(32826);
-        if(ev1.c < 256 && bc.a(ly.n[ev1.c].f()))
+        if(ev1.id < 256 && bc.a(ly.n[ev1.id].f()))
         {
             org.lwjgl.opengl.GL11.glRotatef(f3, 0.0F, 1.0F, 0.0F);
             a("/terrain.png");
             float f4 = 0.25F;
-            if(!ly.n[ev1.c].c() && ev1.c != ly.al.bc)
+            if(!ly.n[ev1.id].c() && ev1.id != ly.al.bc)
                 f4 = 0.5F;
             org.lwjgl.opengl.GL11.glScalef(f4, f4, f4);
             for(int j = 0; j < byte0; j++)
@@ -55,7 +53,7 @@ public class ab extends ak
                     float f9 = ((e.nextFloat() * 2.0F - 1.0F) * 0.2F) / f4;
                     org.lwjgl.opengl.GL11.glTranslatef(f5, f7, f9);
                 }
-                d.a(ly.n[ev1.c]);
+                d.a(ly.n[ev1.id]);
                 org.lwjgl.opengl.GL11.glPopMatrix();
             }
 
@@ -63,7 +61,7 @@ public class ab extends ak
         {
             org.lwjgl.opengl.GL11.glScalef(0.5F, 0.5F, 0.5F);
             int i = ev1.b();
-            if(ev1.c < 256)
+            if(ev1.id < 256)
                 a("/terrain.png");
             else
                 a("/gui/items.png");
@@ -105,9 +103,9 @@ public class ab extends ak
     {
         if(ev1 == null)
             return;
-        if(ev1.c < 256 && bc.a(ly.n[ev1.c].f()))
+        if(ev1.id < 256 && bc.a(ly.n[ev1.id].f()))
         {
-            int k = ev1.c;
+            int k = ev1.id;
             ey1.b(ey1.a("/terrain.png"));
             ly ly1 = ly.n[k];
             org.lwjgl.opengl.GL11.glPushMatrix();
@@ -124,7 +122,7 @@ public class ab extends ak
         if(ev1.b() >= 0)
         {
             org.lwjgl.opengl.GL11.glDisable(2896);
-            if(ev1.c < 256)
+            if(ev1.id < 256)
                 ey1.b(ey1.a("/terrain.png"));
             else
                 ey1.b(ey1.a("/gui/items.png"));
@@ -138,19 +136,19 @@ public class ab extends ak
     {
         if(ev1 == null)
             return;
-        if(ev1.a > 1)
+        if(ev1.count > 1)
         {
-            java.lang.String s = (new StringBuilder()).append("").append(ev1.a).toString();
+            String s = (new StringBuilder()).append("").append(ev1.count).toString();
             org.lwjgl.opengl.GL11.glDisable(2896);
             org.lwjgl.opengl.GL11.glDisable(2929);
             kd1.a(s, (i + 19) - 2 - kd1.a(s), j + 6 + 3, 0xffffff);
             org.lwjgl.opengl.GL11.glEnable(2896);
             org.lwjgl.opengl.GL11.glEnable(2929);
         }
-        if(ev1.d > 0)
+        if(ev1.damage > 0)
         {
-            int k = 13 - (ev1.d * 13) / ev1.d();
-            int l = 255 - (ev1.d * 255) / ev1.d();
+            int k = 13 - (ev1.damage * 13) / ev1.d();
+            int l = 255 - (ev1.damage * 255) / ev1.d();
             org.lwjgl.opengl.GL11.glDisable(2896);
             org.lwjgl.opengl.GL11.glDisable(2929);
             org.lwjgl.opengl.GL11.glDisable(3553);
@@ -194,6 +192,6 @@ public class ab extends ak
 
     public void a(kh kh, double d1, double d2, double d3, float f, float f1)
     {
-        a((dx)kh, d1, d2, d3, f, f1);
+        a((Item)kh, d1, d2, d3, f, f1);
     }
 }
diff --git "a/temp\\src\\java/ac.java" "b/src\\main\\java/ac.java"
index 7fc1562..bab6a4f 100644
--- "a/temp\\src\\java/ac.java"
+++ "b/src\\main\\java/ac.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -17,14 +16,14 @@ public class ac extends di
         a = j;
     }
 
-    public ev a(ev ev1, cn cn1, dm dm1)
+    public ev a(ev ev1, World world1, Player player1)
     {
         float f = 1.0F;
-        float f1 = dm1.at + (dm1.ar - dm1.at) * f;
-        float f2 = dm1.as + (dm1.aq - dm1.as) * f;
-        double d = dm1.ah + (dm1.ak - dm1.ah) * (double)f;
-        double d1 = dm1.ai + (dm1.al - dm1.ai) * (double)f;
-        double d2 = dm1.aj + (dm1.am - dm1.aj) * (double)f;
+        float f1 = player1.at + (player1.ar - player1.at) * f;
+        float f2 = player1.as + (player1.aq - player1.as) * f;
+        double d = player1.ah + (player1.ak - player1.ah) * (double)f;
+        double d1 = player1.ai + (player1.al - player1.ai) * (double)f;
+        double d2 = player1.aj + (player1.am - player1.aj) * (double)f;
         aj aj1 = ((aj)null).b(d, d1, d2);
         float f3 = eo.b(-f2 * 0.01745329F - 3.141593F);
         float f4 = eo.a(-f2 * 0.01745329F - 3.141593F);
@@ -35,7 +34,7 @@ public class ac extends di
         float f9 = f3 * f5;
         double d3 = 5D;
         aj aj2 = aj1.c((double)f7 * d3, (double)f8 * d3, (double)f9 * d3);
-        mf mf1 = cn1.a(aj1, aj2, a == 0);
+        mf mf1 = world1.a(aj1, aj2, a == 0);
         if(mf1 == null)
             return ev1;
         if(mf1.a == 0)
@@ -45,14 +44,14 @@ public class ac extends di
             int k = mf1.d;
             if(a == 0)
             {
-                if(cn1.f(i, j, k) == gb.f && cn1.e(i, j, k) == 0)
+                if(world1.f(i, j, k) == gb.f && world1.e(i, j, k) == 0)
                 {
-                    cn1.d(i, j, k, 0);
+                    world1.d(i, j, k, 0);
                     return new ev(di.av);
                 }
-                if(cn1.f(i, j, k) == gb.g && cn1.e(i, j, k) == 0)
+                if(world1.f(i, j, k) == gb.g && world1.e(i, j, k) == 0)
                 {
-                    cn1.d(i, j, k, 0);
+                    world1.d(i, j, k, 0);
                     return new ev(di.aw);
                 }
             } else
@@ -71,14 +70,14 @@ public class ac extends di
                     i--;
                 if(mf1.e == 5)
                     i++;
-                if(cn1.a(i, j, k) == 0 || !cn1.f(i, j, k).a())
+                if(world1.a(i, j, k) == 0 || !world1.f(i, j, k).a())
                 {
-                    cn1.b(i, j, k, a, 0);
+                    world1.b(i, j, k, a, 0);
                     return new ev(di.au);
                 }
             }
         } else
-        if(a == 0 && (mf1.g instanceof am))
+        if(a == 0 && (mf1.g instanceof Cow))
             return new ev(di.aE);
         return ev1;
     }
diff --git "a/temp\\src\\java/ad.java" "b/src\\main\\java/ad.java"
index 15710ff..1388378 100644
--- "a/temp\\src\\java/ad.java"
+++ "b/src\\main\\java/ad.java"
@@ -1,23 +1,9 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.awt.Canvas;
 import java.awt.Color;
-import java.awt.FontMetrics;
-import java.awt.Graphics;
-import java.awt.Graphics2D;
-import java.awt.Rectangle;
-import java.awt.RenderingHints;
-import java.awt.event.KeyEvent;
-import java.awt.event.KeyListener;
-import java.awt.event.MouseEvent;
-import java.awt.event.MouseListener;
-import java.awt.event.MouseMotionListener;
-import java.awt.image.BufferStrategy;
 import java.io.File;
-import java.util.Collections;
 import java.util.LinkedList;
 
 public class ad extends java.awt.Canvas
@@ -27,7 +13,7 @@ public class ad extends java.awt.Canvas
     private int a;
     private int b;
     private boolean c;
-    private cn d;
+    private World d;
     private java.io.File e;
     private boolean f;
     private java.util.List g;
@@ -44,9 +30,9 @@ public class ad extends java.awt.Canvas
         return e;
     }
 
-    public java.io.File a(java.lang.String s)
+    public java.io.File a(String s)
     {
-        java.lang.String s1 = java.lang.System.getProperty("user.home", ".");
+        String s1 = java.lang.System.getProperty("user.home", ".");
         java.io.File file;
         switch(ln.a[ad.e().ordinal()])
         {
@@ -56,7 +42,7 @@ public class ad extends java.awt.Canvas
             break;
 
         case 3: // '\003'
-            java.lang.String s2 = java.lang.System.getenv("APPDATA");
+            String s2 = java.lang.System.getenv("APPDATA");
             if(s2 != null)
                 file = new File(s2, (new StringBuilder()).append(".").append(s).append('/').toString());
             else
@@ -72,14 +58,14 @@ public class ad extends java.awt.Canvas
             break;
         }
         if(!file.exists() && !file.mkdirs())
-            throw new RuntimeException((new StringBuilder()).append("The working directory could not be created: ").append(((java.lang.Object) (file))).toString());
+            throw new RuntimeException((new StringBuilder()).append("The working directory could not be created: ").append(((Object) (file))).toString());
         else
             return file;
     }
 
     private static fa e()
     {
-        java.lang.String s = java.lang.System.getProperty("os.name").toLowerCase();
+        String s = java.lang.System.getProperty("os.name").toLowerCase();
         if(s.contains("win"))
             return fa.c;
         if(s.contains("mac"))
@@ -108,7 +94,7 @@ public class ad extends java.awt.Canvas
         for(int i1 = 0; i1 < 64; i1++)
         {
             for(int j1 = 0; j1 < 64; j1++)
-                h[i1][j1] = new jj(((cn) (null)), i1, j1);
+                h[i1][j1] = new jj(((World) (null)), i1, j1);
 
         }
 
@@ -120,10 +106,10 @@ public class ad extends java.awt.Canvas
         setBackground(java.awt.Color.red);
     }
 
-    public void b(java.lang.String s)
+    public void b(String s)
     {
         i = j = 0;
-        d = ((cn) (new lk(this, new File(e, "saves"), s)));
+        d = ((World) (new lk(this, new File(e, "saves"), s)));
         d.e = 0;
         synchronized(g)
         {
@@ -176,7 +162,7 @@ public class ad extends java.awt.Canvas
             return jj1;
         synchronized(g)
         {
-            g.remove(((java.lang.Object) (jj1)));
+            g.remove(((Object) (jj1)));
         }
         jj1.a(i1, j1);
         return jj1;
@@ -246,7 +232,7 @@ public class ad extends java.awt.Canvas
         graphics2d.scale(b, b);
         graphics2d.translate(i, j);
         if(d != null)
-            graphics2d.translate(-(d.o + d.q), -(-d.o + d.q) + 64);
+            graphics2d.translate(-(d.spawnX + d.spawnZ), -(-d.spawnX + d.spawnZ) + 64);
         java.awt.Rectangle rectangle = graphics2d.getClipBounds();
         graphics2d.setColor(new Color(0xff101020));
         graphics2d.fillRect(rectangle.x, rectangle.y, rectangle.width, rectangle.height);
@@ -269,7 +255,7 @@ public class ad extends java.awt.Canvas
                     if(!jj1.h)
                     {
                         jj1.h = true;
-                        g.add(((java.lang.Object) (jj1)));
+                        g.add(((Object) (jj1)));
                     }
                     continue;
                 }
@@ -291,7 +277,7 @@ public class ad extends java.awt.Canvas
             graphics2d.setColor(new Color(0x80000000, true));
             graphics2d.fillRect(4, getHeight() - 32 - 4, getWidth() - 8, 32);
             graphics2d.setColor(java.awt.Color.WHITE);
-            java.lang.String s = "F1 - F5: load levels   |   0-9: Set time of day   |   Space: return to spawn   |   Double click: zoom   |   Escape: hide this text";
+            String s = "F1 - F5: load levels   |   0-9: Set time of day   |   Space: return to spawn   |   Double click: zoom   |   Escape: hide this text";
             graphics2d.drawString(s, getWidth() / 2 - graphics2d.getFontMetrics().stringWidth(s) / 2, j2 + 20);
         }
         graphics2d.dispose();
diff --git "a/temp\\src\\java/ae.java" "b/src\\main\\java/ae.java"
index b2155e6..d0ae773 100644
--- "a/temp\\src\\java/ae.java"
+++ "b/src\\main\\java/ae.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class ae extends ik
 {
 
@@ -15,15 +12,15 @@ public class ae extends ik
         a = i;
     }
 
-    public boolean a(cn cn1, java.util.Random random, int i, int j, int k)
+    public boolean a(World world1, java.util.Random random, int i, int j, int k)
     {
         for(int l = 0; l < 64; l++)
         {
             int i1 = (i + random.nextInt(8)) - random.nextInt(8);
             int j1 = (j + random.nextInt(4)) - random.nextInt(4);
             int k1 = (k + random.nextInt(8)) - random.nextInt(8);
-            if(cn1.a(i1, j1, k1) == 0 && ((mq)ly.n[a]).g(cn1, i1, j1, k1))
-                cn1.a(i1, j1, k1, a);
+            if(world1.a(i1, j1, k1) == 0 && ((mq)ly.n[a]).g(world1, i1, j1, k1))
+                world1.a(i1, j1, k1, a);
         }
 
         return true;
diff --git "a/temp\\src\\java/af.java" "b/src\\main\\java/af.java"
index fd6c302..0f31054 100644
--- "a/temp\\src\\java/af.java"
+++ "b/src\\main\\java/af.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -8,11 +7,11 @@ import java.io.IOException;
 public interface af
 {
 
-    public abstract ga a(cn cn, int i, int j) throws IOException;
+    public abstract Chunk a(World world, int i, int j) throws IOException;
 
-    public abstract void a(cn cn, ga ga) throws IOException;
+    public abstract void a(World world, Chunk chunk) throws IOException;
 
-    public abstract void b(cn cn, ga ga);
+    public abstract void b(World world, Chunk chunk);
 
     public abstract void a();
 
diff --git "a/temp\\src\\java/ah.java" "b/src\\main\\java/ah.java"
index 8cf794b..32f5431 100644
--- "a/temp\\src\\java/ah.java"
+++ "b/src\\main\\java/ah.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -8,10 +7,10 @@ import java.net.URL;
 public class ah
 {
 
-    public java.lang.String a;
+    public String a;
     public java.net.URL b;
 
-    public ah(java.lang.String s, java.net.URL url)
+    public ah(String s, java.net.URL url)
     {
         a = s;
         b = url;
diff --git "a/temp\\src\\java/ai.java" "b/src\\main\\java/ai.java"
index f84bf6f..ae693e3 100644
--- "a/temp\\src\\java/ai.java"
+++ "b/src\\main\\java/ai.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class ai extends ly
 {
 
@@ -23,35 +20,35 @@ public class ai extends ly
         return 30;
     }
 
-    public void b(cn cn1, int j, int k, int l, dm dm)
+    public void b(World world1, int j, int k, int l, Player player)
     {
-        h(cn1, j, k, l);
-        super.b(cn1, j, k, l, dm);
+        h(world1, j, k, l);
+        super.b(world1, j, k, l, player);
     }
 
-    public void a(cn cn1, int j, int k, int l, kh kh)
+    public void a(World world1, int j, int k, int l, kh kh)
     {
-        h(cn1, j, k, l);
-        super.a(cn1, j, k, l, kh);
+        h(world1, j, k, l);
+        super.a(world1, j, k, l, kh);
     }
 
-    public boolean a(cn cn1, int j, int k, int l, dm dm)
+    public boolean a(World world1, int j, int k, int l, Player player)
     {
-        h(cn1, j, k, l);
-        return super.a(cn1, j, k, l, dm);
+        h(world1, j, k, l);
+        return super.a(world1, j, k, l, player);
     }
 
-    private void h(cn cn1, int j, int k, int l)
+    private void h(World world1, int j, int k, int l)
     {
-        i(cn1, j, k, l);
+        i(world1, j, k, l);
         if(bc == ly.aO.bc)
-            cn1.d(j, k, l, ly.aP.bc);
+            world1.d(j, k, l, ly.aP.bc);
     }
 
-    public void a(cn cn1, int j, int k, int l, java.util.Random random)
+    public void a(World world1, int j, int k, int l, java.util.Random random)
     {
         if(bc == ly.aP.bc)
-            cn1.d(j, k, l, ly.aO.bc);
+            world1.d(j, k, l, ly.aO.bc);
     }
 
     public int a(int j, java.util.Random random)
@@ -64,35 +61,35 @@ public class ai extends ly
         return 4 + random.nextInt(2);
     }
 
-    public void b(cn cn1, int j, int k, int l, java.util.Random random)
+    public void b(World world1, int j, int k, int l, java.util.Random random)
     {
         if(a)
-            i(cn1, j, k, l);
+            i(world1, j, k, l);
     }
 
-    private void i(cn cn1, int j, int k, int l)
+    private void i(World world1, int j, int k, int l)
     {
-        java.util.Random random = cn1.n;
+        java.util.Random random = world1.n;
         double d = 0.0625D;
         for(int i1 = 0; i1 < 6; i1++)
         {
             double d1 = (float)j + random.nextFloat();
             double d2 = (float)k + random.nextFloat();
             double d3 = (float)l + random.nextFloat();
-            if(i1 == 0 && !cn1.g(j, k + 1, l))
+            if(i1 == 0 && !world1.g(j, k + 1, l))
                 d2 = (double)(k + 1) + d;
-            if(i1 == 1 && !cn1.g(j, k - 1, l))
+            if(i1 == 1 && !world1.g(j, k - 1, l))
                 d2 = (double)(k + 0) - d;
-            if(i1 == 2 && !cn1.g(j, k, l + 1))
+            if(i1 == 2 && !world1.g(j, k, l + 1))
                 d3 = (double)(l + 1) + d;
-            if(i1 == 3 && !cn1.g(j, k, l - 1))
+            if(i1 == 3 && !world1.g(j, k, l - 1))
                 d3 = (double)(l + 0) - d;
-            if(i1 == 4 && !cn1.g(j + 1, k, l))
+            if(i1 == 4 && !world1.g(j + 1, k, l))
                 d1 = (double)(j + 1) + d;
-            if(i1 == 5 && !cn1.g(j - 1, k, l))
+            if(i1 == 5 && !world1.g(j - 1, k, l))
                 d1 = (double)(j + 0) - d;
             if(d1 < (double)j || d1 > (double)(j + 1) || d2 < 0.0D || d2 > (double)(k + 1) || d3 < (double)l || d3 > (double)(l + 1))
-                cn1.a("reddust", d1, d2, d3, 0.0D, 0.0D, 0.0D);
+                world1.a("reddust", d1, d2, d3, 0.0D, 0.0D, 0.0D);
         }
 
     }
diff --git "a/temp\\src\\java/aj.java" "b/src\\main\\java/aj.java"
index c61a5ea..500a0cf 100644
--- "a/temp\\src\\java/aj.java"
+++ "b/src\\main\\java/aj.java"
@@ -1,10 +1,8 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
 import java.util.ArrayList;
-import java.util.List;
 
 public class aj
 {
@@ -28,7 +26,7 @@ public class aj
     public static aj b(double d1, double d2, double d3)
     {
         if(e >= d.size())
-            d.add(((java.lang.Object) (aj.a(0.0D, 0.0D, 0.0D))));
+            d.add(((Object) (aj.a(0.0D, 0.0D, 0.0D))));
         return ((aj)d.get(e++)).e(d1, d2, d3);
     }
 
@@ -148,7 +146,7 @@ public class aj
             return aj.b(a + d2 * d5, b + d3 * d5, c + d4 * d5);
     }
 
-    public java.lang.String toString()
+    public String toString()
     {
         return (new StringBuilder()).append("(").append(a).append(", ").append(b).append(", ").append(c).append(")").toString();
     }
diff --git "a/temp\\src\\java/ak.java" "b/src\\main\\java/ak.java"
index 2ed199c..572a7c8 100644
--- "a/temp\\src\\java/ak.java"
+++ "b/src\\main\\java/ak.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import org.lwjgl.opengl.GL11;
-
 public abstract class ak
 {
 
@@ -25,13 +22,13 @@ public abstract class ak
     public abstract void a(kh kh1, double d1, double d2, double d3, 
             float f, float f1);
 
-    protected void a(java.lang.String s)
+    protected void a(String s)
     {
         ey ey1 = a.e;
         ey1.b(ey1.a(s));
     }
 
-    protected void a(java.lang.String s, java.lang.String s1)
+    protected void a(String s, String s1)
     {
         ey ey1 = a.e;
         ey1.b(ey1.a(s, s1));
@@ -85,7 +82,7 @@ public abstract class ak
         org.lwjgl.opengl.GL11.glBlendFunc(770, 771);
         ey ey1 = a.e;
         ey1.b(ey1.a("%%/shadow.png"));
-        cn cn1 = b();
+        World world1 = b();
         org.lwjgl.opengl.GL11.glDepthMask(false);
         float f2 = b;
         double d4 = kh1.aI + (kh1.ak - kh1.aI) * (double)f1;
@@ -108,8 +105,8 @@ public abstract class ak
             {
                 for(int i2 = i1; i2 <= j1; i2++)
                 {
-                    int j2 = cn1.a(k1, l1 - 1, i2);
-                    if(j2 > 0 && cn1.j(k1, l1, i2) > 3)
+                    int j2 = world1.a(k1, l1 - 1, i2);
+                    if(j2 > 0 && world1.j(k1, l1, i2) > 3)
                         a(ly.n[j2], d1, d2 + (double)kh1.h_(), d3, k1, l1, i2, f, f2, d7, d8 + (double)kh1.h_(), d9);
                 }
 
@@ -123,7 +120,7 @@ public abstract class ak
         org.lwjgl.opengl.GL11.glDepthMask(true);
     }
 
-    private cn b()
+    private World b()
     {
         return a.g;
     }
diff --git "a/temp\\src\\java/al.java" "b/src\\main\\java/al.java"
index 2016f1c..ee46022 100644
--- "a/temp\\src\\java/al.java"
+++ "b/src\\main\\java/al.java"
@@ -1,11 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.List;
-import java.util.Random;
-
 public class al extends ly
 {
 
@@ -25,7 +21,7 @@ public class al extends ly
         return 20;
     }
 
-    public cf d(cn cn1, int i, int j, int k)
+    public cf d(World world1, int i, int j, int k)
     {
         return null;
     }
@@ -40,94 +36,94 @@ public class al extends ly
         return false;
     }
 
-    public boolean a(cn cn1, int i, int j, int k)
+    public boolean a(World world1, int i, int j, int k)
     {
-        return cn1.g(i, j - 1, k);
+        return world1.g(i, j - 1, k);
     }
 
-    public void e(cn cn1, int i, int j, int k)
+    public void e(World world1, int i, int j, int k)
     {
     }
 
-    public void a(cn cn1, int i, int j, int k, int l)
+    public void a(World world1, int i, int j, int k, int l)
     {
         boolean flag = false;
-        if(!cn1.g(i, j - 1, k))
+        if(!world1.g(i, j - 1, k))
             flag = true;
         if(flag)
         {
-            b_(cn1, i, j, k, cn1.e(i, j, k));
-            cn1.d(i, j, k, 0);
+            b_(world1, i, j, k, world1.e(i, j, k));
+            world1.d(i, j, k, 0);
         }
     }
 
-    public void a(cn cn1, int i, int j, int k, java.util.Random random)
+    public void a(World world1, int i, int j, int k, java.util.Random random)
     {
-        if(cn1.e(i, j, k) == 0)
+        if(world1.e(i, j, k) == 0)
         {
             return;
         } else
         {
-            h(cn1, i, j, k);
+            h(world1, i, j, k);
             return;
         }
     }
 
-    public void b(cn cn1, int i, int j, int k, kh kh)
+    public void b(World world1, int i, int j, int k, kh kh)
     {
-        if(cn1.e(i, j, k) == 1)
+        if(world1.e(i, j, k) == 1)
         {
             return;
         } else
         {
-            h(cn1, i, j, k);
+            h(world1, i, j, k);
             return;
         }
     }
 
-    private void h(cn cn1, int i, int j, int k)
+    private void h(World world1, int i, int j, int k)
     {
-        boolean flag = cn1.e(i, j, k) == 1;
+        boolean flag = world1.e(i, j, k) == 1;
         boolean flag1 = false;
         float f = 0.125F;
         java.util.List list = null;
         if(a == js.a)
-            list = cn1.b(((kh) (null)), cf.b((float)i + f, j, (float)k + f, (float)(i + 1) - f, (double)j + 0.25D, (float)(k + 1) - f));
+            list = world1.b(((kh) (null)), cf.b((float)i + f, j, (float)k + f, (float)(i + 1) - f, (double)j + 0.25D, (float)(k + 1) - f));
         if(a == js.b)
-            list = cn1.a(ge.class, cf.b((float)i + f, j, (float)k + f, (float)(i + 1) - f, (double)j + 0.25D, (float)(k + 1) - f));
+            list = world1.a(Mob.class, cf.b((float)i + f, j, (float)k + f, (float)(i + 1) - f, (double)j + 0.25D, (float)(k + 1) - f));
         if(a == js.c)
-            list = cn1.a(dm.class, cf.b((float)i + f, j, (float)k + f, (float)(i + 1) - f, (double)j + 0.25D, (float)(k + 1) - f));
+            list = world1.a(Player.class, cf.b((float)i + f, j, (float)k + f, (float)(i + 1) - f, (double)j + 0.25D, (float)(k + 1) - f));
         if(list.size() > 0)
             flag1 = true;
         if(flag1 && !flag)
         {
-            cn1.b(i, j, k, 1);
-            cn1.g(i, j, k, bc);
-            cn1.g(i, j - 1, k, bc);
-            cn1.b(i, j, k, i, j, k);
-            cn1.a((double)i + 0.5D, (double)j + 0.10000000000000001D, (double)k + 0.5D, "random.click", 0.3F, 0.6F);
+            world1.b(i, j, k, 1);
+            world1.g(i, j, k, bc);
+            world1.g(i, j - 1, k, bc);
+            world1.b(i, j, k, i, j, k);
+            world1.a((double)i + 0.5D, (double)j + 0.10000000000000001D, (double)k + 0.5D, "random.click", 0.3F, 0.6F);
         }
         if(!flag1 && flag)
         {
-            cn1.b(i, j, k, 0);
-            cn1.g(i, j, k, bc);
-            cn1.g(i, j - 1, k, bc);
-            cn1.b(i, j, k, i, j, k);
-            cn1.a((double)i + 0.5D, (double)j + 0.10000000000000001D, (double)k + 0.5D, "random.click", 0.3F, 0.5F);
+            world1.b(i, j, k, 0);
+            world1.g(i, j, k, bc);
+            world1.g(i, j - 1, k, bc);
+            world1.b(i, j, k, i, j, k);
+            world1.a((double)i + 0.5D, (double)j + 0.10000000000000001D, (double)k + 0.5D, "random.click", 0.3F, 0.5F);
         }
         if(flag1)
-            cn1.h(i, j, k, bc);
+            world1.h(i, j, k, bc);
     }
 
-    public void b(cn cn1, int i, int j, int k)
+    public void b(World world1, int i, int j, int k)
     {
-        int l = cn1.e(i, j, k);
+        int l = world1.e(i, j, k);
         if(l > 0)
         {
-            cn1.g(i, j, k, bc);
-            cn1.g(i, j - 1, k, bc);
+            world1.g(i, j, k, bc);
+            world1.g(i, j - 1, k, bc);
         }
-        super.b(cn1, i, j, k);
+        super.b(world1, i, j, k);
     }
 
     public void a(nm nm1, int i, int j, int k)
@@ -145,9 +141,9 @@ public class al extends ly
         return nm1.e(i, j, k) > 0;
     }
 
-    public boolean c(cn cn1, int i, int j, int k, int l)
+    public boolean c(World world1, int i, int j, int k, int l)
     {
-        if(cn1.e(i, j, k) == 0)
+        if(world1.e(i, j, k) == 0)
             return false;
         else
             return l == 1;
diff --git "a/temp\\src\\java/an.java" "b/src\\main\\java/an.java"
index b8ad8cc..3701c9a 100644
--- "a/temp\\src\\java/an.java"
+++ "b/src\\main\\java/an.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/ap.java" "b/src\\main\\java/ap.java"
index 094899d..f419155 100644
--- "a/temp\\src\\java/ap.java"
+++ "b/src\\main\\java/ap.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -12,9 +11,9 @@ public class ap extends oj
         super(i, j);
     }
 
-    public ev a(ev ev1, cn cn, dm dm)
+    public ev a(ev ev1, World world, Player player)
     {
-        super.a(ev1, cn, dm);
+        super.a(ev1, world, player);
         return new ev(di.C);
     }
 }
diff --git "a/temp\\src\\java/aq.java" "b/src\\main\\java/aq.java"
index 9def1a3..243c127 100644
--- "a/temp\\src\\java/aq.java"
+++ "b/src\\main\\java/aq.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -6,14 +5,11 @@
 import java.awt.BorderLayout;
 import java.awt.Color;
 import java.awt.Font;
-import java.awt.Panel;
 import java.awt.TextArea;
 import java.io.PrintWriter;
 import java.io.StringWriter;
 import java.text.SimpleDateFormat;
 import java.util.Date;
-import org.lwjgl.Sys;
-import org.lwjgl.opengl.GL11;
 
 public class aq extends java.awt.Panel
 {
@@ -24,9 +20,9 @@ public class aq extends java.awt.Panel
         setLayout(((java.awt.LayoutManager) (new BorderLayout())));
         java.io.StringWriter stringwriter = new StringWriter();
         go1.b.printStackTrace(new PrintWriter(((java.io.Writer) (stringwriter))));
-        java.lang.String s = stringwriter.toString();
-        java.lang.String s1 = "";
-        java.lang.String s2 = "";
+        String s = stringwriter.toString();
+        String s1 = "";
+        String s2 = "";
         try
         {
             s2 = (new StringBuilder()).append(s2).append("Generated ").append((new SimpleDateFormat()).format(new Date())).append("\n").toString();
@@ -41,11 +37,11 @@ public class aq extends java.awt.Panel
         }
         catch(java.lang.Throwable throwable)
         {
-            s2 = (new StringBuilder()).append(s2).append("[failed to get system properties (").append(((java.lang.Object) (throwable))).append(")]\n").toString();
+            s2 = (new StringBuilder()).append(s2).append("[failed to get system properties (").append(((Object) (throwable))).append(")]\n").toString();
         }
         s2 = (new StringBuilder()).append(s2).append("\n").toString();
         s2 = (new StringBuilder()).append(s2).append(s).toString();
-        java.lang.String s3 = "";
+        String s3 = "";
         s3 = (new StringBuilder()).append(s3).append("\n").toString();
         s3 = (new StringBuilder()).append(s3).append("\n").toString();
         if(s.contains("Pixel format not accelerated"))
diff --git "a/temp\\src\\java/ar.java" "b/src\\main\\java/ar.java"
index b36f2bc..9267fb9 100644
--- "a/temp\\src\\java/ar.java"
+++ "b/src\\main\\java/ar.java"
@@ -1,10 +1,8 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
 import java.util.ArrayList;
-import java.util.List;
 
 public class ar
 {
@@ -16,11 +14,11 @@ public class ar
         c = ((java.util.List) (new ArrayList()));
     }
 
-    public void a(dm dm1)
+    public void a(Player player1)
     {
-        eu eu1 = dm1.b;
+        eu eu1 = player1.b;
         if(eu1.e != null)
-            dm1.a(eu1.e);
+            player1.a(eu1.e);
     }
 
     public void a(gh gh)
diff --git "a/temp\\src\\java/as.java" "b/src\\main\\java/as.java"
index 4786d1e..dac70be 100644
--- "a/temp\\src\\java/as.java"
+++ "b/src\\main\\java/as.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -7,8 +6,8 @@
 public class as extends bh
 {
 
-    private java.lang.String a;
-    private java.lang.String h;
+    private String a;
+    private String h;
 
     public void a()
     {
diff --git "a/temp\\src\\java/at.java" "b/src\\main\\java/at.java"
index a99823e..7bc3e5c 100644
--- "a/temp\\src\\java/at.java"
+++ "b/src\\main\\java/at.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/au.java" "b/src\\main\\java/au.java"
index df92094..b4ca448 100644
--- "a/temp\\src\\java/au.java"
+++ "b/src\\main\\java/au.java"
@@ -1,11 +1,9 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.List;
 //import Minecraft;
-import org.lwjgl.opengl.GL11;
+
 
 public class au extends bh
 {
@@ -17,8 +15,8 @@ public class au extends bh
     public void a()
     {
         e.clear();
-        e.add(((java.lang.Object) (new fk(1, c / 2 - 100, d / 4 + 72, "Respawn"))));
-        e.add(((java.lang.Object) (new fk(2, c / 2 - 100, d / 4 + 96, "Title menu"))));
+        e.add(((Object) (new fk(1, c / 2 - 100, d / 4 + 72, "Respawn"))));
+        e.add(((Object) (new fk(2, c / 2 - 100, d / 4 + 96, "Title menu"))));
         if(b.i == null)
             ((fk)e.get(1)).g = false;
     }
@@ -37,7 +35,7 @@ public class au extends bh
         }
         if(fk1.f == 2)
         {
-            b.a(((cn) (null)));
+            b.a(((World) (null)));
             b.a(((bh) (new cx())));
         }
     }
diff --git "a/temp\\src\\java/av.java" "b/src\\main\\java/av.java"
index beac989..b88a0f7 100644
--- "a/temp\\src\\java/av.java"
+++ "b/src\\main\\java/av.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -16,9 +15,9 @@ public class av extends di
         a(ly.n[i + 256].a(2));
     }
 
-    public boolean a(ev ev1, dm dm, cn cn1, int i, int j, int k, int l)
+    public boolean a(ev ev1, Player player, World world1, int i, int j, int k, int l)
     {
-        if(cn1.a(i, j, k) == ly.aT.bc)
+        if(world1.a(i, j, k) == ly.aT.bc)
         {
             l = 0;
         } else
@@ -36,16 +35,16 @@ public class av extends di
             if(l == 5)
                 i++;
         }
-        if(ev1.a == 0)
+        if(ev1.count == 0)
             return false;
-        if(cn1.a(a, i, j, k, false))
+        if(world1.a(a, i, j, k, false))
         {
             ly ly1 = ly.n[a];
-            if(cn1.d(i, j, k, a))
+            if(world1.d(i, j, k, a))
             {
-                ly.n[a].d(cn1, i, j, k, l);
-                cn1.a((float)i + 0.5F, (float)j + 0.5F, (float)k + 0.5F, ly1.bl.d(), (ly1.bl.b() + 1.0F) / 2.0F, ly1.bl.c() * 0.8F);
-                ev1.a--;
+                ly.n[a].d(world1, i, j, k, l);
+                world1.a((float)i + 0.5F, (float)j + 0.5F, (float)k + 0.5F, ly1.bl.d(), (ly1.bl.b() + 1.0F) / 2.0F, ly1.bl.c() * 0.8F);
+                ev1.count--;
             }
         }
         return true;
diff --git "a/temp\\src\\java/aw.java" "b/temp\\src\\java/aw.java"
deleted file mode 100644
index 785bca4..0000000
--- "a/temp\\src\\java/aw.java"
+++ /dev/null
@@ -1,21 +0,0 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
-// Jad home page: http://www.kpdus.com/jad.html
-// Decompiler options: fullnames deadcode fieldsfirst safe 
-// Source File Name:   SourceFile
-
-
-public interface aw
-{
-
-    public abstract boolean a(int i, int j);
-
-    public abstract ga b(int i, int j);
-
-    public abstract void a(aw aw1, int i, int j);
-
-    public abstract boolean a(boolean flag, nu nu);
-
-    public abstract boolean a();
-
-    public abstract boolean b();
-}
diff --git "a/temp\\src\\java/ay.java" "b/src\\main\\java/ay.java"
index 232a900..f3b2ad3 100644
--- "a/temp\\src\\java/ay.java"
+++ "b/src\\main\\java/ay.java"
@@ -1,16 +1,14 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.List;
 //import Minecraft;
 
 public class ay extends bh
 {
 
     private bh h;
-    protected java.lang.String a;
+    protected String a;
     private fr i;
 
     public ay(bh bh1, fr fr1)
@@ -26,13 +24,13 @@ public class ay extends bh
         {
             int k = i.b(j);
             if(k == 0)
-                e.add(((java.lang.Object) (new o(j, (c / 2 - 155) + (j % 2) * 160, d / 6 + 24 * (j >> 1), i.d(j)))));
+                e.add(((Object) (new o(j, (c / 2 - 155) + (j % 2) * 160, d / 6 + 24 * (j >> 1), i.d(j)))));
             else
-                e.add(((java.lang.Object) (new mo(j, (c / 2 - 155) + (j % 2) * 160, d / 6 + 24 * (j >> 1), j, i.d(j), i.c(j)))));
+                e.add(((Object) (new mo(j, (c / 2 - 155) + (j % 2) * 160, d / 6 + 24 * (j >> 1), j, i.d(j), i.c(j)))));
         }
 
-        e.add(((java.lang.Object) (new fk(100, c / 2 - 100, d / 6 + 120 + 12, "Controls..."))));
-        e.add(((java.lang.Object) (new fk(200, c / 2 - 100, d / 6 + 168, "Done"))));
+        e.add(((Object) (new fk(100, c / 2 - 100, d / 6 + 120 + 12, "Controls..."))));
+        e.add(((Object) (new fk(200, c / 2 - 100, d / 6 + 168, "Done"))));
     }
 
     protected void a(fk fk1)
diff --git "a/temp\\src\\java/az.java" "b/src\\main\\java/az.java"
index 0d3a012..e10e536 100644
--- "a/temp\\src\\java/az.java"
+++ "b/src\\main\\java/az.java"
@@ -1,14 +1,8 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.lang.reflect.Constructor;
 import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Random;
-import java.util.Set;
 
 public class az
 {
@@ -26,38 +20,38 @@ public class az
         c = aclass;
     }
 
-    public void a(cn cn1)
+    public void a(World world1)
     {
-        int i = cn1.b(b);
+        int i = world1.b(b);
         if(i < a)
         {
             for(int j = 0; j < 3; j++)
-                a(cn1, 1, ((nu) (null)));
+                a(world1, 1, ((IProgressUpdate) (null)));
 
         }
     }
 
-    protected mt a(cn cn1, int i, int j)
+    protected mt a(World world1, int i, int j)
     {
-        int k = i + cn1.n.nextInt(16);
-        int l = cn1.n.nextInt(128);
-        int i1 = j + cn1.n.nextInt(16);
+        int k = i + world1.n.nextInt(16);
+        int l = world1.n.nextInt(128);
+        int i1 = j + world1.n.nextInt(16);
         return new mt(k, l, i1);
     }
 
-    private int a(cn cn1, int i, nu nu)
+    private int a(World world1, int i, IProgressUpdate iProgressUpdate)
     {
         d.clear();
-        for(int j = 0; j < cn1.k.size(); j++)
+        for(int j = 0; j < world1.k.size(); j++)
         {
-            dm dm1 = (dm)cn1.k.get(j);
-            int l = eo.b(dm1.ak / 16D);
-            int i1 = eo.b(dm1.am / 16D);
+            Player player1 = (Player) world1.k.get(j);
+            int l = eo.b(player1.ak / 16D);
+            int i1 = eo.b(player1.am / 16D);
             byte byte0 = 4;
             for(int k1 = -byte0; k1 <= byte0; k1++)
             {
                 for(int i2 = -byte0; i2 <= byte0; i2++)
-                    d.add(((java.lang.Object) (new ol(k1 + l, i2 + i1))));
+                    d.add(((Object) (new ol(k1 + l, i2 + i1))));
 
             }
 
@@ -70,16 +64,16 @@ public class az
             if(!iterator.hasNext())
                 break;
             ol ol1 = (ol)iterator.next();
-            if(cn1.n.nextInt(10) == 0)
+            if(world1.n.nextInt(10) == 0)
             {
-                int j1 = cn1.n.nextInt(c.length);
-                mt mt1 = a(cn1, ol1.a * 16, ol1.b * 16);
+                int j1 = world1.n.nextInt(c.length);
+                mt mt1 = a(world1, ol1.a * 16, ol1.b * 16);
                 int l1 = mt1.a;
                 int j2 = mt1.b;
                 int k2 = mt1.c;
-                if(cn1.g(l1, j2, k2))
+                if(world1.g(l1, j2, k2))
                     return 0;
-                if(cn1.f(l1, j2, k2) != gb.a)
+                if(world1.f(l1, j2, k2) != gb.a)
                     return 0;
                 int l2 = 0;
                 while(l2 < 3) 
@@ -90,29 +84,29 @@ public class az
                     byte byte1 = 6;
                     for(int l3 = 0; l3 < 2; l3++)
                     {
-                        i3 += cn1.n.nextInt(((int) (byte1))) - cn1.n.nextInt(((int) (byte1)));
-                        j3 += cn1.n.nextInt(1) - cn1.n.nextInt(1);
-                        k3 += cn1.n.nextInt(((int) (byte1))) - cn1.n.nextInt(((int) (byte1)));
-                        if(!cn1.g(i3, j3 - 1, k3) || cn1.g(i3, j3, k3) || cn1.f(i3, j3, k3).d() || cn1.g(i3, j3 + 1, k3))
+                        i3 += world1.n.nextInt(((int) (byte1))) - world1.n.nextInt(((int) (byte1)));
+                        j3 += world1.n.nextInt(1) - world1.n.nextInt(1);
+                        k3 += world1.n.nextInt(((int) (byte1))) - world1.n.nextInt(((int) (byte1)));
+                        if(!world1.g(i3, j3 - 1, k3) || world1.g(i3, j3, k3) || world1.f(i3, j3, k3).d() || world1.g(i3, j3 + 1, k3))
                             continue;
                         float f = (float)i3 + 0.5F;
                         float f1 = j3;
                         float f2 = (float)k3 + 0.5F;
-                        if(cn1.a(f, f1, f2, 24D) != null)
+                        if(world1.a(f, f1, f2, 24D) != null)
                             continue;
-                        float f3 = f - (float)cn1.o;
-                        float f4 = f1 - (float)cn1.p;
-                        float f5 = f2 - (float)cn1.q;
+                        float f3 = f - (float) world1.spawnX;
+                        float f4 = f1 - (float) world1.spawnY;
+                        float f5 = f2 - (float) world1.spawnZ;
                         float f6 = f3 * f3 + f4 * f4 + f5 * f5;
                         if(f6 < 576F)
                             continue;
-                        ge ge1;
+                        Mob mob1;
                         try
                         {
-                            ge1 = (ge)c[j1].getConstructor(new java.lang.Class[] {
-                                cn.class
-                            }).newInstance(new java.lang.Object[] {
-                                cn1
+                            mob1 = (Mob)c[j1].getConstructor(new java.lang.Class[] {
+                                World.class
+                            }).newInstance(new Object[] {
+                                    world1
                             });
                         }
                         catch(java.lang.Exception exception)
@@ -120,17 +114,17 @@ public class az
                             exception.printStackTrace();
                             return k;
                         }
-                        ge1.c(f, f1, f2, cn1.n.nextFloat() * 360F, 0.0F);
-                        if(!ge1.a())
+                        mob1.c(f, f1, f2, world1.n.nextFloat() * 360F, 0.0F);
+                        if(!mob1.a())
                             continue;
                         k++;
-                        cn1.a(((kh) (ge1)));
-                        if((ge1 instanceof ax) && cn1.n.nextInt(100) == 0)
+                        world1.a(((kh) (mob1)));
+                        if((mob1 instanceof Spider) && world1.n.nextInt(100) == 0)
                         {
-                            cw cw1 = new cw(cn1);
-                            cw1.c(f, f1, f2, ge1.aq, 0.0F);
-                            cn1.a(((kh) (cw1)));
-                            cw1.g(((kh) (ge1)));
+                            Skeleton skeleton1 = new Skeleton(world1);
+                            skeleton1.c(f, f1, f2, mob1.aq, 0.0F);
+                            world1.a(((kh) (skeleton1)));
+                            skeleton1.g(((kh) (mob1)));
                         }
                     }
 
diff --git "a/temp\\src\\java/b.java" "b/src\\main\\java/b.java"
index 4722a47..1161a45 100644
--- "a/temp\\src\\java/b.java"
+++ "b/src\\main\\java/b.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -87,48 +86,48 @@ public class b extends jt
             return bb;
     }
 
-    public boolean a(cn cn1, int i, int j, int k)
+    public boolean a(World world1, int i, int j, int k)
     {
         int l = 0;
-        if(cn1.a(i - 1, j, k) == bc)
+        if(world1.a(i - 1, j, k) == bc)
             l++;
-        if(cn1.a(i + 1, j, k) == bc)
+        if(world1.a(i + 1, j, k) == bc)
             l++;
-        if(cn1.a(i, j, k - 1) == bc)
+        if(world1.a(i, j, k - 1) == bc)
             l++;
-        if(cn1.a(i, j, k + 1) == bc)
+        if(world1.a(i, j, k + 1) == bc)
             l++;
         if(l > 1)
             return false;
-        if(h(cn1, i - 1, j, k))
+        if(h(world1, i - 1, j, k))
             return false;
-        if(h(cn1, i + 1, j, k))
+        if(h(world1, i + 1, j, k))
             return false;
-        if(h(cn1, i, j, k - 1))
+        if(h(world1, i, j, k - 1))
             return false;
-        return !h(cn1, i, j, k + 1);
+        return !h(world1, i, j, k + 1);
     }
 
-    private boolean h(cn cn1, int i, int j, int k)
+    private boolean h(World world1, int i, int j, int k)
     {
-        if(cn1.a(i, j, k) != bc)
+        if(world1.a(i, j, k) != bc)
             return false;
-        if(cn1.a(i - 1, j, k) == bc)
+        if(world1.a(i - 1, j, k) == bc)
             return true;
-        if(cn1.a(i + 1, j, k) == bc)
+        if(world1.a(i + 1, j, k) == bc)
             return true;
-        if(cn1.a(i, j, k - 1) == bc)
+        if(world1.a(i, j, k - 1) == bc)
             return true;
-        return cn1.a(i, j, k + 1) == bc;
+        return world1.a(i, j, k + 1) == bc;
     }
 
-    public void b(cn cn1, int i, int j, int k)
+    public void b(World world1, int i, int j, int k)
     {
-        fe fe1 = (fe)cn1.b(i, j, k);
+        Chest chest1 = (Chest) world1.b(i, j, k);
 label0:
-        for(int l = 0; l < ((gh) (fe1)).c(); l++)
+        for(int l = 0; l < ((gh) (chest1)).c(); l++)
         {
-            ev ev1 = ((gh) (fe1)).c(l);
+            ev ev1 = ((gh) (chest1)).c(l);
             if(ev1 == null)
                 continue;
             float f = a.nextFloat() * 0.8F + 0.1F;
@@ -136,51 +135,51 @@ label0:
             float f2 = a.nextFloat() * 0.8F + 0.1F;
             do
             {
-                if(ev1.a <= 0)
+                if(ev1.count <= 0)
                     continue label0;
                 int i1 = a.nextInt(21) + 10;
-                if(i1 > ev1.a)
-                    i1 = ev1.a;
-                ev1.a -= i1;
-                dx dx1 = new dx(cn1, (float)i + f, (float)j + f1, (float)k + f2, new ev(ev1.c, i1, ev1.d));
+                if(i1 > ev1.count)
+                    i1 = ev1.count;
+                ev1.count -= i1;
+                Item item1 = new Item(world1, (float)i + f, (float)j + f1, (float)k + f2, new ev(ev1.id, i1, ev1.damage));
                 float f3 = 0.05F;
-                dx1.an = (float)a.nextGaussian() * f3;
-                dx1.ao = (float)a.nextGaussian() * f3 + 0.2F;
-                dx1.ap = (float)a.nextGaussian() * f3;
-                cn1.a(((kh) (dx1)));
+                item1.an = (float)a.nextGaussian() * f3;
+                item1.ao = (float)a.nextGaussian() * f3 + 0.2F;
+                item1.ap = (float)a.nextGaussian() * f3;
+                world1.a(((kh) (item1)));
             } while(true);
         }
 
-        super.b(cn1, i, j, k);
+        super.b(world1, i, j, k);
     }
 
-    public boolean a(cn cn1, int i, int j, int k, dm dm1)
+    public boolean a(World world1, int i, int j, int k, Player player1)
     {
-        java.lang.Object obj = ((java.lang.Object) ((fe)cn1.b(i, j, k)));
-        if(cn1.g(i, j + 1, k))
+        Object obj = ((Object) ((Chest) world1.b(i, j, k)));
+        if(world1.g(i, j + 1, k))
             return true;
-        if(cn1.a(i - 1, j, k) == bc && cn1.g(i - 1, j + 1, k))
+        if(world1.a(i - 1, j, k) == bc && world1.g(i - 1, j + 1, k))
             return true;
-        if(cn1.a(i + 1, j, k) == bc && cn1.g(i + 1, j + 1, k))
+        if(world1.a(i + 1, j, k) == bc && world1.g(i + 1, j + 1, k))
             return true;
-        if(cn1.a(i, j, k - 1) == bc && cn1.g(i, j + 1, k - 1))
+        if(world1.a(i, j, k - 1) == bc && world1.g(i, j + 1, k - 1))
             return true;
-        if(cn1.a(i, j, k + 1) == bc && cn1.g(i, j + 1, k + 1))
+        if(world1.a(i, j, k + 1) == bc && world1.g(i, j + 1, k + 1))
             return true;
-        if(cn1.a(i - 1, j, k) == bc)
-            obj = ((java.lang.Object) (new hs("Large chest", ((gh) ((fe)cn1.b(i - 1, j, k))), ((gh) (obj)))));
-        if(cn1.a(i + 1, j, k) == bc)
-            obj = ((java.lang.Object) (new hs("Large chest", ((gh) (obj)), ((gh) ((fe)cn1.b(i + 1, j, k))))));
-        if(cn1.a(i, j, k - 1) == bc)
-            obj = ((java.lang.Object) (new hs("Large chest", ((gh) ((fe)cn1.b(i, j, k - 1))), ((gh) (obj)))));
-        if(cn1.a(i, j, k + 1) == bc)
-            obj = ((java.lang.Object) (new hs("Large chest", ((gh) (obj)), ((gh) ((fe)cn1.b(i, j, k + 1))))));
-        dm1.a(((gh) (obj)));
+        if(world1.a(i - 1, j, k) == bc)
+            obj = ((Object) (new hs("Large chest", ((gh) ((Chest) world1.b(i - 1, j, k))), ((gh) (obj)))));
+        if(world1.a(i + 1, j, k) == bc)
+            obj = ((Object) (new hs("Large chest", ((gh) (obj)), ((gh) ((Chest) world1.b(i + 1, j, k))))));
+        if(world1.a(i, j, k - 1) == bc)
+            obj = ((Object) (new hs("Large chest", ((gh) ((Chest) world1.b(i, j, k - 1))), ((gh) (obj)))));
+        if(world1.a(i, j, k + 1) == bc)
+            obj = ((Object) (new hs("Large chest", ((gh) (obj)), ((gh) ((Chest) world1.b(i, j, k + 1))))));
+        player1.a(((gh) (obj)));
         return true;
     }
 
     protected ic a_()
     {
-        return ((ic) (new fe()));
+        return ((ic) (new Chest()));
     }
 }
diff --git "a/temp\\src\\java/ba.java" "b/src\\main\\java/ba.java"
index 273a813..c9d9439 100644
--- "a/temp\\src\\java/ba.java"
+++ "b/src\\main\\java/ba.java"
@@ -1,17 +1,14 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class ba extends nq
 {
 
-    public ba(cn cn1, double d, double d1, double d2, 
-            double d3, double d4, double d5)
+    public ba(World world1, double d, double d1, double d2,
+              double d3, double d4, double d5)
     {
-        super(cn1, d, d1, d2, d3, d4, d5);
+        super(world1, d, d1, d2, d3, d4, d5);
         i = 1.0F;
         j = 1.0F;
         k = 1.0F;
diff --git "a/temp\\src\\java/bb.java" "b/src\\main\\java/bb.java"
index 8bd83a6..4de5050 100644
--- "a/temp\\src\\java/bb.java"
+++ "b/src\\main\\java/bb.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -7,11 +6,11 @@
 public class bb
 {
 
-    public final java.lang.String a;
+    public final String a;
     public final float b;
     public final float c;
 
-    public bb(java.lang.String s, float f, float f1)
+    public bb(String s, float f, float f1)
     {
         a = s;
         b = f;
@@ -28,12 +27,12 @@ public class bb
         return c;
     }
 
-    public java.lang.String a()
+    public String a()
     {
         return (new StringBuilder()).append("step.").append(a).toString();
     }
 
-    public java.lang.String d()
+    public String d()
     {
         return (new StringBuilder()).append("step.").append(a).toString();
     }
diff --git "a/temp\\src\\java/bc.java" "b/src\\main\\java/bc.java"
index 2b8a844..e25bfee 100644
--- "a/temp\\src\\java/bc.java"
+++ "b/src\\main\\java/bc.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import org.lwjgl.opengl.GL11;
-
 public class bc
 {
 
@@ -1019,7 +1016,7 @@ public class bc
         return 1.0F - f1 / (float)l1;
     }
 
-    public void a(ly ly1, cn cn, int i1, int j1, int k1)
+    public void a(ly ly1, World world, int i1, int j1, int k1)
     {
         float f1 = 0.5F;
         float f2 = 1.0F;
@@ -1027,33 +1024,33 @@ public class bc
         float f4 = 0.6F;
         ho ho1 = ho.a;
         ho1.b();
-        float f5 = ly1.c(((nm) (cn)), i1, j1, k1);
-        float f6 = ly1.c(((nm) (cn)), i1, j1 - 1, k1);
+        float f5 = ly1.c(((nm) (world)), i1, j1, k1);
+        float f6 = ly1.c(((nm) (world)), i1, j1 - 1, k1);
         if(f6 < f5)
             f6 = f5;
         ho1.a(f1 * f6, f1 * f6, f1 * f6);
         a(ly1, -0.5D, -0.5D, -0.5D, ly1.a(0));
-        f6 = ly1.c(((nm) (cn)), i1, j1 + 1, k1);
+        f6 = ly1.c(((nm) (world)), i1, j1 + 1, k1);
         if(f6 < f5)
             f6 = f5;
         ho1.a(f2 * f6, f2 * f6, f2 * f6);
         b(ly1, -0.5D, -0.5D, -0.5D, ly1.a(1));
-        f6 = ly1.c(((nm) (cn)), i1, j1, k1 - 1);
+        f6 = ly1.c(((nm) (world)), i1, j1, k1 - 1);
         if(f6 < f5)
             f6 = f5;
         ho1.a(f3 * f6, f3 * f6, f3 * f6);
         c(ly1, -0.5D, -0.5D, -0.5D, ly1.a(2));
-        f6 = ly1.c(((nm) (cn)), i1, j1, k1 + 1);
+        f6 = ly1.c(((nm) (world)), i1, j1, k1 + 1);
         if(f6 < f5)
             f6 = f5;
         ho1.a(f3 * f6, f3 * f6, f3 * f6);
         d(ly1, -0.5D, -0.5D, -0.5D, ly1.a(3));
-        f6 = ly1.c(((nm) (cn)), i1 - 1, j1, k1);
+        f6 = ly1.c(((nm) (world)), i1 - 1, j1, k1);
         if(f6 < f5)
             f6 = f5;
         ho1.a(f4 * f6, f4 * f6, f4 * f6);
         e(ly1, -0.5D, -0.5D, -0.5D, ly1.a(4));
-        f6 = ly1.c(((nm) (cn)), i1 + 1, j1, k1);
+        f6 = ly1.c(((nm) (world)), i1 + 1, j1, k1);
         if(f6 < f5)
             f6 = f5;
         ho1.a(f4 * f6, f4 * f6, f4 * f6);
diff --git "a/temp\\src\\java/bd.java" "b/temp\\src\\java/bd.java"
deleted file mode 100644
index c3cfc69..0000000
--- "a/temp\\src\\java/bd.java"
+++ /dev/null
@@ -1,108 +0,0 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
-// Jad home page: http://www.kpdus.com/jad.html
-// Decompiler options: fullnames deadcode fieldsfirst safe 
-// Source File Name:   SourceFile
-
-import java.util.List;
-import java.util.Random;
-
-public class bd extends ic
-{
-
-    public int a;
-    public java.lang.String b;
-    public double c;
-    public double d;
-
-    public bd()
-    {
-        a = -1;
-        d = 0.0D;
-        b = "Pig";
-        a = 20;
-    }
-
-    public boolean a()
-    {
-        return e.a((double)f + 0.5D, (double)g + 0.5D, (double)h + 0.5D, 16D) != null;
-    }
-
-    public void b()
-    {
-        d = c;
-        if(!a())
-            return;
-        double d1 = (float)f + e.n.nextFloat();
-        double d3 = (float)g + e.n.nextFloat();
-        double d5 = (float)h + e.n.nextFloat();
-        e.a("smoke", d1, d3, d5, 0.0D, 0.0D, 0.0D);
-        e.a("flame", d1, d3, d5, 0.0D, 0.0D, 0.0D);
-        for(c += 1000F / ((float)a + 200F); c > 360D;)
-        {
-            c -= 360D;
-            d -= 360D;
-        }
-
-        if(a == -1)
-            c();
-        if(a > 0)
-        {
-            a--;
-            return;
-        }
-        byte byte0 = 4;
-        for(int i = 0; i < byte0; i++)
-        {
-            ge ge1 = (ge)(ge)ew.a(b, e);
-            if(ge1 == null)
-                return;
-            int j = e.a(((java.lang.Object) (ge1)).getClass(), cf.b(f, g, h, f + 1, g + 1, h + 1).b(8D, 4D, 8D)).size();
-            if(j >= 6)
-            {
-                c();
-                return;
-            }
-            if(ge1 == null)
-                continue;
-            double d7 = (double)f + (e.n.nextDouble() - e.n.nextDouble()) * 4D;
-            double d8 = (g + e.n.nextInt(3)) - 1;
-            double d9 = (double)h + (e.n.nextDouble() - e.n.nextDouble()) * 4D;
-            ge1.c(d7, d8, d9, e.n.nextFloat() * 360F, 0.0F);
-            if(!ge1.a())
-                continue;
-            e.a(((kh) (ge1)));
-            for(int k = 0; k < 20; k++)
-            {
-                double d2 = (double)f + 0.5D + ((double)e.n.nextFloat() - 0.5D) * 2D;
-                double d4 = (double)g + 0.5D + ((double)e.n.nextFloat() - 0.5D) * 2D;
-                double d6 = (double)h + 0.5D + ((double)e.n.nextFloat() - 0.5D) * 2D;
-                e.a("smoke", d2, d4, d6, 0.0D, 0.0D, 0.0D);
-                e.a("flame", d2, d4, d6, 0.0D, 0.0D, 0.0D);
-            }
-
-            ge1.z();
-            c();
-        }
-
-        super.b();
-    }
-
-    private void c()
-    {
-        a = 200 + e.n.nextInt(600);
-    }
-
-    public void a(hm hm1)
-    {
-        super.a(hm1);
-        b = hm1.i("EntityId");
-        a = ((int) (hm1.d("Delay")));
-    }
-
-    public void b(hm hm1)
-    {
-        super.b(hm1);
-        hm1.a("EntityId", b);
-        hm1.a("Delay", (short)a);
-    }
-}
diff --git "a/temp\\src\\java/be.java" "b/src\\main\\java/be.java"
index 1834d48..289dd29 100644
--- "a/temp\\src\\java/be.java"
+++ "b/src\\main\\java/be.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/bf.java" "b/src\\main\\java/bf.java"
index 127d1f5..77bdf26 100644
--- "a/temp\\src\\java/bf.java"
+++ "b/src\\main\\java/bf.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -8,15 +7,9 @@ import java.io.DataOutputStream;
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
-import java.io.PrintStream;
 import java.net.URL;
-import javax.xml.parsers.DocumentBuilder;
-import javax.xml.parsers.DocumentBuilderFactory;
 //import Minecraft;
-import org.w3c.dom.Document;
-import org.w3c.dom.Element;
-import org.w3c.dom.Node;
-import org.w3c.dom.NodeList;
+
 
 public class bf extends java.lang.Thread
 {
@@ -33,7 +26,7 @@ public class bf extends java.lang.Thread
         setDaemon(true);
         a = new File(file, "resources/");
         if(!a.exists() && !a.mkdirs())
-            throw new RuntimeException((new StringBuilder()).append("The working directory could not be created: ").append(((java.lang.Object) (a))).toString());
+            throw new RuntimeException((new StringBuilder()).append("The working directory could not be created: ").append(((Object) (a))).toString());
         else
             return;
     }
@@ -55,7 +48,7 @@ public class bf extends java.lang.Thread
         if(node.getNodeType() == 1)
         {
             org.w3c.dom.Element element = (org.w3c.dom.Element)node;
-            java.lang.String s = ((org.w3c.dom.Element)element.getElementsByTagName("Key").item(0)).getChildNodes().item(0).getNodeValue();
+            String s = ((org.w3c.dom.Element)element.getElementsByTagName("Key").item(0)).getChildNodes().item(0).getNodeValue();
             long l = java.lang.Long.parseLong(((org.w3c.dom.Element)element.getElementsByTagName("Size").item(0)).getChildNodes().item(0).getNodeValue());
             if(l > 0L)
             {
@@ -78,7 +71,7 @@ public class bf extends java.lang.Thread
         a(a, "");
     }
 
-    private void a(java.io.File file, java.lang.String s)
+    private void a(java.io.File file, String s)
     {
         java.io.File afile[] = file.listFiles();
         for(int i = 0; i < afile.length; i++)
@@ -100,12 +93,12 @@ public class bf extends java.lang.Thread
 
     }
 
-    private void a(java.net.URL url, java.lang.String s, long l, int i)
+    private void a(java.net.URL url, String s, long l, int i)
     {
         try
         {
         int j = s.indexOf("/");
-        java.lang.String s1 = s.substring(0, j);
+        String s1 = s.substring(0, j);
         if(s1.equals("sound") || s1.equals("newsound"))
         {
             if(i != 0)
@@ -118,7 +111,7 @@ public class bf extends java.lang.Thread
         if(!file.exists() || file.length() != l)
         {
             file.getParentFile().mkdirs();
-            java.lang.String s2 = s.replaceAll(" ", "%20");
+            String s2 = s.replaceAll(" ", "%20");
             a(new URL(url, s2), file, l);
             if(c)
                 return;
diff --git "a/temp\\src\\java/bg.java" "b/src\\main\\java/bg.java"
index e989872..e3cbee4 100644
--- "a/temp\\src\\java/bg.java"
+++ "b/src\\main\\java/bg.java"
@@ -1,11 +1,8 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
 import java.util.ArrayList;
-import java.util.List;
-import java.util.Random;
 
 public class bg extends mj
 {
@@ -21,10 +18,10 @@ public class bg extends mj
             return super.a(i, j);
     }
 
-    private boolean a(cn cn1, int i, int j, int k, boolean flag)
+    private boolean a(World world1, int i, int j, int k, boolean flag)
     {
         if(flag)
-            b.add(((java.lang.Object) (new np(i, j, k, cn1.c))));
+            b.add(((Object) (new np(i, j, k, world1.time))));
         int l = 0;
         for(int i1 = 0; i1 < b.size(); i1++)
         {
@@ -49,31 +46,31 @@ public class bg extends mj
         return 2;
     }
 
-    public void e(cn cn1, int i, int j, int k)
+    public void e(World world1, int i, int j, int k)
     {
-        if(cn1.e(i, j, k) == 0)
-            super.e(cn1, i, j, k);
+        if(world1.e(i, j, k) == 0)
+            super.e(world1, i, j, k);
         if(a)
         {
-            cn1.g(i, j - 1, k, bc);
-            cn1.g(i, j + 1, k, bc);
-            cn1.g(i - 1, j, k, bc);
-            cn1.g(i + 1, j, k, bc);
-            cn1.g(i, j, k - 1, bc);
-            cn1.g(i, j, k + 1, bc);
+            world1.g(i, j - 1, k, bc);
+            world1.g(i, j + 1, k, bc);
+            world1.g(i - 1, j, k, bc);
+            world1.g(i + 1, j, k, bc);
+            world1.g(i, j, k - 1, bc);
+            world1.g(i, j, k + 1, bc);
         }
     }
 
-    public void b(cn cn1, int i, int j, int k)
+    public void b(World world1, int i, int j, int k)
     {
         if(a)
         {
-            cn1.g(i, j - 1, k, bc);
-            cn1.g(i, j + 1, k, bc);
-            cn1.g(i - 1, j, k, bc);
-            cn1.g(i + 1, j, k, bc);
-            cn1.g(i, j, k - 1, bc);
-            cn1.g(i, j, k + 1, bc);
+            world1.g(i, j - 1, k, bc);
+            world1.g(i, j + 1, k, bc);
+            world1.g(i - 1, j, k, bc);
+            world1.g(i + 1, j, k, bc);
+            world1.g(i, j, k - 1, bc);
+            world1.g(i, j, k + 1, bc);
         }
     }
 
@@ -93,57 +90,57 @@ public class bg extends mj
         return i1 != 2 || l != 4;
     }
 
-    private boolean h(cn cn1, int i, int j, int k)
+    private boolean h(World world1, int i, int j, int k)
     {
-        int l = cn1.e(i, j, k);
-        if(l == 5 && cn1.k(i, j - 1, k, 0))
+        int l = world1.e(i, j, k);
+        if(l == 5 && world1.k(i, j - 1, k, 0))
             return true;
-        if(l == 3 && cn1.k(i, j, k - 1, 2))
+        if(l == 3 && world1.k(i, j, k - 1, 2))
             return true;
-        if(l == 4 && cn1.k(i, j, k + 1, 3))
+        if(l == 4 && world1.k(i, j, k + 1, 3))
             return true;
-        if(l == 1 && cn1.k(i - 1, j, k, 4))
+        if(l == 1 && world1.k(i - 1, j, k, 4))
             return true;
-        return l == 2 && cn1.k(i + 1, j, k, 5);
+        return l == 2 && world1.k(i + 1, j, k, 5);
     }
 
-    public void a(cn cn1, int i, int j, int k, java.util.Random random)
+    public void a(World world1, int i, int j, int k, java.util.Random random)
     {
-        boolean flag = h(cn1, i, j, k);
-        for(; b.size() > 0 && cn1.c - ((np)b.get(0)).d > 100L; b.remove(0));
+        boolean flag = h(world1, i, j, k);
+        for(; b.size() > 0 && world1.time - ((np)b.get(0)).d > 100L; b.remove(0));
         if(a)
         {
             if(flag)
             {
-                cn1.b(i, j, k, ly.aQ.bc, cn1.e(i, j, k));
-                if(a(cn1, i, j, k, true))
+                world1.b(i, j, k, ly.aQ.bc, world1.e(i, j, k));
+                if(a(world1, i, j, k, true))
                 {
-                    cn1.a((float)i + 0.5F, (float)j + 0.5F, (float)k + 0.5F, "random.fizz", 0.5F, 2.6F + (cn1.n.nextFloat() - cn1.n.nextFloat()) * 0.8F);
+                    world1.a((float)i + 0.5F, (float)j + 0.5F, (float)k + 0.5F, "random.fizz", 0.5F, 2.6F + (world1.n.nextFloat() - world1.n.nextFloat()) * 0.8F);
                     for(int l = 0; l < 5; l++)
                     {
                         double d1 = (double)i + random.nextDouble() * 0.59999999999999998D + 0.20000000000000001D;
                         double d2 = (double)j + random.nextDouble() * 0.59999999999999998D + 0.20000000000000001D;
                         double d3 = (double)k + random.nextDouble() * 0.59999999999999998D + 0.20000000000000001D;
-                        cn1.a("smoke", d1, d2, d3, 0.0D, 0.0D, 0.0D);
+                        world1.a("smoke", d1, d2, d3, 0.0D, 0.0D, 0.0D);
                     }
 
                 }
             }
         } else
-        if(!flag && !a(cn1, i, j, k, false))
-            cn1.b(i, j, k, ly.aR.bc, cn1.e(i, j, k));
+        if(!flag && !a(world1, i, j, k, false))
+            world1.b(i, j, k, ly.aR.bc, world1.e(i, j, k));
     }
 
-    public void a(cn cn1, int i, int j, int k, int l)
+    public void a(World world1, int i, int j, int k, int l)
     {
-        super.a(cn1, i, j, k, l);
-        cn1.h(i, j, k, bc);
+        super.a(world1, i, j, k, l);
+        world1.h(i, j, k, bc);
     }
 
-    public boolean c(cn cn1, int i, int j, int k, int l)
+    public boolean c(World world1, int i, int j, int k, int l)
     {
         if(l == 0)
-            return b(((nm) (cn1)), i, j, k, l);
+            return b(((nm) (world1)), i, j, k, l);
         else
             return false;
     }
@@ -158,29 +155,29 @@ public class bg extends mj
         return true;
     }
 
-    public void b(cn cn1, int i, int j, int k, java.util.Random random)
+    public void b(World world1, int i, int j, int k, java.util.Random random)
     {
         if(!a)
             return;
-        int l = cn1.e(i, j, k);
+        int l = world1.e(i, j, k);
         double d1 = (double)((float)i + 0.5F) + (double)(random.nextFloat() - 0.5F) * 0.20000000000000001D;
         double d2 = (double)((float)j + 0.7F) + (double)(random.nextFloat() - 0.5F) * 0.20000000000000001D;
         double d3 = (double)((float)k + 0.5F) + (double)(random.nextFloat() - 0.5F) * 0.20000000000000001D;
         double d4 = 0.2199999988079071D;
         double d5 = 0.27000001072883606D;
         if(l == 1)
-            cn1.a("reddust", d1 - d5, d2 + d4, d3, 0.0D, 0.0D, 0.0D);
+            world1.a("reddust", d1 - d5, d2 + d4, d3, 0.0D, 0.0D, 0.0D);
         else
         if(l == 2)
-            cn1.a("reddust", d1 + d5, d2 + d4, d3, 0.0D, 0.0D, 0.0D);
+            world1.a("reddust", d1 + d5, d2 + d4, d3, 0.0D, 0.0D, 0.0D);
         else
         if(l == 3)
-            cn1.a("reddust", d1, d2 + d4, d3 - d5, 0.0D, 0.0D, 0.0D);
+            world1.a("reddust", d1, d2 + d4, d3 - d5, 0.0D, 0.0D, 0.0D);
         else
         if(l == 4)
-            cn1.a("reddust", d1, d2 + d4, d3 + d5, 0.0D, 0.0D, 0.0D);
+            world1.a("reddust", d1, d2 + d4, d3 + d5, 0.0D, 0.0D, 0.0D);
         else
-            cn1.a("reddust", d1, d2, d3, 0.0D, 0.0D, 0.0D);
+            world1.a("reddust", d1, d2, d3, 0.0D, 0.0D, 0.0D);
     }
 
 }
diff --git "a/temp\\src\\java/bh.java" "b/src\\main\\java/bh.java"
index 93107a1..54075cd 100644
--- "a/temp\\src\\java/bh.java"
+++ "b/src\\main\\java/bh.java"
@@ -1,17 +1,10 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.awt.Toolkit;
-import java.awt.datatransfer.Clipboard;
-import java.awt.datatransfer.DataFlavor;
-import java.awt.datatransfer.Transferable;
 import java.util.ArrayList;
 //import Minecraft;
-import org.lwjgl.input.Keyboard;
-import org.lwjgl.input.Mouse;
-import org.lwjgl.opengl.GL11;
+
 
 public class bh extends lm
 {
@@ -50,14 +43,14 @@ public class bh extends lm
         }
     }
 
-    public static java.lang.String c()
+    public static String c()
     {
         try
         {
-            java.awt.datatransfer.Transferable transferable = java.awt.Toolkit.getDefaultToolkit().getSystemClipboard().getContents(((java.lang.Object) (null)));
+            java.awt.datatransfer.Transferable transferable = java.awt.Toolkit.getDefaultToolkit().getSystemClipboard().getContents(((Object) (null)));
             if(transferable != null && transferable.isDataFlavorSupported(java.awt.datatransfer.DataFlavor.stringFlavor))
             {
-                java.lang.String s = (java.lang.String)transferable.getTransferData(java.awt.datatransfer.DataFlavor.stringFlavor);
+                String s = (String)transferable.getTransferData(java.awt.datatransfer.DataFlavor.stringFlavor);
                 return s;
             }
         }
@@ -158,7 +151,7 @@ public class bh extends lm
 
     public void a(int j)
     {
-        if(b.e != null)
+        if(b.world != null)
             a(0, 0, c, d, 0xc0101010, 0xd0101010);
         else
             b(j);
diff --git "a/temp\\src\\java/bi.java" "b/src\\main\\java/bi.java"
index 6c0cb09..ec718e3 100644
--- "a/temp\\src\\java/bi.java"
+++ "b/src\\main\\java/bi.java"
@@ -1,20 +1,18 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.PrintStream;
 //import Minecraft;
 
-public class bi extends dm
+public class bi extends Player
 {
 
     public lv a;
     private Minecraft bg;
 
-    public bi(Minecraft minecraft, cn cn, dl dl1)
+    public bi(Minecraft minecraft, World world, dl dl1)
     {
-        super(cn);
+        super(world);
         bg = minecraft;
         if(dl1 != null && dl1.b != null && dl1.b.length() > 0)
         {
@@ -34,7 +32,7 @@ public class bi extends dm
 
     public void j()
     {
-        a.a(((dm) (this)));
+        a.a(((Player) (this)));
         if(a.e && aL < 0.2F)
             aL = 0.2F;
         super.j();
@@ -50,16 +48,16 @@ public class bi extends dm
         a.a(i, flag);
     }
 
-    public void a(hm hm1)
+    public void a(TagCompound tagCompound1)
     {
-        super.a(hm1);
-        hm1.a("Score", d);
+        super.a(tagCompound1);
+        tagCompound1.set("Score", score);
     }
 
-    public void b(hm hm1)
+    public void b(TagCompound tagCompound1)
     {
-        super.b(hm1);
-        d = hm1.e("Score");
+        super.b(tagCompound1);
+        score = tagCompound1.getInt("Score");
     }
 
     public void a(gh gh)
@@ -67,9 +65,9 @@ public class bi extends dm
         bg.a(((bh) (new ea(((gh) (b)), gh))));
     }
 
-    public void a(ob ob)
+    public void a(Sign sign)
     {
-        bg.a(((bh) (new nv(ob))));
+        bg.a(((bh) (new nv(sign))));
     }
 
     public void l()
@@ -77,9 +75,9 @@ public class bi extends dm
         bg.a(((bh) (new hx(b))));
     }
 
-    public void a(ke ke)
+    public void a(Furnace furnace)
     {
-        bg.a(((bh) (new id(b, ke))));
+        bg.a(((bh) (new id(b, furnace))));
     }
 
     public void a(kh kh1)
@@ -89,12 +87,12 @@ public class bi extends dm
         {
             kh1.a(((kh) (this)), i);
             ev ev1 = t();
-            if(ev1 != null && (kh1 instanceof ge))
+            if(ev1 != null && (kh1 instanceof Mob))
             {
-                ev1.a((ge)kh1);
-                if(ev1.a <= 0)
+                ev1.a((Mob)kh1);
+                if(ev1.count <= 0)
                 {
-                    ev1.a(((dm) (this)));
+                    ev1.a(((Player) (this)));
                     u();
                 }
             }
@@ -103,7 +101,7 @@ public class bi extends dm
 
     public void a_(kh kh1, int i)
     {
-        bg.h.a(((nq) (new cd(bg.e, kh1, ((kh) (this)), -0.5F))));
+        bg.h.a(((nq) (new cd(bg.world, kh1, ((kh) (this)), -0.5F))));
     }
 
     public int m()
@@ -113,21 +111,21 @@ public class bi extends dm
 
     public void a_(kh kh1)
     {
-        if(kh1.a(((dm) (this))))
+        if(kh1.a(((Player) (this))))
             return;
         ev ev1 = t();
-        if(ev1 != null && (kh1 instanceof ge))
+        if(ev1 != null && (kh1 instanceof Mob))
         {
-            ev1.b((ge)kh1);
-            if(ev1.a <= 0)
+            ev1.b((Mob)kh1);
+            if(ev1.count <= 0)
             {
-                ev1.a(((dm) (this)));
+                ev1.a(((Player) (this)));
                 u();
             }
         }
     }
 
-    public void a(java.lang.String s)
+    public void a(String s)
     {
     }
 
diff --git "a/temp\\src\\java/bj.java" "b/src\\main\\java/bj.java"
index e668476..9e80559 100644
--- "a/temp\\src\\java/bj.java"
+++ "b/src\\main\\java/bj.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class bj extends jt
 {
 
@@ -15,7 +12,7 @@ public class bj extends jt
 
     protected ic a_()
     {
-        return ((ic) (new bd()));
+        return ((ic) (new MobSpawner()));
     }
 
     public int a(int i, java.util.Random random)
diff --git "a/temp\\src\\java/bk.java" "b/src\\main\\java/bk.java"
index 7af6c89..1eacc1a 100644
--- "a/temp\\src\\java/bk.java"
+++ "b/src\\main\\java/bk.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/bl.java" "b/src\\main\\java/bl.java"
index 0ba8354..0b85820 100644
--- "a/temp\\src\\java/bl.java"
+++ "b/src\\main\\java/bl.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/bm.java" "b/src\\main\\java/bm.java"
index b21de3b..76d6553 100644
--- "a/temp\\src\\java/bm.java"
+++ "b/src\\main\\java/bm.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
 import java.io.IOException;
 
 public class bm extends fn
diff --git "a/temp\\src\\java/bn.java" "b/src\\main\\java/bn.java"
index 1192a9a..9f58c6b 100644
--- "a/temp\\src\\java/bn.java"
+++ "b/src\\main\\java/bn.java"
@@ -1,18 +1,14 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
 import java.util.ArrayList;
 import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
-import org.lwjgl.opengl.GL11;
 
 public class bn
 {
 
-    public cn a;
+    public World a;
     private int C;
     private static ho D;
     public static int b = 0;
@@ -45,7 +41,7 @@ public class bn
     public java.util.List B;
     private java.util.List F;
 
-    public bn(cn cn, java.util.List list, int i1, int j1, int k1, int l1, int i2)
+    public bn(World world, java.util.List list, int i1, int j1, int k1, int l1, int i2)
     {
         C = -1;
         o = false;
@@ -53,7 +49,7 @@ public class bn
         x = true;
         E = false;
         B = ((java.util.List) (new ArrayList()));
-        a = cn;
+        a = world;
         F = list;
         f = g = h = l1;
         t = eo.c(f * f + g * g + h * h) / 2.0F;
@@ -112,7 +108,7 @@ public class bn
         for(int k2 = 0; k2 < 2; k2++)
             p[k2] = true;
 
-        ga.a = false;
+        Chunk.a = false;
         java.util.HashSet hashset = new HashSet();
         ((java.util.Set) (hashset)).addAll(((java.util.Collection) (B)));
         B.clear();
@@ -153,7 +149,7 @@ public class bn
                         {
                             ic ic = ((nm) (ci1)).b(l3, j3, k3);
                             if(fz.a.a(ic))
-                                B.add(((java.lang.Object) (ic)));
+                                B.add(((Object) (ic)));
                         }
                         ly ly1 = ly.n[i4];
                         int j4 = ly1.g();
@@ -192,7 +188,7 @@ public class bn
         F.addAll(((java.util.Collection) (hashset1)));
         ((java.util.Set) (hashset)).removeAll(((java.util.Collection) (B)));
         F.removeAll(((java.util.Collection) (hashset)));
-        A = ga.a;
+        A = Chunk.a;
         E = true;
     }
 
diff --git "a/temp\\src\\java/bo.java" "b/temp\\src\\java/bo.java"
deleted file mode 100644
index 0810a46..0000000
--- "a/temp\\src\\java/bo.java"
+++ /dev/null
@@ -1,65 +0,0 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
-// Jad home page: http://www.kpdus.com/jad.html
-// Decompiler options: fullnames deadcode fieldsfirst safe 
-// Source File Name:   SourceFile
-
-import java.util.Random;
-
-public class bo extends ag
-{
-
-    public boolean a;
-
-    public bo(cn cn)
-    {
-        super(cn);
-        a = false;
-        u = "/mob/sheep.png";
-        a(0.9F, 1.3F);
-    }
-
-    public boolean a(kh kh, int i)
-    {
-        if(!a && (kh instanceof ge))
-        {
-            a = true;
-            int j = 1 + aQ.nextInt(3);
-            for(int k = 0; k < j; k++)
-            {
-                dx dx1 = a(ly.ac.bc, 1, 1.0F);
-                dx1.ao += aQ.nextFloat() * 0.05F;
-                dx1.an += (aQ.nextFloat() - aQ.nextFloat()) * 0.1F;
-                dx1.ap += (aQ.nextFloat() - aQ.nextFloat()) * 0.1F;
-            }
-
-        }
-        return super.a(kh, i);
-    }
-
-    public void a(hm hm1)
-    {
-        super.a(hm1);
-        hm1.a("Sheared", a);
-    }
-
-    public void b(hm hm1)
-    {
-        super.b(hm1);
-        a = hm1.m("Sheared");
-    }
-
-    protected java.lang.String c()
-    {
-        return "mob.sheep";
-    }
-
-    protected java.lang.String d()
-    {
-        return "mob.sheep";
-    }
-
-    protected java.lang.String e()
-    {
-        return "mob.sheep";
-    }
-}
diff --git "a/temp\\src\\java/bp.java" "b/src\\main\\java/bp.java"
index 7eb4fd6..505d6b1 100644
--- "a/temp\\src\\java/bp.java"
+++ "b/src\\main\\java/bp.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class bp extends di
 {
 
@@ -14,11 +11,11 @@ public class bp extends di
         aT = 16;
     }
 
-    public ev a(ev ev1, cn cn1, dm dm)
+    public ev a(ev ev1, World world1, Player player)
     {
-        ev1.a--;
-        cn1.a(((kh) (dm)), "random.bow", 0.5F, 0.4F / (b.nextFloat() * 0.4F + 0.8F));
-        cn1.a(((kh) (new ao(cn1, ((ge) (dm))))));
+        ev1.count--;
+        world1.a(((kh) (player)), "random.bow", 0.5F, 0.4F / (b.nextFloat() * 0.4F + 0.8F));
+        world1.a(((kh) (new Snowball(world1, ((Mob) (player))))));
         return ev1;
     }
 }
diff --git "a/temp\\src\\java/bq.java" "b/src\\main\\java/bq.java"
index 0a9e780..923d233 100644
--- "a/temp\\src\\java/bq.java"
+++ "b/src\\main\\java/bq.java"
@@ -1,27 +1,24 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
 import java.util.ArrayList;
-import java.util.List;
 import java.util.Random;
-import org.lwjgl.opengl.GL11;
 
 public class bq
 {
 
-    protected cn a;
+    protected World a;
     private java.util.List b[];
     private ey c;
     private java.util.Random d;
 
-    public bq(cn cn1, ey ey1)
+    public bq(World world1, ey ey1)
     {
         b = new java.util.List[4];
         d = new Random();
-        if(cn1 != null)
-            a = cn1;
+        if(world1 != null)
+            a = world1;
         c = ey1;
         for(int i = 0; i < 4; i++)
             b[i] = ((java.util.List) (new ArrayList()));
@@ -31,7 +28,7 @@ public class bq
     public void a(nq nq1)
     {
         int i = nq1.c();
-        b[i].add(((java.lang.Object) (nq1)));
+        b[i].add(((Object) (nq1)));
     }
 
     public void a()
@@ -99,9 +96,9 @@ public class bq
 
     }
 
-    public void a(cn cn1)
+    public void a(World world1)
     {
-        a = cn1;
+        a = world1;
         for(int i = 0; i < 4; i++)
             b[i].clear();
 
@@ -157,7 +154,7 @@ public class bq
         a((new iw(a, d1, d2, d3, 0.0D, 0.0D, 0.0D, ly1)).b(0.2F).d(0.6F));
     }
 
-    public java.lang.String b()
+    public String b()
     {
         return (new StringBuilder()).append("").append(b[0].size() + b[1].size() + b[2].size()).toString();
     }
diff --git "a/temp\\src\\java/br.java" "b/src\\main\\java/br.java"
index a0a4d1c..035ad1b 100644
--- "a/temp\\src\\java/br.java"
+++ "b/src\\main\\java/br.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class br extends ly
 {
 
@@ -13,9 +10,9 @@ public class br extends ly
         super(i, j, gb.n);
     }
 
-    public cf d(cn cn1, int i, int j, int k)
+    public cf d(World world1, int i, int j, int k)
     {
-        int l = cn1.e(i, j, k);
+        int l = world1.e(i, j, k);
         float f1 = 0.125F;
         if(l == 2)
             a(0.0F, 0.0F, 1.0F - f1, 1.0F, 1.0F, 1.0F);
@@ -25,12 +22,12 @@ public class br extends ly
             a(1.0F - f1, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
         if(l == 5)
             a(0.0F, 0.0F, 0.0F, f1, 1.0F, 1.0F);
-        return super.d(cn1, i, j, k);
+        return super.d(world1, i, j, k);
     }
 
-    public cf f(cn cn1, int i, int j, int k)
+    public cf f(World world1, int i, int j, int k)
     {
-        int l = cn1.e(i, j, k);
+        int l = world1.e(i, j, k);
         float f1 = 0.125F;
         if(l == 2)
             a(0.0F, 0.0F, 1.0F - f1, 1.0F, 1.0F, 1.0F);
@@ -40,7 +37,7 @@ public class br extends ly
             a(1.0F - f1, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
         if(l == 5)
             a(0.0F, 0.0F, 0.0F, f1, 1.0F, 1.0F);
-        return super.f(cn1, i, j, k);
+        return super.f(world1, i, j, k);
     }
 
     public boolean b()
@@ -58,49 +55,49 @@ public class br extends ly
         return 8;
     }
 
-    public boolean a(cn cn1, int i, int j, int k)
+    public boolean a(World world1, int i, int j, int k)
     {
-        if(cn1.g(i - 1, j, k))
+        if(world1.g(i - 1, j, k))
             return true;
-        if(cn1.g(i + 1, j, k))
+        if(world1.g(i + 1, j, k))
             return true;
-        if(cn1.g(i, j, k - 1))
+        if(world1.g(i, j, k - 1))
             return true;
-        return cn1.g(i, j, k + 1);
+        return world1.g(i, j, k + 1);
     }
 
-    public void d(cn cn1, int i, int j, int k, int l)
+    public void d(World world1, int i, int j, int k, int l)
     {
-        int i1 = cn1.e(i, j, k);
-        if((i1 == 0 || l == 2) && cn1.g(i, j, k + 1))
+        int i1 = world1.e(i, j, k);
+        if((i1 == 0 || l == 2) && world1.g(i, j, k + 1))
             i1 = 2;
-        if((i1 == 0 || l == 3) && cn1.g(i, j, k - 1))
+        if((i1 == 0 || l == 3) && world1.g(i, j, k - 1))
             i1 = 3;
-        if((i1 == 0 || l == 4) && cn1.g(i + 1, j, k))
+        if((i1 == 0 || l == 4) && world1.g(i + 1, j, k))
             i1 = 4;
-        if((i1 == 0 || l == 5) && cn1.g(i - 1, j, k))
+        if((i1 == 0 || l == 5) && world1.g(i - 1, j, k))
             i1 = 5;
-        cn1.b(i, j, k, i1);
+        world1.b(i, j, k, i1);
     }
 
-    public void a(cn cn1, int i, int j, int k, int l)
+    public void a(World world1, int i, int j, int k, int l)
     {
-        int i1 = cn1.e(i, j, k);
+        int i1 = world1.e(i, j, k);
         boolean flag = false;
-        if(i1 == 2 && cn1.g(i, j, k + 1))
+        if(i1 == 2 && world1.g(i, j, k + 1))
             flag = true;
-        if(i1 == 3 && cn1.g(i, j, k - 1))
+        if(i1 == 3 && world1.g(i, j, k - 1))
             flag = true;
-        if(i1 == 4 && cn1.g(i + 1, j, k))
+        if(i1 == 4 && world1.g(i + 1, j, k))
             flag = true;
-        if(i1 == 5 && cn1.g(i - 1, j, k))
+        if(i1 == 5 && world1.g(i - 1, j, k))
             flag = true;
         if(!flag)
         {
-            b_(cn1, i, j, k, i1);
-            cn1.d(i, j, k, 0);
+            b_(world1, i, j, k, i1);
+            world1.d(i, j, k, 0);
         }
-        super.a(cn1, i, j, k, l);
+        super.a(world1, i, j, k, l);
     }
 
     public int a(java.util.Random random)
diff --git "a/temp\\src\\java/bs.java" "b/src\\main\\java/bs.java"
index d5fdf4d..663f002 100644
--- "a/temp\\src\\java/bs.java"
+++ "b/src\\main\\java/bs.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -35,7 +34,7 @@ public class bs extends di
         return 1.0F;
     }
 
-    public void a(ev ev1, ge ge)
+    public void a(ev ev1, Mob mob)
     {
         ev1.b(2);
     }
diff --git "a/temp\\src\\java/bt.java" "b/src\\main\\java/bt.java"
index 49df3b6..f166dc4 100644
--- "a/temp\\src\\java/bt.java"
+++ "b/src\\main\\java/bt.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/bu.java" "b/src\\main\\java/bu.java"
index 13db8e3..0d38743 100644
--- "a/temp\\src\\java/bu.java"
+++ "b/src\\main\\java/bu.java"
@@ -1,17 +1,14 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import org.lwjgl.opengl.GL11;
-
 public class bu extends dn
 {
 
     private cr f;
     private cr g;
     private cr h;
-    private static final java.lang.String i[] = {
+    private static final String i[] = {
         "cloth", "chain", "iron", "diamond", "gold"
     };
 
@@ -23,9 +20,9 @@ public class bu extends dn
         h = new cr(0.5F);
     }
 
-    protected boolean a(dm dm1, int j)
+    protected boolean a(Player player1, int j)
     {
-        ev ev1 = dm1.b.d(3 - j);
+        ev ev1 = player1.b.d(3 - j);
         if(ev1 != null)
         {
             di di1 = ev1.a();
@@ -48,13 +45,13 @@ public class bu extends dn
         return false;
     }
 
-    public void a(dm dm1, double d, double d1, double d2, 
-            float f1, float f2)
+    public void a(Player player1, double d, double d1, double d2,
+                  float f1, float f2)
     {
-        ev ev1 = dm1.b.a();
+        ev ev1 = player1.b.a();
         g.i = h.i = f.i = ev1 != null;
-        g.j = h.j = f.j = dm1.o();
-        super.a(((ge) (dm1)), d, d1 - (double)dm1.aB, d2, f1, f2);
+        g.j = h.j = f.j = player1.o();
+        super.a(((Mob) (player1)), d, d1 - (double) player1.aB, d2, f1, f2);
         g.j = h.j = f.j = false;
         g.i = h.i = f.i = false;
         kd kd1 = a();
@@ -65,10 +62,10 @@ public class bu extends dn
         org.lwjgl.opengl.GL11.glNormal3f(0.0F, 1.0F, 0.0F);
         org.lwjgl.opengl.GL11.glRotatef(-a.i, 0.0F, 1.0F, 0.0F);
         org.lwjgl.opengl.GL11.glRotatef(a.j, 1.0F, 0.0F, 0.0F);
-        float f5 = dm1.d(((kh) (a.h)));
+        float f5 = player1.d(((kh) (a.h)));
         f4 = (float)((double)f4 * (java.lang.Math.sqrt(f5) / 2D));
         org.lwjgl.opengl.GL11.glScalef(-f4, -f4, f4);
-        java.lang.String s = dm1.i;
+        String s = player1.i;
         org.lwjgl.opengl.GL11.glDisable(2896);
         org.lwjgl.opengl.GL11.glDepthMask(false);
         org.lwjgl.opengl.GL11.glDisable(2929);
@@ -95,15 +92,15 @@ public class bu extends dn
         org.lwjgl.opengl.GL11.glPopMatrix();
     }
 
-    protected void a(dm dm1, float f1)
+    protected void a(Player player1, float f1)
     {
-        ev ev1 = dm1.b.a();
+        ev ev1 = player1.b.a();
         if(ev1 != null)
         {
             org.lwjgl.opengl.GL11.glPushMatrix();
             f.d.b(0.0625F);
             org.lwjgl.opengl.GL11.glTranslatef(-0.0625F, 0.4375F, 0.0625F);
-            if(ev1.c < 256 && bc.a(ly.n[ev1.c].f()))
+            if(ev1.id < 256 && bc.a(ly.n[ev1.id].f()))
             {
                 float f2 = 0.5F;
                 org.lwjgl.opengl.GL11.glTranslatef(0.0F, 0.1875F, -0.3125F);
@@ -112,7 +109,7 @@ public class bu extends dn
                 org.lwjgl.opengl.GL11.glRotatef(45F, 0.0F, 1.0F, 0.0F);
                 org.lwjgl.opengl.GL11.glScalef(f2, -f2, f2);
             } else
-            if(di.c[ev1.c].a())
+            if(di.c[ev1.id].a())
             {
                 float f3 = 0.625F;
                 org.lwjgl.opengl.GL11.glTranslatef(0.0F, 0.1875F, 0.0F);
@@ -133,7 +130,7 @@ public class bu extends dn
         }
     }
 
-    protected void b(dm dm1, float f1)
+    protected void b(Player player1, float f1)
     {
         float f2 = 0.9375F;
         org.lwjgl.opengl.GL11.glScalef(f2, f2, f2);
@@ -146,29 +143,29 @@ public class bu extends dn
         f.d.a(0.0625F);
     }
 
-    protected void a(ge ge, float f1)
+    protected void a(Mob mob, float f1)
     {
-        b((dm)ge, f1);
+        b((Player) mob, f1);
     }
 
-    protected boolean a(ge ge, int j)
+    protected boolean a(Mob mob, int j)
     {
-        return a((dm)ge, j);
+        return a((Player) mob, j);
     }
 
-    protected void b(ge ge, float f1)
+    protected void b(Mob mob, float f1)
     {
-        a((dm)ge, f1);
+        a((Player) mob, f1);
     }
 
-    public void a(ge ge, double d, double d1, double d2, float f1, float f2)
+    public void a(Mob mob, double d, double d1, double d2, float f1, float f2)
     {
-        a((dm)ge, d, d1, d2, f1, f2);
+        a((Player) mob, d, d1, d2, f1, f2);
     }
 
     public void a(kh kh, double d, double d1, double d2, float f1, float f2)
     {
-        a((dm)kh, d, d1, d2, f1, f2);
+        a((Player)kh, d, d1, d2, f1, f2);
     }
 
 }
diff --git "a/temp\\src\\java/bv.java" "b/src\\main\\java/bv.java"
index f77b099..06074a6 100644
--- "a/temp\\src\\java/bv.java"
+++ "b/src\\main\\java/bv.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -15,7 +14,7 @@ public class bv
 
     public bv(int i, int j, int ai[], ev ev1)
     {
-        a = ev1.c;
+        a = ev1.id;
         b = i;
         c = j;
         d = ai;
@@ -64,7 +63,7 @@ public class bv
 
     public ev b(int ai[])
     {
-        return new ev(e.c, e.a);
+        return new ev(e.id, e.count);
     }
 
     public int a()
diff --git "a/temp\\src\\java/bw.java" "b/src\\main\\java/bw.java"
index 8fd01a8..77a096e 100644
--- "a/temp\\src\\java/bw.java"
+++ "b/src\\main\\java/bw.java"
@@ -1,10 +1,8 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
 import java.util.Random;
-import org.lwjgl.opengl.GL11;
 
 public class bw extends ak
 {
@@ -16,8 +14,8 @@ public class bw extends ak
         d = new Random();
     }
 
-    public void a(jc jc1, double d1, double d2, double d3, 
-            float f, float f1)
+    public void a(Painting painting1, double d1, double d2, double d3,
+                  float f, float f1)
     {
         d.setSeed(187L);
         org.lwjgl.opengl.GL11.glPushMatrix();
@@ -25,15 +23,15 @@ public class bw extends ak
         org.lwjgl.opengl.GL11.glRotatef(f, 0.0F, 1.0F, 0.0F);
         org.lwjgl.opengl.GL11.glEnable(32826);
         a("/art/kz.png");
-        er er1 = jc1.b;
+        er er1 = painting1.b;
         float f2 = 0.0625F;
         org.lwjgl.opengl.GL11.glScalef(f2, f2, f2);
-        a(jc1, er1.z, er1.A, er1.B, er1.C);
+        a(painting1, er1.z, er1.A, er1.B, er1.C);
         org.lwjgl.opengl.GL11.glDisable(32826);
         org.lwjgl.opengl.GL11.glPopMatrix();
     }
 
-    private void a(jc jc1, int i, int j, int k, int l)
+    private void a(Painting painting1, int i, int j, int k, int l)
     {
         float f = (float)(-i) / 2.0F;
         float f1 = (float)(-j) / 2.0F;
@@ -47,7 +45,7 @@ public class bw extends ak
                 float f5 = f + (float)(i1 * 16);
                 float f6 = f1 + (float)((j1 + 1) * 16);
                 float f7 = f1 + (float)(j1 * 16);
-                a(jc1, (f4 + f5) / 2.0F, (f6 + f7) / 2.0F);
+                a(painting1, (f4 + f5) / 2.0F, (f6 + f7) / 2.0F);
                 float f8 = (float)((k + i) - i1 * 16) / 256F;
                 float f9 = (float)((k + i) - (i1 + 1) * 16) / 256F;
                 float f10 = (float)((l + j) - j1 * 16) / 256F;
@@ -103,25 +101,25 @@ public class bw extends ak
 
     }
 
-    private void a(jc jc1, float f, float f1)
+    private void a(Painting painting1, float f, float f1)
     {
-        int i = eo.b(jc1.ak);
-        int j = eo.b(jc1.al + (double)(f1 / 16F));
-        int k = eo.b(jc1.am);
-        if(jc1.a == 0)
-            i = eo.b(jc1.ak + (double)(f / 16F));
-        if(jc1.a == 1)
-            k = eo.b(jc1.am - (double)(f / 16F));
-        if(jc1.a == 2)
-            i = eo.b(jc1.ak - (double)(f / 16F));
-        if(jc1.a == 3)
-            k = eo.b(jc1.am + (double)(f / 16F));
+        int i = eo.b(painting1.ak);
+        int j = eo.b(painting1.al + (double)(f1 / 16F));
+        int k = eo.b(painting1.am);
+        if(painting1.dir == 0)
+            i = eo.b(painting1.ak + (double)(f / 16F));
+        if(painting1.dir == 1)
+            k = eo.b(painting1.am - (double)(f / 16F));
+        if(painting1.dir == 2)
+            i = eo.b(painting1.ak - (double)(f / 16F));
+        if(painting1.dir == 3)
+            k = eo.b(painting1.am + (double)(f / 16F));
         float f2 = a.g.c(i, j, k);
         org.lwjgl.opengl.GL11.glColor3f(f2, f2, f2);
     }
 
     public void a(kh kh, double d1, double d2, double d3, float f, float f1)
     {
-        a((jc)kh, d1, d2, d3, f, f1);
+        a((Painting)kh, d1, d2, d3, f, f1);
     }
 }
diff --git "a/temp\\src\\java/bx.java" "b/src\\main\\java/bx.java"
index 8c84cbf..80f27c7 100644
--- "a/temp\\src\\java/bx.java"
+++ "b/src\\main\\java/bx.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/bz.java" "b/src\\main\\java/bz.java"
index fef8dfd..31ac0c9 100644
--- "a/temp\\src\\java/bz.java"
+++ "b/src\\main\\java/bz.java"
@@ -1,12 +1,8 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
 import java.io.IOException;
-import java.util.zip.DataFormatException;
 import java.util.zip.Inflater;
 
 public class bz extends fn
diff --git "a/temp\\src\\java/c.java" "b/src\\main\\java/c.java"
index b1053f5..b834803 100644
--- "a/temp\\src\\java/c.java"
+++ "b/src\\main\\java/c.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/ca.java" "b/src\\main\\java/ca.java"
index 3f36b73..5c1711a 100644
--- "a/temp\\src\\java/ca.java"
+++ "b/src\\main\\java/ca.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/cb.java" "b/src\\main\\java/cb.java"
index 3a0aa2c..24bf458 100644
--- "a/temp\\src\\java/cb.java"
+++ "b/src\\main\\java/cb.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/cc.java" "b/src\\main\\java/cc.java"
index 7189061..2066c08 100644
--- "a/temp\\src\\java/cc.java"
+++ "b/src\\main\\java/cc.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.awt.image.BufferedImage;
-
 public class cc
 {
 
@@ -13,7 +10,7 @@ public class cc
     public int c;
     public boolean d;
 
-    public cc(java.lang.String s, hb hb)
+    public cc(String s, hb hb)
     {
         b = 1;
         c = -1;
diff --git "a/temp\\src\\java/cd.java" "b/src\\main\\java/cd.java"
index 2475494..844b84e 100644
--- "a/temp\\src\\java/cd.java"
+++ "b/src\\main\\java/cd.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import org.lwjgl.opengl.GL11;
-
 public class cd extends nq
 {
 
@@ -14,9 +11,9 @@ public class cd extends nq
     private int q;
     private float r;
 
-    public cd(cn cn1, kh kh1, kh kh2, float f)
+    public cd(World world1, kh kh1, kh kh2, float f)
     {
-        super(cn1, kh1.ak, kh1.al, kh1.am, kh1.an, kh1.ao, kh1.ap);
+        super(world1, kh1.ak, kh1.al, kh1.am, kh1.an, kh1.ao, kh1.ap);
         p = 0;
         q = 0;
         a = kh1;
diff --git "a/temp\\src\\java/ce.java" "b/src\\main\\java/ce.java"
index c3b247c..bbf37d9 100644
--- "a/temp\\src\\java/ce.java"
+++ "b/src\\main\\java/ce.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class ce extends ly
 {
 
diff --git "a/temp\\src\\java/cf.java" "b/src\\main\\java/cf.java"
index 88bdf50..7b46ebb 100644
--- "a/temp\\src\\java/cf.java"
+++ "b/src\\main\\java/cf.java"
@@ -1,10 +1,8 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
 import java.util.ArrayList;
-import java.util.List;
 
 public class cf
 {
@@ -33,7 +31,7 @@ public class cf
             double d5, double d6)
     {
         if(h >= g.size())
-            g.add(((java.lang.Object) (cf.a(0.0D, 0.0D, 0.0D, 0.0D, 0.0D, 0.0D))));
+            g.add(((Object) (cf.a(0.0D, 0.0D, 0.0D, 0.0D, 0.0D, 0.0D))));
         return ((cf)g.get(h++)).c(d1, d2, d3, d4, d5, d6);
     }
 
diff --git "a/temp\\src\\java/cg.java" "b/src\\main\\java/cg.java"
index 6442f6e..10d011f 100644
--- "a/temp\\src\\java/cg.java"
+++ "b/src\\main\\java/cg.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class cg extends ik
 {
 
@@ -12,7 +9,7 @@ public class cg extends ik
     {
     }
 
-    public boolean a(cn cn1, java.util.Random random, int i, int j, int k)
+    public boolean a(World world1, java.util.Random random, int i, int j, int k)
     {
         byte byte0 = 3;
         int l = random.nextInt(2) + 2;
@@ -24,12 +21,12 @@ public class cg extends ik
             {
                 for(int i3 = k - i1 - 1; i3 <= k + i1 + 1; i3++)
                 {
-                    gb gb1 = cn1.f(k1, j2, i3);
+                    gb gb1 = world1.f(k1, j2, i3);
                     if(j2 == j - 1 && !gb1.a())
                         return false;
                     if(j2 == j + byte0 + 1 && !gb1.a())
                         return false;
-                    if((k1 == i - l - 1 || k1 == i + l + 1 || i3 == k - i1 - 1 || i3 == k + i1 + 1) && j2 == j && cn1.a(k1, j2, i3) == 0 && cn1.a(k1, j2 + 1, i3) == 0)
+                    if((k1 == i - l - 1 || k1 == i + l + 1 || i3 == k - i1 - 1 || i3 == k + i1 + 1) && j2 == j && world1.a(k1, j2, i3) == 0 && world1.a(k1, j2 + 1, i3) == 0)
                         j1++;
                 }
 
@@ -46,20 +43,20 @@ public class cg extends ik
                 for(int j3 = k - i1 - 1; j3 <= k + i1 + 1; j3++)
                     if(l1 == i - l - 1 || k2 == j - 1 || j3 == k - i1 - 1 || l1 == i + l + 1 || k2 == j + byte0 + 1 || j3 == k + i1 + 1)
                     {
-                        if(k2 >= 0 && !cn1.f(l1, k2 - 1, j3).a())
+                        if(k2 >= 0 && !world1.f(l1, k2 - 1, j3).a())
                         {
-                            cn1.d(l1, k2, j3, 0);
+                            world1.d(l1, k2, j3, 0);
                             continue;
                         }
-                        if(!cn1.f(l1, k2, j3).a())
+                        if(!world1.f(l1, k2, j3).a())
                             continue;
                         if(k2 == j - 1 && random.nextInt(4) != 0)
-                            cn1.d(l1, k2, j3, ly.ap.bc);
+                            world1.d(l1, k2, j3, ly.ap.bc);
                         else
-                            cn1.d(l1, k2, j3, ly.x.bc);
+                            world1.d(l1, k2, j3, ly.x.bc);
                     } else
                     {
-                        cn1.d(l1, k2, j3, 0);
+                        world1.d(l1, k2, j3, 0);
                     }
 
             }
@@ -74,21 +71,21 @@ label0:
                 int k3 = (i + random.nextInt(l * 2 + 1)) - l;
                 int l3 = j;
                 int i4 = (k + random.nextInt(i1 * 2 + 1)) - i1;
-                if(cn1.a(k3, l3, i4) != 0)
+                if(world1.a(k3, l3, i4) != 0)
                     continue;
                 int j4 = 0;
-                if(cn1.f(k3 - 1, l3, i4).a())
+                if(world1.f(k3 - 1, l3, i4).a())
                     j4++;
-                if(cn1.f(k3 + 1, l3, i4).a())
+                if(world1.f(k3 + 1, l3, i4).a())
                     j4++;
-                if(cn1.f(k3, l3, i4 - 1).a())
+                if(world1.f(k3, l3, i4 - 1).a())
                     j4++;
-                if(cn1.f(k3, l3, i4 + 1).a())
+                if(world1.f(k3, l3, i4 + 1).a())
                     j4++;
                 if(j4 != 1)
                     continue;
-                cn1.d(k3, l3, i4, ly.av.bc);
-                fe fe1 = (fe)cn1.b(k3, l3, i4);
+                world1.d(k3, l3, i4, ly.av.bc);
+                Chest chest1 = (Chest) world1.b(k3, l3, i4);
                 int k4 = 0;
                 do
                 {
@@ -96,16 +93,16 @@ label0:
                         break label0;
                     ev ev1 = a(random);
                     if(ev1 != null)
-                        fe1.a(random.nextInt(fe1.c()), ev1);
+                        chest1.a(random.nextInt(chest1.c()), ev1);
                     k4++;
                 } while(true);
             }
 
         }
 
-        cn1.d(i, j, k, ly.at.bc);
-        bd bd1 = (bd)cn1.b(i, j, k);
-        bd1.b = b(random);
+        world1.d(i, j, k, ly.at.bc);
+        MobSpawner mobSpawner1 = (MobSpawner) world1.b(i, j, k);
+        mobSpawner1.entityId = b(random);
         return true;
     }
 
@@ -136,7 +133,7 @@ label0:
             return null;
     }
 
-    private java.lang.String b(java.util.Random random)
+    private String b(java.util.Random random)
     {
         int i = random.nextInt(4);
         if(i == 0)
diff --git "a/temp\\src\\java/ch.java" "b/src\\main\\java/ch.java"
index 11e4da5..6b6977e 100644
--- "a/temp\\src\\java/ch.java"
+++ "b/src\\main\\java/ch.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
 import java.io.IOException;
 
 public class ch extends eh
diff --git "a/temp\\src\\java/ci.java" "b/src\\main\\java/ci.java"
index 0b6342d..9728c26 100644
--- "a/temp\\src\\java/ci.java"
+++ "b/src\\main\\java/ci.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -10,21 +9,21 @@ public class ci
 
     private int a;
     private int b;
-    private ga c[][];
-    private cn d;
+    private Chunk c[][];
+    private World d;
 
-    public ci(cn cn1, int i, int j, int k, int l, int i1, int j1)
+    public ci(World world1, int i, int j, int k, int l, int i1, int j1)
     {
-        d = cn1;
+        d = world1;
         a = i >> 4;
         b = k >> 4;
         int k1 = l >> 4;
         int l1 = j1 >> 4;
-        c = new ga[(k1 - a) + 1][(l1 - b) + 1];
+        c = new Chunk[(k1 - a) + 1][(l1 - b) + 1];
         for(int i2 = a; i2 <= k1; i2++)
         {
             for(int j2 = b; j2 <= l1; j2++)
-                c[i2 - a][j2 - b] = cn1.b(i2, j2);
+                c[i2 - a][j2 - b] = world1.b(i2, j2);
 
         }
 
@@ -54,7 +53,7 @@ public class ci
 
     public float c(int i, int j, int k)
     {
-        return cn.i[d(i, j, k)];
+        return World.i[d(i, j, k)];
     }
 
     public int d(int i, int j, int k)
diff --git "a/temp\\src\\java/cj.java" "b/src\\main\\java/cj.java"
index 0ccfc77..9030495 100644
--- "a/temp\\src\\java/cj.java"
+++ "b/src\\main\\java/cj.java"
@@ -1,18 +1,16 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.List;
 //import Minecraft;
 
 public class cj extends bh
 {
 
-    private java.lang.String a;
-    private java.lang.String h;
+    private String a;
+    private String h;
 
-    public cj(java.lang.String s, java.lang.String s1)
+    public cj(String s, String s1)
     {
         a = s;
         h = s1;
@@ -29,7 +27,7 @@ public class cj extends bh
     public void a()
     {
         e.clear();
-        e.add(((java.lang.Object) (new fk(0, c / 2 - 100, d / 4 + 120 + 12, "Back to title screen"))));
+        e.add(((Object) (new fk(0, c / 2 - 100, d / 4 + 120 + 12, "Back to title screen"))));
     }
 
     protected void a(fk fk1)
diff --git "a/temp\\src\\java/ck.java" "b/src\\main\\java/ck.java"
index 53b094e..1b77338 100644
--- "a/temp\\src\\java/ck.java"
+++ "b/src\\main\\java/ck.java"
@@ -1,48 +1,45 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.IOException;
-
 public class ck
-    implements aw
+    implements IChunkProvider
 {
 
-    private ga b[];
-    private cn c;
+    private Chunk b[];
+    private World c;
     private af d;
     byte a[];
 
-    public ck(cn cn, af af1)
+    public ck(World world, af af1)
     {
-        b = new ga[256];
+        b = new Chunk[256];
         a = new byte[32768];
-        c = cn;
+        c = world;
         d = af1;
     }
 
-    public boolean a(int i, int j)
+    public boolean chunkExists(int x, int y)
     {
-        int k = i & 0xf | (j & 0xf) * 16;
-        return b[k] != null && b[k].a(i, j);
+        int k = x & 0xf | (y & 0xf) * 16;
+        return b[k] != null && b[k].a(x, y);
     }
 
-    public ga b(int i, int j)
+    public Chunk provideChunk(int x, int y)
     {
-        int k = i & 0xf | (j & 0xf) * 16;
+        int k = x & 0xf | (y & 0xf) * 16;
         try
         {
-            if(!a(i, j))
+            if(!chunkExists(x, y))
             {
-                ga ga1 = c(i, j);
-                if(ga1 == null)
+                Chunk chunk1 = c(x, y);
+                if(chunk1 == null)
                 {
-                    ga1 = new ga(c, a, i, j);
-                    ga1.q = true;
-                    ga1.p = true;
+                    chunk1 = new Chunk(c, a, x, y);
+                    chunk1.q = true;
+                    chunk1.p = true;
                 }
-                b[k] = ga1;
+                b[k] = chunk1;
             }
             return b[k];
         }
@@ -53,7 +50,7 @@ public class ck
         return null;
     }
 
-    private synchronized ga c(int i, int j)
+    private synchronized Chunk c(int i, int j)
     {
         try
         {
@@ -66,21 +63,21 @@ public class ck
         return null;
     }
 
-    public void a(aw aw1, int i, int j)
+    public void a(IChunkProvider iChunkProvider1, int i, int j)
     {
     }
 
-    public boolean a(boolean flag, nu nu)
+    public boolean saveChunks(boolean flag, IProgressUpdate iProgressUpdate)
     {
         return true;
     }
 
-    public boolean a()
+    public boolean unloadQueuedChunks()
     {
         return false;
     }
 
-    public boolean b()
+    public boolean canSave()
     {
         return false;
     }
diff --git "a/temp\\src\\java/cl.java" "b/src\\main\\java/cl.java"
index 1dc1a45..dbd6682 100644
--- "a/temp\\src\\java/cl.java"
+++ "b/src\\main\\java/cl.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/cm.java" "b/src\\main\\java/cm.java"
index df71793..70fcb89 100644
--- "a/temp\\src\\java/cm.java"
+++ "b/src\\main\\java/cm.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class cm extends ce
 {
 
diff --git "a/temp\\src\\java/co.java" "b/src\\main\\java/co.java"
index cc3eb08..6569251 100644
--- "a/temp\\src\\java/co.java"
+++ "b/src\\main\\java/co.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/cp.java" "b/src\\main\\java/cp.java"
index 22dc11d..4bb12db 100644
--- "a/temp\\src\\java/cp.java"
+++ "b/src\\main\\java/cp.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import org.lwjgl.opengl.GL11;
-
 public class cp extends ak
 {
 
@@ -16,18 +13,18 @@ public class cp extends ak
         d = ((fo) (new cl()));
     }
 
-    public void a(dc dc1, double d1, double d2, double d3, 
-            float f, float f1)
+    public void a(Boat boat1, double d1, double d2, double d3,
+                  float f, float f1)
     {
         org.lwjgl.opengl.GL11.glPushMatrix();
         org.lwjgl.opengl.GL11.glTranslatef((float)d1, (float)d2, (float)d3);
         org.lwjgl.opengl.GL11.glRotatef(180F - f, 0.0F, 1.0F, 0.0F);
-        float f2 = (float)dc1.b - f1;
-        float f3 = (float)dc1.a - f1;
+        float f2 = (float) boat1.b - f1;
+        float f3 = (float) boat1.a - f1;
         if(f3 < 0.0F)
             f3 = 0.0F;
         if(f2 > 0.0F)
-            org.lwjgl.opengl.GL11.glRotatef(((eo.a(f2) * f2 * f3) / 10F) * (float)dc1.c, 1.0F, 0.0F, 0.0F);
+            org.lwjgl.opengl.GL11.glRotatef(((eo.a(f2) * f2 * f3) / 10F) * (float) boat1.c, 1.0F, 0.0F, 0.0F);
         a("/terrain.png");
         float f4 = 0.75F;
         org.lwjgl.opengl.GL11.glScalef(f4, f4, f4);
@@ -40,6 +37,6 @@ public class cp extends ak
 
     public void a(kh kh, double d1, double d2, double d3, float f, float f1)
     {
-        a((dc)kh, d1, d2, d3, f, f1);
+        a((Boat)kh, d1, d2, d3, f, f1);
     }
 }
diff --git "a/temp\\src\\java/cq.java" "b/src\\main\\java/cq.java"
index 41b0c96..c9304f1 100644
--- "a/temp\\src\\java/cq.java"
+++ "b/src\\main\\java/cq.java"
@@ -1,18 +1,15 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class cq extends nq
 {
 
     private float a;
 
-    public cq(cn cn1, double d, double d1, double d2)
+    public cq(World world1, double d, double d1, double d2)
     {
-        super(cn1, d, d1, d2, 0.0D, 0.0D, 0.0D);
+        super(world1, d, d1, d2, 0.0D, 0.0D, 0.0D);
         an *= 0.80000001192092896D;
         ao *= 0.80000001192092896D;
         ap *= 0.80000001192092896D;
diff --git "a/temp\\src\\java/cr.java" "b/src\\main\\java/cr.java"
index 6e3d821..0062020 100644
--- "a/temp\\src\\java/cr.java"
+++ "b/src\\main\\java/cr.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/cs.java" "b/src\\main\\java/cs.java"
index 5f0e677..558c77d 100644
--- "a/temp\\src\\java/cs.java"
+++ "b/src\\main\\java/cs.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -25,9 +24,9 @@ public class cs extends ly
             return bb;
     }
 
-    public boolean a(cn cn, int i, int j, int k, dm dm1)
+    public boolean a(World world, int i, int j, int k, Player player1)
     {
-        dm1.l();
+        player1.l();
         return true;
     }
 }
diff --git "a/temp\\src\\java/ct.java" "b/src\\main\\java/ct.java"
index b5bf84c..c6fa963 100644
--- "a/temp\\src\\java/ct.java"
+++ "b/src\\main\\java/ct.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class ct extends fc
 {
 
diff --git "a/temp\\src\\java/cu.java" "b/src\\main\\java/cu.java"
index 9177ac9..86bd9d7 100644
--- "a/temp\\src\\java/cu.java"
+++ "b/src\\main\\java/cu.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class cu extends ik
 {
 
@@ -17,7 +14,7 @@ public class cu extends ik
         b = j;
     }
 
-    public boolean a(cn cn1, java.util.Random random, int i, int j, int k)
+    public boolean a(World world1, java.util.Random random, int i, int j, int k)
     {
         float f = random.nextFloat() * 3.141593F;
         double d = (float)(i + 8) + (eo.a(f) * (float)b) / 8F;
@@ -43,8 +40,8 @@ public class cu extends ik
                         double d12 = (((double)i1 + 0.5D) - d6) / (d10 / 2D);
                         double d13 = (((double)j1 + 0.5D) - d7) / (d11 / 2D);
                         double d14 = (((double)k1 + 0.5D) - d8) / (d10 / 2D);
-                        if(d12 * d12 + d13 * d13 + d14 * d14 < 1.0D && cn1.a(i1, j1, k1) == ly.u.bc)
-                            cn1.a(i1, j1, k1, a);
+                        if(d12 * d12 + d13 * d13 + d14 * d14 < 1.0D && world1.a(i1, j1, k1) == ly.u.bc)
+                            world1.a(i1, j1, k1, a);
                     }
 
                 }
diff --git "a/temp\\src\\java/cv.java" "b/src\\main\\java/cv.java"
index 3d7a5c8..9cbdd9f 100644
--- "a/temp\\src\\java/cv.java"
+++ "b/src\\main\\java/cv.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class cv extends ly
 {
 
@@ -18,12 +15,12 @@ public class cv extends ly
         return bb + (i != 1 ? 0 : 1);
     }
 
-    public boolean a(cn cn1, int i, int j, int k, dm dm)
+    public boolean a(World world1, int i, int j, int k, Player player)
     {
-        int l = cn1.e(i, j, k);
+        int l = world1.e(i, j, k);
         if(l > 0)
         {
-            e(cn1, i, j, k, l);
+            e(world1, i, j, k, l);
             return true;
         } else
         {
@@ -31,26 +28,26 @@ public class cv extends ly
         }
     }
 
-    public void e(cn cn1, int i, int j, int k, int l)
+    public void e(World world1, int i, int j, int k, int l)
     {
-        cn1.a(((java.lang.String) (null)), i, j, k);
-        cn1.b(i, j, k, 0);
+        world1.a(((String) (null)), i, j, k);
+        world1.b(i, j, k, 0);
         int i1 = (di.aQ.aS + l) - 1;
         float f = 0.7F;
-        double d = (double)(cn1.n.nextFloat() * f) + (double)(1.0F - f) * 0.5D;
-        double d1 = (double)(cn1.n.nextFloat() * f) + (double)(1.0F - f) * 0.20000000000000001D + 0.59999999999999998D;
-        double d2 = (double)(cn1.n.nextFloat() * f) + (double)(1.0F - f) * 0.5D;
-        dx dx1 = new dx(cn1, (double)i + d, (double)j + d1, (double)k + d2, new ev(i1));
-        dx1.c = 10;
-        cn1.a(((kh) (dx1)));
+        double d = (double)(world1.n.nextFloat() * f) + (double)(1.0F - f) * 0.5D;
+        double d1 = (double)(world1.n.nextFloat() * f) + (double)(1.0F - f) * 0.20000000000000001D + 0.59999999999999998D;
+        double d2 = (double)(world1.n.nextFloat() * f) + (double)(1.0F - f) * 0.5D;
+        Item item1 = new Item(world1, (double)i + d, (double)j + d1, (double)k + d2, new ev(i1));
+        item1.c = 10;
+        world1.a(((kh) (item1)));
     }
 
-    public void a(cn cn1, int i, int j, int k, int l, float f)
+    public void a(World world1, int i, int j, int k, int l, float f)
     {
-        if(cn1.y)
+        if(world1.y)
             return;
         if(l > 0)
-            e(cn1, i, j, k, l);
-        super.a(cn1, i, j, k, l, f);
+            e(world1, i, j, k, l);
+        super.a(world1, i, j, k, l, f);
     }
 }
diff --git "a/temp\\src\\java/cx.java" "b/src\\main\\java/cx.java"
index a78d84a..0f411c3 100644
--- "a/temp\\src\\java/cx.java"
+++ "b/src\\main\\java/cx.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -6,24 +5,21 @@
 import java.io.BufferedReader;
 import java.io.InputStreamReader;
 import java.util.ArrayList;
-import java.util.Calendar;
 import java.util.Date;
-import java.util.List;
 import java.util.Random;
 //import Minecraft;
-import org.lwjgl.opengl.GL11;
-import org.lwjgl.util.glu.GLU;
+
 
 public class cx extends bh
 {
 
     private static final java.util.Random h = new Random();
-    java.lang.String a[] = {
+    String a[] = {
         " *   * * *   * *** *** *** *** *** ***", " ** ** * **  * *   *   * * * * *    * ", " * * * * * * * **  *   **  *** **   * ", " *   * * *  ** *   *   * * * * *    * ", " *   * * *   * *** *** * * * * *    * "
     };
     private kc i[][];
     private float j;
-    private java.lang.String l;
+    private String l;
 
     public cx()
     {
@@ -33,17 +29,17 @@ public class cx extends bh
         {
             java.util.ArrayList arraylist = new ArrayList();
             java.io.BufferedReader bufferedreader = new BufferedReader(((java.io.Reader) (new InputStreamReader(cx.class.getResourceAsStream("/title/splashes.txt")))));
-            java.lang.String s = "";
+            String s = "";
             do
             {
-                java.lang.String s1;
+                String s1;
                 if((s1 = bufferedreader.readLine()) == null)
                     break;
                 s1 = s1.trim();
                 if(s1.length() > 0)
-                    ((java.util.List) (arraylist)).add(((java.lang.Object) (s1)));
+                    ((java.util.List) (arraylist)).add(((Object) (s1)));
             } while(true);
-            l = (java.lang.String)((java.util.List) (arraylist)).get(h.nextInt(((java.util.List) (arraylist)).size()));
+            l = (String)((java.util.List) (arraylist)).get(h.nextInt(((java.util.List) (arraylist)).size()));
         }
         catch(java.lang.Exception exception) { }
     }
@@ -83,10 +79,10 @@ public class cx extends bh
         if(calendar.get(2) + 1 == 1 && calendar.get(5) == 1)
             l = "Happy new year!";
         e.clear();
-        e.add(((java.lang.Object) (new fk(1, c / 2 - 100, d / 4 + 48, "Singleplayer"))));
-        e.add(((java.lang.Object) (new fk(2, c / 2 - 100, d / 4 + 72, "Multiplayer"))));
-        e.add(((java.lang.Object) (new fk(3, c / 2 - 100, d / 4 + 96, "Play tutorial level"))));
-        e.add(((java.lang.Object) (new fk(0, c / 2 - 100, d / 4 + 120 + 12, "Options..."))));
+        e.add(((Object) (new fk(1, c / 2 - 100, d / 4 + 48, "Singleplayer"))));
+        e.add(((Object) (new fk(2, c / 2 - 100, d / 4 + 72, "Multiplayer"))));
+        e.add(((Object) (new fk(3, c / 2 - 100, d / 4 + 96, "Play tutorial level"))));
+        e.add(((Object) (new fk(0, c / 2 - 100, d / 4 + 120 + 12, "Options..."))));
         ((fk)e.get(2)).g = false;
         if(b.i == null)
             ((fk)e.get(1)).g = false;
@@ -118,7 +114,7 @@ public class cx extends bh
         org.lwjgl.opengl.GL11.glScalef(f1, f1, f1);
         a(g, l, 0, -8, 0xffff00);
         org.lwjgl.opengl.GL11.glPopMatrix();
-        java.lang.String s = "Copyright Mojang Specifications. Do not distribute.";
+        String s = "Copyright Mojang Specifications. Do not distribute.";
         b(g, s, c - g.a(s) - 2, d - 10, 0xffffff);
         long l1 = java.lang.Runtime.getRuntime().maxMemory();
         long l2 = java.lang.Runtime.getRuntime().totalMemory();
diff --git "a/temp\\src\\java/cy.java" "b/src\\main\\java/cy.java"
index aec504d..3c0f040 100644
--- "a/temp\\src\\java/cy.java"
+++ "b/src\\main\\java/cy.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -17,25 +16,25 @@ public class cy
         b = new Random();
     }
 
-    public void a(nw nw, cn cn1, int i, int j, byte abyte0[])
+    public void a(nw nw, World world1, int i, int j, byte abyte0[])
     {
         int k = a;
-        b.setSeed(cn1.u);
+        b.setSeed(world1.randomSeed);
         long l = (b.nextLong() / 2L) * 2L + 1L;
         long l1 = (b.nextLong() / 2L) * 2L + 1L;
         for(int i1 = i - k; i1 <= i + k; i1++)
         {
             for(int j1 = j - k; j1 <= j + k; j1++)
             {
-                b.setSeed((long)i1 * l + (long)j1 * l1 ^ cn1.u);
-                a(cn1, i1, j1, i, j, abyte0);
+                b.setSeed((long)i1 * l + (long)j1 * l1 ^ world1.randomSeed);
+                a(world1, i1, j1, i, j, abyte0);
             }
 
         }
 
     }
 
-    protected void a(cn cn1, int i, int j, int k, int l, byte abyte0[])
+    protected void a(World world1, int i, int j, int k, int l, byte abyte0[])
     {
     }
 }
diff --git "a/temp\\src\\java/cz.java" "b/src\\main\\java/cz.java"
index f005f00..9c362b9 100644
--- "a/temp\\src\\java/cz.java"
+++ "b/src\\main\\java/cz.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -142,7 +141,7 @@ public class cz
         if(a1 == null)
         {
             a1 = new a(i, j, k);
-            c.a(l, ((java.lang.Object) (a1)));
+            c.a(l, ((Object) (a1)));
         }
         return a1;
     }
diff --git "a/temp\\src\\java/d.java" "b/src\\main\\java/d.java"
index ff438b4..9f23277 100644
--- "a/temp\\src\\java/d.java"
+++ "b/src\\main\\java/d.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import org.lwjgl.opengl.GL11;
-
 public class d extends dn
 {
 
@@ -13,10 +10,10 @@ public class d extends dn
         super(((fo) (new em())), 0.5F);
     }
 
-    protected void a(dd dd1, float f)
+    protected void a(Creeper creeper1, float f)
     {
-        dd dd2 = dd1;
-        float f1 = dd2.b(f);
+        Creeper creeper2 = creeper1;
+        float f1 = creeper2.b(f);
         float f2 = 1.0F + eo.a(f1 * 100F) * f1 * 0.01F;
         if(f1 < 0.0F)
             f1 = 0.0F;
@@ -29,10 +26,10 @@ public class d extends dn
         org.lwjgl.opengl.GL11.glScalef(f3, f4, f3);
     }
 
-    protected int a(dd dd1, float f, float f1)
+    protected int a(Creeper creeper1, float f, float f1)
     {
-        dd dd2 = dd1;
-        float f2 = dd2.b(f1);
+        Creeper creeper2 = creeper1;
+        float f2 = creeper2.b(f1);
         if((int)(f2 * 10F) % 2 == 0)
             return 0;
         int i = (int)(f2 * 0.2F * 255F);
@@ -46,13 +43,13 @@ public class d extends dn
         return i << 24 | c << 16 | c1 << 8 | c2;
     }
 
-    protected void a(ge ge, float f)
+    protected void a(Mob mob, float f)
     {
-        a((dd)ge, f);
+        a((Creeper) mob, f);
     }
 
-    protected int a(ge ge, float f, float f1)
+    protected int a(Mob mob, float f, float f1)
     {
-        return a((dd)ge, f, f1);
+        return a((Creeper) mob, f, f1);
     }
 }
diff --git "a/temp\\src\\java/da.java" "b/src\\main\\java/da.java"
index 1398d05..734e179 100644
--- "a/temp\\src\\java/da.java"
+++ "b/src\\main\\java/da.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class da extends ik
 {
 
@@ -12,19 +9,19 @@ public class da extends ik
     {
     }
 
-    public boolean a(cn cn1, java.util.Random random, int i, int j, int k)
+    public boolean a(World world1, java.util.Random random, int i, int j, int k)
     {
         for(int l = 0; l < 10; l++)
         {
             int i1 = (i + random.nextInt(8)) - random.nextInt(8);
             int j1 = (j + random.nextInt(4)) - random.nextInt(4);
             int k1 = (k + random.nextInt(8)) - random.nextInt(8);
-            if(cn1.a(i1, j1, k1) != 0)
+            if(world1.a(i1, j1, k1) != 0)
                 continue;
             int l1 = 1 + random.nextInt(random.nextInt(3) + 1);
             for(int i2 = 0; i2 < l1; i2++)
-                if(ly.aW.g(cn1, i1, j1 + i2, k1))
-                    cn1.a(i1, j1 + i2, k1, ly.aW.bc);
+                if(ly.aW.g(world1, i1, j1 + i2, k1))
+                    world1.a(i1, j1 + i2, k1, ly.aW.bc);
 
         }
 
diff --git "a/temp\\src\\java/db.java" "b/src\\main\\java/db.java"
index 3d5f598..678f474 100644
--- "a/temp\\src\\java/db.java"
+++ "b/src\\main\\java/db.java"
@@ -1,14 +1,8 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.awt.Canvas;
 import java.awt.Dimension;
-import java.awt.Graphics;
-import java.awt.image.BufferedImage;
-import java.io.IOException;
-import javax.imageio.ImageIO;
 
 class db extends java.awt.Canvas
 {
diff --git "a/temp\\src\\java/de.java" "b/src\\main\\java/de.java"
index 5c9361b..9987525 100644
--- "a/temp\\src\\java/de.java"
+++ "b/src\\main\\java/de.java"
@@ -1,15 +1,13 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
 //import Minecraft;
-import org.lwjgl.input.Keyboard;
 
 public class de extends bh
 {
 
-    private java.lang.String a;
+    private String a;
     private int h;
 
     public de()
@@ -42,7 +40,7 @@ public class de extends bh
         }
         if(i == 28)
         {
-            java.lang.String s = a.trim();
+            String s = a.trim();
             if(s.length() > 0)
                 b.g.a(a.trim());
             b.a(((bh) (null)));
diff --git "a/temp\\src\\java/df.java" "b/src\\main\\java/df.java"
index 5c0fd30..a943b74 100644
--- "a/temp\\src\\java/df.java"
+++ "b/src\\main\\java/df.java"
@@ -1,15 +1,8 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.nio.ByteBuffer;
-import java.nio.ByteOrder;
-import java.nio.FloatBuffer;
-import java.nio.IntBuffer;
 import java.util.ArrayList;
-import java.util.List;
-import org.lwjgl.opengl.GL11;
 
 public class df
 {
@@ -24,8 +17,8 @@ public class df
     public static synchronized int a(int i)
     {
         int j = org.lwjgl.opengl.GL11.glGenLists(i);
-        a.add(((java.lang.Object) (java.lang.Integer.valueOf(j))));
-        a.add(((java.lang.Object) (java.lang.Integer.valueOf(i))));
+        a.add(((Object) (java.lang.Integer.valueOf(j))));
+        a.add(((Object) (java.lang.Integer.valueOf(i))));
         return j;
     }
 
@@ -33,7 +26,7 @@ public class df
     {
         org.lwjgl.opengl.GL11.glGenTextures(intbuffer);
         for(int i = intbuffer.position(); i < intbuffer.limit(); i++)
-            b.add(((java.lang.Object) (java.lang.Integer.valueOf(intbuffer.get(i)))));
+            b.add(((Object) (java.lang.Integer.valueOf(intbuffer.get(i)))));
 
     }
 
diff --git "a/temp\\src\\java/dg.java" "b/src\\main\\java/dg.java"
index 47e400a..455022e 100644
--- "a/temp\\src\\java/dg.java"
+++ "b/src\\main\\java/dg.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.List;
-
 public class dg extends bh
 {
 
diff --git "a/temp\\src\\java/dh.java" "b/src\\main\\java/dh.java"
index 5ff7d6f..63e8760 100644
--- "a/temp\\src\\java/dh.java"
+++ "b/src\\main\\java/dh.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class dh extends ly
 {
 
@@ -15,34 +12,34 @@ public class dh extends ly
         super(i, j, gb.m);
     }
 
-    public void e(cn cn1, int i, int j, int k)
+    public void e(World world1, int i, int j, int k)
     {
-        cn1.h(i, j, k, bc);
+        world1.h(i, j, k, bc);
     }
 
-    public void a(cn cn1, int i, int j, int k, int l)
+    public void a(World world1, int i, int j, int k, int l)
     {
-        cn1.h(i, j, k, bc);
+        world1.h(i, j, k, bc);
     }
 
-    public void a(cn cn1, int i, int j, int k, java.util.Random random)
+    public void a(World world1, int i, int j, int k, java.util.Random random)
     {
-        h(cn1, i, j, k);
+        h(world1, i, j, k);
     }
 
-    private void h(cn cn1, int i, int j, int k)
+    private void h(World world1, int i, int j, int k)
     {
         int l = i;
         int i1 = j;
         int j1 = k;
-        if(dh.a_(cn1, l, i1 - 1, j1) && i1 >= 0)
+        if(dh.a_(world1, l, i1 - 1, j1) && i1 >= 0)
         {
-            ff ff1 = new ff(cn1, (float)i + 0.5F, (float)j + 0.5F, (float)k + 0.5F, bc);
+            FallingSand fallingSand1 = new FallingSand(world1, (float)i + 0.5F, (float)j + 0.5F, (float)k + 0.5F, bc);
             if(a)
-                while(!ff1.aA) 
-                    ff1.e_();
+                while(!fallingSand1.aA)
+                    fallingSand1.e_();
             else
-                cn1.a(((kh) (ff1)));
+                world1.a(((kh) (fallingSand1)));
         }
     }
 
@@ -51,9 +48,9 @@ public class dh extends ly
         return 3;
     }
 
-    public static boolean a_(cn cn1, int i, int j, int k)
+    public static boolean a_(World world1, int i, int j, int k)
     {
-        int l = cn1.a(i, j, k);
+        int l = world1.a(i, j, k);
         if(l == 0)
             return true;
         if(l == ly.as.bc)
diff --git "a/temp\\src\\java/di.java" "b/src\\main\\java/di.java"
index 95cd020..70de07e 100644
--- "a/temp\\src\\java/di.java"
+++ "b/src\\main\\java/di.java"
@@ -1,9 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.PrintStream;
 import java.util.Random;
 
 public class di
@@ -132,7 +130,7 @@ public class di
         return aV;
     }
 
-    public boolean a(ev ev, dm dm, cn cn, int i1, int j1, int k1, int l1)
+    public boolean a(ev ev, Player player, World world, int i1, int j1, int k1, int l1)
     {
         return false;
     }
@@ -142,7 +140,7 @@ public class di
         return 1.0F;
     }
 
-    public ev a(ev ev, cn cn, dm dm)
+    public ev a(ev ev, World world, Player player)
     {
         return ev;
     }
@@ -157,7 +155,7 @@ public class di
         return aU;
     }
 
-    public void a(ev ev, ge ge)
+    public void a(ev ev, Mob mob)
     {
     }
 
@@ -175,7 +173,7 @@ public class di
         return false;
     }
 
-    public void b(ev ev, ge ge)
+    public void b(ev ev, Mob mob)
     {
     }
 
diff --git "a/temp\\src\\java/dj.java" "b/src\\main\\java/dj.java"
index 4b911df..4bdc782 100644
--- "a/temp\\src\\java/dj.java"
+++ "b/src\\main\\java/dj.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import org.lwjgl.opengl.GL11;
-
 public class dj extends ak
 {
 
@@ -16,22 +13,22 @@ public class dj extends ak
         b = 0.5F;
     }
 
-    public void a(ff ff1, double d1, double d2, double d3, 
-            float f, float f1)
+    public void a(FallingSand fallingSand1, double d1, double d2, double d3,
+                  float f, float f1)
     {
         org.lwjgl.opengl.GL11.glPushMatrix();
         org.lwjgl.opengl.GL11.glTranslatef((float)d1, (float)d2, (float)d3);
         a("/terrain.png");
-        ly ly1 = ly.n[ff1.a];
-        cn cn = ff1.i();
+        ly ly1 = ly.n[fallingSand1.tile];
+        World world = fallingSand1.i();
         org.lwjgl.opengl.GL11.glDisable(2896);
-        d.a(ly1, cn, eo.b(ff1.ak), eo.b(ff1.al), eo.b(ff1.am));
+        d.a(ly1, world, eo.b(fallingSand1.ak), eo.b(fallingSand1.al), eo.b(fallingSand1.am));
         org.lwjgl.opengl.GL11.glEnable(2896);
         org.lwjgl.opengl.GL11.glPopMatrix();
     }
 
     public void a(kh kh, double d1, double d2, double d3, float f, float f1)
     {
-        a((ff)kh, d1, d2, d3, f, f1);
+        a((FallingSand)kh, d1, d2, d3, f, f1);
     }
 }
diff --git "a/temp\\src\\java/dk.java" "b/src\\main\\java/dk.java"
index 7ed78f8..6aa2793 100644
--- "a/temp\\src\\java/dk.java"
+++ "b/src\\main\\java/dk.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/dl.java" "b/src\\main\\java/dl.java"
index c9da0a9..7f92fe8 100644
--- "a/temp\\src\\java/dl.java"
+++ "b/src\\main\\java/dl.java"
@@ -1,21 +1,18 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.PrintStream;
 import java.util.ArrayList;
-import java.util.List;
 
 public class dl
 {
 
     public static java.util.List a;
-    public java.lang.String b;
-    public java.lang.String c;
-    public java.lang.String d;
+    public String b;
+    public String c;
+    public String d;
 
-    public dl(java.lang.String s, java.lang.String s1)
+    public dl(String s, String s1)
     {
         b = s;
         c = s1;
@@ -24,34 +21,34 @@ public class dl
     static 
     {
         a = ((java.util.List) (new ArrayList()));
-        a.add(((java.lang.Object) (ly.u)));
-        a.add(((java.lang.Object) (ly.x)));
-        a.add(((java.lang.Object) (ly.am)));
-        a.add(((java.lang.Object) (ly.w)));
-        a.add(((java.lang.Object) (ly.y)));
-        a.add(((java.lang.Object) (ly.K)));
-        a.add(((java.lang.Object) (ly.L)));
-        a.add(((java.lang.Object) (ly.ar)));
-        a.add(((java.lang.Object) (ly.al)));
-        a.add(((java.lang.Object) (ly.N)));
-        a.add(((java.lang.Object) (ly.ap)));
-        a.add(((java.lang.Object) (ly.z)));
-        a.add(((java.lang.Object) (ly.ae)));
-        a.add(((java.lang.Object) (ly.af)));
-        a.add(((java.lang.Object) (ly.ag)));
-        a.add(((java.lang.Object) (ly.ah)));
-        a.add(((java.lang.Object) (ly.F)));
-        a.add(((java.lang.Object) (ly.G)));
-        a.add(((java.lang.Object) (ly.M)));
-        a.add(((java.lang.Object) (ly.ac)));
-        a.add(((java.lang.Object) (ly.J)));
-        a.add(((java.lang.Object) (ly.I)));
-        a.add(((java.lang.Object) (ly.H)));
-        a.add(((java.lang.Object) (ly.aj)));
-        a.add(((java.lang.Object) (ly.ai)));
-        a.add(((java.lang.Object) (ly.ao)));
-        a.add(((java.lang.Object) (ly.an)));
-        a.add(((java.lang.Object) (ly.aq)));
+        a.add(((Object) (ly.u)));
+        a.add(((Object) (ly.x)));
+        a.add(((Object) (ly.am)));
+        a.add(((Object) (ly.w)));
+        a.add(((Object) (ly.y)));
+        a.add(((Object) (ly.K)));
+        a.add(((Object) (ly.L)));
+        a.add(((Object) (ly.ar)));
+        a.add(((Object) (ly.al)));
+        a.add(((Object) (ly.N)));
+        a.add(((Object) (ly.ap)));
+        a.add(((Object) (ly.z)));
+        a.add(((Object) (ly.ae)));
+        a.add(((Object) (ly.af)));
+        a.add(((Object) (ly.ag)));
+        a.add(((Object) (ly.ah)));
+        a.add(((Object) (ly.F)));
+        a.add(((Object) (ly.G)));
+        a.add(((Object) (ly.M)));
+        a.add(((Object) (ly.ac)));
+        a.add(((Object) (ly.J)));
+        a.add(((Object) (ly.I)));
+        a.add(((Object) (ly.H)));
+        a.add(((Object) (ly.aj)));
+        a.add(((Object) (ly.ai)));
+        a.add(((Object) (ly.ao)));
+        a.add(((Object) (ly.an)));
+        a.add(((Object) (ly.aq)));
         java.lang.System.out.println(a.size());
     }
 }
diff --git "a/temp\\src\\java/dn.java" "b/src\\main\\java/dn.java"
index f746997..7f32ccf 100644
--- "a/temp\\src\\java/dn.java"
+++ "b/src\\main\\java/dn.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import org.lwjgl.opengl.GL11;
-
 public class dn extends ak
 {
 
@@ -22,67 +19,67 @@ public class dn extends ak
         e = fo1;
     }
 
-    public void a(ge ge1, double d1, double d2, double d3, 
-            float f, float f1)
+    public void a(Mob mob1, double d1, double d2, double d3,
+                  float f, float f1)
     {
         org.lwjgl.opengl.GL11.glPushMatrix();
         org.lwjgl.opengl.GL11.glDisable(2884);
-        d.k = c(ge1, f1);
-        d.l = ge1.af != null;
+        d.k = c(mob1, f1);
+        d.l = mob1.af != null;
         if(e != null)
             e.l = d.l;
         try
         {
-            float f2 = ge1.o + (ge1.n - ge1.o) * f1;
-            float f3 = ge1.as + (ge1.aq - ge1.as) * f1;
-            float f4 = ge1.at + (ge1.ar - ge1.at) * f1;
+            float f2 = mob1.o + (mob1.n - mob1.o) * f1;
+            float f3 = mob1.as + (mob1.aq - mob1.as) * f1;
+            float f4 = mob1.at + (mob1.ar - mob1.at) * f1;
             org.lwjgl.opengl.GL11.glTranslatef((float)d1, (float)d2, (float)d3);
-            float f5 = d(ge1, f1);
+            float f5 = d(mob1, f1);
             org.lwjgl.opengl.GL11.glRotatef(180F - f2, 0.0F, 1.0F, 0.0F);
-            if(ge1.J > 0)
+            if(mob1.deathTime > 0)
             {
-                float f6 = ((((float)ge1.J + f1) - 1.0F) / 20F) * 1.6F;
+                float f6 = ((((float) mob1.deathTime + f1) - 1.0F) / 20F) * 1.6F;
                 f6 = eo.c(f6);
                 if(f6 > 1.0F)
                     f6 = 1.0F;
-                org.lwjgl.opengl.GL11.glRotatef(f6 * a(ge1), 0.0F, 0.0F, 1.0F);
+                org.lwjgl.opengl.GL11.glRotatef(f6 * a(mob1), 0.0F, 0.0F, 1.0F);
             }
             float f7 = 0.0625F;
             org.lwjgl.opengl.GL11.glEnable(32826);
             org.lwjgl.opengl.GL11.glScalef(-1F, -1F, 1.0F);
-            a(ge1, f1);
+            a(mob1, f1);
             org.lwjgl.opengl.GL11.glTranslatef(0.0F, -24F * f7 - 0.0078125F, 0.0F);
-            float f8 = ge1.Q + (ge1.R - ge1.Q) * f1;
-            float f9 = ge1.S - ge1.R * (1.0F - f1);
+            float f8 = mob1.Q + (mob1.R - mob1.Q) * f1;
+            float f9 = mob1.S - mob1.R * (1.0F - f1);
             if(f8 > 1.0F)
                 f8 = 1.0F;
-            a(ge1.aY, ge1.x());
+            a(mob1.aY, mob1.x());
             org.lwjgl.opengl.GL11.glEnable(3008);
             d.b(f9, f8, f5, f3 - f2, f4, f7);
             for(int i = 0; i < 4; i++)
-                if(a(ge1, i))
+                if(a(mob1, i))
                 {
                     e.b(f9, f8, f5, f3 - f2, f4, f7);
                     org.lwjgl.opengl.GL11.glDisable(3042);
                     org.lwjgl.opengl.GL11.glEnable(3008);
                 }
 
-            b(ge1, f1);
-            float f10 = ge1.a(f1);
-            int j = a(ge1, f10, f1);
-            if((j >> 24 & 0xff) > 0 || ge1.G > 0 || ge1.J > 0)
+            b(mob1, f1);
+            float f10 = mob1.a(f1);
+            int j = a(mob1, f10, f1);
+            if((j >> 24 & 0xff) > 0 || mob1.hurtTime > 0 || mob1.deathTime > 0)
             {
                 org.lwjgl.opengl.GL11.glDisable(3553);
                 org.lwjgl.opengl.GL11.glDisable(3008);
                 org.lwjgl.opengl.GL11.glEnable(3042);
                 org.lwjgl.opengl.GL11.glBlendFunc(770, 771);
                 org.lwjgl.opengl.GL11.glDepthFunc(514);
-                if(ge1.G > 0 || ge1.J > 0)
+                if(mob1.hurtTime > 0 || mob1.deathTime > 0)
                 {
                     org.lwjgl.opengl.GL11.glColor4f(f10, 0.0F, 0.0F, 0.4F);
                     d.b(f9, f8, f5, f3 - f2, f4, f7);
                     for(int k = 0; k < 4; k++)
-                        if(a(ge1, k))
+                        if(a(mob1, k))
                         {
                             org.lwjgl.opengl.GL11.glColor4f(f10, 0.0F, 0.0F, 0.4F);
                             e.b(f9, f8, f5, f3 - f2, f4, f7);
@@ -98,7 +95,7 @@ public class dn extends ak
                     org.lwjgl.opengl.GL11.glColor4f(f11, f12, f13, f14);
                     d.b(f9, f8, f5, f3 - f2, f4, f7);
                     for(int l = 0; l < 4; l++)
-                        if(a(ge1, l))
+                        if(a(mob1, l))
                         {
                             org.lwjgl.opengl.GL11.glColor4f(f11, f12, f13, f14);
                             e.b(f9, f8, f5, f3 - f2, f4, f7);
@@ -120,41 +117,41 @@ public class dn extends ak
         org.lwjgl.opengl.GL11.glPopMatrix();
     }
 
-    protected float c(ge ge1, float f)
+    protected float c(Mob mob1, float f)
     {
-        return ge1.d(f);
+        return mob1.d(f);
     }
 
-    protected float d(ge ge1, float f)
+    protected float d(Mob mob1, float f)
     {
-        return (float)ge1.aR + f;
+        return (float) mob1.aR + f;
     }
 
-    protected void b(ge ge1, float f)
+    protected void b(Mob mob1, float f)
     {
     }
 
-    protected boolean a(ge ge1, int i)
+    protected boolean a(Mob mob1, int i)
     {
         return false;
     }
 
-    protected float a(ge ge1)
+    protected float a(Mob mob1)
     {
         return 90F;
     }
 
-    protected int a(ge ge1, float f, float f1)
+    protected int a(Mob mob1, float f, float f1)
     {
         return 0;
     }
 
-    protected void a(ge ge1, float f)
+    protected void a(Mob mob1, float f)
     {
     }
 
     public void a(kh kh, double d1, double d2, double d3, float f, float f1)
     {
-        a((ge)kh, d1, d2, d3, f, f1);
+        a((Mob)kh, d1, d2, d3, f, f1);
     }
 }
diff --git "a/temp\\src\\java/dofix.java" "b/src\\main\\java/dofix.java"
index 7a0b6b9..3c0668e 100644
--- "a/temp\\src\\java/dofix.java"
+++ "b/src\\main\\java/dofix.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames definits deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
 import java.io.IOException;
 
 public class dofix extends fn
diff --git "a/temp\\src\\java/dp.java" "b/src\\main\\java/dp.java"
index e42ec61..0835dc0 100644
--- "a/temp\\src\\java/dp.java"
+++ "b/src\\main\\java/dp.java"
@@ -1,17 +1,14 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class dp extends nq
 {
 
-    public dp(cn cn, double d, double d1, double d2, 
-            double d3, double d4, double d5)
+    public dp(World world, double d, double d1, double d2,
+              double d3, double d4, double d5)
     {
-        super(cn, d, d1, d2, d3, d4, d5);
+        super(world, d, d1, d2, d3, d4, d5);
         an = d3 + (double)((float)(java.lang.Math.random() * 2D - 1.0D) * 0.05F);
         ao = d4 + (double)((float)(java.lang.Math.random() * 2D - 1.0D) * 0.05F);
         ap = d5 + (double)((float)(java.lang.Math.random() * 2D - 1.0D) * 0.05F);
diff --git "a/temp\\src\\java/dr.java" "b/src\\main\\java/dr.java"
index 17ee8d1..5524ed7 100644
--- "a/temp\\src\\java/dr.java"
+++ "b/src\\main\\java/dr.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -7,7 +6,7 @@
 public class dr
 {
 
-    private java.lang.String a[][] = {
+    private String a[][] = {
         {
             "XXX", " # ", " # "
         }, {
@@ -18,20 +17,20 @@ public class dr
             "XX", " #", " #"
         }
     };
-    private java.lang.Object b[][];
+    private Object b[][];
 
     public dr()
     {
-        b = (new java.lang.Object[][] {
-            new java.lang.Object[] {
+        b = (new Object[][] {
+            new Object[] {
                 ly.y, ly.x, di.m, di.l, di.n
-            }, new java.lang.Object[] {
+            }, new Object[] {
                 di.r, di.v, di.e, di.z, di.G
-            }, new java.lang.Object[] {
+            }, new Object[] {
                 di.q, di.u, di.d, di.y, di.F
-            }, new java.lang.Object[] {
+            }, new Object[] {
                 di.s, di.w, di.f, di.A, di.H
-            }, new java.lang.Object[] {
+            }, new Object[] {
                 di.L, di.M, di.N, di.O, di.P
             }
         });
@@ -41,11 +40,11 @@ public class dr
     {
         for(int i = 0; i < b[0].length; i++)
         {
-            java.lang.Object obj = b[0][i];
+            Object obj = b[0][i];
             for(int j = 0; j < b.length - 1; j++)
             {
                 di di1 = (di)b[j + 1][i];
-                dw1.a(new ev(di1), new java.lang.Object[] {
+                dw1.a(new ev(di1), new Object[] {
                     a[j], java.lang.Character.valueOf('#'), di.B, java.lang.Character.valueOf('X'), obj
                 });
             }
diff --git "a/temp\\src\\java/ds.java" "b/src\\main\\java/ds.java"
index 0000462..25cfbbe 100644
--- "a/temp\\src\\java/ds.java"
+++ "b/src\\main\\java/ds.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class ds extends ly
 {
 
diff --git "a/temp\\src\\java/dt.java" "b/src\\main\\java/dt.java"
index 13a5192..a0ae70d 100644
--- "a/temp\\src\\java/dt.java"
+++ "b/src\\main\\java/dt.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class dt extends mq
 {
 
@@ -15,23 +12,23 @@ public class dt extends mq
         a(0.5F - f, 0.0F, 0.5F - f, 0.5F + f, f * 2.0F, 0.5F + f);
     }
 
-    public void a(cn cn1, int i, int j, int k, java.util.Random random)
+    public void a(World world1, int i, int j, int k, java.util.Random random)
     {
-        super.a(cn1, i, j, k, random);
-        if(cn1.j(i, j + 1, k) >= 9 && random.nextInt(5) == 0)
+        super.a(world1, i, j, k, random);
+        if(world1.j(i, j + 1, k) >= 9 && random.nextInt(5) == 0)
         {
-            int l = cn1.e(i, j, k);
+            int l = world1.e(i, j, k);
             if(l < 15)
             {
-                cn1.b(i, j, k, l + 1);
+                world1.b(i, j, k, l + 1);
             } else
             {
-                cn1.a(i, j, k, 0);
-                java.lang.Object obj = ((java.lang.Object) (new oa()));
+                world1.a(i, j, k, 0);
+                Object obj = ((Object) (new oa()));
                 if(random.nextInt(10) == 0)
-                    obj = ((java.lang.Object) (new ej()));
-                if(!((ik) (obj)).a(cn1, random, i, j, k))
-                    cn1.a(i, j, k, bc);
+                    obj = ((Object) (new ej()));
+                if(!((ik) (obj)).a(world1, random, i, j, k))
+                    world1.a(i, j, k, bc);
             }
         }
     }
diff --git "a/temp\\src\\java/du.java" "b/src\\main\\java/du.java"
index 53e6399..7937447 100644
--- "a/temp\\src\\java/du.java"
+++ "b/src\\main\\java/du.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
 import java.io.IOException;
 
 public class du extends fn
diff --git "a/temp\\src\\java/dv.java" "b/src\\main\\java/dv.java"
index 5a971e0..9dd78c2 100644
--- "a/temp\\src\\java/dv.java"
+++ "b/src\\main\\java/dv.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/dw.java" "b/src\\main\\java/dw.java"
index e05062c..c121e4a 100644
--- "a/temp\\src\\java/dw.java"
+++ "b/src\\main\\java/dw.java"
@@ -1,14 +1,9 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.PrintStream;
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
 
 public class dw
 {
@@ -30,136 +25,136 @@ public class dw
         (new hr()).a(this);
         (new fj()).a(this);
         (new l()).a(this);
-        a(new ev(di.aI, 3), new java.lang.Object[] {
+        a(new ev(di.aI, 3), new Object[] {
             "###", java.lang.Character.valueOf('#'), di.aH
         });
-        a(new ev(di.aJ, 1), new java.lang.Object[] {
+        a(new ev(di.aJ, 1), new Object[] {
             "#", "#", "#", java.lang.Character.valueOf('#'), di.aI
         });
-        a(new ev(ly.ba, 2), new java.lang.Object[] {
+        a(new ev(ly.ba, 2), new Object[] {
             "###", "###", java.lang.Character.valueOf('#'), di.B
         });
-        a(new ev(ly.aZ, 1), new java.lang.Object[] {
+        a(new ev(ly.aZ, 1), new Object[] {
             "###", "#X#", "###", java.lang.Character.valueOf('#'), ly.y, java.lang.Character.valueOf('X'), di.l
         });
-        a(new ev(ly.ao, 1), new java.lang.Object[] {
+        a(new ev(ly.ao, 1), new Object[] {
             "###", "XXX", "###", java.lang.Character.valueOf('#'), ly.y, java.lang.Character.valueOf('X'), di.aJ
         });
-        a(new ev(ly.aV, 1), new java.lang.Object[] {
+        a(new ev(ly.aV, 1), new Object[] {
             "##", "##", java.lang.Character.valueOf('#'), di.aB
         });
-        a(new ev(ly.aX, 1), new java.lang.Object[] {
+        a(new ev(ly.aX, 1), new Object[] {
             "##", "##", java.lang.Character.valueOf('#'), di.aG
         });
-        a(new ev(ly.am, 1), new java.lang.Object[] {
+        a(new ev(ly.am, 1), new Object[] {
             "##", "##", java.lang.Character.valueOf('#'), di.aF
         });
-        a(new ev(ly.ac, 1), new java.lang.Object[] {
+        a(new ev(ly.ac, 1), new Object[] {
             "###", "###", "###", java.lang.Character.valueOf('#'), di.I
         });
-        a(new ev(ly.an, 1), new java.lang.Object[] {
+        a(new ev(ly.an, 1), new Object[] {
             "X#X", "#X#", "X#X", java.lang.Character.valueOf('X'), di.K, java.lang.Character.valueOf('#'), ly.F
         });
-        a(new ev(ly.al, 3), new java.lang.Object[] {
+        a(new ev(ly.al, 3), new Object[] {
             "###", java.lang.Character.valueOf('#'), ly.x
         });
-        a(new ev(ly.aG, 1), new java.lang.Object[] {
+        a(new ev(ly.aG, 1), new Object[] {
             "# #", "###", "# #", java.lang.Character.valueOf('#'), di.B
         });
-        a(new ev(di.at, 1), new java.lang.Object[] {
+        a(new ev(di.at, 1), new Object[] {
             "##", "##", "##", java.lang.Character.valueOf('#'), ly.y
         });
-        a(new ev(di.az, 1), new java.lang.Object[] {
+        a(new ev(di.az, 1), new Object[] {
             "##", "##", "##", java.lang.Character.valueOf('#'), di.m
         });
-        a(new ev(di.as, 1), new java.lang.Object[] {
+        a(new ev(di.as, 1), new Object[] {
             "###", "###", " X ", java.lang.Character.valueOf('#'), ly.y, java.lang.Character.valueOf('X'), di.B
         });
-        a(new ev(ly.y, 4), new java.lang.Object[] {
+        a(new ev(ly.y, 4), new Object[] {
             "#", java.lang.Character.valueOf('#'), ly.K
         });
-        a(new ev(di.B, 4), new java.lang.Object[] {
+        a(new ev(di.B, 4), new Object[] {
             "#", "#", java.lang.Character.valueOf('#'), ly.y
         });
-        a(new ev(ly.ar, 4), new java.lang.Object[] {
+        a(new ev(ly.ar, 4), new Object[] {
             "X", "#", java.lang.Character.valueOf('X'), di.k, java.lang.Character.valueOf('#'), di.B
         });
-        a(new ev(di.C, 4), new java.lang.Object[] {
+        a(new ev(di.C, 4), new Object[] {
             "# #", " # ", java.lang.Character.valueOf('#'), ly.y
         });
-        a(new ev(ly.aH, 16), new java.lang.Object[] {
+        a(new ev(ly.aH, 16), new Object[] {
             "X X", "X#X", "X X", java.lang.Character.valueOf('X'), di.m, java.lang.Character.valueOf('#'), di.B
         });
-        a(new ev(di.ax, 1), new java.lang.Object[] {
+        a(new ev(di.ax, 1), new Object[] {
             "# #", "###", java.lang.Character.valueOf('#'), di.m
         });
-        a(new ev(di.aL, 1), new java.lang.Object[] {
+        a(new ev(di.aL, 1), new Object[] {
             "A", "B", java.lang.Character.valueOf('A'), ly.av, java.lang.Character.valueOf('B'), di.ax
         });
-        a(new ev(di.aM, 1), new java.lang.Object[] {
+        a(new ev(di.aM, 1), new Object[] {
             "A", "B", java.lang.Character.valueOf('A'), ly.aC, java.lang.Character.valueOf('B'), di.ax
         });
-        a(new ev(di.aC, 1), new java.lang.Object[] {
+        a(new ev(di.aC, 1), new Object[] {
             "# #", "###", java.lang.Character.valueOf('#'), ly.y
         });
-        a(new ev(di.au, 1), new java.lang.Object[] {
+        a(new ev(di.au, 1), new Object[] {
             "# #", " # ", java.lang.Character.valueOf('#'), di.m
         });
-        a(new ev(di.g, 1), new java.lang.Object[] {
+        a(new ev(di.g, 1), new Object[] {
             "A ", " B", java.lang.Character.valueOf('A'), di.m, java.lang.Character.valueOf('B'), di.an
         });
-        a(new ev(di.S, 1), new java.lang.Object[] {
+        a(new ev(di.S, 1), new Object[] {
             "###", java.lang.Character.valueOf('#'), di.R
         });
-        a(new ev(ly.au, 4), new java.lang.Object[] {
+        a(new ev(ly.au, 4), new Object[] {
             "#  ", "## ", "###", java.lang.Character.valueOf('#'), ly.y
         });
-        a(new ev(di.aP, 1), new java.lang.Object[] {
+        a(new ev(di.aP, 1), new Object[] {
             "  #", " #X", "# X", java.lang.Character.valueOf('#'), di.B, java.lang.Character.valueOf('X'), di.I
         });
-        a(new ev(ly.aI, 4), new java.lang.Object[] {
+        a(new ev(ly.aI, 4), new Object[] {
             "#  ", "## ", "###", java.lang.Character.valueOf('#'), ly.x
         });
-        a(new ev(di.aq, 1), new java.lang.Object[] {
+        a(new ev(di.aq, 1), new Object[] {
             "###", "#X#", "###", java.lang.Character.valueOf('#'), di.B, java.lang.Character.valueOf('X'), ly.ac
         });
-        a(new ev(di.ar, 1), new java.lang.Object[] {
+        a(new ev(di.ar, 1), new Object[] {
             "###", "#X#", "###", java.lang.Character.valueOf('#'), ly.ai, java.lang.Character.valueOf('X'), di.h
         });
-        a(new ev(ly.aK, 1), new java.lang.Object[] {
+        a(new ev(ly.aK, 1), new Object[] {
             "X", "#", java.lang.Character.valueOf('#'), ly.x, java.lang.Character.valueOf('X'), di.B
         });
-        a(new ev(ly.aR, 1), new java.lang.Object[] {
+        a(new ev(ly.aR, 1), new Object[] {
             "X", "#", java.lang.Character.valueOf('#'), di.B, java.lang.Character.valueOf('X'), di.aA
         });
-        a(new ev(di.aO, 1), new java.lang.Object[] {
+        a(new ev(di.aO, 1), new Object[] {
             " # ", "#X#", " # ", java.lang.Character.valueOf('#'), di.m, java.lang.Character.valueOf('X'), di.aA
         });
-        a(new ev(ly.aS, 1), new java.lang.Object[] {
+        a(new ev(ly.aS, 1), new Object[] {
             "#", "#", java.lang.Character.valueOf('#'), ly.u
         });
-        a(new ev(ly.aL, 1), new java.lang.Object[] {
+        a(new ev(ly.aL, 1), new Object[] {
             "###", java.lang.Character.valueOf('#'), ly.u
         });
-        a(new ev(ly.aN, 1), new java.lang.Object[] {
+        a(new ev(ly.aN, 1), new Object[] {
             "###", java.lang.Character.valueOf('#'), ly.y
         });
         java.util.Collections.sort(b, ((java.util.Comparator) (new fs(this))));
         java.lang.System.out.println((new StringBuilder()).append(b.size()).append(" recipes").toString());
     }
 
-    void a(ev ev1, java.lang.Object aobj[])
+    void a(ev ev1, Object aobj[])
     {
-        java.lang.String s = "";
+        String s = "";
         int i = 0;
         int j = 0;
         int k = 0;
-        if(aobj[i] instanceof java.lang.String[])
+        if(aobj[i] instanceof String[])
         {
-            java.lang.String as[] = (java.lang.String[])(java.lang.String[])aobj[i++];
+            String as[] = (String[])(String[])aobj[i++];
             for(int i1 = 0; i1 < as.length; i1++)
             {
-                java.lang.String s2 = as[i1];
+                String s2 = as[i1];
                 k++;
                 j = s2.length();
                 s = (new StringBuilder()).append(s).append(s2).toString();
@@ -167,9 +162,9 @@ public class dw
 
         } else
         {
-            while(aobj[i] instanceof java.lang.String) 
+            while(aobj[i] instanceof String) 
             {
-                java.lang.String s1 = (java.lang.String)aobj[i++];
+                String s1 = (String)aobj[i++];
                 k++;
                 j = s1.length();
                 s = (new StringBuilder()).append(s).append(s1).toString();
@@ -185,20 +180,20 @@ public class dw
             else
             if(aobj[i + 1] instanceof ly)
                 j1 = ((ly)aobj[i + 1]).bc;
-            ((java.util.Map) (hashmap)).put(((java.lang.Object) (character)), ((java.lang.Object) (java.lang.Integer.valueOf(j1))));
+            ((java.util.Map) (hashmap)).put(((Object) (character)), ((Object) (java.lang.Integer.valueOf(j1))));
         }
 
         int ai[] = new int[j * k];
         for(int k1 = 0; k1 < j * k; k1++)
         {
             char c = s.charAt(k1);
-            if(((java.util.Map) (hashmap)).containsKey(((java.lang.Object) (java.lang.Character.valueOf(c)))))
-                ai[k1] = ((java.lang.Integer)((java.util.Map) (hashmap)).get(((java.lang.Object) (java.lang.Character.valueOf(c))))).intValue();
+            if(((java.util.Map) (hashmap)).containsKey(((Object) (java.lang.Character.valueOf(c)))))
+                ai[k1] = ((java.lang.Integer)((java.util.Map) (hashmap)).get(((Object) (java.lang.Character.valueOf(c))))).intValue();
             else
                 ai[k1] = -1;
         }
 
-        b.add(((java.lang.Object) (new bv(j, k, ai, ev1))));
+        b.add(((Object) (new bv(j, k, ai, ev1))));
     }
 
     public ev a(int ai[])
diff --git "a/temp\\src\\java/dz.java" "b/src\\main\\java/dz.java"
index b68bd9b..9d4cfae 100644
--- "a/temp\\src\\java/dz.java"
+++ "b/src\\main\\java/dz.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
 import java.io.IOException;
 
 public class dz extends fn
diff --git "a/temp\\src\\java/e.java" "b/src\\main\\java/e.java"
index 6f113d9..8df2078 100644
--- "a/temp\\src\\java/e.java"
+++ "b/src\\main\\java/e.java"
@@ -1,24 +1,18 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.nio.IntBuffer;
 import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
 import java.util.Random;
 //import Minecraft;
-import org.lwjgl.opengl.ARBOcclusionQuery;
-import org.lwjgl.opengl.GL11;
+
 
 public class e
     implements im
 {
 
     public java.util.List a;
-    private cn k;
+    private World k;
     private ey l;
     private java.util.List m;
     private bn n[];
@@ -195,19 +189,19 @@ public class e
         ho1.a();
     }
 
-    public void a(cn cn1)
+    public void a(World world1)
     {
         if(k != null)
             k.b(((im) (this)));
         f = -9999D;
         g = -9999D;
         h = -9999D;
-        kx.a.a(cn1);
-        k = cn1;
-        u = new bc(((nm) (cn1)));
-        if(cn1 != null)
+        kx.a.a(world1);
+        k = world1;
+        u = new bc(((nm) (world1)));
+        if(world1 != null)
         {
-            cn1.a(((im) (this)));
+            world1.a(((im) (this)));
             a();
         }
     }
@@ -258,7 +252,7 @@ public class e
                     o[(l2 * q + k2) * p + j2].w = l1++;
                     o[(l2 * q + k2) * p + j2].f();
                     n[(l2 * q + k2) * p + j2] = o[(l2 * q + k2) * p + j2];
-                    m.add(((java.lang.Object) (o[(l2 * q + k2) * p + j2])));
+                    m.add(((Object) (o[(l2 * q + k2) * p + j2])));
                     k1 += 3;
                 }
 
@@ -270,7 +264,7 @@ public class e
         {
             bi bi1 = t.g;
             b(eo.b(((kh) (bi1)).ak), eo.b(((kh) (bi1)).al), eo.b(((kh) (bi1)).am));
-            java.util.Arrays.sort(((java.lang.Object []) (n)), ((java.util.Comparator) (new fb(((kh) (bi1))))));
+            java.util.Arrays.sort(((Object []) (n)), ((java.util.Comparator) (new fb(((kh) (bi1))))));
         }
         I = 2;
     }
@@ -282,8 +276,8 @@ public class e
             I--;
             return;
         }
-        fz.a.a(k, l, t.o, ((dm) (t.g)), f1);
-        kx.a.a(k, l, t.o, ((dm) (t.g)), t.y, f1);
+        fz.a.a(k, l, t.o, ((Player) (t.g)), f1);
+        kx.a.a(k, l, t.o, ((Player) (t.g)), t.y, f1);
         J = 0;
         K = 0;
         L = 0;
@@ -311,12 +305,12 @@ public class e
 
     }
 
-    public java.lang.String b()
+    public String b()
     {
         return (new StringBuilder()).append("C: ").append(P).append("/").append(M).append(". F: ").append(N).append(", O: ").append(O).append(", E: ").append(Q).toString();
     }
 
-    public java.lang.String c()
+    public String c()
     {
         return (new StringBuilder()).append("E: ").append(K).append("/").append(J).append(". B: ").append(L).append(", I: ").append(J - L - K).toString();
     }
@@ -369,7 +363,7 @@ public class e
                     boolean flag = bn1.u;
                     bn1.a(k2, i4, j3);
                     if(!flag && bn1.u)
-                        m.add(((java.lang.Object) (bn1)));
+                        m.add(((Object) (bn1)));
                 }
 
             }
@@ -378,7 +372,7 @@ public class e
 
     }
 
-    public int a(dm dm1, int i1, double d1)
+    public int a(Player player1, int i1, double d1)
     {
         if(t.y.e != H)
             a();
@@ -390,19 +384,19 @@ public class e
             P = 0;
             Q = 0;
         }
-        double d2 = dm1.aI + (dm1.ak - dm1.aI) * d1;
-        double d3 = dm1.aJ + (dm1.al - dm1.aJ) * d1;
-        double d4 = dm1.aK + (dm1.am - dm1.aK) * d1;
-        double d5 = dm1.ak - f;
-        double d6 = dm1.al - g;
-        double d7 = dm1.am - h;
+        double d2 = player1.aI + (player1.ak - player1.aI) * d1;
+        double d3 = player1.aJ + (player1.al - player1.aJ) * d1;
+        double d4 = player1.aK + (player1.am - player1.aK) * d1;
+        double d5 = player1.ak - f;
+        double d6 = player1.al - g;
+        double d7 = player1.am - h;
         if(d5 * d5 + d6 * d6 + d7 * d7 > 16D)
         {
-            f = dm1.ak;
-            g = dm1.al;
-            h = dm1.am;
-            b(eo.b(dm1.ak), eo.b(dm1.al), eo.b(dm1.am));
-            java.util.Arrays.sort(((java.lang.Object []) (n)), ((java.util.Comparator) (new fb(((kh) (dm1))))));
+            f = player1.ak;
+            g = player1.al;
+            h = player1.am;
+            b(eo.b(player1.ak), eo.b(player1.al), eo.b(player1.am));
+            java.util.Arrays.sort(((Object []) (n)), ((java.util.Comparator) (new fb(((kh) (player1))))));
         }
         int j1 = 0;
         if(w && !t.y.g && i1 == 0)
@@ -442,7 +436,7 @@ public class e
                         n[j2].x = true;
                     if(!n[j2].o || n[j2].y)
                         continue;
-                    float f4 = eo.c(n[j2].a(((kh) (dm1))));
+                    float f4 = eo.c(n[j2].a(((kh) (player1))));
                     int k2 = (int)(1.0F + f4 / 128F);
                     if(x % k2 != j2 % k2)
                         continue;
@@ -525,15 +519,15 @@ public class e
             int j2 = n[i2].a(k1);
             if(j2 >= 0)
             {
-                R.add(((java.lang.Object) (n[i2])));
+                R.add(((Object) (n[i2])));
                 l1++;
             }
         }
 
         bi bi1 = t.g;
-        double d2 = ((dm) (bi1)).aI + (((dm) (bi1)).ak - ((dm) (bi1)).aI) * d1;
-        double d3 = ((dm) (bi1)).aJ + (((dm) (bi1)).al - ((dm) (bi1)).aJ) * d1;
-        double d4 = ((dm) (bi1)).aK + (((dm) (bi1)).am - ((dm) (bi1)).aK) * d1;
+        double d2 = ((Player) (bi1)).aI + (((Player) (bi1)).ak - ((Player) (bi1)).aI) * d1;
+        double d3 = ((Player) (bi1)).aJ + (((Player) (bi1)).al - ((Player) (bi1)).aJ) * d1;
+        double d4 = ((Player) (bi1)).aK + (((Player) (bi1)).am - ((Player) (bi1)).aK) * d1;
         int k2 = 0;
         for(int l2 = 0; l2 < S.length; l2++)
             S[l2].b();
@@ -834,9 +828,9 @@ public class e
         org.lwjgl.opengl.GL11.glEnable(2884);
     }
 
-    public boolean a(dm dm1, boolean flag)
+    public boolean a(Player player1, boolean flag)
     {
-        java.util.Collections.sort(m, ((java.util.Comparator) (new gl(dm1))));
+        java.util.Collections.sort(m, ((java.util.Comparator) (new gl(player1))));
         int i1 = m.size() - 1;
         int j1 = m.size();
         for(int k1 = 0; k1 < j1; k1++)
@@ -844,7 +838,7 @@ public class e
             bn bn1 = (bn)m.get(i1 - k1);
             if(!flag)
             {
-                if(bn1.a(((kh) (dm1))) > 1024F)
+                if(bn1.a(((kh) (player1))) > 1024F)
                     if(bn1.o)
                     {
                         if(k1 >= 3)
@@ -856,14 +850,14 @@ public class e
             if(!bn1.o)
                 continue;
             bn1.a();
-            m.remove(((java.lang.Object) (bn1)));
+            m.remove(((Object) (bn1)));
             bn1.u = false;
         }
 
         return m.size() == 0;
     }
 
-    public void a(dm dm1, mf mf1, int i1, ev ev, float f1)
+    public void a(Player player1, mf mf1, int i1, ev ev, float f1)
     {
         ho ho1 = ho.a;
         org.lwjgl.opengl.GL11.glEnable(3042);
@@ -885,9 +879,9 @@ public class e
                 org.lwjgl.opengl.GL11.glPolygonOffset(-3F, -3F);
                 org.lwjgl.opengl.GL11.glEnable(32823);
                 ho1.b();
-                double d1 = dm1.aI + (dm1.ak - dm1.aI) * (double)f1;
-                double d2 = dm1.aJ + (dm1.al - dm1.aJ) * (double)f1;
-                double d3 = dm1.aK + (dm1.am - dm1.aK) * (double)f1;
+                double d1 = player1.aI + (player1.ak - player1.aI) * (double)f1;
+                double d2 = player1.aJ + (player1.al - player1.aJ) * (double)f1;
+                double d3 = player1.aK + (player1.am - player1.aK) * (double)f1;
                 ho1.b(-d1, -d2, -d3);
                 ho1.c();
                 if(ly1 == null)
@@ -929,7 +923,7 @@ public class e
         org.lwjgl.opengl.GL11.glDisable(3008);
     }
 
-    public void b(dm dm1, mf mf1, int i1, ev ev, float f1)
+    public void b(Player player1, mf mf1, int i1, ev ev, float f1)
     {
         if(i1 == 0 && mf1.a == 0)
         {
@@ -944,9 +938,9 @@ public class e
             if(j1 > 0)
             {
                 ly.n[j1].a(((nm) (k)), mf1.b, mf1.c, mf1.d);
-                double d1 = dm1.aI + (dm1.ak - dm1.aI) * (double)f1;
-                double d2 = dm1.aJ + (dm1.al - dm1.aJ) * (double)f1;
-                double d3 = dm1.aK + (dm1.am - dm1.aK) * (double)f1;
+                double d1 = player1.aI + (player1.ak - player1.aI) * (double)f1;
+                double d2 = player1.aJ + (player1.al - player1.aJ) * (double)f1;
+                double d3 = player1.aK + (player1.am - player1.aK) * (double)f1;
                 a(ly.n[j1].f(k, mf1.b, mf1.c, mf1.d).b(f2, f2, f2).c(-d1, -d2, -d3));
             }
             org.lwjgl.opengl.GL11.glDepthMask(true);
@@ -1010,7 +1004,7 @@ public class e
                     int k5 = (j5 * q + l4) * p + j4;
                     bn bn1 = o[k5];
                     if(!bn1.u)
-                        m.add(((java.lang.Object) (bn1)));
+                        m.add(((Object) (bn1)));
                     bn1.f();
                 }
 
@@ -1039,14 +1033,14 @@ public class e
         j++;
     }
 
-    public void a(java.lang.String s1, int i1, int j1, int k1)
+    public void a(String s1, int i1, int j1, int k1)
     {
         if(s1 != null)
             t.u.b((new StringBuilder()).append("C418 - ").append(s1).toString());
         t.A.a(s1, i1, j1, k1, 1.0F, 1.0F);
     }
 
-    public void a(java.lang.String s1, double d1, double d2, double d3, 
+    public void a(String s1, double d1, double d2, double d3, 
             float f1, float f2)
     {
         float f3 = 16F;
@@ -1056,7 +1050,7 @@ public class e
             t.A.b(s1, (float)d1, (float)d2, (float)d3, f1, f2);
     }
 
-    public void a(java.lang.String s1, double d1, double d2, double d3, 
+    public void a(String s1, double d1, double d2, double d3, 
             double d4, double d5, double d6)
     {
         double d7 = t.g.ak - d1;
@@ -1114,7 +1108,7 @@ public class e
             if(!o[i1].A)
                 continue;
             if(!o[i1].u)
-                m.add(((java.lang.Object) (o[i1])));
+                m.add(((Object) (o[i1])));
             o[i1].f();
         }
 
diff --git "a/temp\\src\\java/ea.java" "b/src\\main\\java/ea.java"
index 369b62c..0067121 100644
--- "a/temp\\src\\java/ea.java"
+++ "b/src\\main\\java/ea.java"
@@ -1,11 +1,9 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.List;
 //import Minecraft;
-import org.lwjgl.opengl.GL11;
+
 
 public class ea extends ee
 {
@@ -28,19 +26,19 @@ public class ea extends ee
         for(int i1 = 0; i1 < m; i1++)
         {
             for(int l1 = 0; l1 < 9; l1++)
-                this.i.add(((java.lang.Object) (new mm(((ee) (this)), gh2, l1 + i1 * 9, 8 + l1 * 18, 18 + i1 * 18))));
+                this.i.add(((Object) (new mm(((ee) (this)), gh2, l1 + i1 * 9, 8 + l1 * 18, 18 + i1 * 18))));
 
         }
 
         for(int j1 = 0; j1 < 3; j1++)
         {
             for(int i2 = 0; i2 < 9; i2++)
-                this.i.add(((java.lang.Object) (new mm(((ee) (this)), gh1, i2 + (j1 + 1) * 9, 8 + i2 * 18, 103 + j1 * 18 + k))));
+                this.i.add(((Object) (new mm(((ee) (this)), gh1, i2 + (j1 + 1) * 9, 8 + i2 * 18, 103 + j1 * 18 + k))));
 
         }
 
         for(int k1 = 0; k1 < 9; k1++)
-            this.i.add(((java.lang.Object) (new mm(((ee) (this)), gh1, k1, 8 + k1 * 18, 161 + k))));
+            this.i.add(((Object) (new mm(((ee) (this)), gh1, k1, 8 + k1 * 18, 161 + k))));
 
     }
 
diff --git "a/temp\\src\\java/eb.java" "b/src\\main\\java/eb.java"
index 86988bf..51cbb8c 100644
--- "a/temp\\src\\java/eb.java"
+++ "b/src\\main\\java/eb.java"
@@ -1,15 +1,9 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.File;
-import java.net.MalformedURLException;
-import java.net.URI;
 import java.util.ArrayList;
 import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
 import java.util.Random;
 
 public class eb
@@ -30,20 +24,20 @@ public class eb
         b = true;
     }
 
-    public ah a(java.lang.String s, java.io.File file)
+    public ah a(String s, java.io.File file)
     {
         try
         {
-            java.lang.String s1 = s;
+            String s1 = s;
             s = s.substring(0, s.indexOf("."));
             if(b)
                 for(; java.lang.Character.isDigit(s.charAt(s.length() - 1)); s = s.substring(0, s.length() - 1));
             s = s.replaceAll("/", ".");
-            if(!d.containsKey(((java.lang.Object) (s))))
-                d.put(((java.lang.Object) (s)), ((java.lang.Object) (new ArrayList())));
+            if(!d.containsKey(((Object) (s))))
+                d.put(((Object) (s)), ((Object) (new ArrayList())));
             ah ah1 = new ah(s1, file.toURI().toURL());
-            ((java.util.List)d.get(((java.lang.Object) (s)))).add(((java.lang.Object) (ah1)));
-            e.add(((java.lang.Object) (ah1)));
+            ((java.util.List)d.get(((Object) (s)))).add(((Object) (ah1)));
+            e.add(((Object) (ah1)));
             a++;
             return ah1;
         }
@@ -54,9 +48,9 @@ public class eb
         }
     }
 
-    public ah a(java.lang.String s)
+    public ah a(String s)
     {
-        java.util.List list = (java.util.List)d.get(((java.lang.Object) (s)));
+        java.util.List list = (java.util.List)d.get(((Object) (s)));
         if(list == null)
             return null;
         else
diff --git "a/temp\\src\\java/ec.java" "b/src\\main\\java/ec.java"
index d6cabf7..1536b7f 100644
--- "a/temp\\src\\java/ec.java"
+++ "b/src\\main\\java/ec.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -17,7 +16,7 @@ public class ec extends di
         aT = 1;
     }
 
-    public boolean a(ev ev1, dm dm1, cn cn1, int i, int j, int k, int l)
+    public boolean a(ev ev1, Player player1, World world1, int i, int j, int k, int l)
     {
         if(l != 1)
             return false;
@@ -27,9 +26,9 @@ public class ec extends di
             ly1 = ly.aF;
         else
             ly1 = ly.aM;
-        if(!ly1.a(cn1, i, j, k))
+        if(!ly1.a(world1, i, j, k))
             return false;
-        int i1 = eo.b((double)(((dm1.aq + 180F) * 4F) / 360F) - 0.5D) & 3;
+        int i1 = eo.b((double)(((player1.aq + 180F) * 4F) / 360F) - 0.5D) & 3;
         byte byte0 = 0;
         byte byte1 = 0;
         if(i1 == 0)
@@ -40,10 +39,10 @@ public class ec extends di
             byte1 = -1;
         if(i1 == 3)
             byte0 = 1;
-        int j1 = (cn1.g(i - byte0, j, k - byte1) ? 1 : 0) + (cn1.g(i - byte0, j + 1, k - byte1) ? 1 : 0);
-        int k1 = (cn1.g(i + byte0, j, k + byte1) ? 1 : 0) + (cn1.g(i + byte0, j + 1, k + byte1) ? 1 : 0);
-        boolean flag = cn1.a(i - byte0, j, k - byte1) == ly1.bc || cn1.a(i - byte0, j + 1, k - byte1) == ly1.bc;
-        boolean flag1 = cn1.a(i + byte0, j, k + byte1) == ly1.bc || cn1.a(i + byte0, j + 1, k + byte1) == ly1.bc;
+        int j1 = (world1.g(i - byte0, j, k - byte1) ? 1 : 0) + (world1.g(i - byte0, j + 1, k - byte1) ? 1 : 0);
+        int k1 = (world1.g(i + byte0, j, k + byte1) ? 1 : 0) + (world1.g(i + byte0, j + 1, k + byte1) ? 1 : 0);
+        boolean flag = world1.a(i - byte0, j, k - byte1) == ly1.bc || world1.a(i - byte0, j + 1, k - byte1) == ly1.bc;
+        boolean flag1 = world1.a(i + byte0, j, k + byte1) == ly1.bc || world1.a(i + byte0, j + 1, k + byte1) == ly1.bc;
         boolean flag2 = false;
         if(flag && !flag1)
             flag2 = true;
@@ -55,11 +54,11 @@ public class ec extends di
             i1 = i1 - 1 & 3;
             i1 += 4;
         }
-        cn1.d(i, j, k, ly1.bc);
-        cn1.b(i, j, k, i1);
-        cn1.d(i, j + 1, k, ly1.bc);
-        cn1.b(i, j + 1, k, i1 + 8);
-        ev1.a--;
+        world1.d(i, j, k, ly1.bc);
+        world1.b(i, j, k, i1);
+        world1.d(i, j + 1, k, ly1.bc);
+        world1.b(i, j + 1, k, i1 + 8);
+        ev1.count--;
         return true;
     }
 }
diff --git "a/temp\\src\\java/ed.java" "b/src\\main\\java/ed.java"
index ac40df6..bda0e97 100644
--- "a/temp\\src\\java/ed.java"
+++ "b/src\\main\\java/ed.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/ee.java" "b/src\\main\\java/ee.java"
index 2c1008f..8d7d303 100644
--- "a/temp\\src\\java/ee.java"
+++ "b/src\\main\\java/ee.java"
@@ -1,12 +1,10 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
 import java.util.ArrayList;
-import java.util.List;
 //import Minecraft;
-import org.lwjgl.opengl.GL11;
+
 
 public abstract class ee extends bh
 {
@@ -123,67 +121,67 @@ public abstract class ee extends bh
                 if(ev1 != null || eu1.e != null)
                     if(ev1 != null && eu1.e == null)
                     {
-                        int k1 = i1 != 0 ? (ev1.a + 1) / 2 : ev1.a;
+                        int k1 = i1 != 0 ? (ev1.count + 1) / 2 : ev1.count;
                         eu1.e = dk1.b.a(dk1.a, k1);
-                        if(ev1.a == 0)
+                        if(ev1.count == 0)
                             dk1.b(((ev) (null)));
                         dk1.a();
                     } else
                     if(ev1 == null && eu1.e != null && dk1.a(eu1.e))
                     {
-                        int l1 = i1 != 0 ? 1 : eu1.e.a;
+                        int l1 = i1 != 0 ? 1 : eu1.e.count;
                         if(l1 > dk1.b.e())
                             l1 = dk1.b.e();
                         dk1.b(eu1.e.a(l1));
-                        if(eu1.e.a == 0)
+                        if(eu1.e.count == 0)
                             eu1.e = null;
                     } else
                     if(ev1 != null && eu1.e != null)
                         if(dk1.a(eu1.e))
                         {
-                            if(ev1.c != eu1.e.c)
+                            if(ev1.id != eu1.e.id)
                             {
-                                if(eu1.e.a <= dk1.b.e())
+                                if(eu1.e.count <= dk1.b.e())
                                 {
                                     ev ev2 = ev1;
                                     dk1.b(eu1.e);
                                     eu1.e = ev2;
                                 }
                             } else
-                            if(ev1.c == eu1.e.c)
+                            if(ev1.id == eu1.e.id)
                                 if(i1 == 0)
                                 {
-                                    int i2 = eu1.e.a;
-                                    if(i2 > dk1.b.e() - ev1.a)
-                                        i2 = dk1.b.e() - ev1.a;
-                                    if(i2 > eu1.e.c() - ev1.a)
-                                        i2 = eu1.e.c() - ev1.a;
+                                    int i2 = eu1.e.count;
+                                    if(i2 > dk1.b.e() - ev1.count)
+                                        i2 = dk1.b.e() - ev1.count;
+                                    if(i2 > eu1.e.c() - ev1.count)
+                                        i2 = eu1.e.c() - ev1.count;
                                     eu1.e.a(i2);
-                                    if(eu1.e.a == 0)
+                                    if(eu1.e.count == 0)
                                         eu1.e = null;
-                                    ev1.a += i2;
+                                    ev1.count += i2;
                                 } else
                                 if(i1 == 1)
                                 {
                                     int j2 = 1;
-                                    if(j2 > dk1.b.e() - ev1.a)
-                                        j2 = dk1.b.e() - ev1.a;
-                                    if(j2 > eu1.e.c() - ev1.a)
-                                        j2 = eu1.e.c() - ev1.a;
+                                    if(j2 > dk1.b.e() - ev1.count)
+                                        j2 = dk1.b.e() - ev1.count;
+                                    if(j2 > eu1.e.c() - ev1.count)
+                                        j2 = eu1.e.c() - ev1.count;
                                     eu1.e.a(j2);
-                                    if(eu1.e.a == 0)
+                                    if(eu1.e.count == 0)
                                         eu1.e = null;
-                                    ev1.a += j2;
+                                    ev1.count += j2;
                                 }
                         } else
-                        if(ev1.c == eu1.e.c && eu1.e.c() > 1)
+                        if(ev1.id == eu1.e.id && eu1.e.c() > 1)
                         {
-                            int k2 = ev1.a;
-                            if(k2 > 0 && k2 + eu1.e.a <= eu1.e.c())
+                            int k2 = ev1.count;
+                            if(k2 > 0 && k2 + eu1.e.count <= eu1.e.c())
                             {
-                                eu1.e.a += k2;
+                                eu1.e.count += k2;
                                 ev1.a(k2);
-                                if(ev1.a == 0)
+                                if(ev1.count == 0)
                                     dk1.b(((ev) (null)));
                                 dk1.a();
                             }
@@ -199,13 +197,13 @@ public abstract class ee extends bh
                     bi bi1 = b.g;
                     if(i1 == 0)
                     {
-                        ((dm) (bi1)).a(eu1.e);
+                        ((Player) (bi1)).a(eu1.e);
                         eu1.e = null;
                     }
                     if(i1 == 1)
                     {
-                        ((dm) (bi1)).a(eu1.e.a(1));
-                        if(eu1.e.a == 0)
+                        ((Player) (bi1)).a(eu1.e.a(1));
+                        if(eu1.e.count == 0)
                             eu1.e = null;
                     }
                 }
diff --git "a/temp\\src\\java/ef.java" "b/src\\main\\java/ef.java"
index fc6b219..c0f03cc 100644
--- "a/temp\\src\\java/ef.java"
+++ "b/src\\main\\java/ef.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -12,7 +11,7 @@ public class ef extends di
         super(i);
     }
 
-    public boolean a(ev ev1, dm dm, cn cn1, int i, int j, int k, int l)
+    public boolean a(ev ev1, Player player, World world1, int i, int j, int k, int l)
     {
         if(l == 0)
             j--;
@@ -26,12 +25,12 @@ public class ef extends di
             i--;
         if(l == 5)
             i++;
-        if(cn1.a(i, j, k) != 0)
+        if(world1.a(i, j, k) != 0)
             return false;
-        if(ly.aw.a(cn1, i, j, k))
+        if(ly.aw.a(world1, i, j, k))
         {
-            ev1.a--;
-            cn1.d(i, j, k, ly.aw.bc);
+            ev1.count--;
+            world1.d(i, j, k, ly.aw.bc);
         }
         return true;
     }
diff --git "a/temp\\src\\java/eg.java" "b/src\\main\\java/eg.java"
index 0411a06..b2b0e17 100644
--- "a/temp\\src\\java/eg.java"
+++ "b/src\\main\\java/eg.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/eh.java" "b/src\\main\\java/eh.java"
index 73e0243..692a9e9 100644
--- "a/temp\\src\\java/eh.java"
+++ "b/src\\main\\java/eh.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
 import java.io.IOException;
 
 public class eh extends fn
diff --git "a/temp\\src\\java/ei.java" "b/src\\main\\java/ei.java"
index 6c304d0..b8c437f 100644
--- "a/temp\\src\\java/ei.java"
+++ "b/src\\main\\java/ei.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import org.lwjgl.opengl.GL11;
-
 public class ei extends ak
 {
 
@@ -12,8 +9,8 @@ public class ei extends ak
     {
     }
 
-    public void a(ao ao1, double d, double d1, double d2, 
-            float f, float f1)
+    public void a(Snowball snowball1, double d, double d1, double d2,
+                  float f, float f1)
     {
         org.lwjgl.opengl.GL11.glPushMatrix();
         org.lwjgl.opengl.GL11.glTranslatef((float)d, (float)d1, (float)d2);
@@ -44,6 +41,6 @@ public class ei extends ak
 
     public void a(kh kh, double d, double d1, double d2, float f, float f1)
     {
-        a((ao)kh, d, d1, d2, f, f1);
+        a((Snowball)kh, d, d1, d2, f, f1);
     }
 }
diff --git "a/temp\\src\\java/ej.java" "b/src\\main\\java/ej.java"
index 84f24c8..ae230e0 100644
--- "a/temp\\src\\java/ej.java"
+++ "b/src\\main\\java/ej.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -12,7 +11,7 @@ public class ej extends ik
         2, 0, 0, 1, 2, 1
     };
     java.util.Random b;
-    cn c;
+    World c;
     int d[] = {
         0, 0, 0
     };
@@ -109,7 +108,7 @@ public class ej extends ik
             }
         }
         o = new int[k1][4];
-        java.lang.System.arraycopy(((java.lang.Object) (ai)), 0, ((java.lang.Object) (o)), 0, k1);
+        java.lang.System.arraycopy(((Object) (ai)), 0, ((Object) (o)), 0, k1);
     }
 
     void a(int i1, int j1, int k1, float f1, byte byte0, int l1)
@@ -376,9 +375,9 @@ public class ej extends ik
         k = d3;
     }
 
-    public boolean a(cn cn1, java.util.Random random, int i1, int j1, int k1)
+    public boolean a(World world1, java.util.Random random, int i1, int j1, int k1)
     {
-        c = cn1;
+        c = world1;
         long l1 = random.nextLong();
         b.setSeed(l1);
         d[0] = i1;
diff --git "a/temp\\src\\java/em.java" "b/src\\main\\java/em.java"
index 5fe8ae3..ddde8e4 100644
--- "a/temp\\src\\java/em.java"
+++ "b/src\\main\\java/em.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/en.java" "b/src\\main\\java/en.java"
index fdd9d17..315f021 100644
--- "a/temp\\src\\java/en.java"
+++ "b/src\\main\\java/en.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -9,15 +8,15 @@ public class en extends nq
 
     float a;
 
-    public en(cn cn, double d, double d1, double d2)
+    public en(World world, double d, double d1, double d2)
     {
-        this(cn, d, d1, d2, 1.0F);
+        this(world, d, d1, d2, 1.0F);
     }
 
-    public en(cn cn, double d, double d1, double d2, 
-            float f)
+    public en(World world, double d, double d1, double d2,
+              float f)
     {
-        super(cn, d, d1, d2, 0.0D, 0.0D, 0.0D);
+        super(world, d, d1, d2, 0.0D, 0.0D, 0.0D);
         an *= 0.10000000149011612D;
         ao *= 0.10000000149011612D;
         ap *= 0.10000000149011612D;
diff --git "a/temp\\src\\java/eo.java" "b/src\\main\\java/eo.java"
index dd25771..709bb23 100644
--- "a/temp\\src\\java/eo.java"
+++ "b/src\\main\\java/eo.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/ep.java" "b/src\\main\\java/ep.java"
index c47a7dc..aaf5542 100644
--- "a/temp\\src\\java/ep.java"
+++ "b/src\\main\\java/ep.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -17,10 +16,11 @@ public class ep extends paulscode.sound.codecs.CodecJOrbis
 
     protected java.io.InputStream openInputStream()
     {
-        try {
+        /*try {
 			return ((java.io.InputStream) (new hk(this, url, urlConnection.getInputStream())));
 		} catch (IOException e) {
 			return null;
-		}
+		}*/
+        return null;
     }
 }
diff --git "a/temp\\src\\java/eq.java" "b/src\\main\\java/eq.java"
index 70adca0..0351951 100644
--- "a/temp\\src\\java/eq.java"
+++ "b/src\\main\\java/eq.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -12,31 +11,31 @@ public class eq extends dn
         super(fo, f);
     }
 
-    public void a(mz mz1, double d1, double d2, double d3, 
-            float f, float f1)
+    public void a(Chicken chicken1, double d1, double d2, double d3,
+                  float f, float f1)
     {
-        super.a(((ge) (mz1)), d1, d2, d3, f, f1);
+        super.a(((Mob) (chicken1)), d1, d2, d3, f, f1);
     }
 
-    protected float a(mz mz1, float f)
+    protected float a(Chicken chicken1, float f)
     {
-        float f1 = mz1.e + (mz1.b - mz1.e) * f;
-        float f2 = mz1.d + (mz1.c - mz1.d) * f;
+        float f1 = chicken1.e + (chicken1.b - chicken1.e) * f;
+        float f2 = chicken1.d + (chicken1.c - chicken1.d) * f;
         return (eo.a(f1) + 1.0F) * f2;
     }
 
-    protected float d(ge ge, float f)
+    protected float d(Mob mob, float f)
     {
-        return a((mz)ge, f);
+        return a((Chicken) mob, f);
     }
 
-    public void a(ge ge, double d1, double d2, double d3, float f, float f1)
+    public void a(Mob mob, double d1, double d2, double d3, float f, float f1)
     {
-        a((mz)ge, d1, d2, d3, f, f1);
+        a((Chicken) mob, d1, d2, d3, f, f1);
     }
 
     public void a(kh kh, double d1, double d2, double d3, float f, float f1)
     {
-        a((mz)kh, d1, d2, d3, f, f1);
+        a((Chicken)kh, d1, d2, d3, f, f1);
     }
 }
diff --git "a/temp\\src\\java/er.java" "b/src\\main\\java/er.java"
index 551ce64..a608468 100644
--- "a/temp\\src\\java/er.java"
+++ "b/src\\main\\java/er.java"
@@ -25,7 +25,7 @@ public enum er
   w("Skeleton", 64, 48, 192, 64),
   x("DonkeyKong", 64, 48, 192, 112);
 	
-  public final String y;
+  public final String motive;
   public final int z;
   public final int A;
   public final int B;
@@ -33,7 +33,7 @@ public enum er
 
   private er(String paramInt2, int paramInt3, int paramInt4, int arg6, int arg7)
   {
-    this.y = paramInt2;
+    this.motive = paramInt2;
     this.z = paramInt3;
     this.A = paramInt4;
     this.B = arg6;
diff --git "a/temp\\src\\java/es.java" "b/src\\main\\java/es.java"
index 5f0ada3..a9b04a0 100644
--- "a/temp\\src\\java/es.java"
+++ "b/src\\main\\java/es.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class es extends ik
 {
 
@@ -12,19 +9,19 @@ public class es extends ik
     {
     }
 
-    public boolean a(cn cn1, java.util.Random random, int i, int j, int k)
+    public boolean a(World world1, java.util.Random random, int i, int j, int k)
     {
         for(int l = 0; l < 20; l++)
         {
             int i1 = (i + random.nextInt(4)) - random.nextInt(4);
             int j1 = j;
             int k1 = (k + random.nextInt(4)) - random.nextInt(4);
-            if(cn1.a(i1, j1, k1) != 0 || cn1.f(i1 - 1, j1 - 1, k1) != gb.f && cn1.f(i1 + 1, j1 - 1, k1) != gb.f && cn1.f(i1, j1 - 1, k1 - 1) != gb.f && cn1.f(i1, j1 - 1, k1 + 1) != gb.f)
+            if(world1.a(i1, j1, k1) != 0 || world1.f(i1 - 1, j1 - 1, k1) != gb.f && world1.f(i1 + 1, j1 - 1, k1) != gb.f && world1.f(i1, j1 - 1, k1 - 1) != gb.f && world1.f(i1, j1 - 1, k1 + 1) != gb.f)
                 continue;
             int l1 = 2 + random.nextInt(random.nextInt(3) + 1);
             for(int i2 = 0; i2 < l1; i2++)
-                if(ly.aY.g(cn1, i1, j1 + i2, k1))
-                    cn1.a(i1, j1 + i2, k1, ly.aY.bc);
+                if(ly.aY.g(world1, i1, j1 + i2, k1))
+                    world1.a(i1, j1 + i2, k1, ly.aY.bc);
 
         }
 
diff --git "a/temp\\src\\java/et.java" "b/src\\main\\java/et.java"
index 7e508b8..cccf8e0 100644
--- "a/temp\\src\\java/et.java"
+++ "b/src\\main\\java/et.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -28,7 +27,7 @@ public class et extends ar
                 if(ev1 == null)
                     ai[k] = -1;
                 else
-                    ai[k] = ev1.c;
+                    ai[k] = ev1.id;
             }
 
         }
@@ -36,14 +35,14 @@ public class et extends ar
         b.a(0, dw.a().a(ai));
     }
 
-    public void a(dm dm1)
+    public void a(Player player1)
     {
-        super.a(dm1);
+        super.a(player1);
         for(int i = 0; i < 9; i++)
         {
             ev ev1 = a.c(i);
             if(ev1 != null)
-                dm1.a(ev1);
+                player1.a(ev1);
         }
 
     }
diff --git "a/temp\\src\\java/eu.java" "b/src\\main\\java/eu.java"
index 10af0e6..b7f8b09 100644
--- "a/temp\\src\\java/eu.java"
+++ "b/src\\main\\java/eu.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -8,33 +7,33 @@ public class eu
     implements gh
 {
 
-    public ev a[];
-    public ev b[];
-    public ev c[];
+    public ev slots1[];
+    public ev slots2[];
+    public ev slots3[];
     public int d;
-    private dm g;
+    private Player g;
     public ev e;
     public boolean f;
 
-    public eu(dm dm1)
+    public eu(Player player1)
     {
-        a = new ev[37];
-        b = new ev[4];
-        c = new ev[4];
+        slots1 = new ev[37];
+        slots2 = new ev[4];
+        slots3 = new ev[4];
         d = 0;
         f = false;
-        g = dm1;
+        g = player1;
     }
 
     public ev a()
     {
-        return a[d];
+        return slots1[d];
     }
 
     private int f(int k)
     {
-        for(int l = 0; l < a.length; l++)
-            if(a[l] != null && a[l].c == k)
+        for(int l = 0; l < slots1.length; l++)
+            if(slots1[l] != null && slots1[l].id == k)
                 return l;
 
         return -1;
@@ -42,8 +41,8 @@ public class eu
 
     private int g(int k)
     {
-        for(int l = 0; l < a.length; l++)
-            if(a[l] != null && a[l].c == k && a[l].a < a[l].c() && a[l].a < e())
+        for(int l = 0; l < slots1.length; l++)
+            if(slots1[l] != null && slots1[l].id == k && slots1[l].count < slots1[l].c() && slots1[l].count < e())
                 return l;
 
         return -1;
@@ -51,8 +50,8 @@ public class eu
 
     private int j()
     {
-        for(int k = 0; k < a.length; k++)
-            if(a[k] == null)
+        for(int k = 0; k < slots1.length; k++)
+            if(slots1[k] == null)
                 return k;
 
         return -1;
@@ -88,30 +87,30 @@ public class eu
             i1 = j();
         if(i1 < 0)
             return l;
-        if(a[i1] == null)
-            a[i1] = new ev(k, 0);
+        if(slots1[i1] == null)
+            slots1[i1] = new ev(k, 0);
         int j1 = l;
-        if(j1 > a[i1].c() - a[i1].a)
-            j1 = a[i1].c() - a[i1].a;
-        if(j1 > e() - a[i1].a)
-            j1 = e() - a[i1].a;
+        if(j1 > slots1[i1].c() - slots1[i1].count)
+            j1 = slots1[i1].c() - slots1[i1].count;
+        if(j1 > e() - slots1[i1].count)
+            j1 = e() - slots1[i1].count;
         if(j1 == 0)
         {
             return l;
         } else
         {
             l -= j1;
-            a[i1].a += j1;
-            a[i1].b = 5;
+            slots1[i1].count += j1;
+            slots1[i1].b = 5;
             return l;
         }
     }
 
     public void b()
     {
-        for(int k = 0; k < a.length; k++)
-            if(a[k] != null && a[k].b > 0)
-                a[k].b--;
+        for(int k = 0; k < slots1.length; k++)
+            if(slots1[k] != null && slots1[k].b > 0)
+                slots1[k].b--;
 
     }
 
@@ -120,24 +119,24 @@ public class eu
         int l = f(k);
         if(l < 0)
             return false;
-        if(--a[l].a <= 0)
-            a[l] = null;
+        if(--slots1[l].count <= 0)
+            slots1[l] = null;
         return true;
     }
 
     public boolean a(ev ev1)
     {
-        if(ev1.d == 0)
+        if(ev1.damage == 0)
         {
-            ev1.a = b(ev1.c, ev1.a);
-            if(ev1.a == 0)
+            ev1.count = b(ev1.id, ev1.count);
+            if(ev1.count == 0)
                 return true;
         }
         int k = j();
         if(k >= 0)
         {
-            a[k] = ev1;
-            a[k].b = 5;
+            slots1[k] = ev1;
+            slots1[k].b = 5;
             return true;
         } else
         {
@@ -147,22 +146,22 @@ public class eu
 
     public ev a(int k, int l)
     {
-        ev aev[] = a;
-        if(k >= a.length)
+        ev aev[] = slots1;
+        if(k >= slots1.length)
         {
-            aev = b;
-            k -= a.length;
+            aev = slots2;
+            k -= slots1.length;
         }
         if(aev[k] != null)
         {
-            if(aev[k].a <= l)
+            if(aev[k].count <= l)
             {
                 ev ev1 = aev[k];
                 aev[k] = null;
                 return ev1;
             }
             ev ev2 = aev[k].a(l);
-            if(aev[k].a == 0)
+            if(aev[k].count == 0)
                 aev[k] = null;
             return ev2;
         } else
@@ -173,16 +172,16 @@ public class eu
 
     public void a(int k, ev ev1)
     {
-        ev aev[] = a;
+        ev aev[] = slots1;
         if(k >= aev.length)
         {
             k -= aev.length;
-            aev = b;
+            aev = slots2;
         }
         if(k >= aev.length)
         {
             k -= aev.length;
-            aev = c;
+            aev = slots3;
         }
         aev[k] = ev1;
     }
@@ -190,84 +189,84 @@ public class eu
     public float a(ly ly1)
     {
         float f1 = 1.0F;
-        if(a[d] != null)
-            f1 *= a[d].a(ly1);
+        if(slots1[d] != null)
+            f1 *= slots1[d].a(ly1);
         return f1;
     }
 
-    public ki a(ki ki1)
+    public TagList a(TagList tagList1)
     {
-        for(int k = 0; k < a.length; k++)
-            if(a[k] != null)
+        for(int slot = 0; slot < slots1.length; slot++)
+            if(slots1[slot] != null)
             {
-                hm hm1 = new hm();
-                hm1.a("Slot", (byte)k);
-                a[k].a(hm1);
-                ki1.a(((el) (hm1)));
+                TagCompound tagCompound1 = new TagCompound();
+                tagCompound1.set("Slot", (byte)slot);
+                slots1[slot].writeCompound(tagCompound1);
+                tagList1.a(((Tag) (tagCompound1)));
             }
 
-        for(int l = 0; l < b.length; l++)
-            if(b[l] != null)
+        for(int slot = 0; slot < slots2.length; slot++)
+            if(slots2[slot] != null)
             {
-                hm hm2 = new hm();
-                hm2.a("Slot", (byte)(l + 100));
-                b[l].a(hm2);
-                ki1.a(((el) (hm2)));
+                TagCompound tagCompound2 = new TagCompound();
+                tagCompound2.set("Slot", (byte)(slot + 100));
+                slots2[slot].writeCompound(tagCompound2);
+                tagList1.a(((Tag) (tagCompound2)));
             }
 
-        for(int i1 = 0; i1 < c.length; i1++)
-            if(c[i1] != null)
+        for(int slot = 0; slot < slots3.length; slot++)
+            if(slots3[slot] != null)
             {
-                hm hm3 = new hm();
-                hm3.a("Slot", (byte)(i1 + 80));
-                c[i1].a(hm3);
-                ki1.a(((el) (hm3)));
+                TagCompound tagCompound3 = new TagCompound();
+                tagCompound3.set("Slot", (byte)(slot + 80));
+                slots3[slot].writeCompound(tagCompound3);
+                tagList1.a(((Tag) (tagCompound3)));
             }
 
-        return ki1;
+        return tagList1;
     }
 
-    public void b(ki ki1)
+    public void b(TagList tagList1)
     {
-        a = new ev[36];
-        b = new ev[4];
-        c = new ev[4];
-        for(int k = 0; k < ki1.c(); k++)
+        slots1 = new ev[36];
+        slots2 = new ev[4];
+        slots3 = new ev[4];
+        for(int k = 0; k < tagList1.c(); k++)
         {
-            hm hm1 = (hm)ki1.a(k);
-            int l = hm1.c("Slot") & 0xff;
-            if(l >= 0 && l < a.length)
-                a[l] = new ev(hm1);
-            if(l >= 80 && l < c.length + 80)
-                c[l - 80] = new ev(hm1);
-            if(l >= 100 && l < b.length + 100)
-                b[l - 100] = new ev(hm1);
+            TagCompound tagCompound1 = (TagCompound) tagList1.a(k);
+            int slot = tagCompound1.getByte("Slot") & 0xff;
+            if(slot >= 0 && slot < slots1.length)
+                slots1[slot] = new ev(tagCompound1);
+            if(slot >= 80 && slot < slots3.length + 80)
+                slots3[slot - 80] = new ev(tagCompound1);
+            if(slot >= 100 && slot < slots2.length + 100)
+                slots2[slot - 100] = new ev(tagCompound1);
         }
 
     }
 
     public int c()
     {
-        return a.length + 4;
+        return slots1.length + 4;
     }
 
     public ev c(int k)
     {
-        ev aev[] = a;
+        ev aev[] = slots1;
         if(k >= aev.length)
         {
             k -= aev.length;
-            aev = b;
+            aev = slots2;
         }
         if(k >= aev.length)
         {
             k -= aev.length;
-            aev = c;
+            aev = slots3;
         }
         return aev[k];
     }
 
-    public java.lang.String d()
+    public String d()
     {
         return "Inventory";
     }
@@ -299,7 +298,7 @@ public class eu
 
     public ev d(int k)
     {
-        return b[k];
+        return slots2[k];
     }
 
     public int f()
@@ -307,15 +306,15 @@ public class eu
         int k = 0;
         int l = 0;
         int i1 = 0;
-        for(int j1 = 0; j1 < b.length; j1++)
-            if(b[j1] != null && (b[j1].a() instanceof mr))
+        for(int j1 = 0; j1 < slots2.length; j1++)
+            if(slots2[j1] != null && (slots2[j1].a() instanceof mr))
             {
-                int k1 = b[j1].d();
-                int l1 = b[j1].d;
+                int k1 = slots2[j1].d();
+                int l1 = slots2[j1].damage;
                 int i2 = k1 - l1;
                 l += i2;
                 i1 += k1;
-                int j2 = ((mr)b[j1].a()).aY;
+                int j2 = ((mr) slots2[j1].a()).aY;
                 k += j2;
             }
 
@@ -327,15 +326,15 @@ public class eu
 
     public void e(int k)
     {
-        for(int l = 0; l < b.length; l++)
+        for(int l = 0; l < slots2.length; l++)
         {
-            if(b[l] == null || !(b[l].a() instanceof mr))
+            if(slots2[l] == null || !(slots2[l].a() instanceof mr))
                 continue;
-            b[l].b(k);
-            if(b[l].a == 0)
+            slots2[l].b(k);
+            if(slots2[l].count == 0)
             {
-                b[l].a(g);
-                b[l] = null;
+                slots2[l].a(g);
+                slots2[l] = null;
             }
         }
 
@@ -343,18 +342,18 @@ public class eu
 
     public void g()
     {
-        for(int k = 0; k < a.length; k++)
-            if(a[k] != null)
+        for(int k = 0; k < slots1.length; k++)
+            if(slots1[k] != null)
             {
-                g.a(a[k], true);
-                a[k] = null;
+                g.a(slots1[k], true);
+                slots1[k] = null;
             }
 
-        for(int l = 0; l < b.length; l++)
-            if(b[l] != null)
+        for(int l = 0; l < slots2.length; l++)
+            if(slots2[l] != null)
             {
-                g.a(b[l], true);
-                b[l] = null;
+                g.a(slots2[l], true);
+                slots2[l] = null;
             }
 
     }
@@ -366,16 +365,16 @@ public class eu
 
     public boolean a(eu eu1)
     {
-        for(int k = 0; k < a.length; k++)
-            if(!a(eu1.a[k], a[k]))
+        for(int k = 0; k < slots1.length; k++)
+            if(!a(eu1.slots1[k], slots1[k]))
                 return false;
 
-        for(int l = 0; l < b.length; l++)
-            if(!a(eu1.b[l], b[l]))
+        for(int l = 0; l < slots2.length; l++)
+            if(!a(eu1.slots2[l], slots2[l]))
                 return false;
 
-        for(int i1 = 0; i1 < c.length; i1++)
-            if(!a(eu1.c[i1], c[i1]))
+        for(int i1 = 0; i1 < slots3.length; i1++)
+            if(!a(eu1.slots3[i1], slots3[i1]))
                 return false;
 
         return true;
@@ -388,20 +387,20 @@ public class eu
         if(ev1 == null || ev2 == null)
             return false;
         else
-            return ev1.c == ev2.c && ev1.a == ev2.a && ev1.d == ev2.d;
+            return ev1.id == ev2.id && ev1.count == ev2.count && ev1.damage == ev2.damage;
     }
 
     public eu i()
     {
-        eu eu1 = new eu(((dm) (null)));
-        for(int k = 0; k < a.length; k++)
-            eu1.a[k] = a[k] == null ? null : a[k].e();
+        eu eu1 = new eu(((Player) (null)));
+        for(int k = 0; k < slots1.length; k++)
+            eu1.slots1[k] = slots1[k] == null ? null : slots1[k].e();
 
-        for(int l = 0; l < b.length; l++)
-            eu1.b[l] = b[l] == null ? null : b[l].e();
+        for(int l = 0; l < slots2.length; l++)
+            eu1.slots2[l] = slots2[l] == null ? null : slots2[l].e();
 
-        for(int i1 = 0; i1 < c.length; i1++)
-            eu1.c[i1] = c[i1] == null ? null : c[i1].e();
+        for(int i1 = 0; i1 < slots3.length; i1++)
+            eu1.slots3[i1] = slots3[i1] == null ? null : slots3[i1].e();
 
         return eu1;
     }
diff --git "a/temp\\src\\java/ev.java" "b/src\\main\\java/ev.java"
index 43d5b58..8f728f8 100644
--- "a/temp\\src\\java/ev.java"
+++ "b/src\\main\\java/ev.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -7,10 +6,10 @@
 public final class ev
 {
 
-    public int a;
+    public int count;
     public int b;
-    public int c;
-    public int d;
+    public int id;
+    public int damage;
 
     public ev(ly ly1)
     {
@@ -39,34 +38,34 @@ public final class ev
 
     public ev(int i, int j)
     {
-        a = 0;
-        c = i;
-        a = j;
+        count = 0;
+        id = i;
+        count = j;
     }
 
     public ev(int i, int j, int k)
     {
-        a = 0;
-        c = i;
-        a = j;
-        d = k;
+        count = 0;
+        id = i;
+        count = j;
+        damage = k;
     }
 
-    public ev(hm hm1)
+    public ev(TagCompound tagCompound1)
     {
-        a = 0;
-        b(hm1);
+        count = 0;
+        b(tagCompound1);
     }
 
     public ev a(int i)
     {
-        a -= i;
-        return new ev(c, i, d);
+        count -= i;
+        return new ev(id, i, damage);
     }
 
     public di a()
     {
-        return di.c[c];
+        return di.c[id];
     }
 
     public int b()
@@ -74,9 +73,9 @@ public final class ev
         return a().a(this);
     }
 
-    public boolean a(dm dm, cn cn, int i, int j, int k, int l)
+    public boolean a(Player player, World world, int i, int j, int k, int l)
     {
-        return a().a(this, dm, cn, i, j, k, l);
+        return a().a(this, player, world, i, j, k, l);
     }
 
     public float a(ly ly1)
@@ -84,24 +83,24 @@ public final class ev
         return a().a(this, ly1);
     }
 
-    public ev a(cn cn, dm dm)
+    public ev a(World world, Player player)
     {
-        return a().a(this, cn, dm);
+        return a().a(this, world, player);
     }
 
-    public hm a(hm hm1)
+    public TagCompound writeCompound(TagCompound tagCompound1)
     {
-        hm1.a("id", (short)c);
-        hm1.a("Count", (byte)a);
-        hm1.a("Damage", (short)d);
-        return hm1;
+        tagCompound1.set("id", (short) id);
+        tagCompound1.set("Count", (byte) count);
+        tagCompound1.set("Damage", (short) damage);
+        return tagCompound1;
     }
 
-    public void b(hm hm1)
+    public void b(TagCompound tagCompound1)
     {
-        c = ((int) (hm1.d("id")));
-        a = ((int) (hm1.c("Count")));
-        d = ((int) (hm1.d("Damage")));
+        id = ((int) (tagCompound1.getShort("id")));
+        count = ((int) (tagCompound1.getByte("Count")));
+        damage = ((int) (tagCompound1.getShort("Damage")));
     }
 
     public int c()
@@ -111,52 +110,52 @@ public final class ev
 
     public int d()
     {
-        return di.c[c].c();
+        return di.c[id].c();
     }
 
     public void b(int i)
     {
-        d += i;
-        if(d > d())
+        damage += i;
+        if(damage > d())
         {
-            a--;
-            if(a < 0)
-                a = 0;
-            d = 0;
+            count--;
+            if(count < 0)
+                count = 0;
+            damage = 0;
         }
     }
 
-    public void a(ge ge)
+    public void a(Mob mob)
     {
-        di.c[c].a(this, ge);
+        di.c[id].a(this, mob);
     }
 
     public void a(int i, int j, int k, int l)
     {
-        di.c[c].a(this, i, j, k, l);
+        di.c[id].a(this, i, j, k, l);
     }
 
     public int a(kh kh)
     {
-        return di.c[c].a(kh);
+        return di.c[id].a(kh);
     }
 
     public boolean b(ly ly1)
     {
-        return di.c[c].a(ly1);
+        return di.c[id].a(ly1);
     }
 
-    public void a(dm dm)
+    public void a(Player player)
     {
     }
 
-    public void b(ge ge)
+    public void b(Mob mob)
     {
-        di.c[c].b(this, ge);
+        di.c[id].b(this, mob);
     }
 
     public ev e()
     {
-        return new ev(c, a, d);
+        return new ev(id, count, damage);
     }
 }
diff --git "a/temp\\src\\java/ew.java" "b/src\\main\\java/ew.java"
index ee51c9e..bf4a10f 100644
--- "a/temp\\src\\java/ew.java"
+++ "b/src\\main\\java/ew.java"
@@ -1,12 +1,8 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.PrintStream;
-import java.lang.reflect.Constructor;
 import java.util.HashMap;
-import java.util.Map;
 
 public class ew
 {
@@ -20,25 +16,25 @@ public class ew
     {
     }
 
-    private static void a(java.lang.Class class1, java.lang.String s, int i)
+    private static void a(java.lang.Class class1, String s, int i)
     {
-        a.put(((java.lang.Object) (s)), ((java.lang.Object) (class1)));
-        b.put(((java.lang.Object) (class1)), ((java.lang.Object) (s)));
-        c.put(((java.lang.Object) (java.lang.Integer.valueOf(i))), ((java.lang.Object) (class1)));
-        d.put(((java.lang.Object) (class1)), ((java.lang.Object) (java.lang.Integer.valueOf(i))));
+        a.put(((Object) (s)), ((Object) (class1)));
+        b.put(((Object) (class1)), ((Object) (s)));
+        c.put(((Object) (java.lang.Integer.valueOf(i))), ((Object) (class1)));
+        d.put(((Object) (class1)), ((Object) (java.lang.Integer.valueOf(i))));
     }
 
-    public static kh a(java.lang.String s, cn cn1)
+    public static kh a(String s, World world1)
     {
         kh kh1 = null;
         try
         {
-            java.lang.Class class1 = (java.lang.Class)a.get(((java.lang.Object) (s)));
+            java.lang.Class class1 = (java.lang.Class)a.get(((Object) (s)));
             if(class1 != null)
                 kh1 = (kh)class1.getConstructor(new java.lang.Class[] {
-                    cn.class
-                }).newInstance(new java.lang.Object[] {
-                    cn1
+                    World.class
+                }).newInstance(new Object[] {
+                        world1
                 });
         }
         catch(java.lang.Exception exception)
@@ -48,17 +44,17 @@ public class ew
         return kh1;
     }
 
-    public static kh a(hm hm1, cn cn1)
+    public static kh a(TagCompound tagCompound1, World world1)
     {
         kh kh1 = null;
         try
         {
-            java.lang.Class class1 = (java.lang.Class)a.get(((java.lang.Object) (hm1.i("id"))));
+            java.lang.Class class1 = (java.lang.Class)a.get(((Object) (tagCompound1.getString("id"))));
             if(class1 != null)
                 kh1 = (kh)class1.getConstructor(new java.lang.Class[] {
-                    cn.class
-                }).newInstance(new java.lang.Object[] {
-                    cn1
+                    World.class
+                }).newInstance(new Object[] {
+                        world1
                 });
         }
         catch(java.lang.Exception exception)
@@ -66,23 +62,23 @@ public class ew
             exception.printStackTrace();
         }
         if(kh1 != null)
-            kh1.e(hm1);
+            kh1.e(tagCompound1);
         else
-            java.lang.System.out.println((new StringBuilder()).append("Skipping Entity with id ").append(hm1.i("id")).toString());
+            java.lang.System.out.println((new StringBuilder()).append("Skipping Entity with id ").append(tagCompound1.getString("id")).toString());
         return kh1;
     }
 
-    public static kh a(int i, cn cn1)
+    public static kh a(int i, World world1)
     {
         kh kh1 = null;
         try
         {
-            java.lang.Class class1 = (java.lang.Class)c.get(((java.lang.Object) (java.lang.Integer.valueOf(i))));
+            java.lang.Class class1 = (java.lang.Class)c.get(((Object) (java.lang.Integer.valueOf(i))));
             if(class1 != null)
                 kh1 = (kh)class1.getConstructor(new java.lang.Class[] {
-                    cn.class
-                }).newInstance(new java.lang.Object[] {
-                    cn1
+                    World.class
+                }).newInstance(new Object[] {
+                        world1
                 });
         }
         catch(java.lang.Exception exception)
@@ -96,35 +92,35 @@ public class ew
 
     public static int a(kh kh1)
     {
-        return ((java.lang.Integer)d.get(((java.lang.Object) (((java.lang.Object) (kh1)).getClass())))).intValue();
+        return ((java.lang.Integer)d.get(((Object) (((Object) (kh1)).getClass())))).intValue();
     }
 
-    public static java.lang.String b(kh kh1)
+    public static String b(kh kh1)
     {
-        return (java.lang.String)b.get(((java.lang.Object) (((java.lang.Object) (kh1)).getClass())));
+        return (String)b.get(((Object) (((Object) (kh1)).getClass())));
     }
 
     static 
     {
-        ew.a(kg.class, "Arrow", 10);
-        ew.a(ao.class, "Snowball", 11);
-        ew.a(dx.class, "Item", 1);
-        ew.a(jc.class, "Painting", 9);
-        ew.a(ge.class, "Mob", 48);
-        ew.a(dq.class, "Monster", 49);
-        ew.a(dd.class, "Creeper", 50);
-        ew.a(cw.class, "Skeleton", 51);
-        ew.a(ax.class, "Spider", 52);
-        ew.a(hl.class, "Giant", 53);
-        ew.a(mb.class, "Zombie", 54);
-        ew.a(ma.class, "Slime", 55);
-        ew.a(mv.class, "Pig", 90);
-        ew.a(bo.class, "Sheep", 91);
-        ew.a(am.class, "Cow", 91);
-        ew.a(mz.class, "Chicken", 91);
-        ew.a(jd.class, "PrimedTnt", 20);
-        ew.a(ff.class, "FallingSand", 21);
-        ew.a(oc.class, "Minecart", 40);
-        ew.a(dc.class, "Boat", 41);
+        ew.a(Arrow.class, "Arrow", 10);
+        ew.a(Snowball.class, "Snowball", 11);
+        ew.a(Item.class, "Item", 1);
+        ew.a(Painting.class, "Painting", 9);
+        ew.a(Mob.class, "Mob", 48);
+        ew.a(Monster.class, "Monster", 49);
+        ew.a(Creeper.class, "Creeper", 50);
+        ew.a(Skeleton.class, "Skeleton", 51);
+        ew.a(Spider.class, "Spider", 52);
+        ew.a(Giant.class, "Giant", 53);
+        ew.a(Zombie.class, "Zombie", 54);
+        ew.a(Slime.class, "Slime", 55);
+        ew.a(Pig.class, "Pig", 90);
+        ew.a(Sheep.class, "Sheep", 91);
+        ew.a(Cow.class, "Cow", 91);
+        ew.a(Chicken.class, "Chicken", 91);
+        ew.a(PrimedTnt.class, "PrimedTnt", 20);
+        ew.a(FallingSand.class, "FallingSand", 21);
+        ew.a(Minecart.class, "Minecart", 40);
+        ew.a(Boat.class, "Boat", 41);
     }
 }
diff --git "a/temp\\src\\java/ex.java" "b/src\\main\\java/ex.java"
index 78c25c4..e112a22 100644
--- "a/temp\\src\\java/ex.java"
+++ "b/src\\main\\java/ex.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -16,7 +15,7 @@ public abstract class ex
     public abstract void a(ic ic, double d, double d1, double d2, 
             float f);
 
-    protected void a(java.lang.String s)
+    protected void a(String s)
     {
         ey ey1 = a.e;
         ey1.b(ey1.a(s));
diff --git "a/temp\\src\\java/ey.java" "b/src\\main\\java/ey.java"
index 8dfef1b..22f8aac 100644
--- "a/temp\\src\\java/ey.java"
+++ "b/src\\main\\java/ey.java"
@@ -1,22 +1,10 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.awt.Graphics;
 import java.awt.image.BufferedImage;
-import java.io.IOException;
-import java.nio.Buffer;
-import java.nio.ByteBuffer;
-import java.nio.IntBuffer;
 import java.util.ArrayList;
-import java.util.Collection;
 import java.util.HashMap;
-import java.util.Iterator;
-import java.util.Map;
-import java.util.Set;
-import javax.imageio.ImageIO;
-import org.lwjgl.opengl.GL11;
 
 public class ey
 {
@@ -43,9 +31,9 @@ public class ey
         h = fr1;
     }
 
-    public int a(java.lang.String s)
+    public int a(String s)
     {
-        java.lang.Integer integer = (java.lang.Integer)b.get(((java.lang.Object) (s)));
+        java.lang.Integer integer = (java.lang.Integer)b.get(((Object) (s)));
         if(integer != null)
             return integer.intValue();
         try
@@ -65,7 +53,7 @@ public class ey
             {
                 a(javax.imageio.ImageIO.read(ey.class.getResourceAsStream(s)), j);
             }
-            b.put(((java.lang.Object) (s)), ((java.lang.Object) (java.lang.Integer.valueOf(j))));
+            b.put(((Object) (s)), ((Object) (java.lang.Integer.valueOf(j))));
             return j;
         }
         catch(java.io.IOException ioexception)
@@ -92,7 +80,7 @@ public class ey
         df.a(d);
         int j = d.get(0);
         a(bufferedimage, j);
-        c.put(((java.lang.Object) (java.lang.Integer.valueOf(j))), ((java.lang.Object) (bufferedimage)));
+        c.put(((Object) (java.lang.Integer.valueOf(j))), ((Object) (bufferedimage)));
         return j;
     }
 
@@ -176,16 +164,16 @@ public class ey
 
     public void a(int j)
     {
-        c.remove(((java.lang.Object) (java.lang.Integer.valueOf(j))));
+        c.remove(((Object) (java.lang.Integer.valueOf(j))));
         d.clear();
         d.put(j);
         d.flip();
         org.lwjgl.opengl.GL11.glDeleteTextures(d);
     }
 
-    public int a(java.lang.String s, java.lang.String s1)
+    public int a(String s, String s1)
     {
-        cc cc1 = (cc)g.get(((java.lang.Object) (s)));
+        cc cc1 = (cc)g.get(((Object) (s)));
         if(cc1 != null && cc1.a != null && !cc1.d)
         {
             if(cc1.c < 0)
@@ -200,19 +188,19 @@ public class ey
             return cc1.c;
     }
 
-    public cc a(java.lang.String s, hb hb)
+    public cc a(String s, hb hb)
     {
-        cc cc1 = (cc)g.get(((java.lang.Object) (s)));
+        cc cc1 = (cc)g.get(((Object) (s)));
         if(cc1 == null)
-            g.put(((java.lang.Object) (s)), ((java.lang.Object) (new cc(s, hb))));
+            g.put(((Object) (s)), ((Object) (new cc(s, hb))));
         else
             cc1.b++;
         return cc1;
     }
 
-    public void b(java.lang.String s)
+    public void b(String s)
     {
-        cc cc1 = (cc)g.get(((java.lang.Object) (s)));
+        cc cc1 = (cc)g.get(((Object) (s)));
         if(cc1 != null)
         {
             cc1.b--;
@@ -220,14 +208,14 @@ public class ey
             {
                 if(cc1.c >= 0)
                     a(cc1.c);
-                g.remove(((java.lang.Object) (s)));
+                g.remove(((Object) (s)));
             }
         }
     }
 
     public void a(z z1)
     {
-        f.add(((java.lang.Object) (z1)));
+        f.add(((Object) (z1)));
         z1.a();
     }
 
@@ -358,7 +346,7 @@ label1:
         for(java.util.Iterator iterator = c.keySet().iterator(); iterator.hasNext(); a(bufferedimage, j))
         {
             j = ((java.lang.Integer)iterator.next()).intValue();
-            bufferedimage = (java.awt.image.BufferedImage)c.get(((java.lang.Object) (java.lang.Integer.valueOf(j))));
+            bufferedimage = (java.awt.image.BufferedImage)c.get(((Object) (java.lang.Integer.valueOf(j))));
         }
 
         for(java.util.Iterator iterator1 = g.values().iterator(); iterator1.hasNext();)
@@ -369,7 +357,7 @@ label1:
 
         for(java.util.Iterator iterator2 = b.keySet().iterator(); iterator2.hasNext();)
         {
-            java.lang.String s = (java.lang.String)iterator2.next();
+            String s = (String)iterator2.next();
             try
             {
                 java.awt.image.BufferedImage bufferedimage1;
@@ -385,7 +373,7 @@ label1:
                 {
                     bufferedimage1 = javax.imageio.ImageIO.read(ey.class.getResourceAsStream(s));
                 }
-                int k = ((java.lang.Integer)b.get(((java.lang.Object) (s)))).intValue();
+                int k = ((java.lang.Integer)b.get(((Object) (s)))).intValue();
                 a(bufferedimage1, k);
             }
             catch(java.io.IOException ioexception)
diff --git "a/temp\\src\\java/ez.java" "b/src\\main\\java/ez.java"
index fbd2f17..0e576f5 100644
--- "a/temp\\src\\java/ez.java"
+++ "b/src\\main\\java/ez.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
 import java.io.IOException;
 
 public class ez extends fn
@@ -22,15 +19,15 @@ public class ez extends fn
     {
     }
 
-    public ez(ge ge1)
+    public ez(Mob mob1)
     {
-        a = ge1.ab;
-        b = (byte)ew.a(((kh) (ge1)));
-        c = eo.b(ge1.ak * 32D);
-        d = eo.b(ge1.al * 32D);
-        e = eo.b(ge1.am * 32D);
-        f = (byte)(int)((ge1.aq * 256F) / 360F);
-        g = (byte)(int)((ge1.ar * 256F) / 360F);
+        a = mob1.ab;
+        b = (byte)ew.a(((kh) (mob1)));
+        c = eo.b(mob1.ak * 32D);
+        d = eo.b(mob1.al * 32D);
+        e = eo.b(mob1.am * 32D);
+        f = (byte)(int)((mob1.aq * 256F) / 360F);
+        g = (byte)(int)((mob1.ar * 256F) / 360F);
     }
 
     public void a(java.io.DataInputStream datainputstream) throws IOException
diff --git "a/temp\\src\\java/fa.java" "b/src\\main\\java/fa.java"
index 39ebdc8..7dbc343 100644
--- "a/temp\\src\\java/fa.java"
+++ "b/src\\main\\java/fa.java"
@@ -1,4 +1,4 @@
- enum fa
+enum fa
 {
 	 a, // linux
 	 b, // solaris
diff --git "a/temp\\src\\java/fb.java" "b/src\\main\\java/fb.java"
index 0695386..bdc7641 100644
--- "a/temp\\src\\java/fb.java"
+++ "b/src\\main\\java/fb.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Comparator;
-
 public class fb
     implements java.util.Comparator
 {
@@ -21,7 +18,7 @@ public class fb
         return bn1.a(a) >= bn2.a(a) ? 1 : -1;
     }
 
-    public int compare(java.lang.Object obj, java.lang.Object obj1)
+    public int compare(Object obj, Object obj1)
     {
         return a((bn)obj, (bn)obj1);
     }
diff --git "a/temp\\src\\java/fc.java" "b/src\\main\\java/fc.java"
index 2cb949b..3183efd 100644
--- "a/temp\\src\\java/fc.java"
+++ "b/src\\main\\java/fc.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/fd.java" "b/src\\main\\java/fd.java"
index 759351c..d426b8a 100644
--- "a/temp\\src\\java/fd.java"
+++ "b/src\\main\\java/fd.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class fd extends ly
 {
 
@@ -15,7 +12,7 @@ public class fd extends ly
         b(true);
     }
 
-    public cf d(cn cn1, int i, int j, int k)
+    public cf d(World world1, int i, int j, int k)
     {
         return null;
     }
@@ -30,26 +27,26 @@ public class fd extends ly
         return false;
     }
 
-    public boolean a(cn cn1, int i, int j, int k)
+    public boolean a(World world1, int i, int j, int k)
     {
-        int l = cn1.a(i, j - 1, k);
+        int l = world1.a(i, j - 1, k);
         if(l == 0 || !ly.n[l].b())
             return false;
         else
-            return cn1.f(i, j - 1, k).c();
+            return world1.f(i, j - 1, k).c();
     }
 
-    public void a(cn cn1, int i, int j, int k, int l)
+    public void a(World world1, int i, int j, int k, int l)
     {
-        h(cn1, i, j, k);
+        h(world1, i, j, k);
     }
 
-    private boolean h(cn cn1, int i, int j, int k)
+    private boolean h(World world1, int i, int j, int k)
     {
-        if(!a(cn1, i, j, k))
+        if(!a(world1, i, j, k))
         {
-            b_(cn1, i, j, k, cn1.e(i, j, k));
-            cn1.d(i, j, k, 0);
+            b_(world1, i, j, k, world1.e(i, j, k));
+            world1.d(i, j, k, 0);
             return false;
         } else
         {
@@ -57,17 +54,17 @@ public class fd extends ly
         }
     }
 
-    public void a_(cn cn1, int i, int j, int k, int l)
+    public void a_(World world1, int i, int j, int k, int l)
     {
         int i1 = di.aB.aS;
         float f = 0.7F;
-        double d1 = (double)(cn1.n.nextFloat() * f) + (double)(1.0F - f) * 0.5D;
-        double d2 = (double)(cn1.n.nextFloat() * f) + (double)(1.0F - f) * 0.5D;
-        double d3 = (double)(cn1.n.nextFloat() * f) + (double)(1.0F - f) * 0.5D;
-        dx dx1 = new dx(cn1, (double)i + d1, (double)j + d2, (double)k + d3, new ev(i1));
-        dx1.c = 10;
-        cn1.a(((kh) (dx1)));
-        cn1.d(i, j, k, 0);
+        double d1 = (double)(world1.n.nextFloat() * f) + (double)(1.0F - f) * 0.5D;
+        double d2 = (double)(world1.n.nextFloat() * f) + (double)(1.0F - f) * 0.5D;
+        double d3 = (double)(world1.n.nextFloat() * f) + (double)(1.0F - f) * 0.5D;
+        Item item1 = new Item(world1, (double)i + d1, (double)j + d2, (double)k + d3, new ev(i1));
+        item1.c = 10;
+        world1.a(((kh) (item1)));
+        world1.d(i, j, k, 0);
     }
 
     public int a(int i, java.util.Random random)
@@ -80,12 +77,12 @@ public class fd extends ly
         return 0;
     }
 
-    public void a(cn cn1, int i, int j, int k, java.util.Random random)
+    public void a(World world1, int i, int j, int k, java.util.Random random)
     {
-        if(cn1.a(by.b, i, j, k) > 11)
+        if(world1.a(by.b, i, j, k) > 11)
         {
-            b_(cn1, i, j, k, cn1.e(i, j, k));
-            cn1.d(i, j, k, 0);
+            b_(world1, i, j, k, world1.e(i, j, k));
+            world1.d(i, j, k, 0);
         }
     }
 
diff --git "a/temp\\src\\java/fe.java" "b/temp\\src\\java/fe.java"
deleted file mode 100644
index 7d79829..0000000
--- "a/temp\\src\\java/fe.java"
+++ /dev/null
@@ -1,98 +0,0 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
-// Jad home page: http://www.kpdus.com/jad.html
-// Decompiler options: fullnames deadcode fieldsfirst safe 
-// Source File Name:   SourceFile
-
-
-public class fe extends ic
-    implements gh
-{
-
-    private ev a[];
-
-    public fe()
-    {
-        a = new ev[36];
-    }
-
-    public int c()
-    {
-        return 27;
-    }
-
-    public ev c(int i)
-    {
-        return a[i];
-    }
-
-    public ev a(int i, int j)
-    {
-        if(a[i] != null)
-        {
-            if(a[i].a <= j)
-            {
-                ev ev1 = a[i];
-                a[i] = null;
-                j_();
-                return ev1;
-            }
-            ev ev2 = a[i].a(j);
-            if(a[i].a == 0)
-                a[i] = null;
-            j_();
-            return ev2;
-        } else
-        {
-            return null;
-        }
-    }
-
-    public void a(int i, ev ev1)
-    {
-        a[i] = ev1;
-        if(ev1 != null && ev1.a > e())
-            ev1.a = e();
-        j_();
-    }
-
-    public java.lang.String d()
-    {
-        return "Chest";
-    }
-
-    public void a(hm hm1)
-    {
-        super.a(hm1);
-        ki ki1 = hm1.l("Items");
-        a = new ev[c()];
-        for(int i = 0; i < ki1.c(); i++)
-        {
-            hm hm2 = (hm)ki1.a(i);
-            int j = hm2.c("Slot") & 0xff;
-            if(j >= 0 && j < a.length)
-                a[j] = new ev(hm2);
-        }
-
-    }
-
-    public void b(hm hm1)
-    {
-        super.b(hm1);
-        ki ki1 = new ki();
-        for(int i = 0; i < a.length; i++)
-            if(a[i] != null)
-            {
-                hm hm2 = new hm();
-                hm2.a("Slot", (byte)i);
-                a[i].a(hm2);
-                ki1.a(((el) (hm2)));
-            }
-
-        hm1.a("Items", ((el) (ki1)));
-    }
-
-    public int e()
-    {
-        return 64;
-    }
-}
diff --git "a/temp\\src\\java/fg.java" "b/src\\main\\java/fg.java"
index 4341548..673133d 100644
--- "a/temp\\src\\java/fg.java"
+++ "b/src\\main\\java/fg.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
 import java.io.IOException;
 
 public class fg extends fn
diff --git "a/temp\\src\\java/fh.java" "b/src\\main\\java/fh.java"
index 2856f0c..6b66dad 100644
--- "a/temp\\src\\java/fh.java"
+++ "b/src\\main\\java/fh.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.ArrayList;
-
 public class fh extends ly
 {
 
@@ -13,19 +10,19 @@ public class fh extends ly
         super(i, j, gb.c);
     }
 
-    public void a(cn cn1, int i, int j, int k, cf cf1, java.util.ArrayList arraylist)
+    public void a(World world1, int i, int j, int k, cf cf1, java.util.ArrayList arraylist)
     {
-        arraylist.add(((java.lang.Object) (cf.b(i, j, k, i + 1, (double)j + 1.5D, k + 1))));
+        arraylist.add(((Object) (cf.b(i, j, k, i + 1, (double)j + 1.5D, k + 1))));
     }
 
-    public boolean a(cn cn1, int i, int j, int k)
+    public boolean a(World world1, int i, int j, int k)
     {
-        if(cn1.a(i, j - 1, k) == bc)
+        if(world1.a(i, j - 1, k) == bc)
             return false;
-        if(!cn1.f(i, j - 1, k).a())
+        if(!world1.f(i, j - 1, k).a())
             return false;
         else
-            return super.a(cn1, i, j, k);
+            return super.a(world1, i, j, k);
     }
 
     public boolean b()
diff --git "a/temp\\src\\java/fi.java" "b/src\\main\\java/fi.java"
index 0aba6e6..12f489e 100644
--- "a/temp\\src\\java/fi.java"
+++ "b/src\\main\\java/fi.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -30,17 +29,17 @@ public class fi
         return i & j - 1;
     }
 
-    public java.lang.Object a(int i)
+    public Object a(int i)
     {
         int j = fi.e(i);
         for(mx mx1 = a[fi.a(j, a.length)]; mx1 != null; mx1 = mx1.c)
             if(mx1.a == i)
                 return mx1.b;
 
-        return ((java.lang.Object) (null));
+        return ((Object) (null));
     }
 
-    public void a(int i, java.lang.Object obj)
+    public void a(int i, Object obj)
     {
         int j = fi.e(i);
         int k = fi.a(j, a.length);
@@ -92,7 +91,7 @@ public class fi
 
     }
 
-    public java.lang.Object b(int i)
+    public Object b(int i)
     {
         mx mx1 = c(i);
         return mx1 != null ? mx1.b : null;
@@ -134,7 +133,7 @@ public class fi
         b = 0;
     }
 
-    private void a(int i, int j, java.lang.Object obj, int k)
+    private void a(int i, int j, Object obj, int k)
     {
         mx mx1 = a[k];
         a[k] = new mx(i, j, obj, mx1);
diff --git "a/temp\\src\\java/fj.java" "b/src\\main\\java/fj.java"
index 9c69cf7..8124acc 100644
--- "a/temp\\src\\java/fj.java"
+++ "b/src\\main\\java/fj.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -13,13 +12,13 @@ public class fj
 
     public void a(dw dw1)
     {
-        dw1.a(new ev(ly.av), new java.lang.Object[] {
+        dw1.a(new ev(ly.av), new Object[] {
             "###", "# #", "###", java.lang.Character.valueOf('#'), ly.y
         });
-        dw1.a(new ev(ly.aC), new java.lang.Object[] {
+        dw1.a(new ev(ly.aC), new Object[] {
             "###", "# #", "###", java.lang.Character.valueOf('#'), ly.x
         });
-        dw1.a(new ev(ly.az), new java.lang.Object[] {
+        dw1.a(new ev(ly.az), new Object[] {
             "##", "##", java.lang.Character.valueOf('#'), ly.y
         });
     }
diff --git "a/temp\\src\\java/fk.java" "b/src\\main\\java/fk.java"
index a290b72..188d9c5 100644
--- "a/temp\\src\\java/fk.java"
+++ "b/src\\main\\java/fk.java"
@@ -1,10 +1,8 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
 //import Minecraft;
-import org.lwjgl.opengl.GL11;
 
 public class fk extends lm
 {
@@ -13,17 +11,17 @@ public class fk extends lm
     protected int b;
     public int c;
     public int d;
-    public java.lang.String e;
+    public String e;
     public int f;
     public boolean g;
     public boolean h;
 
-    public fk(int i, int j, int k, java.lang.String s)
+    public fk(int i, int j, int k, String s)
     {
         this(i, j, k, 200, 20, s);
     }
 
-    protected fk(int i, int j, int k, int l, int i1, java.lang.String s)
+    protected fk(int i, int j, int k, int l, int i1, String s)
     {
         a = 200;
         b = 20;
diff --git "a/temp\\src\\java/fl.java" "b/src\\main\\java/fl.java"
index 415aaae..e629249 100644
--- "a/temp\\src\\java/fl.java"
+++ "b/src\\main\\java/fl.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -10,7 +9,7 @@ public class fl extends java.lang.Thread
 
     final Minecraft a;
 
-    public fl(Minecraft minecraft, java.lang.String s)
+    public fl(Minecraft minecraft, String s)
     {
         super(s);
         a = minecraft;
diff --git "a/temp\\src\\java/fm.java" "b/src\\main\\java/fm.java"
index b352fda..b1a3b36 100644
--- "a/temp\\src\\java/fm.java"
+++ "b/src\\main\\java/fm.java"
@@ -1,15 +1,10 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.awt.Canvas;
-import java.awt.Component;
-import java.awt.Frame;
 //import Minecraft;
 //import MinecraftApplet;
-import java.io.File;
-import java.lang.reflect.Field;
+
 
 public final class fm extends Minecraft
 {
diff --git "a/temp\\src\\java/fn.java" "b/src\\main\\java/fn.java"
index b3e6398..f1776d8 100644
--- "a/temp\\src\\java/fn.java"
+++ "b/src\\main\\java/fn.java"
@@ -1,14 +1,9 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
 import java.io.IOException;
-import java.io.PrintStream;
 import java.util.HashMap;
-import java.util.Map;
 
 public abstract class fn
 {
@@ -24,15 +19,15 @@ public abstract class fn
 
     static void a(int i, java.lang.Class class1)
     {
-        if(a.containsKey(((java.lang.Object) (java.lang.Integer.valueOf(i)))))
+        if(a.containsKey(((Object) (java.lang.Integer.valueOf(i)))))
             throw new IllegalArgumentException((new StringBuilder()).append("Duplicate packet id:").append(i).toString());
-        if(b.containsKey(((java.lang.Object) (class1))))
+        if(b.containsKey(((Object) (class1))))
         {
-            throw new IllegalArgumentException((new StringBuilder()).append("Duplicate packet class:").append(((java.lang.Object) (class1))).toString());
+            throw new IllegalArgumentException((new StringBuilder()).append("Duplicate packet class:").append(((Object) (class1))).toString());
         } else
         {
-            a.put(((java.lang.Object) (java.lang.Integer.valueOf(i))), ((java.lang.Object) (class1)));
-            b.put(((java.lang.Object) (class1)), ((java.lang.Object) (java.lang.Integer.valueOf(i))));
+            a.put(((Object) (java.lang.Integer.valueOf(i))), ((Object) (class1)));
+            b.put(((Object) (class1)), ((Object) (java.lang.Integer.valueOf(i))));
             return;
         }
     }
@@ -40,7 +35,7 @@ public abstract class fn
     public static fn a(int i)
     {
         java.lang.Class class1;
-        class1 = (java.lang.Class)a.get(((java.lang.Object) (java.lang.Integer.valueOf(i))));
+        class1 = (java.lang.Class)a.get(((Object) (java.lang.Integer.valueOf(i))));
         if(class1 == null)
             return null;
         try
@@ -57,7 +52,7 @@ public abstract class fn
 
     public final int b()
     {
-        return ((java.lang.Integer)b.get(((java.lang.Object) (((java.lang.Object)this).getClass())))).intValue();
+        return ((java.lang.Integer)b.get(((Object) (((Object)this).getClass())))).intValue();
     }
 
     public static fn b(java.io.DataInputStream datainputstream) throws IOException
diff --git "a/temp\\src\\java/fo.java" "b/src\\main\\java/fo.java"
index 12d3e3a..114a5ec 100644
--- "a/temp\\src\\java/fo.java"
+++ "b/src\\main\\java/fo.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/fp.java" "b/src\\main\\java/fp.java"
index 0cb3a5f..f59b66f 100644
--- "a/temp\\src\\java/fp.java"
+++ "b/src\\main\\java/fp.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.awt.event.WindowAdapter;
-import java.awt.event.WindowEvent;
 //import Minecraft;
 
 public final class fp extends java.awt.event.WindowAdapter
diff --git "a/temp\\src\\java/fq.java" "b/src\\main\\java/fq.java"
index b73c82c..7085692 100644
--- "a/temp\\src\\java/fq.java"
+++ "b/src\\main\\java/fq.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/fr.java" "b/src\\main\\java/fr.java"
index 2fd4014..92391f9 100644
--- "a/temp\\src\\java/fr.java"
+++ "b/src\\main\\java/fr.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -7,18 +6,17 @@ import java.io.BufferedReader;
 import java.io.File;
 import java.io.FileReader;
 import java.io.FileWriter;
-import java.io.PrintStream;
 import java.io.PrintWriter;
 //import Minecraft;
-import org.lwjgl.input.Keyboard;
+
 
 public class fr
 {
 
-    private static final java.lang.String y[] = {
+    private static final String y[] = {
         "FAR", "NORMAL", "SHORT", "TINY"
     };
-    private static final java.lang.String z[] = {
+    private static final String z[] = {
         "Peaceful", "Easy", "Normal", "Hard"
     };
     public float a;
@@ -108,7 +106,7 @@ public class fr
         x = false;
     }
 
-    public java.lang.String a(int i1)
+    public String a(int i1)
     {
         return (new StringBuilder()).append(t[i1].a).append(": ").append(org.lwjgl.input.Keyboard.getKeyName(t[i1].b)).toString();
     }
@@ -181,7 +179,7 @@ public class fr
             return 0.0F;
     }
 
-    public java.lang.String d(int i1)
+    public String d(int i1)
     {
         if(i1 == 0)
             return (new StringBuilder()).append("Music: ").append(a <= 0.0F ? "OFF" : (new StringBuilder()).append((int)(a * 100F)).append("%").toString()).toString();
@@ -221,9 +219,9 @@ public class fr
         try
         {
             java.io.BufferedReader bufferedreader = new BufferedReader(((java.io.Reader) (new FileReader(A))));
-            for(java.lang.String s1 = ""; (s1 = bufferedreader.readLine()) != null;)
+            for(String s1 = ""; (s1 = bufferedreader.readLine()) != null;)
             {
-                java.lang.String as[] = s1.split(":");
+                String as[] = s1.split(":");
                 if(as[0].equals("music"))
                     a = a(as[1]);
                 if(as[0].equals("sound"))
@@ -247,7 +245,7 @@ public class fr
                 int i1 = 0;
                 while(i1 < t.length) 
                 {
-                    if(as[0].equals(((java.lang.Object) ((new StringBuilder()).append("key_").append(t[i1].a).toString()))))
+                    if(as[0].equals(((Object) ((new StringBuilder()).append("key_").append(t[i1].a).toString()))))
                         t[i1].b = java.lang.Integer.parseInt(as[1]);
                     i1++;
                 }
@@ -263,7 +261,7 @@ public class fr
         return;
     }
 
-    private float a(java.lang.String s1)
+    private float a(String s1)
     {
         if(s1.equals("true"))
             return 1.0F;
diff --git "a/temp\\src\\java/fs.java" "b/src\\main\\java/fs.java"
index d1aff7a..ae5fdf8 100644
--- "a/temp\\src\\java/fs.java"
+++ "b/src\\main\\java/fs.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Comparator;
-
 class fs
     implements java.util.Comparator
 {
@@ -24,7 +21,7 @@ class fs
         return bv2.a() <= bv1.a() ? 0 : 1;
     }
 
-    public int compare(java.lang.Object obj, java.lang.Object obj1)
+    public int compare(Object obj, Object obj1)
     {
         return a((bv)obj, (bv)obj1);
     }
diff --git "a/temp\\src\\java/ft.java" "b/src\\main\\java/ft.java"
index 8f848af..c8ffa84 100644
--- "a/temp\\src\\java/ft.java"
+++ "b/src\\main\\java/ft.java"
@@ -1,58 +1,55 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.IOException;
-
 public class ft
-    implements aw
+    implements IChunkProvider
 {
 
-    private ga c;
-    private aw d;
+    private Chunk c;
+    private IChunkProvider d;
     private af e;
-    private ga f[];
-    private cn g;
+    private Chunk f[];
+    private World g;
     int a;
     int b;
-    private ga h;
+    private Chunk h;
 
-    public ft(cn cn1, af af1, aw aw1)
+    public ft(World world1, af af1, IChunkProvider iChunkProvider1)
     {
-        f = new ga[1024];
+        f = new Chunk[1024];
         a = 0xc4653601;
         b = 0xc4653601;
-        c = new ga(cn1, new byte[32768], 0, 0);
+        c = new Chunk(world1, new byte[32768], 0, 0);
         c.q = true;
         c.p = true;
-        g = cn1;
+        g = world1;
         e = af1;
-        d = aw1;
+        d = iChunkProvider1;
     }
 
-    public boolean a(int i, int j)
+    public boolean chunkExists(int x, int y)
     {
-        if(i == a && j == b && h != null)
+        if(x == a && y == b && h != null)
         {
             return true;
         } else
         {
-            int k = i & 0x1f;
-            int l = j & 0x1f;
+            int k = x & 0x1f;
+            int l = y & 0x1f;
             int i1 = k + l * 32;
-            return f[i1] != null && (f[i1] == c || f[i1].a(i, j));
+            return f[i1] != null && (f[i1] == c || f[i1].a(x, y));
         }
     }
 
-    public ga b(int i, int j)
+    public Chunk provideChunk(int x, int y)
     {
-        if(i == a && j == b && h != null)
+        if(x == a && y == b && h != null)
             return h;
-        int k = i & 0x1f;
-        int l = j & 0x1f;
+        int k = x & 0x1f;
+        int l = y & 0x1f;
         int i1 = k + l * 32;
-        if(!a(i, j))
+        if(!chunkExists(x, y))
         {
             if(f[i1] != null)
             {
@@ -60,40 +57,40 @@ public class ft
                 b(f[i1]);
                 a(f[i1]);
             }
-            ga ga1 = c(i, j);
-            if(ga1 == null)
+            Chunk chunk1 = c(x, y);
+            if(chunk1 == null)
                 if(d == null)
-                    ga1 = c;
+                    chunk1 = c;
                 else
-                    ga1 = d.b(i, j);
-            f[i1] = ga1;
+                    chunk1 = d.provideChunk(x, y);
+            f[i1] = chunk1;
             if(f[i1] != null)
                 f[i1].d();
-            if(!f[i1].n && a(i + 1, j + 1) && a(i, j + 1) && a(i + 1, j))
-                a(((aw) (this)), i, j);
-            if(a(i - 1, j) && !b(i - 1, j).n && a(i - 1, j + 1) && a(i, j + 1) && a(i - 1, j))
-                a(((aw) (this)), i - 1, j);
-            if(a(i, j - 1) && !b(i, j - 1).n && a(i + 1, j - 1) && a(i, j - 1) && a(i + 1, j))
-                a(((aw) (this)), i, j - 1);
-            if(a(i - 1, j - 1) && !b(i - 1, j - 1).n && a(i - 1, j - 1) && a(i, j - 1) && a(i - 1, j))
-                a(((aw) (this)), i - 1, j - 1);
+            if(!f[i1].n && chunkExists(x + 1, y + 1) && chunkExists(x, y + 1) && chunkExists(x + 1, y))
+                a(((IChunkProvider) (this)), x, y);
+            if(chunkExists(x - 1, y) && !provideChunk(x - 1, y).n && chunkExists(x - 1, y + 1) && chunkExists(x, y + 1) && chunkExists(x - 1, y))
+                a(((IChunkProvider) (this)), x - 1, y);
+            if(chunkExists(x, y - 1) && !provideChunk(x, y - 1).n && chunkExists(x + 1, y - 1) && chunkExists(x, y - 1) && chunkExists(x + 1, y))
+                a(((IChunkProvider) (this)), x, y - 1);
+            if(chunkExists(x - 1, y - 1) && !provideChunk(x - 1, y - 1).n && chunkExists(x - 1, y - 1) && chunkExists(x, y - 1) && chunkExists(x - 1, y))
+                a(((IChunkProvider) (this)), x - 1, y - 1);
         }
-        a = i;
-        b = j;
+        a = x;
+        b = y;
         h = f[i1];
         return f[i1];
     }
 
-    private ga c(int i, int j)
+    private Chunk c(int i, int j)
     {
         if(e == null)
             return null;
         try
         {
-            ga ga1 = e.a(g, i, j);
-            if(ga1 != null)
-                ga1.s = g.c;
-            return ga1;
+            Chunk chunk1 = e.a(g, i, j);
+            if(chunk1 != null)
+                chunk1.s = g.time;
+            return chunk1;
         }
         catch(java.lang.Exception exception)
         {
@@ -102,13 +99,13 @@ public class ft
         return null;
     }
 
-    private void a(ga ga1)
+    private void a(Chunk chunk1)
     {
         if(e == null)
             return;
         try
         {
-            e.b(g, ga1);
+            e.b(g, chunk1);
         }
         catch(java.lang.Exception exception)
         {
@@ -116,14 +113,14 @@ public class ft
         }
     }
 
-    private void b(ga ga1)
+    private void b(Chunk chunk1)
     {
         if(e == null)
             return;
         try
         {
-            ga1.s = g.c;
-            e.a(g, ga1);
+            chunk1.s = g.time;
+            e.a(g, chunk1);
         }
         catch(java.io.IOException ioexception)
         {
@@ -131,25 +128,25 @@ public class ft
         }
     }
 
-    public void a(aw aw1, int i, int j)
+    public void a(IChunkProvider iChunkProvider1, int i, int j)
     {
-        ga ga1 = b(i, j);
-        if(!ga1.n)
+        Chunk chunk1 = provideChunk(i, j);
+        if(!chunk1.n)
         {
-            ga1.n = true;
+            chunk1.n = true;
             if(d != null)
             {
-                d.a(aw1, i, j);
-                ga1.f();
+                d.a(iChunkProvider1, i, j);
+                chunk1.f();
             }
         }
     }
 
-    public boolean a(boolean flag, nu nu1)
+    public boolean saveChunks(boolean flag, IProgressUpdate iProgressUpdate)
     {
         int i = 0;
         int j = 0;
-        if(nu1 != null)
+        if(iProgressUpdate != null)
         {
             for(int k = 0; k < f.length; k++)
                 if(f[k] != null && f[k].a(flag))
@@ -169,8 +166,8 @@ public class ft
             f[i1].o = false;
             if(++i == 2 && !flag)
                 return false;
-            if(nu1 != null && ++l % 10 == 0)
-                nu1.a((l * 100) / j);
+            if(iProgressUpdate != null && ++l % 10 == 0)
+                iProgressUpdate.onProgress((l * 100) / j);
         }
 
         if(flag)
@@ -182,14 +179,14 @@ public class ft
         return true;
     }
 
-    public boolean a()
+    public boolean unloadQueuedChunks()
     {
         if(e != null)
             e.a();
-        return d.a();
+        return d.unloadQueuedChunks();
     }
 
-    public boolean b()
+    public boolean canSave()
     {
         return true;
     }
diff --git "a/temp\\src\\java/fu.java" "b/src\\main\\java/fu.java"
index fefed06..45cd662 100644
--- "a/temp\\src\\java/fu.java"
+++ "b/src\\main\\java/fu.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class fu extends di
 {
 
@@ -15,28 +12,28 @@ public class fu extends di
         aU = 32 << j;
     }
 
-    public boolean a(ev ev1, dm dm, cn cn1, int i, int j, int k, int l)
+    public boolean a(ev ev1, Player player, World world1, int i, int j, int k, int l)
     {
-        int i1 = cn1.a(i, j, k);
-        gb gb1 = cn1.f(i, j + 1, k);
+        int i1 = world1.a(i, j, k);
+        gb gb1 = world1.f(i, j + 1, k);
         if(!gb1.a() && i1 == ly.v.bc || i1 == ly.w.bc)
         {
             ly ly1 = ly.aB;
-            cn1.a((float)i + 0.5F, (float)j + 0.5F, (float)k + 0.5F, ly1.bl.d(), (ly1.bl.b() + 1.0F) / 2.0F, ly1.bl.c() * 0.8F);
-            cn1.d(i, j, k, ly1.bc);
+            world1.a((float)i + 0.5F, (float)j + 0.5F, (float)k + 0.5F, ly1.bl.d(), (ly1.bl.b() + 1.0F) / 2.0F, ly1.bl.c() * 0.8F);
+            world1.d(i, j, k, ly1.bc);
             ev1.b(1);
-            if(cn1.n.nextInt(8) == 0 && i1 == ly.v.bc)
+            if(world1.n.nextInt(8) == 0 && i1 == ly.v.bc)
             {
                 int j1 = 1;
                 for(int k1 = 0; k1 < j1; k1++)
                 {
                     float f = 0.7F;
-                    float f1 = cn1.n.nextFloat() * f + (1.0F - f) * 0.5F;
+                    float f1 = world1.n.nextFloat() * f + (1.0F - f) * 0.5F;
                     float f2 = 1.2F;
-                    float f3 = cn1.n.nextFloat() * f + (1.0F - f) * 0.5F;
-                    dx dx1 = new dx(cn1, (float)i + f1, (float)j + f2, (float)k + f3, new ev(di.Q));
-                    dx1.c = 10;
-                    cn1.a(((kh) (dx1)));
+                    float f3 = world1.n.nextFloat() * f + (1.0F - f) * 0.5F;
+                    Item item1 = new Item(world1, (float)i + f1, (float)j + f2, (float)k + f3, new ev(di.Q));
+                    item1.c = 10;
+                    world1.a(((kh) (item1)));
                 }
 
             }
diff --git "a/temp\\src\\java/fv.java" "b/src\\main\\java/fv.java"
index 4b39b7f..c716e94 100644
--- "a/temp\\src\\java/fv.java"
+++ "b/src\\main\\java/fv.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/fw.java" "b/src\\main\\java/fw.java"
index 786a805..eb5c374 100644
--- "a/temp\\src\\java/fw.java"
+++ "b/src\\main\\java/fw.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class fw extends ly
 {
 
@@ -49,16 +46,16 @@ public class fw extends ly
         return 7;
     }
 
-    public cf f(cn cn1, int i, int j, int k)
+    public cf f(World world1, int i, int j, int k)
     {
-        a(((nm) (cn1)), i, j, k);
-        return super.f(cn1, i, j, k);
+        a(((nm) (world1)), i, j, k);
+        return super.f(world1, i, j, k);
     }
 
-    public cf d(cn cn1, int i, int j, int k)
+    public cf d(World world1, int i, int j, int k)
     {
-        a(((nm) (cn1)), i, j, k);
-        return super.d(cn1, i, j, k);
+        a(((nm) (world1)), i, j, k);
+        return super.d(world1, i, j, k);
     }
 
     public void a(nm nm1, int i, int j, int k)
@@ -80,86 +77,86 @@ public class fw extends ly
             a(0.0F, 0.0F, 0.0F, f1, 1.0F, 1.0F);
     }
 
-    public void b(cn cn1, int i, int j, int k, dm dm)
+    public void b(World world1, int i, int j, int k, Player player)
     {
-        a(cn1, i, j, k, dm);
+        a(world1, i, j, k, player);
     }
 
-    public boolean a(cn cn1, int i, int j, int k, dm dm)
+    public boolean a(World world1, int i, int j, int k, Player player)
     {
         if(bn == gb.e)
             return true;
-        int l = cn1.e(i, j, k);
+        int l = world1.e(i, j, k);
         if((l & 8) != 0)
         {
-            if(cn1.a(i, j - 1, k) == bc)
-                a(cn1, i, j - 1, k, dm);
+            if(world1.a(i, j - 1, k) == bc)
+                a(world1, i, j - 1, k, player);
             return true;
         }
-        if(cn1.a(i, j + 1, k) == bc)
-            cn1.b(i, j + 1, k, (l ^ 4) + 8);
-        cn1.b(i, j, k, l ^ 4);
-        cn1.b(i, j - 1, k, i, j, k);
+        if(world1.a(i, j + 1, k) == bc)
+            world1.b(i, j + 1, k, (l ^ 4) + 8);
+        world1.b(i, j, k, l ^ 4);
+        world1.b(i, j - 1, k, i, j, k);
         if(java.lang.Math.random() < 0.5D)
-            cn1.a((double)i + 0.5D, (double)j + 0.5D, (double)k + 0.5D, "random.door_open", 1.0F, cn1.n.nextFloat() * 0.1F + 0.9F);
+            world1.a((double)i + 0.5D, (double)j + 0.5D, (double)k + 0.5D, "random.door_open", 1.0F, world1.n.nextFloat() * 0.1F + 0.9F);
         else
-            cn1.a((double)i + 0.5D, (double)j + 0.5D, (double)k + 0.5D, "random.door_close", 1.0F, cn1.n.nextFloat() * 0.1F + 0.9F);
+            world1.a((double)i + 0.5D, (double)j + 0.5D, (double)k + 0.5D, "random.door_close", 1.0F, world1.n.nextFloat() * 0.1F + 0.9F);
         return true;
     }
 
-    public void a(cn cn1, int i, int j, int k, boolean flag)
+    public void a(World world1, int i, int j, int k, boolean flag)
     {
-        int l = cn1.e(i, j, k);
+        int l = world1.e(i, j, k);
         if((l & 8) != 0)
         {
-            if(cn1.a(i, j - 1, k) == bc)
-                a(cn1, i, j - 1, k, flag);
+            if(world1.a(i, j - 1, k) == bc)
+                a(world1, i, j - 1, k, flag);
             return;
         }
-        boolean flag1 = (cn1.e(i, j, k) & 4) > 0;
+        boolean flag1 = (world1.e(i, j, k) & 4) > 0;
         if(flag1 == flag)
             return;
-        if(cn1.a(i, j + 1, k) == bc)
-            cn1.b(i, j + 1, k, (l ^ 4) + 8);
-        cn1.b(i, j, k, l ^ 4);
-        cn1.b(i, j - 1, k, i, j, k);
+        if(world1.a(i, j + 1, k) == bc)
+            world1.b(i, j + 1, k, (l ^ 4) + 8);
+        world1.b(i, j, k, l ^ 4);
+        world1.b(i, j - 1, k, i, j, k);
         if(java.lang.Math.random() < 0.5D)
-            cn1.a((double)i + 0.5D, (double)j + 0.5D, (double)k + 0.5D, "random.door_open", 1.0F, cn1.n.nextFloat() * 0.1F + 0.9F);
+            world1.a((double)i + 0.5D, (double)j + 0.5D, (double)k + 0.5D, "random.door_open", 1.0F, world1.n.nextFloat() * 0.1F + 0.9F);
         else
-            cn1.a((double)i + 0.5D, (double)j + 0.5D, (double)k + 0.5D, "random.door_close", 1.0F, cn1.n.nextFloat() * 0.1F + 0.9F);
+            world1.a((double)i + 0.5D, (double)j + 0.5D, (double)k + 0.5D, "random.door_close", 1.0F, world1.n.nextFloat() * 0.1F + 0.9F);
     }
 
-    public void a(cn cn1, int i, int j, int k, int l)
+    public void a(World world1, int i, int j, int k, int l)
     {
-        int i1 = cn1.e(i, j, k);
+        int i1 = world1.e(i, j, k);
         if((i1 & 8) != 0)
         {
-            if(cn1.a(i, j - 1, k) != bc)
-                cn1.d(i, j, k, 0);
+            if(world1.a(i, j - 1, k) != bc)
+                world1.d(i, j, k, 0);
             if(l > 0 && ly.n[l].d())
-                a(cn1, i, j - 1, k, l);
+                a(world1, i, j - 1, k, l);
         } else
         {
             boolean flag = false;
-            if(cn1.a(i, j + 1, k) != bc)
+            if(world1.a(i, j + 1, k) != bc)
             {
-                cn1.d(i, j, k, 0);
+                world1.d(i, j, k, 0);
                 flag = true;
             }
-            if(!cn1.g(i, j - 1, k))
+            if(!world1.g(i, j - 1, k))
             {
-                cn1.d(i, j, k, 0);
+                world1.d(i, j, k, 0);
                 flag = true;
-                if(cn1.a(i, j + 1, k) == bc)
-                    cn1.d(i, j + 1, k, 0);
+                if(world1.a(i, j + 1, k) == bc)
+                    world1.d(i, j + 1, k, 0);
             }
             if(flag)
-                b_(cn1, i, j, k, i1);
+                b_(world1, i, j, k, i1);
             else
             if(l > 0 && ly.n[l].d())
             {
-                boolean flag1 = cn1.o(i, j, k) || cn1.o(i, j + 1, k);
-                a(cn1, i, j, k, flag1);
+                boolean flag1 = world1.o(i, j, k) || world1.o(i, j + 1, k);
+                a(world1, i, j, k, flag1);
             }
         }
     }
@@ -174,10 +171,10 @@ public class fw extends ly
             return di.at.aS;
     }
 
-    public mf a(cn cn1, int i, int j, int k, aj aj, aj aj1)
+    public mf a(World world1, int i, int j, int k, aj aj, aj aj1)
     {
-        a(((nm) (cn1)), i, j, k);
-        return super.a(cn1, i, j, k, aj, aj1);
+        a(((nm) (world1)), i, j, k);
+        return super.a(world1, i, j, k, aj, aj1);
     }
 
     public int c(int i)
@@ -188,11 +185,11 @@ public class fw extends ly
             return i & 3;
     }
 
-    public boolean a(cn cn1, int i, int j, int k)
+    public boolean a(World world1, int i, int j, int k)
     {
         if(j >= 127)
             return false;
         else
-            return cn1.g(i, j - 1, k) && super.a(cn1, i, j, k) && super.a(cn1, i, j + 1, k);
+            return world1.g(i, j - 1, k) && super.a(world1, i, j, k) && super.a(world1, i, j + 1, k);
     }
 }
diff --git "a/temp\\src\\java/fx.java" "b/src\\main\\java/fx.java"
index c7ae49d..98a4dfb 100644
--- "a/temp\\src\\java/fx.java"
+++ "b/src\\main\\java/fx.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -23,7 +22,7 @@ public class fx
         if(b == a.length)
         {
             a aa[] = new a[b << 1];
-            java.lang.System.arraycopy(((java.lang.Object) (a)), 0, ((java.lang.Object) (aa)), 0, b);
+            java.lang.System.arraycopy(((Object) (a)), 0, ((Object) (aa)), 0, b);
             a = aa;
         }
         a[b] = a1;
diff --git "a/temp\\src\\java/fz.java" "b/src\\main\\java/fz.java"
index 7720ac2..b6ff6c9 100644
--- "a/temp\\src\\java/fz.java"
+++ "b/src\\main\\java/fz.java"
@@ -1,13 +1,8 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Collection;
 import java.util.HashMap;
-import java.util.Iterator;
-import java.util.Map;
-import org.lwjgl.opengl.GL11;
 
 public class fz
 {
@@ -19,8 +14,8 @@ public class fz
     public static double c;
     public static double d;
     public ey e;
-    public cn f;
-    public dm g;
+    public World f;
+    public Player g;
     public float h;
     public float i;
     public double j;
@@ -30,8 +25,8 @@ public class fz
     private fz()
     {
         m = ((java.util.Map) (new HashMap()));
-        m.put(ob.class, ((java.lang.Object) (new in())));
-        m.put(bd.class, ((java.lang.Object) (new r())));
+        m.put(Sign.class, ((Object) (new in())));
+        m.put(MobSpawner.class, ((Object) (new r())));
         ex ex1;
         for(java.util.Iterator iterator = m.values().iterator(); iterator.hasNext(); ex1.a(this))
             ex1 = (ex)iterator.next();
@@ -40,11 +35,11 @@ public class fz
 
     public ex a(java.lang.Class class1)
     {
-        ex ex1 = (ex)m.get(((java.lang.Object) (class1)));
+        ex ex1 = (ex)m.get(((Object) (class1)));
         if(ex1 == null && class1 != ic.class)
         {
             ex1 = a(class1.getSuperclass());
-            m.put(((java.lang.Object) (class1)), ((java.lang.Object) (ex1)));
+            m.put(((Object) (class1)), ((Object) (ex1)));
         }
         return ex1;
     }
@@ -56,29 +51,29 @@ public class fz
 
     public ex b(ic ic1)
     {
-        return a(((java.lang.Object) (ic1)).getClass());
+        return a(((Object) (ic1)).getClass());
     }
 
-    public void a(cn cn1, ey ey, kd kd, dm dm1, float f1)
+    public void a(World world1, ey ey, kd kd, Player player1, float f1)
     {
-        f = cn1;
+        f = world1;
         e = ey;
-        g = dm1;
+        g = player1;
         n = kd;
-        h = dm1.as + (dm1.aq - dm1.as) * f1;
-        i = dm1.at + (dm1.ar - dm1.at) * f1;
-        j = dm1.aI + (dm1.ak - dm1.aI) * (double)f1;
-        k = dm1.aJ + (dm1.al - dm1.aJ) * (double)f1;
-        l = dm1.aK + (dm1.am - dm1.aK) * (double)f1;
+        h = player1.as + (player1.aq - player1.as) * f1;
+        i = player1.at + (player1.ar - player1.at) * f1;
+        j = player1.aI + (player1.ak - player1.aI) * (double)f1;
+        k = player1.aJ + (player1.al - player1.aJ) * (double)f1;
+        l = player1.aK + (player1.am - player1.aK) * (double)f1;
     }
 
     public void a(ic ic1, float f1)
     {
         if(ic1.a(j, k, l) < 4096D)
         {
-            float f2 = f.c(ic1.f, ic1.g, ic1.h);
+            float f2 = f.c(ic1.x, ic1.y, ic1.z);
             org.lwjgl.opengl.GL11.glColor3f(f2, f2, f2);
-            a(ic1, (double)ic1.f - b, (double)ic1.g - c, (double)ic1.h - d, f1);
+            a(ic1, (double)ic1.x - b, (double)ic1.y - c, (double)ic1.z - d, f1);
         }
     }
 
diff --git "a/temp\\src\\java/g.java" "b/src\\main\\java/g.java"
index a510a15..0e6d1f0 100644
--- "a/temp\\src\\java/g.java"
+++ "b/src\\main\\java/g.java"
@@ -1,11 +1,8 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
 import java.awt.BorderLayout;
-import java.awt.Canvas;
-import java.awt.Component;
 //import Minecraft;
 //import MinecraftApplet;
 
diff --git "a/temp\\src\\java/gb.java" "b/src\\main\\java/gb.java"
index 6442a83..2fce46f 100644
--- "a/temp\\src\\java/gb.java"
+++ "b/src\\main\\java/gb.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/gc.java" "b/src\\main\\java/gc.java"
index 6a7474b..cc0b68c 100644
--- "a/temp\\src\\java/gc.java"
+++ "b/src\\main\\java/gc.java"
@@ -1,9 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.List;
 //import Minecraft;
 
 public class gc extends bh
@@ -11,7 +9,7 @@ public class gc extends bh
 
     private bh a;
     private int h;
-    private java.lang.String i;
+    private String i;
 
     public gc(bh bh1)
     {
@@ -28,8 +26,8 @@ public class gc extends bh
     public void a()
     {
         e.clear();
-        e.add(((java.lang.Object) (new fk(0, c / 2 - 100, d / 4 + 96 + 12, "Connect"))));
-        e.add(((java.lang.Object) (new fk(1, c / 2 - 100, d / 4 + 120 + 12, "Cancel"))));
+        e.add(((Object) (new fk(0, c / 2 - 100, d / 4 + 96 + 12, "Connect"))));
+        e.add(((Object) (new fk(1, c / 2 - 100, d / 4 + 120 + 12, "Cancel"))));
         ((fk)e.get(0)).g = false;
     }
 
@@ -42,7 +40,7 @@ public class gc extends bh
         else
         if(fk1.f == 0)
         {
-            java.lang.String as[] = i.split(":");
+            String as[] = i.split(":");
             b.a(((bh) (new mn(b, as[0], as.length <= 1 ? 25565 : java.lang.Integer.parseInt(as[1])))));
         }
     }
diff --git "a/temp\\src\\java/gd.java" "b/src\\main\\java/gd.java"
index 737d802..1b32bd6 100644
--- "a/temp\\src\\java/gd.java"
+++ "b/src\\main\\java/gd.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -42,7 +41,7 @@ public class gd extends lv
 
     }
 
-    public void a(dm dm)
+    public void a(Player player)
     {
         a = 0.0F;
         b = 0.0F;
diff --git "a/temp\\src\\java/gf.java" "b/src\\main\\java/gf.java"
index bdb6999..deab95e 100644
--- "a/temp\\src\\java/gf.java"
+++ "b/src\\main\\java/gf.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -15,9 +14,9 @@ public class gf extends di
         a = ly1.bc;
     }
 
-    public boolean a(ev ev1, dm dm, cn cn1, int i, int j, int k, int l)
+    public boolean a(ev ev1, Player player, World world1, int i, int j, int k, int l)
     {
-        if(cn1.a(i, j, k) == ly.aT.bc)
+        if(world1.a(i, j, k) == ly.aT.bc)
         {
             l = 0;
         } else
@@ -35,16 +34,16 @@ public class gf extends di
             if(l == 5)
                 i++;
         }
-        if(ev1.a == 0)
+        if(ev1.count == 0)
             return false;
-        if(cn1.a(a, i, j, k, false))
+        if(world1.a(a, i, j, k, false))
         {
             ly ly1 = ly.n[a];
-            if(cn1.d(i, j, k, a))
+            if(world1.d(i, j, k, a))
             {
-                ly.n[a].d(cn1, i, j, k, l);
-                cn1.a((float)i + 0.5F, (float)j + 0.5F, (float)k + 0.5F, ly1.bl.d(), (ly1.bl.b() + 1.0F) / 2.0F, ly1.bl.c() * 0.8F);
-                ev1.a--;
+                ly.n[a].d(world1, i, j, k, l);
+                world1.a((float)i + 0.5F, (float)j + 0.5F, (float)k + 0.5F, ly1.bl.d(), (ly1.bl.b() + 1.0F) / 2.0F, ly1.bl.c() * 0.8F);
+                ev1.count--;
             }
         }
         return true;
diff --git "a/temp\\src\\java/gg.java" "b/src\\main\\java/gg.java"
index f6fc527..e56bf48 100644
--- "a/temp\\src\\java/gg.java"
+++ "b/src\\main\\java/gg.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/gh.java" "b/src\\main\\java/gh.java"
index ad896b3..ced0b2f 100644
--- "a/temp\\src\\java/gh.java"
+++ "b/src\\main\\java/gh.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -15,7 +14,7 @@ public interface gh
 
     public abstract void a(int i, ev ev);
 
-    public abstract java.lang.String d();
+    public abstract String d();
 
     public abstract int e();
 
diff --git "a/temp\\src\\java/gi.java" "b/src\\main\\java/gi.java"
index 5a1cdc0..7af81b3 100644
--- "a/temp\\src\\java/gi.java"
+++ "b/src\\main\\java/gi.java"
@@ -1,12 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
-import java.io.IOException;
-
 public class gi extends fn
 {
 
diff --git "a/temp\\src\\java/gj.java" "b/src\\main\\java/gj.java"
index 99b58ea..7e10205 100644
--- "a/temp\\src\\java/gj.java"
+++ "b/src\\main\\java/gj.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import org.lwjgl.opengl.GL11;
-
 public class gj extends ak
 {
 
diff --git "a/temp\\src\\java/gk.java" "b/src\\main\\java/gk.java"
index 396d2f7..cbd5727 100644
--- "a/temp\\src\\java/gk.java"
+++ "b/src\\main\\java/gk.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import org.lwjgl.opengl.GL11;
-
 public class gk extends ak
 {
 
@@ -12,14 +9,14 @@ public class gk extends ak
     {
     }
 
-    public void a(kg kg1, double d, double d1, double d2, 
-            float f, float f1)
+    public void a(Arrow arrow1, double d, double d1, double d2,
+                  float f, float f1)
     {
         a("/item/arrows.png");
         org.lwjgl.opengl.GL11.glPushMatrix();
         org.lwjgl.opengl.GL11.glTranslatef((float)d, (float)d1, (float)d2);
-        org.lwjgl.opengl.GL11.glRotatef((kg1.as + (kg1.aq - kg1.as) * f1) - 90F, 0.0F, 1.0F, 0.0F);
-        org.lwjgl.opengl.GL11.glRotatef(kg1.at + (kg1.ar - kg1.at) * f1, 0.0F, 0.0F, 1.0F);
+        org.lwjgl.opengl.GL11.glRotatef((arrow1.as + (arrow1.aq - arrow1.as) * f1) - 90F, 0.0F, 1.0F, 0.0F);
+        org.lwjgl.opengl.GL11.glRotatef(arrow1.at + (arrow1.ar - arrow1.at) * f1, 0.0F, 0.0F, 1.0F);
         ho ho1 = ho.a;
         int i = 0;
         float f2 = 0.0F;
@@ -32,7 +29,7 @@ public class gk extends ak
         float f9 = (float)(10 + i * 10) / 32F;
         float f10 = 0.05625F;
         org.lwjgl.opengl.GL11.glEnable(32826);
-        float f11 = (float)kg1.a - f1;
+        float f11 = (float) arrow1.shake - f1;
         if(f11 > 0.0F)
         {
             float f12 = -eo.a(f11 * 3F) * f11;
@@ -73,6 +70,6 @@ public class gk extends ak
 
     public void a(kh kh, double d, double d1, double d2, float f, float f1)
     {
-        a((kg)kh, d, d1, d2, f, f1);
+        a((Arrow)kh, d, d1, d2, f, f1);
     }
 }
diff --git "a/temp\\src\\java/gl.java" "b/src\\main\\java/gl.java"
index b3eda58..eee9ecb 100644
--- "a/temp\\src\\java/gl.java"
+++ "b/src\\main\\java/gl.java"
@@ -1,19 +1,16 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Comparator;
-
 public class gl
     implements java.util.Comparator
 {
 
-    private dm a;
+    private Player a;
 
-    public gl(dm dm)
+    public gl(Player player)
     {
-        a = dm;
+        a = player;
     }
 
     public int a(bn bn1, bn bn2)
@@ -25,10 +22,11 @@ public class gl
         if(flag1 && !flag)
             return -1;
         else
-            return bn1.a(((kh) (a))) >= bn2.a(((kh) (a))) ? -1 : 1;
+            return bn1.a(((kh) (a))) > bn2.a(((kh) (a))) ? -1 : (bn1.a(((kh) (a))) < bn2.a(((kh) (a))) ? 1 : 0);
+            //return bn1.a(((kh) (a))) >= bn2.a(((kh) (a))) ? -1 : 1;
     }
 
-    public int compare(java.lang.Object obj, java.lang.Object obj1)
+    public int compare(Object obj, Object obj1)
     {
         return a((bn)obj, (bn)obj1);
     }
diff --git "a/temp\\src\\java/gm.java" "b/src\\main\\java/gm.java"
index 783f9e5..fce5610 100644
--- "a/temp\\src\\java/gm.java"
+++ "b/src\\main\\java/gm.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -13,14 +12,14 @@ public class gm extends dn
         a(fo1);
     }
 
-    protected boolean a(mv mv1, int i)
+    protected boolean a(Pig pig1, int i)
     {
         a("/mob/saddle.png");
-        return i == 0 && mv1.a;
+        return i == 0 && pig1.saddle;
     }
 
-    protected boolean a(ge ge, int i)
+    protected boolean a(Mob mob, int i)
     {
-        return a((mv)ge, i);
+        return a((Pig) mob, i);
     }
 }
diff --git "a/temp\\src\\java/go.java" "b/src\\main\\java/go.java"
index 18c6850..9930658 100644
--- "a/temp\\src\\java/go.java"
+++ "b/src\\main\\java/go.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -7,10 +6,10 @@
 public class go
 {
 
-    public final java.lang.String a;
+    public final String a;
     public final java.lang.Throwable b;
 
-    public go(java.lang.String s, java.lang.Throwable throwable)
+    public go(String s, java.lang.Throwable throwable)
     {
         a = s;
         b = throwable;
diff --git "a/temp\\src\\java/gp.java" "b/src\\main\\java/gp.java"
index 450543f..cfe848b 100644
--- "a/temp\\src\\java/gp.java"
+++ "b/src\\main\\java/gp.java"
@@ -1,17 +1,14 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
 import java.io.IOException;
 
 public class gp extends fn
 {
 
     public int a;
-    public java.lang.String b;
+    public String b;
     public int c;
     public int d;
     public int e;
@@ -23,17 +20,17 @@ public class gp extends fn
     {
     }
 
-    public gp(dm dm1)
+    public gp(Player player1)
     {
-        a = dm1.ab;
-        b = dm1.i;
-        c = eo.b(dm1.ak * 32D);
-        d = eo.b(dm1.al * 32D);
-        e = eo.b(dm1.am * 32D);
-        f = (byte)(int)((dm1.aq * 256F) / 360F);
-        g = (byte)(int)((dm1.ar * 256F) / 360F);
-        ev ev1 = dm1.b.a();
-        h = ev1 != null ? ev1.c : 0;
+        a = player1.ab;
+        b = player1.i;
+        c = eo.b(player1.ak * 32D);
+        d = eo.b(player1.al * 32D);
+        e = eo.b(player1.am * 32D);
+        f = (byte)(int)((player1.aq * 256F) / 360F);
+        g = (byte)(int)((player1.ar * 256F) / 360F);
+        ev ev1 = player1.b.a();
+        h = ev1 != null ? ev1.id : 0;
     }
 
     public void a(java.io.DataInputStream datainputstream) throws IOException
diff --git "a/temp\\src\\java/gq.java" "b/src\\main\\java/gq.java"
index a26ceff..7b37c51 100644
--- "a/temp\\src\\java/gq.java"
+++ "b/src\\main\\java/gq.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import org.lwjgl.opengl.GL11;
-
 public class gq extends dn
 {
 
@@ -16,7 +13,7 @@ public class gq extends dn
         f = fo1;
     }
 
-    protected boolean a(ma ma1, int i)
+    protected boolean a(Slime slime1, int i)
     {
         if(i == 0)
         {
@@ -34,21 +31,21 @@ public class gq extends dn
         return false;
     }
 
-    protected void a(ma ma1, float f1)
+    protected void a(Slime slime1, float f1)
     {
-        float f2 = (ma1.b + (ma1.a - ma1.b) * f1) / ((float)ma1.c * 0.5F + 1.0F);
+        float f2 = (slime1.b + (slime1.a - slime1.b) * f1) / ((float) slime1.c * 0.5F + 1.0F);
         float f3 = 1.0F / (f2 + 1.0F);
-        float f4 = ma1.c;
+        float f4 = slime1.c;
         org.lwjgl.opengl.GL11.glScalef(f3 * f4, (1.0F / f3) * f4, f3 * f4);
     }
 
-    protected void a(ge ge, float f1)
+    protected void a(Mob mob, float f1)
     {
-        a((ma)ge, f1);
+        a((Slime) mob, f1);
     }
 
-    protected boolean a(ge ge, int i)
+    protected boolean a(Mob mob, int i)
     {
-        return a((ma)ge, i);
+        return a((Slime) mob, i);
     }
 }
diff --git "a/temp\\src\\java/gr.java" "b/src\\main\\java/gr.java"
index 7488ae3..ee1f4c2 100644
--- "a/temp\\src\\java/gr.java"
+++ "b/src\\main\\java/gr.java"
@@ -1,19 +1,16 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
 //import Minecraft;
-import org.lwjgl.opengl.Display;
-import org.lwjgl.opengl.GL11;
 
 public class gr
-    implements nu
+    implements IProgressUpdate
 {
 
-    private java.lang.String a;
+    private String a;
     private Minecraft b;
-    private java.lang.String c;
+    private String c;
     private long d;
     private boolean e;
 
@@ -26,19 +23,19 @@ public class gr
         b = minecraft;
     }
 
-    public void a(java.lang.String s)
+    public void a(String s)
     {
         e = false;
         c(s);
     }
 
-    public void b(java.lang.String s)
+    public void setState1(String state)
     {
         e = true;
         c(c);
     }
 
-    public void c(java.lang.String s)
+    public void c(String s)
     {
         if(!b.F)
         {
@@ -63,7 +60,7 @@ public class gr
         }
     }
 
-    public void d(java.lang.String s)
+    public void setState2(String state)
     {
         if(!b.F)
         {
@@ -74,14 +71,14 @@ public class gr
         } else
         {
             d = 0L;
-            a = s;
-            a(-1);
+            a = state;
+            onProgress(-1);
             d = 0L;
             return;
         }
     }
 
-    public void a(int i)
+    public void onProgress(int value)
     {
         if(!b.F)
             if(e)
@@ -114,7 +111,7 @@ public class gr
         ho1.a(j, 0.0D, 0.0D, (float)j / f, 0.0D);
         ho1.a(0.0D, 0.0D, 0.0D, 0.0D, 0.0D);
         ho1.a();
-        if(i >= 0)
+        if(value >= 0)
         {
             byte byte0 = 100;
             byte byte1 = 2;
@@ -130,8 +127,8 @@ public class gr
             ho1.b(0x80ff80);
             ho1.a(j1, k1, 0.0D);
             ho1.a(j1, k1 + byte1, 0.0D);
-            ho1.a(j1 + i, k1 + byte1, 0.0D);
-            ho1.a(j1 + i, k1, 0.0D);
+            ho1.a(j1 + value, k1 + byte1, 0.0D);
+            ho1.a(j1 + value, k1, 0.0D);
             ho1.a();
             org.lwjgl.opengl.GL11.glEnable(3553);
         }
diff --git "a/temp\\src\\java/gs.java" "b/src\\main\\java/gs.java"
index 7688974..0436646 100644
--- "a/temp\\src\\java/gs.java"
+++ "b/src\\main\\java/gs.java"
@@ -1,16 +1,11 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.File;
 import java.util.HashSet;
-import java.util.Iterator;
 import java.util.LinkedList;
-import java.util.List;
-import java.util.Set;
 
-public class gs extends cn
+public class gs extends World
 {
 
     private java.util.LinkedList z;
@@ -30,14 +25,14 @@ public class gs extends cn
         E = ((java.util.Set) (new HashSet()));
         F = ((java.util.Set) (new HashSet()));
         A = gy1;
-        o = 8;
-        p = 64;
-        q = 8;
+        spawnX = 8;
+        spawnY = 64;
+        spawnZ = 8;
     }
 
     public void g()
     {
-        c++;
+        time++;
         int i = a(1.0F);
         if(i != e)
         {
@@ -77,17 +72,17 @@ public class gs extends cn
 
     }
 
-    protected aw a(java.io.File file)
+    protected IChunkProvider a(java.io.File file)
     {
-        B = new lz(((cn) (this)));
-        return ((aw) (B));
+        B = new lz(((World) (this)));
+        return ((IChunkProvider) (B));
     }
 
     public void a()
     {
-        o = 8;
-        p = 64;
-        q = 8;
+        spawnX = 8;
+        spawnY = 64;
+        spawnZ = 8;
     }
 
     protected void h()
@@ -117,7 +112,7 @@ public class gs extends cn
     {
         boolean flag = super.a(kh1);
         if(kh1 instanceof bi)
-            E.add(((java.lang.Object) (kh1)));
+            E.add(((Object) (kh1)));
         return flag;
     }
 
@@ -125,29 +120,29 @@ public class gs extends cn
     {
         super.d(kh1);
         if(kh1 instanceof bi)
-            E.remove(((java.lang.Object) (kh1)));
+            E.remove(((Object) (kh1)));
     }
 
     protected void b(kh kh1)
     {
         super.b(kh1);
-        if(F.contains(((java.lang.Object) (kh1))))
-            F.remove(((java.lang.Object) (kh1)));
+        if(F.contains(((Object) (kh1))))
+            F.remove(((Object) (kh1)));
     }
 
     protected void c(kh kh1)
     {
         super.c(kh1);
-        if(E.contains(((java.lang.Object) (kh1))))
-            F.add(((java.lang.Object) (kh1)));
+        if(E.contains(((Object) (kh1))))
+            F.add(((Object) (kh1)));
     }
 
     public void a(int i, kh kh1)
     {
-        E.add(((java.lang.Object) (kh1)));
+        E.add(((Object) (kh1)));
         if(!a(kh1))
-            F.add(((java.lang.Object) (kh1)));
-        D.a(i, ((java.lang.Object) (kh1)));
+            F.add(((Object) (kh1)));
+        D.a(i, ((Object) (kh1)));
     }
 
     public kh b(int i)
@@ -160,7 +155,7 @@ public class gs extends cn
         kh kh1 = (kh)D.b(i);
         if(kh1 != null)
         {
-            E.remove(((java.lang.Object) (kh1)));
+            E.remove(((Object) (kh1)));
             d(kh1);
         }
         return kh1;
@@ -172,7 +167,7 @@ public class gs extends cn
         int k1 = e(i, j, l);
         if(super.c(i, j, l, i1))
         {
-            z.add(((java.lang.Object) (new lc(this, i, j, l, j1, k1))));
+            z.add(((Object) (new lc(this, i, j, l, j1, k1))));
             return true;
         } else
         {
@@ -186,7 +181,7 @@ public class gs extends cn
         int l1 = e(i, j, l);
         if(super.a(i, j, l, i1, j1))
         {
-            z.add(((java.lang.Object) (new lc(this, i, j, l, k1, l1))));
+            z.add(((Object) (new lc(this, i, j, l, k1, l1))));
             return true;
         } else
         {
@@ -200,7 +195,7 @@ public class gs extends cn
         int k1 = e(i, j, l);
         if(super.a(i, j, l, i1))
         {
-            z.add(((java.lang.Object) (new lc(this, i, j, l, j1, k1))));
+            z.add(((Object) (new lc(this, i, j, l, j1, k1))));
             return true;
         } else
         {
diff --git "a/temp\\src\\java/gt.java" "b/src\\main\\java/gt.java"
index 6f059a6..57a2307 100644
--- "a/temp\\src\\java/gt.java"
+++ "b/src\\main\\java/gt.java"
@@ -1,22 +1,19 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
 import java.io.IOException;
 
 public class gt extends fn
 {
 
-    public java.lang.String a;
+    public String a;
 
     public gt()
     {
     }
 
-    public gt(java.lang.String s)
+    public gt(String s)
     {
         a = s;
     }
diff --git "a/temp\\src\\java/gu.java" "b/src\\main\\java/gu.java"
index e691a19..80137bd 100644
--- "a/temp\\src\\java/gu.java"
+++ "b/src\\main\\java/gu.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -36,7 +35,7 @@ public class gu
         return a[i];
     }
 
-    public java.lang.String d()
+    public String d()
     {
         return "Crafting";
     }
@@ -45,7 +44,7 @@ public class gu
     {
         if(a[i] != null)
         {
-            if(a[i].a <= j)
+            if(a[i].count <= j)
             {
                 ev ev1 = a[i];
                 a[i] = null;
@@ -53,7 +52,7 @@ public class gu
                 return ev1;
             }
             ev ev2 = a[i].a(j);
-            if(a[i].a == 0)
+            if(a[i].count == 0)
                 a[i] = null;
             c.a(((gh) (this)));
             return ev2;
diff --git "a/temp\\src\\java/gv.java" "b/src\\main\\java/gv.java"
index e5941a5..49a5d49 100644
--- "a/temp\\src\\java/gv.java"
+++ "b/src\\main\\java/gv.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class gv extends ik
 {
 
@@ -17,9 +14,9 @@ public class gv extends ik
         b = i;
     }
 
-    public boolean a(cn cn1, java.util.Random random, int i, int j, int k)
+    public boolean a(World world1, java.util.Random random, int i, int j, int k)
     {
-        if(cn1.f(i, j, k) != gb.f)
+        if(world1.f(i, j, k) != gb.f)
             return false;
         float f = random.nextFloat() * 3.141593F;
         double d = (float)(i + 8) + (eo.a(f) * (float)b) / 8F;
@@ -47,9 +44,9 @@ public class gv extends ik
                         double d14 = (((double)k1 + 0.5D) - d8) / (d10 / 2D);
                         if(d12 * d12 + d13 * d13 + d14 * d14 >= 1.0D)
                             continue;
-                        int l1 = cn1.a(i1, j1, k1);
+                        int l1 = world1.a(i1, j1, k1);
                         if(l1 == ly.F.bc)
-                            cn1.a(i1, j1, k1, a);
+                            world1.a(i1, j1, k1, a);
                     }
 
                 }
diff --git "a/temp\\src\\java/gw.java" "b/src\\main\\java/gw.java"
index 9dd1c72..0265fb8 100644
--- "a/temp\\src\\java/gw.java"
+++ "b/src\\main\\java/gw.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class gw extends ly
 {
 
diff --git "a/temp\\src\\java/gx.java" "b/src\\main\\java/gx.java"
index 3c04844..bb17a7f 100644
--- "a/temp\\src\\java/gx.java"
+++ "b/src\\main\\java/gx.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/gy.java" "b/src\\main\\java/gy.java"
index b61ea23..defa9ed 100644
--- "a/temp\\src\\java/gy.java"
+++ "b/src\\main\\java/gy.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -6,7 +5,6 @@
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStreamReader;
-import java.net.InetAddress;
 import java.net.Socket;
 import java.net.URL;
 import java.net.UnknownHostException;
@@ -18,13 +16,13 @@ public class gy extends lb
 
     private boolean c;
     private ii d;
-    public java.lang.String a;
+    public String a;
     private Minecraft e;
     private gs f;
     private boolean g;
     java.util.Random b;
 
-    public gy(Minecraft minecraft, java.lang.String s, int i) throws UnknownHostException, IOException
+    public gy(Minecraft minecraft, String s, int i) throws UnknownHostException, IOException
     {
         c = false;
         g = false;
@@ -51,7 +49,7 @@ public class gy extends lb
         e.b = ((hq) (new nj(e, this)));
         f = new gs(this);
         f.y = true;
-        e.a(((cn) (f)));
+        e.a(((World) (f)));
         e.a(((bh) (new dg(this))));
     }
 
@@ -60,14 +58,14 @@ public class gy extends lb
         double d1 = (double)ha1.b / 32D;
         double d2 = (double)ha1.c / 32D;
         double d3 = (double)ha1.d / 32D;
-        dx dx1 = new dx(((cn) (f)), d1, d2, d3, new ev(ha1.h, ha1.i));
-        dx1.an = (double)ha1.e / 128D;
-        dx1.ao = (double)ha1.f / 128D;
-        dx1.ap = (double)ha1.g / 128D;
-        dx1.bd = ha1.b;
-        dx1.be = ha1.c;
-        dx1.bf = ha1.d;
-        f.a(ha1.a, ((kh) (dx1)));
+        Item item1 = new Item(((World) (f)), d1, d2, d3, new ev(ha1.h, ha1.i));
+        item1.an = (double)ha1.e / 128D;
+        item1.ao = (double)ha1.f / 128D;
+        item1.ap = (double)ha1.g / 128D;
+        item1.bd = ha1.b;
+        item1.be = ha1.c;
+        item1.bf = ha1.d;
+        f.a(ha1.a, ((kh) (item1)));
     }
 
     public void a(kj kj1)
@@ -77,13 +75,13 @@ public class gy extends lb
         double d3 = (double)kj1.d / 32D;
         kh obj = null;
         if(kj1.e == 10)
-            obj = new oc(((cn) (f)), d1, d2, d3, 0);
+            obj = new Minecart(((World) (f)), d1, d2, d3, 0);
         if(kj1.e == 11)
-            obj = new oc(((cn) (f)), d1, d2, d3, 1);
+            obj = new Minecart(((World) (f)), d1, d2, d3, 1);
         if(kj1.e == 12)
-            obj = new oc(((cn) (f)), d1, d2, d3, 2);
+            obj = new Minecart(((World) (f)), d1, d2, d3, 2);
         if(kj1.e == 1)
-            obj = new dc(((cn) (f)), d1, d2, d3);
+            obj = new Boat(((World) (f)), d1, d2, d3);
         if(obj != null)
         {
             obj.bd = kj1.b;
@@ -103,15 +101,15 @@ public class gy extends lb
         double d3 = (double)gp1.e / 32D;
         float f1 = (float)(gp1.f * 360) / 256F;
         float f2 = (float)(gp1.g * 360) / 256F;
-        nt nt1 = new nt(e.e, gp1.b);
+        nt nt1 = new nt(e.world, gp1.b);
         nt1.bd = gp1.c;
         nt1.be = gp1.d;
         nt1.bf = gp1.e;
         int i = gp1.h;
         if(i == 0)
-            nt1.b.a[nt1.b.d] = null;
+            nt1.b.slots1[nt1.b.d] = null;
         else
-            nt1.b.a[nt1.b.d] = new ev(i);
+            nt1.b.slots1[nt1.b.d] = new ev(i);
         nt1.b(d1, d2, d3, f1, f2);
         f.a(gp1.a, ((kh) (nt1)));
     }
@@ -166,11 +164,11 @@ public class gy extends lb
     public void a(eh eh1)
     {
         bi bi1 = e.g;
-        double d1 = ((dm) (bi1)).ak;
-        double d2 = ((dm) (bi1)).al;
-        double d3 = ((dm) (bi1)).am;
-        float f1 = ((dm) (bi1)).aq;
-        float f2 = ((dm) (bi1)).ar;
+        double d1 = ((Player) (bi1)).ak;
+        double d2 = ((Player) (bi1)).al;
+        double d3 = ((Player) (bi1)).am;
+        float f1 = ((Player) (bi1)).aq;
+        float f2 = ((Player) (bi1)).ar;
         if(eh1.h)
         {
             d1 = eh1.a;
@@ -184,11 +182,11 @@ public class gy extends lb
         }
         bi1.aL = 0.0F;
         bi1.an = bi1.ao = bi1.ap = 0.0D;
-        ((dm) (bi1)).b(d1, d2, d3, f1, f2);
-        eh1.a = ((dm) (bi1)).ak;
-        eh1.b = ((dm) (bi1)).au.b;
-        eh1.c = ((dm) (bi1)).am;
-        eh1.d = ((dm) (bi1)).al;
+        ((Player) (bi1)).b(d1, d2, d3, f1, f2);
+        eh1.a = ((Player) (bi1)).ak;
+        eh1.b = ((Player) (bi1)).au.b;
+        eh1.c = ((Player) (bi1)).am;
+        eh1.d = ((Player) (bi1)).al;
         d.a(((fn) (eh1)));
         if(!g)
         {
@@ -207,7 +205,7 @@ public class gy extends lb
 
     public void a(na na1)
     {
-        ga ga1 = f.b(na1.a, na1.b);
+        Chunk chunk1 = f.b(na1.a, na1.b);
         int i = na1.a * 16;
         int j = na1.b * 16;
         for(int k = 0; k < na1.f; k++)
@@ -218,7 +216,7 @@ public class gy extends lb
             int i1 = word0 >> 12 & 0xf;
             int j1 = word0 >> 8 & 0xf;
             int k1 = word0 & 0xff;
-            ga1.a(i1, k1, j1, l, ((int) (byte0)));
+            chunk1.a(i1, k1, j1, l, ((int) (byte0)));
             f.c(i1 + i, k1, j1 + j, i1 + i, k1, j1 + j);
             f.b(i1 + i, k1, j1 + j, i1 + i, k1, j1 + j);
         }
@@ -240,11 +238,11 @@ public class gy extends lb
     {
         d.a("Got kicked");
         c = true;
-        e.a(((cn) (null)));
+        e.a(((World) (null)));
         e.a(((bh) (new cj("Disconnected by server", oh1.a))));
     }
 
-    public void a(java.lang.String s)
+    public void a(String s)
     {
         if(c)
         {
@@ -252,7 +250,7 @@ public class gy extends lb
         } else
         {
             c = true;
-            e.a(((cn) (null)));
+            e.a(((World) (null)));
             e.a(((bh) (new cj("Connection lost", s))));
             return;
         }
@@ -272,14 +270,14 @@ public class gy extends lb
 
     public void a(bm bm1)
     {
-        dx dx1 = (dx)f.b(bm1.a);
-        java.lang.Object obj = ((java.lang.Object) ((ge)f.b(bm1.b)));
+        Item item1 = (Item)f.b(bm1.a);
+        Object obj = ((Object) ((Mob)f.b(bm1.b)));
         if(obj == null)
-            obj = ((java.lang.Object) (e.g));
-        if(dx1 != null)
+            obj = ((Object) (e.g));
+        if(item1 != null)
         {
-            f.a(((kh) (dx1)), "random.pop", 0.2F, ((b.nextFloat() - b.nextFloat()) * 0.7F + 1.0F) * 2.0F);
-            e.h.a(((nq) (new cd(e.e, ((kh) (dx1)), ((kh) (obj)), -0.5F))));
+            f.a(((kh) (item1)), "random.pop", 0.2F, ((b.nextFloat() - b.nextFloat()) * 0.7F + 1.0F) * 2.0F);
+            e.h.a(((nq) (new cd(e.world, ((kh) (item1)), ((kh) (obj)), -0.5F))));
             f.c(bm1.a);
         }
     }
@@ -289,12 +287,12 @@ public class gy extends lb
         kh kh1 = f.b(dz1.a);
         if(kh1 == null)
             return;
-        dm dm1 = (dm)kh1;
+        Player player1 = (Player)kh1;
         int i = dz1.b;
         if(i == 0)
-            dm1.b.a[dm1.b.d] = null;
+            player1.b.slots1[player1.b.d] = null;
         else
-            dm1.b.a[dm1.b.d] = new ev(i);
+            player1.b.slots1[player1.b.d] = new ev(i);
     }
 
     public void a(ij ij1)
@@ -310,8 +308,8 @@ public class gy extends lb
             return;
         } else
         {
-            dm dm1 = (dm)kh1;
-            dm1.w();
+            Player player1 = (Player)kh1;
+            player1.w();
             return;
         }
     }
@@ -330,7 +328,7 @@ public class gy extends lb
             {
                 java.net.URL url = new URL((new StringBuilder()).append("http://www.minecraft.net/game/joinserver.jsp?user=").append(e.i.b).append("&sessionId=").append(e.i.c).append("&serverId=").append(gt1.a).toString());
                 java.io.BufferedReader bufferedreader = new BufferedReader(((java.io.Reader) (new InputStreamReader(url.openStream()))));
-                java.lang.String s = bufferedreader.readLine();
+                String s = bufferedreader.readLine();
                 bufferedreader.close();
                 if(s.equalsIgnoreCase("ok"))
                     a(((fn) (new hp(e.i.b, "Password", 2))));
@@ -357,29 +355,29 @@ public class gy extends lb
         double d3 = (double)ez1.e / 32D;
         float f1 = (float)(ez1.f * 360) / 256F;
         float f2 = (float)(ez1.g * 360) / 256F;
-        ge ge1 = (ge)ew.a(((int) (ez1.b)), e.e);
-        ge1.bd = ez1.c;
-        ge1.be = ez1.d;
-        ge1.bf = ez1.e;
-        ge1.b(d1, d2, d3, f1, f2);
-        ge1.B = true;
-        f.a(ez1.a, ((kh) (ge1)));
+        Mob mob1 = (Mob)ew.a(((int) (ez1.b)), e.world);
+        mob1.bd = ez1.c;
+        mob1.be = ez1.d;
+        mob1.bf = ez1.e;
+        mob1.b(d1, d2, d3, f1, f2);
+        mob1.B = true;
+        f.a(ez1.a, ((kh) (mob1)));
     }
 
     public void a(du du1)
     {
-        e.e.a(du1.a);
+        e.world.a(du1.a);
     }
 
     public void a(m m1)
     {
         bi bi1 = e.g;
         if(m1.a == -1)
-            ((dm) (bi1)).b.a = m1.b;
+            ((Player) (bi1)).b.slots1 = m1.b;
         if(m1.a == -2)
-            ((dm) (bi1)).b.c = m1.b;
+            ((Player) (bi1)).b.slots3 = m1.b;
         if(m1.a == -3)
-            ((dm) (bi1)).b.b = m1.b;
+            ((Player) (bi1)).b.slots2 = m1.b;
     }
 
     public void a(ny ny1)
@@ -394,8 +392,8 @@ public class gy extends lb
 
     public void a(ji ji1)
     {
-        f.o = ji1.a;
-        f.p = ji1.b;
-        f.q = ji1.c;
+        f.spawnX = ji1.a;
+        f.spawnY = ji1.b;
+        f.spawnZ = ji1.c;
     }
 }
diff --git "a/temp\\src\\java/gz.java" "b/src\\main\\java/gz.java"
index 0cbea59..d048381 100644
--- "a/temp\\src\\java/gz.java"
+++ "b/src\\main\\java/gz.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class gz extends dh
 {
 
diff --git "a/temp\\src\\java/h.java" "b/src\\main\\java/h.java"
index 1add908..9499953 100644
--- "a/temp\\src\\java/h.java"
+++ "b/src\\main\\java/h.java"
@@ -1,9 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.awt.Canvas;
 //import MinecraftApplet;
 
 public class h extends java.awt.Canvas
diff --git "a/temp\\src\\java/ha.java" "b/src\\main\\java/ha.java"
index 8348042..fd0e54c 100644
--- "a/temp\\src\\java/ha.java"
+++ "b/src\\main\\java/ha.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
 import java.io.IOException;
 
 public class ha extends fn
@@ -24,17 +21,17 @@ public class ha extends fn
     {
     }
 
-    public ha(dx dx1)
+    public ha(Item item1)
     {
-        a = dx1.ab;
-        h = dx1.a.c;
-        i = dx1.a.a;
-        b = eo.b(dx1.ak * 32D);
-        c = eo.b(dx1.al * 32D);
-        d = eo.b(dx1.am * 32D);
-        e = (byte)(int)(dx1.an * 128D);
-        f = (byte)(int)(dx1.ao * 128D);
-        g = (byte)(int)(dx1.ap * 128D);
+        a = item1.ab;
+        h = item1.a.id;
+        i = item1.a.count;
+        b = eo.b(item1.ak * 32D);
+        c = eo.b(item1.al * 32D);
+        d = eo.b(item1.am * 32D);
+        e = (byte)(int)(item1.an * 128D);
+        f = (byte)(int)(item1.ao * 128D);
+        g = (byte)(int)(item1.ap * 128D);
     }
 
     public void a(java.io.DataInputStream datainputstream) throws IOException
diff --git "a/temp\\src\\java/hb.java" "b/src\\main\\java/hb.java"
index a5de80e..f48b7ca 100644
--- "a/temp\\src\\java/hb.java"
+++ "b/src\\main\\java/hb.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/hc.java" "b/src\\main\\java/hc.java"
index e97e718..ed164e8 100644
--- "a/temp\\src\\java/hc.java"
+++ "b/src\\main\\java/hc.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -16,7 +15,7 @@ final class hc
         b = j;
     }
 
-    public boolean equals(java.lang.Object obj)
+    public boolean equals(Object obj)
     {
         if(obj instanceof hc)
         {
diff --git "a/temp\\src\\java/hd.java" "b/src\\main\\java/hd.java"
index dbeb473..13637da 100644
--- "a/temp\\src\\java/hd.java"
+++ "b/src\\main\\java/hd.java"
@@ -1,11 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.PrintStream;
-import java.util.Random;
-
 public class hd extends mq
 {
 
@@ -23,35 +19,35 @@ public class hd extends mq
         return j == ly.aB.bc;
     }
 
-    public void a(cn cn1, int j, int k, int l, java.util.Random random)
+    public void a(World world1, int j, int k, int l, java.util.Random random)
     {
-        super.a(cn1, j, k, l, random);
-        if(cn1.j(j, k + 1, l) >= 9)
+        super.a(world1, j, k, l, random);
+        if(world1.j(j, k + 1, l) >= 9)
         {
-            int i1 = cn1.e(j, k, l);
+            int i1 = world1.e(j, k, l);
             if(i1 < 7)
             {
-                float f1 = i(cn1, j, k, l);
+                float f1 = i(world1, j, k, l);
                 if(random.nextInt((int)(100F / f1)) == 0)
                 {
                     i1++;
-                    cn1.b(j, k, l, i1);
+                    world1.b(j, k, l, i1);
                 }
             }
         }
     }
 
-    private float i(cn cn1, int j, int k, int l)
+    private float i(World world1, int j, int k, int l)
     {
         float f1 = 1.0F;
-        int i1 = cn1.a(j, k, l - 1);
-        int j1 = cn1.a(j, k, l + 1);
-        int k1 = cn1.a(j - 1, k, l);
-        int l1 = cn1.a(j + 1, k, l);
-        int i2 = cn1.a(j - 1, k, l - 1);
-        int j2 = cn1.a(j + 1, k, l - 1);
-        int k2 = cn1.a(j + 1, k, l + 1);
-        int l2 = cn1.a(j - 1, k, l + 1);
+        int i1 = world1.a(j, k, l - 1);
+        int j1 = world1.a(j, k, l + 1);
+        int k1 = world1.a(j - 1, k, l);
+        int l1 = world1.a(j + 1, k, l);
+        int i2 = world1.a(j - 1, k, l - 1);
+        int j2 = world1.a(j + 1, k, l - 1);
+        int k2 = world1.a(j + 1, k, l + 1);
+        int l2 = world1.a(j - 1, k, l + 1);
         boolean flag = k1 == bc || l1 == bc;
         boolean flag1 = i1 == bc || j1 == bc;
         boolean flag2 = i2 == bc || j2 == bc || k2 == bc || l2 == bc;
@@ -59,12 +55,12 @@ public class hd extends mq
         {
             for(int j3 = l - 1; j3 <= l + 1; j3++)
             {
-                int k3 = cn1.a(i3, k - 1, j3);
+                int k3 = world1.a(i3, k - 1, j3);
                 float f2 = 0.0F;
                 if(k3 == ly.aB.bc)
                 {
                     f2 = 1.0F;
-                    if(cn1.e(i3, k - 1, j3) > 0)
+                    if(world1.e(i3, k - 1, j3) > 0)
                         f2 = 3F;
                 }
                 if(i3 != j || j3 != l)
@@ -91,19 +87,19 @@ public class hd extends mq
         return 6;
     }
 
-    public void b(cn cn1, int j, int k, int l, int i1)
+    public void b(World world1, int j, int k, int l, int i1)
     {
-        super.b(cn1, j, k, l, i1);
+        super.b(world1, j, k, l, i1);
         for(int j1 = 0; j1 < 3; j1++)
-            if(cn1.n.nextInt(15) <= i1)
+            if(world1.n.nextInt(15) <= i1)
             {
                 float f1 = 0.7F;
-                float f2 = cn1.n.nextFloat() * f1 + (1.0F - f1) * 0.5F;
-                float f3 = cn1.n.nextFloat() * f1 + (1.0F - f1) * 0.5F;
-                float f4 = cn1.n.nextFloat() * f1 + (1.0F - f1) * 0.5F;
-                dx dx1 = new dx(cn1, (float)j + f2, (float)k + f3, (float)l + f4, new ev(di.Q));
-                dx1.c = 10;
-                cn1.a(((kh) (dx1)));
+                float f2 = world1.n.nextFloat() * f1 + (1.0F - f1) * 0.5F;
+                float f3 = world1.n.nextFloat() * f1 + (1.0F - f1) * 0.5F;
+                float f4 = world1.n.nextFloat() * f1 + (1.0F - f1) * 0.5F;
+                Item item1 = new Item(world1, (float)j + f2, (float)k + f3, (float)l + f4, new ev(di.Q));
+                item1.c = 10;
+                world1.a(((kh) (item1)));
             }
 
     }
diff --git "a/temp\\src\\java/he.java" "b/src\\main\\java/he.java"
index c676fc7..af95995 100644
--- "a/temp\\src\\java/he.java"
+++ "b/src\\main\\java/he.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class he extends fc
 {
 
@@ -25,11 +22,11 @@ public class he extends fc
         return super.c(nm, i, j, k, 1 - l);
     }
 
-    public void b(cn cn1, int i, int j, int k)
+    public void b(World world1, int i, int j, int k)
     {
-        gb gb1 = cn1.f(i, j - 1, k);
+        gb gb1 = world1.f(i, j - 1, k);
         if(gb1.c() || gb1.d())
-            cn1.d(i, j, k, ly.B.bc);
+            world1.d(i, j, k, ly.B.bc);
     }
 
     public int a(java.util.Random random)
@@ -37,12 +34,12 @@ public class he extends fc
         return 0;
     }
 
-    public void a(cn cn1, int i, int j, int k, java.util.Random random)
+    public void a(World world1, int i, int j, int k, java.util.Random random)
     {
-        if(cn1.a(by.b, i, j, k) > 11 - ly.r[bc])
+        if(world1.a(by.b, i, j, k) > 11 - ly.r[bc])
         {
-            b_(cn1, i, j, k, cn1.e(i, j, k));
-            cn1.d(i, j, k, ly.C.bc);
+            b_(world1, i, j, k, world1.e(i, j, k));
+            world1.d(i, j, k, ly.C.bc);
         }
     }
 }
diff --git "a/temp\\src\\java/hf.java" "b/src\\main\\java/hf.java"
index 32954fd..193874d 100644
--- "a/temp\\src\\java/hf.java"
+++ "b/src\\main\\java/hf.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
 import java.io.IOException;
 
 public class hf extends fn
diff --git "a/temp\\src\\java/hg.java" "b/src\\main\\java/hg.java"
index 748b636..b240f9b 100644
--- "a/temp\\src\\java/hg.java"
+++ "b/src\\main\\java/hg.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/hh.java" "b/src\\main\\java/hh.java"
index 1bfff2a..714abf4 100644
--- "a/temp\\src\\java/hh.java"
+++ "b/src\\main\\java/hh.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/hi.java" "b/src\\main\\java/hi.java"
index 69038b2..f1f1b97 100644
--- "a/temp\\src\\java/hi.java"
+++ "b/src\\main\\java/hi.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/hj.java" "b/src\\main\\java/hj.java"
index b4e14fb..acbf591 100644
--- "a/temp\\src\\java/hj.java"
+++ "b/src\\main\\java/hj.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/hk.java" "b/src\\main\\java/hk.java"
index 58b7f0b..cea8a7b 100644
--- "a/temp\\src\\java/hk.java"
+++ "b/src\\main\\java/hk.java"
@@ -1,11 +1,8 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
 import java.io.IOException;
-import java.io.InputStream;
-import java.net.URL;
 
 class hk extends java.io.InputStream
 {
@@ -21,7 +18,7 @@ class hk extends java.io.InputStream
         b = ep1;
         a = new byte[1];
         d = inputstream;
-        java.lang.String s = url.getPath();
+        String s = url.getPath();
         s = s.substring(s.lastIndexOf("/") + 1);
         c = s.hashCode();
     }
diff --git "a/temp\\src\\java/hm.java" "b/temp\\src\\java/hm.java"
deleted file mode 100644
index f1d7498..0000000
--- "a/temp\\src\\java/hm.java"
+++ /dev/null
@@ -1,194 +0,0 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
-// Jad home page: http://www.kpdus.com/jad.html
-// Decompiler options: fullnames deadcode fieldsfirst safe 
-// Source File Name:   SourceFile
-
-import java.io.DataInput;
-import java.io.DataOutput;
-import java.io.IOException;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.Map;
-
-public class hm extends el
-{
-
-    private java.util.Map a;
-
-    public hm()
-    {
-        a = ((java.util.Map) (new HashMap()));
-    }
-
-    void a(java.io.DataOutput dataoutput) throws IOException
-    {
-        el el1;
-        for(java.util.Iterator iterator = a.values().iterator(); iterator.hasNext(); el.a(el1, dataoutput))
-            el1 = (el)iterator.next();
-
-        dataoutput.writeByte(0);
-    }
-
-    void a(java.io.DataInput datainput) throws IOException
-    {
-        a.clear();
-        el el1;
-        for(; (el1 = el.b(datainput)).a() != 0; a.put(((java.lang.Object) (el1.b())), ((java.lang.Object) (el1))));
-    }
-
-    public byte a()
-    {
-        return 10;
-    }
-
-    public void a(java.lang.String s, el el1)
-    {
-        a.put(((java.lang.Object) (s)), ((java.lang.Object) (el1.a(s))));
-    }
-
-    public void a(java.lang.String s, byte byte0)
-    {
-        a.put(((java.lang.Object) (s)), ((java.lang.Object) ((new ix(byte0)).a(s))));
-    }
-
-    public void a(java.lang.String s, short word0)
-    {
-        a.put(((java.lang.Object) (s)), ((java.lang.Object) ((new ls(word0)).a(s))));
-    }
-
-    public void a(java.lang.String s, int i1)
-    {
-        a.put(((java.lang.Object) (s)), ((java.lang.Object) ((new io(i1)).a(s))));
-    }
-
-    public void a(java.lang.String s, long l1)
-    {
-        a.put(((java.lang.Object) (s)), ((java.lang.Object) ((new gn(l1)).a(s))));
-    }
-
-    public void a(java.lang.String s, float f1)
-    {
-        a.put(((java.lang.Object) (s)), ((java.lang.Object) ((new f(f1)).a(s))));
-    }
-
-    public void a(java.lang.String s, double d1)
-    {
-        a.put(((java.lang.Object) (s)), ((java.lang.Object) ((new kr(d1)).a(s))));
-    }
-
-    public void a(java.lang.String s, java.lang.String s1)
-    {
-        a.put(((java.lang.Object) (s)), ((java.lang.Object) ((new ne(s1)).a(s))));
-    }
-
-    public void a(java.lang.String s, byte abyte0[])
-    {
-        a.put(((java.lang.Object) (s)), ((java.lang.Object) ((new dy(abyte0)).a(s))));
-    }
-
-    public void a(java.lang.String s, hm hm1)
-    {
-        a.put(((java.lang.Object) (s)), ((java.lang.Object) (hm1.a(s))));
-    }
-
-    public void a(java.lang.String s, boolean flag)
-    {
-        a(s, ((byte)(flag ? 1 : 0)));
-    }
-
-    public boolean b(java.lang.String s)
-    {
-        return a.containsKey(((java.lang.Object) (s)));
-    }
-
-    public byte c(java.lang.String s)
-    {
-        if(!a.containsKey(((java.lang.Object) (s))))
-            return 0;
-        else
-            return ((ix)a.get(((java.lang.Object) (s)))).a;
-    }
-
-    public short d(java.lang.String s)
-    {
-        if(!a.containsKey(((java.lang.Object) (s))))
-            return 0;
-        else
-            return ((ls)a.get(((java.lang.Object) (s)))).a;
-    }
-
-    public int e(java.lang.String s)
-    {
-        if(!a.containsKey(((java.lang.Object) (s))))
-            return 0;
-        else
-            return ((io)a.get(((java.lang.Object) (s)))).a;
-    }
-
-    public long f(java.lang.String s)
-    {
-        if(!a.containsKey(((java.lang.Object) (s))))
-            return 0L;
-        else
-            return ((gn)a.get(((java.lang.Object) (s)))).a;
-    }
-
-    public float g(java.lang.String s)
-    {
-        if(!a.containsKey(((java.lang.Object) (s))))
-            return 0.0F;
-        else
-            return ((f)a.get(((java.lang.Object) (s)))).a;
-    }
-
-    public double h(java.lang.String s)
-    {
-        if(!a.containsKey(((java.lang.Object) (s))))
-            return 0.0D;
-        else
-            return ((kr)a.get(((java.lang.Object) (s)))).a;
-    }
-
-    public java.lang.String i(java.lang.String s)
-    {
-        if(!a.containsKey(((java.lang.Object) (s))))
-            return "";
-        else
-            return ((ne)a.get(((java.lang.Object) (s)))).a;
-    }
-
-    public byte[] j(java.lang.String s)
-    {
-        if(!a.containsKey(((java.lang.Object) (s))))
-            return new byte[0];
-        else
-            return ((dy)a.get(((java.lang.Object) (s)))).a;
-    }
-
-    public hm k(java.lang.String s)
-    {
-        if(!a.containsKey(((java.lang.Object) (s))))
-            return new hm();
-        else
-            return (hm)a.get(((java.lang.Object) (s)));
-    }
-
-    public ki l(java.lang.String s)
-    {
-        if(!a.containsKey(((java.lang.Object) (s))))
-            return new ki();
-        else
-            return (ki)a.get(((java.lang.Object) (s)));
-    }
-
-    public boolean m(java.lang.String s)
-    {
-        return c(s) != 0;
-    }
-
-    public java.lang.String toString()
-    {
-        return (new StringBuilder()).append("").append(a.size()).append(" entries").toString();
-    }
-}
diff --git "a/temp\\src\\java/hn.java" "b/src\\main\\java/hn.java"
index 9aa56e0..4e2471c 100644
--- "a/temp\\src\\java/hn.java"
+++ "b/src\\main\\java/hn.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class hn extends jp
 {
 
@@ -16,24 +13,24 @@ public class hn extends jp
             b(true);
     }
 
-    public void a(cn cn1, int i, int l, int i1, int j1)
+    public void a(World world1, int i, int l, int i1, int j1)
     {
-        super.a(cn1, i, l, i1, j1);
-        if(cn1.a(i, l, i1) == bc)
-            j(cn1, i, l, i1);
+        super.a(world1, i, l, i1, j1);
+        if(world1.a(i, l, i1) == bc)
+            j(world1, i, l, i1);
     }
 
-    private void j(cn cn1, int i, int l, int i1)
+    private void j(World world1, int i, int l, int i1)
     {
-        int j1 = cn1.e(i, l, i1);
-        cn1.h = true;
-        cn1.a(i, l, i1, bc - 1, j1);
-        cn1.b(i, l, i1, i, l, i1);
-        cn1.h(i, l, i1, bc - 1);
-        cn1.h = false;
+        int j1 = world1.e(i, l, i1);
+        world1.h = true;
+        world1.a(i, l, i1, bc - 1, j1);
+        world1.b(i, l, i1, i, l, i1);
+        world1.h(i, l, i1, bc - 1);
+        world1.h = false;
     }
 
-    public void a(cn cn1, int i, int l, int i1, java.util.Random random)
+    public void a(World world1, int i, int l, int i1, java.util.Random random)
     {
         if(bn == gb.g)
         {
@@ -43,12 +40,12 @@ public class hn extends jp
                 i += random.nextInt(3) - 1;
                 l++;
                 i1 += random.nextInt(3) - 1;
-                int l1 = cn1.a(i, l, i1);
+                int l1 = world1.a(i, l, i1);
                 if(l1 == 0)
                 {
-                    if(k(cn1, i - 1, l, i1) || k(cn1, i + 1, l, i1) || k(cn1, i, l, i1 - 1) || k(cn1, i, l, i1 + 1) || k(cn1, i, l - 1, i1) || k(cn1, i, l + 1, i1))
+                    if(k(world1, i - 1, l, i1) || k(world1, i + 1, l, i1) || k(world1, i, l, i1 - 1) || k(world1, i, l, i1 + 1) || k(world1, i, l - 1, i1) || k(world1, i, l + 1, i1))
                     {
-                        cn1.d(i, l, i1, ly.as.bc);
+                        world1.d(i, l, i1, ly.as.bc);
                         return;
                     }
                     continue;
@@ -60,8 +57,8 @@ public class hn extends jp
         }
     }
 
-    private boolean k(cn cn1, int i, int l, int i1)
+    private boolean k(World world1, int i, int l, int i1)
     {
-        return cn1.f(i, l, i1).e();
+        return world1.f(i, l, i1).e();
     }
 }
diff --git "a/temp\\src\\java/ho.java" "b/src\\main\\java/ho.java"
index 86c5169..467715c 100644
--- "a/temp\\src\\java/ho.java"
+++ "b/src\\main\\java/ho.java"
@@ -1,17 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.PrintStream;
-import java.nio.ByteBuffer;
-import java.nio.FloatBuffer;
-import java.nio.IntBuffer;
-import org.lwjgl.opengl.ARBVertexBufferObject;
-import org.lwjgl.opengl.ContextCapabilities;
-import org.lwjgl.opengl.GL11;
-import org.lwjgl.opengl.GLContext;
-
 public class ho
 {
 
diff --git "a/temp\\src\\java/hp.java" "b/src\\main\\java/hp.java"
index 1650a82..cda628a 100644
--- "a/temp\\src\\java/hp.java"
+++ "b/src\\main\\java/hp.java"
@@ -1,24 +1,21 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
 import java.io.IOException;
 
 public class hp extends fn
 {
 
     public int a;
-    public java.lang.String b;
-    public java.lang.String c;
+    public String b;
+    public String c;
 
     public hp()
     {
     }
 
-    public hp(java.lang.String s, java.lang.String s1, int i)
+    public hp(String s, String s1, int i)
     {
         b = s;
         c = s1;
diff --git "a/temp\\src\\java/hq.java" "b/src\\main\\java/hq.java"
index d9c182b..1aecfbe 100644
--- "a/temp\\src\\java/hq.java"
+++ "b/src\\main\\java/hq.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -17,7 +16,7 @@ public class hq
         a = minecraft;
     }
 
-    public void a(cn cn1)
+    public void a(World world1)
     {
     }
 
@@ -29,14 +28,14 @@ public class hq
     public boolean b(int i, int j, int k, int l)
     {
         a.h.a(i, j, k);
-        cn cn1 = a.e;
-        ly ly1 = ly.n[cn1.a(i, j, k)];
-        int i1 = cn1.e(i, j, k);
-        boolean flag = cn1.d(i, j, k, 0);
+        World world1 = a.world;
+        ly ly1 = ly.n[world1.a(i, j, k)];
+        int i1 = world1.e(i, j, k);
+        boolean flag = world1.d(i, j, k, 0);
         if(ly1 != null && flag)
         {
             a.A.b(ly1.bl.a(), (float)i + 0.5F, (float)j + 0.5F, (float)k + 0.5F, (ly1.bl.b() + 1.0F) / 2.0F, ly1.bl.c() * 0.8F);
-            ly1.b(cn1, i, j, k, i1);
+            ly1.b(world1, i, j, k, i1);
         }
         return flag;
     }
@@ -58,7 +57,7 @@ public class hq
         return 5F;
     }
 
-    public void a(dm dm)
+    public void a(Player player)
     {
     }
 
@@ -71,23 +70,23 @@ public class hq
         return true;
     }
 
-    public void b(dm dm)
+    public void b(Player player)
     {
     }
 
-    public boolean a(dm dm, cn cn1, ev ev1, int i, int j, int k, int l)
+    public boolean a(Player player, World world1, ev ev1, int i, int j, int k, int l)
     {
-        int i1 = cn1.a(i, j, k);
-        if(i1 > 0 && ly.n[i1].a(cn1, i, j, k, dm))
+        int i1 = world1.a(i, j, k);
+        if(i1 > 0 && ly.n[i1].a(world1, i, j, k, player))
             return true;
         if(ev1 == null)
             return false;
         else
-            return ev1.a(dm, cn1, i, j, k, l);
+            return ev1.a(player, world1, i, j, k, l);
     }
 
-    public dm b(cn cn1)
+    public Player b(World world1)
     {
-        return ((dm) (new bi(a, cn1, a.i)));
+        return ((Player) (new bi(a, world1, a.i)));
     }
 }
diff --git "a/temp\\src\\java/hr.java" "b/src\\main\\java/hr.java"
index 98e2d14..17e0e0b 100644
--- "a/temp\\src\\java/hr.java"
+++ "b/src\\main\\java/hr.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -13,10 +12,10 @@ public class hr
 
     public void a(dw dw1)
     {
-        dw1.a(new ev(di.D), new java.lang.Object[] {
+        dw1.a(new ev(di.D), new Object[] {
             "Y", "X", "#", java.lang.Character.valueOf('X'), ly.ag, java.lang.Character.valueOf('Y'), ly.ah, java.lang.Character.valueOf('#'), di.C
         });
-        dw1.a(new ev(di.D), new java.lang.Object[] {
+        dw1.a(new ev(di.D), new Object[] {
             "Y", "X", "#", java.lang.Character.valueOf('X'), ly.ah, java.lang.Character.valueOf('Y'), ly.ag, java.lang.Character.valueOf('#'), di.C
         });
     }
diff --git "a/temp\\src\\java/hs.java" "b/src\\main\\java/hs.java"
index a0aa924..f91b06d 100644
--- "a/temp\\src\\java/hs.java"
+++ "b/src\\main\\java/hs.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -8,11 +7,11 @@ public class hs
     implements gh
 {
 
-    private java.lang.String a;
+    private String a;
     private gh b;
     private gh c;
 
-    public hs(java.lang.String s, gh gh1, gh gh2)
+    public hs(String s, gh gh1, gh gh2)
     {
         a = s;
         b = gh1;
@@ -24,7 +23,7 @@ public class hs
         return b.c() + c.c();
     }
 
-    public java.lang.String d()
+    public String d()
     {
         return a;
     }
diff --git "a/temp\\src\\java/ht.java" "b/src\\main\\java/ht.java"
index ebece62..925c3b2 100644
--- "a/temp\\src\\java/ht.java"
+++ "b/src\\main\\java/ht.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/hu.java" "b/src\\main\\java/hu.java"
index 7d7ef41..d45a562 100644
--- "a/temp\\src\\java/hu.java"
+++ "b/src\\main\\java/hu.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class hu extends ly
 {
 
@@ -14,7 +11,7 @@ public class hu extends ly
         b(true);
     }
 
-    public cf d(cn cn1, int i, int j, int k)
+    public cf d(World world1, int i, int j, int k)
     {
         return null;
     }
@@ -34,77 +31,77 @@ public class hu extends ly
         return false;
     }
 
-    public boolean a(cn cn1, int i, int j, int k)
+    public boolean a(World world1, int i, int j, int k)
     {
-        if(cn1.g(i - 1, j, k))
+        if(world1.g(i - 1, j, k))
             return true;
-        if(cn1.g(i + 1, j, k))
+        if(world1.g(i + 1, j, k))
             return true;
-        if(cn1.g(i, j, k - 1))
+        if(world1.g(i, j, k - 1))
             return true;
-        return cn1.g(i, j, k + 1);
+        return world1.g(i, j, k + 1);
     }
 
-    public void d(cn cn1, int i, int j, int k, int l)
+    public void d(World world1, int i, int j, int k, int l)
     {
-        int i1 = cn1.e(i, j, k);
+        int i1 = world1.e(i, j, k);
         int j1 = i1 & 8;
         i1 &= 7;
-        if(l == 2 && cn1.g(i, j, k + 1))
+        if(l == 2 && world1.g(i, j, k + 1))
             i1 = 4;
-        if(l == 3 && cn1.g(i, j, k - 1))
+        if(l == 3 && world1.g(i, j, k - 1))
             i1 = 3;
-        if(l == 4 && cn1.g(i + 1, j, k))
+        if(l == 4 && world1.g(i + 1, j, k))
             i1 = 2;
-        if(l == 5 && cn1.g(i - 1, j, k))
+        if(l == 5 && world1.g(i - 1, j, k))
             i1 = 1;
-        cn1.b(i, j, k, i1 + j1);
+        world1.b(i, j, k, i1 + j1);
     }
 
-    public void e(cn cn1, int i, int j, int k)
+    public void e(World world1, int i, int j, int k)
     {
-        if(cn1.g(i - 1, j, k))
-            cn1.b(i, j, k, 1);
+        if(world1.g(i - 1, j, k))
+            world1.b(i, j, k, 1);
         else
-        if(cn1.g(i + 1, j, k))
-            cn1.b(i, j, k, 2);
+        if(world1.g(i + 1, j, k))
+            world1.b(i, j, k, 2);
         else
-        if(cn1.g(i, j, k - 1))
-            cn1.b(i, j, k, 3);
+        if(world1.g(i, j, k - 1))
+            world1.b(i, j, k, 3);
         else
-        if(cn1.g(i, j, k + 1))
-            cn1.b(i, j, k, 4);
-        h(cn1, i, j, k);
+        if(world1.g(i, j, k + 1))
+            world1.b(i, j, k, 4);
+        h(world1, i, j, k);
     }
 
-    public void a(cn cn1, int i, int j, int k, int l)
+    public void a(World world1, int i, int j, int k, int l)
     {
-        if(h(cn1, i, j, k))
+        if(h(world1, i, j, k))
         {
-            int i1 = cn1.e(i, j, k) & 7;
+            int i1 = world1.e(i, j, k) & 7;
             boolean flag = false;
-            if(!cn1.g(i - 1, j, k) && i1 == 1)
+            if(!world1.g(i - 1, j, k) && i1 == 1)
                 flag = true;
-            if(!cn1.g(i + 1, j, k) && i1 == 2)
+            if(!world1.g(i + 1, j, k) && i1 == 2)
                 flag = true;
-            if(!cn1.g(i, j, k - 1) && i1 == 3)
+            if(!world1.g(i, j, k - 1) && i1 == 3)
                 flag = true;
-            if(!cn1.g(i, j, k + 1) && i1 == 4)
+            if(!world1.g(i, j, k + 1) && i1 == 4)
                 flag = true;
             if(flag)
             {
-                b_(cn1, i, j, k, cn1.e(i, j, k));
-                cn1.d(i, j, k, 0);
+                b_(world1, i, j, k, world1.e(i, j, k));
+                world1.d(i, j, k, 0);
             }
         }
     }
 
-    private boolean h(cn cn1, int i, int j, int k)
+    private boolean h(World world1, int i, int j, int k)
     {
-        if(!a(cn1, i, j, k))
+        if(!a(world1, i, j, k))
         {
-            b_(cn1, i, j, k, cn1.e(i, j, k));
-            cn1.d(i, j, k, 0);
+            b_(world1, i, j, k, world1.e(i, j, k));
+            world1.d(i, j, k, 0);
             return false;
         } else
         {
@@ -136,61 +133,61 @@ public class hu extends ly
             a(0.5F - f2, f, 1.0F - f3, 0.5F + f2, f1, 1.0F);
     }
 
-    public void b(cn cn1, int i, int j, int k, dm dm)
+    public void b(World world1, int i, int j, int k, Player player)
     {
-        a(cn1, i, j, k, dm);
+        a(world1, i, j, k, player);
     }
 
-    public boolean a(cn cn1, int i, int j, int k, dm dm)
+    public boolean a(World world1, int i, int j, int k, Player player)
     {
-        int l = cn1.e(i, j, k);
+        int l = world1.e(i, j, k);
         int i1 = l & 7;
         int j1 = 8 - (l & 8);
         if(j1 == 0)
             return true;
-        cn1.b(i, j, k, i1 + j1);
-        cn1.b(i, j, k, i, j, k);
-        cn1.a((double)i + 0.5D, (double)j + 0.5D, (double)k + 0.5D, "random.click", 0.3F, 0.6F);
-        cn1.g(i, j, k, bc);
+        world1.b(i, j, k, i1 + j1);
+        world1.b(i, j, k, i, j, k);
+        world1.a((double)i + 0.5D, (double)j + 0.5D, (double)k + 0.5D, "random.click", 0.3F, 0.6F);
+        world1.g(i, j, k, bc);
         if(i1 == 1)
-            cn1.g(i - 1, j, k, bc);
+            world1.g(i - 1, j, k, bc);
         else
         if(i1 == 2)
-            cn1.g(i + 1, j, k, bc);
+            world1.g(i + 1, j, k, bc);
         else
         if(i1 == 3)
-            cn1.g(i, j, k - 1, bc);
+            world1.g(i, j, k - 1, bc);
         else
         if(i1 == 4)
-            cn1.g(i, j, k + 1, bc);
+            world1.g(i, j, k + 1, bc);
         else
-            cn1.g(i, j - 1, k, bc);
-        cn1.h(i, j, k, bc);
+            world1.g(i, j - 1, k, bc);
+        world1.h(i, j, k, bc);
         return true;
     }
 
-    public void b(cn cn1, int i, int j, int k)
+    public void b(World world1, int i, int j, int k)
     {
-        int l = cn1.e(i, j, k);
+        int l = world1.e(i, j, k);
         if((l & 8) > 0)
         {
-            cn1.g(i, j, k, bc);
+            world1.g(i, j, k, bc);
             int i1 = l & 7;
             if(i1 == 1)
-                cn1.g(i - 1, j, k, bc);
+                world1.g(i - 1, j, k, bc);
             else
             if(i1 == 2)
-                cn1.g(i + 1, j, k, bc);
+                world1.g(i + 1, j, k, bc);
             else
             if(i1 == 3)
-                cn1.g(i, j, k - 1, bc);
+                world1.g(i, j, k - 1, bc);
             else
             if(i1 == 4)
-                cn1.g(i, j, k + 1, bc);
+                world1.g(i, j, k + 1, bc);
             else
-                cn1.g(i, j - 1, k, bc);
+                world1.g(i, j - 1, k, bc);
         }
-        super.b(cn1, i, j, k);
+        super.b(world1, i, j, k);
     }
 
     public boolean b(nm nm1, int i, int j, int k, int l)
@@ -198,9 +195,9 @@ public class hu extends ly
         return (nm1.e(i, j, k) & 8) > 0;
     }
 
-    public boolean c(cn cn1, int i, int j, int k, int l)
+    public boolean c(World world1, int i, int j, int k, int l)
     {
-        int i1 = cn1.e(i, j, k);
+        int i1 = world1.e(i, j, k);
         if((i1 & 8) == 0)
             return false;
         int j1 = i1 & 7;
@@ -220,29 +217,29 @@ public class hu extends ly
         return true;
     }
 
-    public void a(cn cn1, int i, int j, int k, java.util.Random random)
+    public void a(World world1, int i, int j, int k, java.util.Random random)
     {
-        int l = cn1.e(i, j, k);
+        int l = world1.e(i, j, k);
         if((l & 8) == 0)
             return;
-        cn1.b(i, j, k, l & 7);
-        cn1.g(i, j, k, bc);
+        world1.b(i, j, k, l & 7);
+        world1.g(i, j, k, bc);
         int i1 = l & 7;
         if(i1 == 1)
-            cn1.g(i - 1, j, k, bc);
+            world1.g(i - 1, j, k, bc);
         else
         if(i1 == 2)
-            cn1.g(i + 1, j, k, bc);
+            world1.g(i + 1, j, k, bc);
         else
         if(i1 == 3)
-            cn1.g(i, j, k - 1, bc);
+            world1.g(i, j, k - 1, bc);
         else
         if(i1 == 4)
-            cn1.g(i, j, k + 1, bc);
+            world1.g(i, j, k + 1, bc);
         else
-            cn1.g(i, j - 1, k, bc);
-        cn1.a((double)i + 0.5D, (double)j + 0.5D, (double)k + 0.5D, "random.click", 0.3F, 0.5F);
-        cn1.b(i, j, k, i, j, k);
+            world1.g(i, j - 1, k, bc);
+        world1.a((double)i + 0.5D, (double)j + 0.5D, (double)k + 0.5D, "random.click", 0.3F, 0.5F);
+        world1.b(i, j, k, i, j, k);
     }
 
     public void e()
diff --git "a/temp\\src\\java/hv.java" "b/src\\main\\java/hv.java"
index 843dd09..dfcb88e 100644
--- "a/temp\\src\\java/hv.java"
+++ "b/src\\main\\java/hv.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class hv extends jp
 {
 
@@ -20,42 +17,42 @@ public class hv extends jp
         c = new int[4];
     }
 
-    private void j(cn cn1, int i, int i1, int j1)
+    private void j(World world1, int i, int i1, int j1)
     {
-        int k1 = cn1.e(i, i1, j1);
-        cn1.a(i, i1, j1, bc + 1, k1);
-        cn1.b(i, i1, j1, i, i1, j1);
-        cn1.h(i, i1, j1);
+        int k1 = world1.e(i, i1, j1);
+        world1.a(i, i1, j1, bc + 1, k1);
+        world1.b(i, i1, j1, i, i1, j1);
+        world1.h(i, i1, j1);
     }
 
-    public void a(cn cn1, int i, int i1, int j1, java.util.Random random)
+    public void a(World world1, int i, int i1, int j1, java.util.Random random)
     {
-        int k1 = h(cn1, i, i1, j1);
+        int k1 = h(world1, i, i1, j1);
         boolean flag = true;
         if(k1 > 0)
         {
             int l1 = -100;
             a = 0;
-            l1 = f(cn1, i - 1, i1, j1, l1);
-            l1 = f(cn1, i + 1, i1, j1, l1);
-            l1 = f(cn1, i, i1, j1 - 1, l1);
-            l1 = f(cn1, i, i1, j1 + 1, l1);
+            l1 = f(world1, i - 1, i1, j1, l1);
+            l1 = f(world1, i + 1, i1, j1, l1);
+            l1 = f(world1, i, i1, j1 - 1, l1);
+            l1 = f(world1, i, i1, j1 + 1, l1);
             int i2 = l1 + d;
             if(i2 >= 8 || l1 < 0)
                 i2 = -1;
-            if(h(cn1, i, i1 + 1, j1) >= 0)
+            if(h(world1, i, i1 + 1, j1) >= 0)
             {
-                int k2 = h(cn1, i, i1 + 1, j1);
+                int k2 = h(world1, i, i1 + 1, j1);
                 if(k2 >= 8)
                     i2 = k2;
                 else
                     i2 = k2 + 8;
             }
             if(a >= 2 && bn == gb.f)
-                if(cn1.g(i, i1 - 1, j1))
+                if(world1.g(i, i1 - 1, j1))
                     i2 = 0;
                 else
-                if(cn1.f(i, i1 - 1, j1) == bn && cn1.e(i, i1, j1) == 0)
+                if(world1.f(i, i1 - 1, j1) == bn && world1.e(i, i1, j1) == 0)
                     i2 = 0;
             if(bn == gb.g && k1 < 8 && i2 < 8 && i2 > k1 && random.nextInt(4) != 0)
             {
@@ -67,61 +64,61 @@ public class hv extends jp
                 k1 = i2;
                 if(k1 < 0)
                 {
-                    cn1.d(i, i1, j1, 0);
+                    world1.d(i, i1, j1, 0);
                 } else
                 {
-                    cn1.b(i, i1, j1, k1);
-                    cn1.h(i, i1, j1, bc);
-                    cn1.g(i, i1, j1, bc);
+                    world1.b(i, i1, j1, k1);
+                    world1.h(i, i1, j1, bc);
+                    world1.g(i, i1, j1, bc);
                 }
             } else
             if(flag)
-                j(cn1, i, i1, j1);
+                j(world1, i, i1, j1);
         } else
         {
-            j(cn1, i, i1, j1);
+            j(world1, i, i1, j1);
         }
-        if(m(cn1, i, i1 - 1, j1))
+        if(m(world1, i, i1 - 1, j1))
         {
             if(k1 >= 8)
-                cn1.b(i, i1 - 1, j1, bc, k1);
+                world1.b(i, i1 - 1, j1, bc, k1);
             else
-                cn1.b(i, i1 - 1, j1, bc, k1 + 8);
+                world1.b(i, i1 - 1, j1, bc, k1 + 8);
         } else
-        if(k1 >= 0 && (k1 == 0 || l(cn1, i, i1 - 1, j1)))
+        if(k1 >= 0 && (k1 == 0 || l(world1, i, i1 - 1, j1)))
         {
-            boolean aflag[] = k(cn1, i, i1, j1);
+            boolean aflag[] = k(world1, i, i1, j1);
             int j2 = k1 + d;
             if(k1 >= 8)
                 j2 = 1;
             if(j2 >= 8)
                 return;
             if(aflag[0])
-                g(cn1, i - 1, i1, j1, j2);
+                g(world1, i - 1, i1, j1, j2);
             if(aflag[1])
-                g(cn1, i + 1, i1, j1, j2);
+                g(world1, i + 1, i1, j1, j2);
             if(aflag[2])
-                g(cn1, i, i1, j1 - 1, j2);
+                g(world1, i, i1, j1 - 1, j2);
             if(aflag[3])
-                g(cn1, i, i1, j1 + 1, j2);
+                g(world1, i, i1, j1 + 1, j2);
         }
     }
 
-    private void g(cn cn1, int i, int i1, int j1, int k1)
+    private void g(World world1, int i, int i1, int j1, int k1)
     {
-        if(m(cn1, i, i1, j1))
+        if(m(world1, i, i1, j1))
         {
-            int l1 = cn1.a(i, i1, j1);
+            int l1 = world1.a(i, i1, j1);
             if(l1 > 0)
                 if(bn == gb.g)
-                    i(cn1, i, i1, j1);
+                    i(world1, i, i1, j1);
                 else
-                    ly.n[l1].b_(cn1, i, i1, j1, cn1.e(i, i1, j1));
-            cn1.b(i, i1, j1, bc, k1);
+                    ly.n[l1].b_(world1, i, i1, j1, world1.e(i, i1, j1));
+            world1.b(i, i1, j1, bc, k1);
         }
     }
 
-    private int a(cn cn1, int i, int i1, int j1, int k1, int l1)
+    private int a(World world1, int i, int i1, int j1, int k1, int l1)
     {
         int i2 = 1000;
         for(int j2 = 0; j2 < 4; j2++)
@@ -139,13 +136,13 @@ public class hv extends jp
                 i3--;
             if(j2 == 3)
                 i3++;
-            if(l(cn1, k2, l2, i3) || cn1.f(k2, l2, i3) == bn && cn1.e(k2, l2, i3) == 0)
+            if(l(world1, k2, l2, i3) || world1.f(k2, l2, i3) == bn && world1.e(k2, l2, i3) == 0)
                 continue;
-            if(!l(cn1, k2, l2 - 1, i3))
+            if(!l(world1, k2, l2 - 1, i3))
                 return k1;
             if(k1 >= 4)
                 continue;
-            int j3 = a(cn1, k2, l2, i3, k1 + 1, j2);
+            int j3 = a(world1, k2, l2, i3, k1 + 1, j2);
             if(j3 < i2)
                 i2 = j3;
         }
@@ -153,7 +150,7 @@ public class hv extends jp
         return i2;
     }
 
-    private boolean[] k(cn cn1, int i, int i1, int j1)
+    private boolean[] k(World world1, int i, int i1, int j1)
     {
         for(int k1 = 0; k1 < 4; k1++)
         {
@@ -169,12 +166,12 @@ public class hv extends jp
                 i3--;
             if(k1 == 3)
                 i3++;
-            if(l(cn1, i2, l2, i3) || cn1.f(i2, l2, i3) == bn && cn1.e(i2, l2, i3) == 0)
+            if(l(world1, i2, l2, i3) || world1.f(i2, l2, i3) == bn && world1.e(i2, l2, i3) == 0)
                 continue;
-            if(!l(cn1, i2, l2 - 1, i3))
+            if(!l(world1, i2, l2 - 1, i3))
                 c[k1] = 0;
             else
-                c[k1] = a(cn1, i2, l2, i3, 1, k1);
+                c[k1] = a(world1, i2, l2, i3, 1, k1);
         }
 
         int l1 = c[0];
@@ -188,9 +185,9 @@ public class hv extends jp
         return b;
     }
 
-    private boolean l(cn cn1, int i, int i1, int j1)
+    private boolean l(World world1, int i, int i1, int j1)
     {
-        int k1 = cn1.a(i, i1, j1);
+        int k1 = world1.a(i, i1, j1);
         if(k1 == ly.aF.bc || k1 == ly.aM.bc || k1 == ly.aE.bc || k1 == ly.aG.bc || k1 == ly.aY.bc)
             return true;
         if(k1 == 0)
@@ -199,9 +196,9 @@ public class hv extends jp
         return gb1.a();
     }
 
-    protected int f(cn cn1, int i, int i1, int j1, int k1)
+    protected int f(World world1, int i, int i1, int j1, int k1)
     {
-        int l1 = h(cn1, i, i1, j1);
+        int l1 = h(world1, i, i1, j1);
         if(l1 < 0)
             return k1;
         if(l1 == 0)
@@ -211,21 +208,21 @@ public class hv extends jp
         return k1 >= 0 && l1 >= k1 ? k1 : l1;
     }
 
-    private boolean m(cn cn1, int i, int i1, int j1)
+    private boolean m(World world1, int i, int i1, int j1)
     {
-        gb gb1 = cn1.f(i, i1, j1);
+        gb gb1 = world1.f(i, i1, j1);
         if(gb1 == bn)
             return false;
         if(gb1 == gb.g)
             return false;
         else
-            return !l(cn1, i, i1, j1);
+            return !l(world1, i, i1, j1);
     }
 
-    public void e(cn cn1, int i, int i1, int j1)
+    public void e(World world1, int i, int i1, int j1)
     {
-        super.e(cn1, i, i1, j1);
-        if(cn1.a(i, i1, j1) == bc)
-            cn1.h(i, i1, j1, bc);
+        super.e(world1, i, i1, j1);
+        if(world1.a(i, i1, j1) == bc)
+            world1.h(i, i1, j1, bc);
     }
 }
diff --git "a/temp\\src\\java/hw.java" "b/src\\main\\java/hw.java"
index a0bdb08..8df355c 100644
--- "a/temp\\src\\java/hw.java"
+++ "b/src\\main\\java/hw.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import org.lwjgl.opengl.GL11;
-
 public class hw extends ak
 {
 
@@ -16,14 +13,14 @@ public class hw extends ak
         b = 0.5F;
     }
 
-    public void a(jd jd1, double d1, double d2, double d3, 
-            float f, float f1)
+    public void a(PrimedTnt primedTnt1, double d1, double d2, double d3,
+                  float f, float f1)
     {
         org.lwjgl.opengl.GL11.glPushMatrix();
         org.lwjgl.opengl.GL11.glTranslatef((float)d1, (float)d2, (float)d3);
-        if(((float)jd1.a - f1) + 1.0F < 10F)
+        if(((float) primedTnt1.a - f1) + 1.0F < 10F)
         {
-            float f2 = 1.0F - (((float)jd1.a - f1) + 1.0F) / 10F;
+            float f2 = 1.0F - (((float) primedTnt1.a - f1) + 1.0F) / 10F;
             if(f2 < 0.0F)
                 f2 = 0.0F;
             if(f2 > 1.0F)
@@ -33,10 +30,10 @@ public class hw extends ak
             float f4 = 1.0F + f2 * 0.3F;
             org.lwjgl.opengl.GL11.glScalef(f4, f4, f4);
         }
-        float f3 = (1.0F - (((float)jd1.a - f1) + 1.0F) / 100F) * 0.8F;
+        float f3 = (1.0F - (((float) primedTnt1.a - f1) + 1.0F) / 100F) * 0.8F;
         a("/terrain.png");
         d.a(ly.an);
-        if((jd1.a / 5) % 2 == 0)
+        if((primedTnt1.a / 5) % 2 == 0)
         {
             org.lwjgl.opengl.GL11.glDisable(3553);
             org.lwjgl.opengl.GL11.glDisable(2896);
@@ -54,6 +51,6 @@ public class hw extends ak
 
     public void a(kh kh, double d1, double d2, double d3, float f, float f1)
     {
-        a((jd)kh, d1, d2, d3, f, f1);
+        a((PrimedTnt)kh, d1, d2, d3, f, f1);
     }
 }
diff --git "a/temp\\src\\java/hx.java" "b/src\\main\\java/hx.java"
index c37e4f2..8e731d3 100644
--- "a/temp\\src\\java/hx.java"
+++ "b/src\\main\\java/hx.java"
@@ -1,11 +1,9 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.List;
 //import Minecraft;
-import org.lwjgl.opengl.GL11;
+
 
 public class hx extends ee
 {
@@ -15,30 +13,30 @@ public class hx extends ee
     public hx(eu eu)
     {
         j = new et();
-        this.i.add(((java.lang.Object) (new an(((ee) (this)), ((gh) (j.a)), j.b, 0, 124, 35))));
+        this.i.add(((Object) (new an(((ee) (this)), ((gh) (j.a)), j.b, 0, 124, 35))));
         for(int i = 0; i < 3; i++)
         {
             for(int i1 = 0; i1 < 3; i1++)
-                this.i.add(((java.lang.Object) (new mm(((ee) (this)), ((gh) (j.a)), i1 + i * 3, 30 + i1 * 18, 17 + i * 18))));
+                this.i.add(((Object) (new mm(((ee) (this)), ((gh) (j.a)), i1 + i * 3, 30 + i1 * 18, 17 + i * 18))));
 
         }
 
         for(int k = 0; k < 3; k++)
         {
             for(int j1 = 0; j1 < 9; j1++)
-                this.i.add(((java.lang.Object) (new mm(((ee) (this)), ((gh) (eu)), j1 + (k + 1) * 9, 8 + j1 * 18, 84 + k * 18))));
+                this.i.add(((Object) (new mm(((ee) (this)), ((gh) (eu)), j1 + (k + 1) * 9, 8 + j1 * 18, 84 + k * 18))));
 
         }
 
         for(int l = 0; l < 9; l++)
-            this.i.add(((java.lang.Object) (new mm(((ee) (this)), ((gh) (eu)), l, 8 + l * 18, 142))));
+            this.i.add(((Object) (new mm(((ee) (this)), ((gh) (eu)), l, 8 + l * 18, 142))));
 
     }
 
     public void h()
     {
         super.h();
-        j.a(((dm) (b.g)));
+        j.a(((Player) (b.g)));
     }
 
     protected void j()
diff --git "a/temp\\src\\java/hy.java" "b/src\\main\\java/hy.java"
index cf23da0..9fcef27 100644
--- "a/temp\\src\\java/hy.java"
+++ "b/src\\main\\java/hy.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class hy extends ly
 {
 
@@ -14,34 +11,34 @@ public class hy extends ly
         b(true);
     }
 
-    public void a(cn cn1, int i, int j, int k, java.util.Random random)
+    public void a(World world1, int i, int j, int k, java.util.Random random)
     {
-        if(cn1.a(i, j + 1, k) == 0)
+        if(world1.a(i, j + 1, k) == 0)
         {
             int l;
-            for(l = 1; cn1.a(i, j - l, k) == bc; l++);
+            for(l = 1; world1.a(i, j - l, k) == bc; l++);
             if(l < 3)
             {
-                int i1 = cn1.e(i, j, k);
+                int i1 = world1.e(i, j, k);
                 if(i1 == 15)
                 {
-                    cn1.d(i, j + 1, k, bc);
-                    cn1.b(i, j, k, 0);
+                    world1.d(i, j + 1, k, bc);
+                    world1.b(i, j, k, 0);
                 } else
                 {
-                    cn1.b(i, j, k, i1 + 1);
+                    world1.b(i, j, k, i1 + 1);
                 }
             }
         }
     }
 
-    public cf d(cn cn1, int i, int j, int k)
+    public cf d(World world1, int i, int j, int k)
     {
         float f1 = 0.0625F;
         return cf.b((float)i + f1, j, (float)k + f1, (float)(i + 1) - f1, (float)(j + 1) - f1, (float)(k + 1) - f1);
     }
 
-    public cf f(cn cn1, int i, int j, int k)
+    public cf f(World world1, int i, int j, int k)
     {
         float f1 = 0.0625F;
         return cf.b((float)i + f1, j, (float)k + f1, (float)(i + 1) - f1, j + 1, (float)(k + 1) - f1);
@@ -72,42 +69,42 @@ public class hy extends ly
         return 13;
     }
 
-    public boolean a(cn cn1, int i, int j, int k)
+    public boolean a(World world1, int i, int j, int k)
     {
-        if(!super.a(cn1, i, j, k))
+        if(!super.a(world1, i, j, k))
             return false;
         else
-            return g(cn1, i, j, k);
+            return g(world1, i, j, k);
     }
 
-    public void a(cn cn1, int i, int j, int k, int l)
+    public void a(World world1, int i, int j, int k, int l)
     {
-        if(!g(cn1, i, j, k))
+        if(!g(world1, i, j, k))
         {
-            b_(cn1, i, j, k, cn1.e(i, j, k));
-            cn1.d(i, j, k, 0);
+            b_(world1, i, j, k, world1.e(i, j, k));
+            world1.d(i, j, k, 0);
         }
     }
 
-    public boolean g(cn cn1, int i, int j, int k)
+    public boolean g(World world1, int i, int j, int k)
     {
-        if(cn1.f(i - 1, j, k).a())
+        if(world1.f(i - 1, j, k).a())
             return false;
-        if(cn1.f(i + 1, j, k).a())
+        if(world1.f(i + 1, j, k).a())
             return false;
-        if(cn1.f(i, j, k - 1).a())
+        if(world1.f(i, j, k - 1).a())
             return false;
-        if(cn1.f(i, j, k + 1).a())
+        if(world1.f(i, j, k + 1).a())
         {
             return false;
         } else
         {
-            int l = cn1.a(i, j - 1, k);
+            int l = world1.a(i, j - 1, k);
             return l == ly.aW.bc || l == ly.F.bc;
         }
     }
 
-    public void b(cn cn1, int i, int j, int k, kh kh1)
+    public void b(World world1, int i, int j, int k, kh kh1)
     {
         kh1.a(((kh) (null)), 1);
     }
diff --git "a/temp\\src\\java/hz.java" "b/src\\main\\java/hz.java"
index 26d95d5..abcee09 100644
--- "a/temp\\src\\java/hz.java"
+++ "b/src\\main\\java/hz.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/i.java" "b/src\\main\\java/i.java"
index b5a9f7a..e1f633a 100644
--- "a/temp\\src\\java/i.java"
+++ "b/src\\main\\java/i.java"
@@ -1,11 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.nio.FloatBuffer;
-import org.lwjgl.opengl.GL11;
-
 public class i
 {
 
diff --git "a/temp\\src\\java/ia.java" "b/src\\main\\java/ia.java"
index 856975e..7236e98 100644
--- "a/temp\\src\\java/ia.java"
+++ "b/src\\main\\java/ia.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -29,45 +28,45 @@ public class ia extends hq
         h = 0.0F;
         i = 0;
         j = ((az) (new k(this, 200, co.class, new java.lang.Class[] {
-            mb.class, cw.class, dd.class, ax.class, ma.class
+            Zombie.class, Skeleton.class, Creeper.class, Spider.class, Slime.class
         })));
-        k = new az(15, ag.class, new java.lang.Class[] {
-            bo.class, mv.class, am.class, mz.class
+        k = new az(15, Passive.class, new java.lang.Class[] {
+            Sheep.class, Pig.class, Cow.class, Chicken.class
         });
     }
 
-    public void a(dm dm1)
+    public void a(Player player1)
     {
-        dm1.aq = -180F;
+        player1.aq = -180F;
     }
 
     public boolean b(int l, int i1, int j1, int k1)
     {
-        int l1 = a.e.a(l, i1, j1);
-        int i2 = a.e.e(l, i1, j1);
+        int l1 = a.world.a(l, i1, j1);
+        int i2 = a.world.e(l, i1, j1);
         boolean flag = super.b(l, i1, j1, k1);
         ev ev1 = a.g.t();
         boolean flag1 = a.g.b(ly.n[l1]);
         if(ev1 != null)
         {
             ev1.a(l1, l, i1, j1);
-            if(ev1.a == 0)
+            if(ev1.count == 0)
             {
-                ev1.a(((dm) (a.g)));
+                ev1.a(((Player) (a.g)));
                 a.g.u();
             }
         }
         if(flag && flag1)
-            ly.n[l1].a_(a.e, l, i1, j1, i2);
+            ly.n[l1].a_(a.world, l, i1, j1, i2);
         return flag;
     }
 
     public void a(int l, int i1, int j1, int k1)
     {
-        int l1 = a.e.a(l, i1, j1);
+        int l1 = a.world.a(l, i1, j1);
         if(l1 > 0 && f == 0.0F)
-            ly.n[l1].b(a.e, l, i1, j1, ((dm) (a.g)));
-        if(l1 > 0 && ly.n[l1].a(((dm) (a.g))) >= 1.0F)
+            ly.n[l1].b(a.world, l, i1, j1, ((Player) (a.g)));
+        if(l1 > 0 && ly.n[l1].a(((Player) (a.g))) >= 1.0F)
             b(l, i1, j1, k1);
     }
 
@@ -86,11 +85,11 @@ public class ia extends hq
         }
         if(l == c && i1 == d && j1 == e)
         {
-            int l1 = a.e.a(l, i1, j1);
+            int l1 = a.world.a(l, i1, j1);
             if(l1 == 0)
                 return;
             ly ly1 = ly.n[l1];
-            f += ly1.a(((dm) (a.g)));
+            f += ly1.a(((Player) (a.g)));
             if(h % 4F == 0.0F && ly1 != null)
                 a.A.b(ly1.bl.d(), (float)l + 0.5F, (float)i1 + 0.5F, (float)j1 + 0.5F, (ly1.bl.b() + 1.0F) / 8F, ly1.bl.c() * 0.5F);
             h++;
@@ -132,16 +131,16 @@ public class ia extends hq
         return 4F;
     }
 
-    public void a(cn cn1)
+    public void a(World world1)
     {
-        super.a(cn1);
+        super.a(world1);
     }
 
     public void c()
     {
         g = f;
-        j.a(a.e);
-        k.a(a.e);
+        j.a(a.world);
+        k.a(a.world);
         a.A.c();
     }
 }
diff --git "a/temp\\src\\java/ib.java" "b/src\\main\\java/ib.java"
index 46d393e..e4b66c2 100644
--- "a/temp\\src\\java/ib.java"
+++ "b/src\\main\\java/ib.java"
@@ -1,9 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.List;
 //import Minecraft;
 
 public class ib extends jq
@@ -17,12 +15,12 @@ public class ib extends jq
 
     public void j()
     {
-        e.add(((java.lang.Object) (new fk(6, c / 2 - 100, d / 6 + 168, "Cancel"))));
+        e.add(((Object) (new fk(6, c / 2 - 100, d / 6 + 168, "Cancel"))));
     }
 
     public void c(int i)
     {
-        java.lang.String s = d(i);
+        String s = d(i);
         if(s != null)
             b.a(((bh) (new ja(((bh) (this)), "Are you sure you want to delete this world?", (new StringBuilder()).append("'").append(s).append("' will be lost forever!").toString(), i))));
     }
@@ -32,7 +30,7 @@ public class ib extends jq
         if(flag)
         {
             java.io.File file = Minecraft.b();
-            cn.b(file, d(i));
+            World.b(file, d(i));
         }
         b.a(a);
     }
diff --git "a/temp\\src\\java/ic.java" "b/src\\main\\java/ic.java"
index 3e5cac3..1845bc3 100644
--- "a/temp\\src\\java/ic.java"
+++ "b/src\\main\\java/ic.java"
@@ -1,58 +1,55 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.PrintStream;
 import java.util.HashMap;
-import java.util.Map;
 
 public class ic
 {
 
     private static java.util.Map a = new HashMap();
     private static java.util.Map b = new HashMap();
-    public cn e;
-    public int f;
-    public int g;
-    public int h;
+    public World e;
+    public int x;
+    public int y;
+    public int z;
 
     public ic()
     {
     }
 
-    private static void a(java.lang.Class class1, java.lang.String s)
+    private static void a(java.lang.Class class1, String s)
     {
-        if(b.containsKey(((java.lang.Object) (s))))
+        if(b.containsKey(((Object) (s))))
         {
             throw new IllegalArgumentException((new StringBuilder()).append("Duplicate id: ").append(s).toString());
         } else
         {
-            a.put(((java.lang.Object) (s)), ((java.lang.Object) (class1)));
-            b.put(((java.lang.Object) (class1)), ((java.lang.Object) (s)));
+            a.put(((Object) (s)), ((Object) (class1)));
+            b.put(((Object) (class1)), ((Object) (s)));
             return;
         }
     }
 
-    public void a(hm hm1)
+    public void a(TagCompound tagCompound1)
     {
-        f = hm1.e("x");
-        g = hm1.e("y");
-        h = hm1.e("z");
+        x = tagCompound1.getInt("x");
+        y = tagCompound1.getInt("y");
+        z = tagCompound1.getInt("z");
     }
 
-    public void b(hm hm1)
+    public void b(TagCompound tagCompound1)
     {
-        java.lang.String s = (java.lang.String)b.get(((java.lang.Object) (((java.lang.Object)this).getClass())));
-        if(s == null)
+        String id = (String)b.get(((Object) (((Object)this).getClass())));
+        if(id == null)
         {
-            throw new RuntimeException((new StringBuilder()).append(((java.lang.Object) (((java.lang.Object)this).getClass()))).append(" is missing a mapping! This is a bug!").toString());
+            throw new RuntimeException((new StringBuilder()).append(((Object) (((Object)this).getClass()))).append(" is missing a mapping! This is a bug!").toString());
         } else
         {
-            hm1.a("id", s);
-            hm1.a("x", f);
-            hm1.a("y", g);
-            hm1.a("z", h);
+            tagCompound1.set("id", id);
+            tagCompound1.set("x", x);
+            tagCompound1.set("y", y);
+            tagCompound1.set("z", z);
             return;
         }
     }
@@ -61,12 +58,12 @@ public class ic
     {
     }
 
-    public static ic c(hm hm1)
+    public static ic c(TagCompound tagCompound1)
     {
         ic ic1 = null;
         try
         {
-            java.lang.Class class1 = (java.lang.Class)a.get(((java.lang.Object) (hm1.i("id"))));
+            java.lang.Class class1 = (java.lang.Class)a.get(((Object) (tagCompound1.getString("id"))));
             if(class1 != null)
                 ic1 = (ic)class1.newInstance();
         }
@@ -75,40 +72,40 @@ public class ic
             exception.printStackTrace();
         }
         if(ic1 != null)
-            ic1.a(hm1);
+            ic1.a(tagCompound1);
         else
-            java.lang.System.out.println((new StringBuilder()).append("Skipping TileEntity with id ").append(hm1.i("id")).toString());
+            java.lang.System.out.println((new StringBuilder()).append("Skipping TileEntity with id ").append(tagCompound1.getString("id")).toString());
         return ic1;
     }
 
     public int f()
     {
-        return e.e(f, g, h);
+        return e.e(x, y, z);
     }
 
     public void j_()
     {
-        e.b(f, g, h, this);
+        e.b(x, y, z, this);
     }
 
     public double a(double d, double d1, double d2)
     {
-        double d3 = ((double)f + 0.5D) - d;
-        double d4 = ((double)g + 0.5D) - d1;
-        double d5 = ((double)h + 0.5D) - d2;
+        double d3 = ((double) x + 0.5D) - d;
+        double d4 = ((double) y + 0.5D) - d1;
+        double d5 = ((double) z + 0.5D) - d2;
         return d3 * d3 + d4 * d4 + d5 * d5;
     }
 
     public ly g()
     {
-        return ly.n[e.a(f, g, h)];
+        return ly.n[e.a(x, y, z)];
     }
 
     static 
     {
-        ic.a(ke.class, "Furnace");
-        ic.a(fe.class, "Chest");
-        ic.a(ob.class, "Sign");
-        ic.a(bd.class, "MobSpawner");
+        ic.a(Furnace.class, "Furnace");
+        ic.a(Chest.class, "Chest");
+        ic.a(Sign.class, "Sign");
+        ic.a(MobSpawner.class, "MobSpawner");
     }
 }
diff --git "a/temp\\src\\java/id.java" "b/src\\main\\java/id.java"
index 5d5e9ff..eee2ef6 100644
--- "a/temp\\src\\java/id.java"
+++ "b/src\\main\\java/id.java"
@@ -1,32 +1,30 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.List;
 //import Minecraft;
-import org.lwjgl.opengl.GL11;
+
 
 public class id extends ee
 {
 
-    private ke j;
+    private Furnace j;
 
-    public id(eu eu, ke ke1)
+    public id(eu eu, Furnace furnace1)
     {
-        j = ke1;
-        this.i.add(((java.lang.Object) (new mm(((ee) (this)), ((gh) (ke1)), 0, 56, 17))));
-        this.i.add(((java.lang.Object) (new mm(((ee) (this)), ((gh) (ke1)), 1, 56, 53))));
-        this.i.add(((java.lang.Object) (new mm(((ee) (this)), ((gh) (ke1)), 2, 116, 35))));
+        j = furnace1;
+        this.i.add(((Object) (new mm(((ee) (this)), ((gh) (furnace1)), 0, 56, 17))));
+        this.i.add(((Object) (new mm(((ee) (this)), ((gh) (furnace1)), 1, 56, 53))));
+        this.i.add(((Object) (new mm(((ee) (this)), ((gh) (furnace1)), 2, 116, 35))));
         for(int i = 0; i < 3; i++)
         {
             for(int l = 0; l < 9; l++)
-                this.i.add(((java.lang.Object) (new mm(((ee) (this)), ((gh) (eu)), l + (i + 1) * 9, 8 + l * 18, 84 + i * 18))));
+                this.i.add(((Object) (new mm(((ee) (this)), ((gh) (eu)), l + (i + 1) * 9, 8 + l * 18, 84 + i * 18))));
 
         }
 
         for(int k = 0; k < 9; k++)
-            this.i.add(((java.lang.Object) (new mm(((ee) (this)), ((gh) (eu)), k, 8 + k * 18, 142))));
+            this.i.add(((Object) (new mm(((ee) (this)), ((gh) (eu)), k, 8 + k * 18, 142))));
 
     }
 
diff --git "a/temp\\src\\java/ie.java" "b/src\\main\\java/ie.java"
index accbd27..da11f47 100644
--- "a/temp\\src\\java/ie.java"
+++ "b/src\\main\\java/ie.java"
@@ -1,9 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.List;
 //import Minecraft;
 
 public class ie extends bh
@@ -22,11 +20,11 @@ public class ie extends bh
     {
         a = 0;
         e.clear();
-        e.add(((java.lang.Object) (new fk(1, c / 2 - 100, d / 4 + 48, "Save and quit to title"))));
+        e.add(((Object) (new fk(1, c / 2 - 100, d / 4 + 48, "Save and quit to title"))));
         if(b.j())
             ((fk)e.get(0)).e = "Disconnect";
-        e.add(((java.lang.Object) (new fk(4, c / 2 - 100, d / 4 + 24, "Back to game"))));
-        e.add(((java.lang.Object) (new fk(0, c / 2 - 100, d / 4 + 96, "Options..."))));
+        e.add(((Object) (new fk(4, c / 2 - 100, d / 4 + 24, "Back to game"))));
+        e.add(((Object) (new fk(0, c / 2 - 100, d / 4 + 96, "Options..."))));
     }
 
     protected void a(fk fk1)
@@ -36,8 +34,8 @@ public class ie extends bh
         if(fk1.f == 1)
         {
             if(b.j())
-                b.e.k();
-            b.a(((cn) (null)));
+                b.world.k();
+            b.a(((World) (null)));
             b.a(((bh) (new cx())));
         }
         if(fk1.f == 4)
@@ -56,7 +54,7 @@ public class ie extends bh
     public void a(int i, int j, float f)
     {
         i();
-        boolean flag = !b.e.a(a++);
+        boolean flag = !b.world.a(a++);
         if(flag || h < 20)
         {
             float f1 = ((float)(h % 10) + f) / 10F;
diff --git "a/temp\\src\\java/iffix.java" "b/src\\main\\java/iffix.java"
index 01b3758..ed66d16 100644
--- "a/temp\\src\\java/iffix.java"
+++ "b/src\\main\\java/iffix.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames definits deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class iffix extends ly
 {
 
@@ -14,7 +11,7 @@ public class iffix extends ly
         a(0.0F, 0.0F, 0.0F, 1.0F, 0.125F, 1.0F);
     }
 
-    public cf d(cn cn1, int i, int j, int k)
+    public cf d(World world1, int i, int j, int k)
     {
         return null;
     }
@@ -24,10 +21,10 @@ public class iffix extends ly
         return false;
     }
 
-    public mf a(cn cn1, int i, int j, int k, aj aj, aj aj1)
+    public mf a(World world1, int i, int j, int k, aj aj, aj aj1)
     {
-        a(((nm) (cn1)), i, j, k);
-        return super.a(cn1, i, j, k, aj, aj1);
+        a(((nm) (world1)), i, j, k);
+        return super.a(world1, i, j, k, aj, aj1);
     }
 
     public void a(nm nm1, int i, int j, int k)
@@ -62,42 +59,42 @@ public class iffix extends ly
         return 1;
     }
 
-    public boolean a(cn cn1, int i, int j, int k)
+    public boolean a(World world1, int i, int j, int k)
     {
-        return cn1.g(i, j - 1, k);
+        return world1.g(i, j - 1, k);
     }
 
-    public void e(cn cn1, int i, int j, int k)
+    public void e(World world1, int i, int j, int k)
     {
-        cn1.b(i, j, k, 15);
-        h(cn1, i, j, k);
+        world1.b(i, j, k, 15);
+        h(world1, i, j, k);
     }
 
-    public void a(cn cn1, int i, int j, int k, int l)
+    public void a(World world1, int i, int j, int k, int l)
     {
-        int i1 = cn1.e(i, j, k);
+        int i1 = world1.e(i, j, k);
         boolean flag = false;
-        if(!cn1.g(i, j - 1, k))
+        if(!world1.g(i, j - 1, k))
             flag = true;
-        if(i1 == 2 && !cn1.g(i + 1, j, k))
+        if(i1 == 2 && !world1.g(i + 1, j, k))
             flag = true;
-        if(i1 == 3 && !cn1.g(i - 1, j, k))
+        if(i1 == 3 && !world1.g(i - 1, j, k))
             flag = true;
-        if(i1 == 4 && !cn1.g(i, j, k - 1))
+        if(i1 == 4 && !world1.g(i, j, k - 1))
             flag = true;
-        if(i1 == 5 && !cn1.g(i, j, k + 1))
+        if(i1 == 5 && !world1.g(i, j, k + 1))
             flag = true;
         if(flag)
         {
-            b_(cn1, i, j, k, cn1.e(i, j, k));
-            cn1.d(i, j, k, 0);
+            b_(world1, i, j, k, world1.e(i, j, k));
+            world1.d(i, j, k, 0);
         } else
-        if(l > 0 && ly.n[l].d() && mk.a(new mk(this, cn1, i, j, k)) == 3)
-            h(cn1, i, j, k);
+        if(l > 0 && ly.n[l].d() && mk.a(new mk(this, world1, i, j, k)) == 3)
+            h(world1, i, j, k);
     }
 
-    private void h(cn cn1, int i, int j, int k)
+    private void h(World world1, int i, int j, int k)
     {
-        (new mk(this, cn1, i, j, k)).a(cn1.o(i, j, k));
+        (new mk(this, world1, i, j, k)).a(world1.o(i, j, k));
     }
 }
diff --git "a/temp\\src\\java/ig.java" "b/src\\main\\java/ig.java"
index 2fc1bd9..ddd4c10 100644
--- "a/temp\\src\\java/ig.java"
+++ "b/src\\main\\java/ig.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -7,10 +6,10 @@
 public class ig extends nq
 {
 
-    public ig(cn cn, double d, double d1, double d2, 
-            di di1)
+    public ig(World world, double d, double d1, double d2,
+              di di1)
     {
-        super(cn, d, d1, d2, 0.0D, 0.0D, 0.0D);
+        super(world, d, d1, d2, 0.0D, 0.0D, 0.0D);
         b = di1.a(((ev) (null)));
         i = j = k = 1.0F;
         h = ly.aV.bm;
diff --git "a/temp\\src\\java/ih.java" "b/src\\main\\java/ih.java"
index ed23907..58d2277 100644
--- "a/temp\\src\\java/ih.java"
+++ "b/src\\main\\java/ih.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/ii.java" "b/src\\main\\java/ii.java"
index 354579c..1cd897c 100644
--- "a/temp\\src\\java/ii.java"
+++ "b/src\\main\\java/ii.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -6,19 +5,15 @@
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
 import java.io.IOException;
-import java.net.Socket;
-import java.net.SocketException;
-import java.util.Collections;
 import java.util.LinkedList;
-import java.util.List;
 
 public class ii
 {
 
-    public static final java.lang.Object a = new Object();
+    public static final Object a = new Object();
     public static int b;
     public static int c;
-    private java.lang.Object d;
+    private Object d;
     private java.net.Socket e;
     private java.io.DataInputStream f;
     private java.io.DataOutputStream g;
@@ -31,12 +26,12 @@ public class ii
     private java.lang.Thread n;
     private java.lang.Thread o;
     private boolean p;
-    private java.lang.String q;
+    private String q;
     private int r;
     private int s;
     private int t;
 
-    public ii(java.net.Socket socket, java.lang.String s1, lb lb1) throws IOException
+    public ii(java.net.Socket socket, String s1, lb lb1) throws IOException
     {
         d = new Object();
         h = true;
@@ -68,9 +63,9 @@ public class ii
         {
             s += fn1.a() + 1;
             if(fn1.j)
-                k.add(((java.lang.Object) (fn1)));
+                k.add(((Object) (fn1)));
             else
-                j.add(((java.lang.Object) (fn1)));
+                j.add(((Object) (fn1)));
         }
     }
 
@@ -119,7 +114,7 @@ public class ii
         {
             fn fn1 = fn.b(f);
             if(fn1 != null)
-                i.add(((java.lang.Object) (fn1)));
+                i.add(((Object) (fn1)));
             else
                 a("End of stream");
         }
@@ -136,7 +131,7 @@ public class ii
         a((new StringBuilder()).append("Internal exception: ").append(exception.toString()).toString());
     }
 
-    public void a(java.lang.String s1)
+    public void a(String s1)
     {
         if(!h)
             return;
diff --git "a/temp\\src\\java/ij.java" "b/src\\main\\java/ij.java"
index a3f1277..ffe67db 100644
--- "a/temp\\src\\java/ij.java"
+++ "b/src\\main\\java/ij.java"
@@ -1,22 +1,19 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
 import java.io.IOException;
 
 public class ij extends fn
 {
 
-    public java.lang.String a;
+    public String a;
 
     public ij()
     {
     }
 
-    public ij(java.lang.String s)
+    public ij(String s)
     {
         a = s;
     }
diff --git "a/temp\\src\\java/ik.java" "b/src\\main\\java/ik.java"
index 294ad06..ae95107 100644
--- "a/temp\\src\\java/ik.java"
+++ "b/src\\main\\java/ik.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public abstract class ik
 {
 
@@ -12,7 +9,7 @@ public abstract class ik
     {
     }
 
-    public abstract boolean a(cn cn, java.util.Random random, int i, int j, int k);
+    public abstract boolean a(World world, java.util.Random random, int i, int j, int k);
 
     public void a(double d, double d1, double d2)
     {
diff --git "a/temp\\src\\java/il.java" "b/src\\main\\java/il.java"
index 9205170..9862097 100644
--- "a/temp\\src\\java/il.java"
+++ "b/src\\main\\java/il.java"
@@ -1,9 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.List;
 //import Minecraft;
 
 public class il extends hq
@@ -15,13 +13,13 @@ public class il extends hq
         b = true;
     }
 
-    public void b(dm dm1)
+    public void b(Player player1)
     {
         for(int i = 0; i < 9; i++)
-            if(dm1.b.a[i] == null)
-                a.g.b.a[i] = new ev(((ly)dl.a.get(i)).bc);
+            if(player1.b.slots1[i] == null)
+                a.g.b.slots1[i] = new ev(((ly)dl.a.get(i)).bc);
             else
-                a.g.b.a[i].a = 1;
+                a.g.b.slots1[i].count = 1;
 
     }
 
@@ -30,9 +28,9 @@ public class il extends hq
         return false;
     }
 
-    public void a(cn cn)
+    public void a(World world)
     {
-        super.a(cn);
+        super.a(world);
     }
 
     public void c()
diff --git "a/temp\\src\\java/im.java" "b/src\\main\\java/im.java"
index cb45222..0744028 100644
--- "a/temp\\src\\java/im.java"
+++ "b/src\\main\\java/im.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -11,10 +10,10 @@ public interface im
 
     public abstract void b(int i, int j, int k, int l, int i1, int j1);
 
-    public abstract void a(java.lang.String s, double d, double d1, double d2, 
+    public abstract void a(String s, double d, double d1, double d2, 
             float f, float f1);
 
-    public abstract void a(java.lang.String s, double d, double d1, double d2, 
+    public abstract void a(String s, double d, double d1, double d2, 
             double d3, double d4, double d5);
 
     public abstract void a(kh kh);
@@ -23,7 +22,7 @@ public interface im
 
     public abstract void e();
 
-    public abstract void a(java.lang.String s, int i, int j, int k);
+    public abstract void a(String s, int i, int j, int k);
 
     public abstract void a(int i, int j, int k, ic ic);
 }
diff --git "a/temp\\src\\java/in.java" "b/src\\main\\java/in.java"
index 9431916..56b332a 100644
--- "a/temp\\src\\java/in.java"
+++ "b/src\\main\\java/in.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import org.lwjgl.opengl.GL11;
-
 public class in extends ex
 {
 
@@ -15,21 +12,21 @@ public class in extends ex
         b = new jk();
     }
 
-    public void a(ob ob1, double d, double d1, double d2, 
-            float f)
+    public void a(Sign sign1, double d, double d1, double d2,
+                  float f)
     {
-        ly ly1 = ob1.g();
+        ly ly1 = sign1.g();
         org.lwjgl.opengl.GL11.glPushMatrix();
         float f1 = 0.6666667F;
         if(ly1 == ly.aE)
         {
             org.lwjgl.opengl.GL11.glTranslatef((float)d + 0.5F, (float)d1 + 0.75F * f1, (float)d2 + 0.5F);
-            float f2 = (float)(ob1.f() * 360) / 16F;
+            float f2 = (float)(sign1.f() * 360) / 16F;
             org.lwjgl.opengl.GL11.glRotatef(-f2, 0.0F, 1.0F, 0.0F);
             b.b.h = true;
         } else
         {
-            int i = ob1.f();
+            int i = sign1.f();
             float f3 = 0.0F;
             if(i == 2)
                 f3 = 180F;
@@ -54,16 +51,16 @@ public class in extends ex
         org.lwjgl.opengl.GL11.glNormal3f(0.0F, 0.0F, -1F * f4);
         org.lwjgl.opengl.GL11.glDepthMask(false);
         int j = 0;
-        for(int k = 0; k < ob1.a.length; k++)
+        for(int k = 0; k < sign1.lines.length; k++)
         {
-            java.lang.String s = ob1.a[k];
-            if(k == ob1.b)
+            String s = sign1.lines[k];
+            if(k == sign1.b)
             {
                 s = (new StringBuilder()).append("> ").append(s).append(" <").toString();
-                kd1.b(s, -kd1.a(s) / 2, k * 10 - ob1.a.length * 5, j);
+                kd1.b(s, -kd1.a(s) / 2, k * 10 - sign1.lines.length * 5, j);
             } else
             {
-                kd1.b(s, -kd1.a(s) / 2, k * 10 - ob1.a.length * 5, j);
+                kd1.b(s, -kd1.a(s) / 2, k * 10 - sign1.lines.length * 5, j);
             }
         }
 
@@ -74,6 +71,6 @@ public class in extends ex
 
     public void a(ic ic, double d, double d1, double d2, float f)
     {
-        a((ob)ic, d, d1, d2, f);
+        a((Sign)ic, d, d1, d2, f);
     }
 }
diff --git "a/temp\\src\\java/ip.java" "b/src\\main\\java/ip.java"
index 1aee0df..a360bde 100644
--- "a/temp\\src\\java/ip.java"
+++ "b/src\\main\\java/ip.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import org.lwjgl.opengl.GL11;
-
 public class ip
 {
 
diff --git "a/temp\\src\\java/iq.java" "b/src\\main\\java/iq.java"
index d1c9dbd..8d41caa 100644
--- "a/temp\\src\\java/iq.java"
+++ "b/src\\main\\java/iq.java"
@@ -1,18 +1,10 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.nio.FloatBuffer;
-import java.util.List;
 import java.util.Random;
 //import Minecraft;
-import org.lwjgl.input.Mouse;
-import org.lwjgl.opengl.ContextCapabilities;
-import org.lwjgl.opengl.Display;
-import org.lwjgl.opengl.GL11;
-import org.lwjgl.opengl.GLContext;
-import org.lwjgl.util.glu.GLU;
+
 
 public class iq
 {
@@ -49,7 +41,7 @@ public class iq
     public void a()
     {
         n = o;
-        float f1 = h.e.c(eo.b(h.g.ak), eo.b(h.g.al), eo.b(h.g.am));
+        float f1 = h.world.c(eo.b(h.g.ak), eo.b(h.g.al), eo.b(h.g.am));
         float f2 = (float)(3 - h.y.e) / 3F;
         float f3 = f1 * (1.0F - f2) + f2;
         o += (f3 - o) * 0.1F;
@@ -81,7 +73,7 @@ public class iq
         aj aj2 = h.g.f(f1);
         aj aj3 = aj1.c(aj2.a * d1, aj2.b * d1, aj2.c * d1);
         k = null;
-        java.util.List list = h.e.b(((kh) (h.g)), h.g.au.a(aj2.a * d1, aj2.b * d1, aj2.c * d1));
+        java.util.List list = h.world.b(((kh) (h.g)), h.g.au.a(aj2.a * d1, aj2.b * d1, aj2.c * d1));
         double d3 = 0.0D;
         for(int i1 = 0; i1 < list.size(); i1++)
         {
@@ -109,11 +101,11 @@ public class iq
     {
         bi bi1 = h.g;
         float f2 = 70F;
-        if(((dm) (bi1)).a(gb.f))
+        if(((Player) (bi1)).a(gb.f))
             f2 = 60F;
-        if(((dm) (bi1)).E <= 0)
+        if(((Player) (bi1)).health <= 0)
         {
-            float f3 = (float)((dm) (bi1)).J + f1;
+            float f3 = (float)((Player) (bi1)).deathTime + f1;
             f2 /= (1.0F - 500F / (f3 + 500F)) * 2.0F + 1.0F;
         }
         return f2;
@@ -122,10 +114,10 @@ public class iq
     private void e(float f1)
     {
         bi bi1 = h.g;
-        float f2 = (float)((dm) (bi1)).G - f1;
-        if(((dm) (bi1)).E <= 0)
+        float f2 = (float)((Player) (bi1)).hurtTime - f1;
+        if(((Player) (bi1)).health <= 0)
         {
-            float f3 = (float)((dm) (bi1)).J + f1;
+            float f3 = (float)((Player) (bi1)).deathTime + f1;
             org.lwjgl.opengl.GL11.glRotatef(40F - 8000F / (f3 + 200F), 0.0F, 0.0F, 1.0F);
         }
         if(f2 < 0.0F)
@@ -133,9 +125,9 @@ public class iq
             return;
         } else
         {
-            f2 /= ((dm) (bi1)).H;
+            f2 /= ((Player) (bi1)).H;
             f2 = eo.a(f2 * f2 * f2 * f2 * 3.141593F);
-            float f4 = ((dm) (bi1)).I;
+            float f4 = ((Player) (bi1)).I;
             org.lwjgl.opengl.GL11.glRotatef(-f4, 0.0F, 1.0F, 0.0F);
             org.lwjgl.opengl.GL11.glRotatef(-f2 * 14F, 0.0F, 0.0F, 1.0F);
             org.lwjgl.opengl.GL11.glRotatef(f4, 0.0F, 1.0F, 0.0F);
@@ -151,10 +143,10 @@ public class iq
         } else
         {
             bi bi1 = h.g;
-            float f2 = ((dm) (bi1)).aF - ((dm) (bi1)).aE;
-            float f3 = ((dm) (bi1)).aF + f2 * f1;
-            float f4 = ((dm) (bi1)).e + (((dm) (bi1)).f - ((dm) (bi1)).e) * f1;
-            float f5 = ((dm) (bi1)).L + (((dm) (bi1)).M - ((dm) (bi1)).L) * f1;
+            float f2 = ((Player) (bi1)).aF - ((Player) (bi1)).aE;
+            float f3 = ((Player) (bi1)).aF + f2 * f1;
+            float f4 = ((Player) (bi1)).e + (((Player) (bi1)).f - ((Player) (bi1)).e) * f1;
+            float f5 = ((Player) (bi1)).L + (((Player) (bi1)).M - ((Player) (bi1)).L) * f1;
             org.lwjgl.opengl.GL11.glTranslatef(eo.a(f3 * 3.141593F) * f4 * 0.5F, -java.lang.Math.abs(eo.b(f3 * 3.141593F) * f4), 0.0F);
             org.lwjgl.opengl.GL11.glRotatef(eo.a(f3 * 3.141593F) * f4 * 3F, 0.0F, 0.0F, 1.0F);
             org.lwjgl.opengl.GL11.glRotatef(java.lang.Math.abs(eo.b(f3 * 3.141593F + 0.2F) * f4) * 5F, 1.0F, 0.0F, 0.0F);
@@ -166,14 +158,14 @@ public class iq
     private void g(float f1)
     {
         bi bi1 = h.g;
-        double d1 = ((dm) (bi1)).ah + (((dm) (bi1)).ak - ((dm) (bi1)).ah) * (double)f1;
-        double d2 = ((dm) (bi1)).ai + (((dm) (bi1)).al - ((dm) (bi1)).ai) * (double)f1;
-        double d3 = ((dm) (bi1)).aj + (((dm) (bi1)).am - ((dm) (bi1)).aj) * (double)f1;
+        double d1 = ((Player) (bi1)).ah + (((Player) (bi1)).ak - ((Player) (bi1)).ah) * (double)f1;
+        double d2 = ((Player) (bi1)).ai + (((Player) (bi1)).al - ((Player) (bi1)).ai) * (double)f1;
+        double d3 = ((Player) (bi1)).aj + (((Player) (bi1)).am - ((Player) (bi1)).aj) * (double)f1;
         if(h.y.x)
         {
             double d4 = 4D;
-            float f2 = ((dm) (bi1)).aq;
-            float f3 = ((dm) (bi1)).ar;
+            float f2 = ((Player) (bi1)).aq;
+            float f3 = ((Player) (bi1)).ar;
             double d5 = (double)(-eo.a((f2 / 180F) * 3.141593F) * eo.b((f3 / 180F) * 3.141593F)) * d4;
             double d6 = (double)(eo.b((f2 / 180F) * 3.141593F) * eo.b((f3 / 180F) * 3.141593F)) * d4;
             double d7 = (double)(-eo.a((f3 / 180F) * 3.141593F)) * d4;
@@ -185,7 +177,7 @@ public class iq
                 f4 *= 0.1F;
                 f5 *= 0.1F;
                 f6 *= 0.1F;
-                mf mf1 = h.e.a(aj.b(d1 + (double)f4, d2 + (double)f5, d3 + (double)f6), aj.b((d1 - d5) + (double)f4 + (double)f6, (d2 - d7) + (double)f5, (d3 - d6) + (double)f6));
+                mf mf1 = h.world.a(aj.b(d1 + (double)f4, d2 + (double)f5, d3 + (double)f6), aj.b((d1 - d5) + (double)f4 + (double)f6, (d2 - d7) + (double)f5, (d3 - d6) + (double)f6));
                 if(mf1 == null)
                     continue;
                 double d8 = mf1.f.c(aj.b(d1, d2, d3));
@@ -193,17 +185,17 @@ public class iq
                     d4 = d8;
             }
 
-            org.lwjgl.opengl.GL11.glRotatef(((dm) (bi1)).ar - f3, 1.0F, 0.0F, 0.0F);
-            org.lwjgl.opengl.GL11.glRotatef(((dm) (bi1)).aq - f2, 0.0F, 1.0F, 0.0F);
+            org.lwjgl.opengl.GL11.glRotatef(((Player) (bi1)).ar - f3, 1.0F, 0.0F, 0.0F);
+            org.lwjgl.opengl.GL11.glRotatef(((Player) (bi1)).aq - f2, 0.0F, 1.0F, 0.0F);
             org.lwjgl.opengl.GL11.glTranslatef(0.0F, 0.0F, (float)(-d4));
-            org.lwjgl.opengl.GL11.glRotatef(f2 - ((dm) (bi1)).aq, 0.0F, 1.0F, 0.0F);
-            org.lwjgl.opengl.GL11.glRotatef(f3 - ((dm) (bi1)).ar, 1.0F, 0.0F, 0.0F);
+            org.lwjgl.opengl.GL11.glRotatef(f2 - ((Player) (bi1)).aq, 0.0F, 1.0F, 0.0F);
+            org.lwjgl.opengl.GL11.glRotatef(f3 - ((Player) (bi1)).ar, 1.0F, 0.0F, 0.0F);
         } else
         {
             org.lwjgl.opengl.GL11.glTranslatef(0.0F, 0.0F, -0.1F);
         }
-        org.lwjgl.opengl.GL11.glRotatef(((dm) (bi1)).at + (((dm) (bi1)).ar - ((dm) (bi1)).at) * f1, 1.0F, 0.0F, 0.0F);
-        org.lwjgl.opengl.GL11.glRotatef(((dm) (bi1)).as + (((dm) (bi1)).aq - ((dm) (bi1)).as) * f1 + 180F, 0.0F, 1.0F, 0.0F);
+        org.lwjgl.opengl.GL11.glRotatef(((Player) (bi1)).at + (((Player) (bi1)).ar - ((Player) (bi1)).at) * f1, 1.0F, 0.0F, 0.0F);
+        org.lwjgl.opengl.GL11.glRotatef(((Player) (bi1)).as + (((Player) (bi1)).aq - ((Player) (bi1)).as) * f1 + 180F, 0.0F, 1.0F, 0.0F);
     }
 
     private void a(float f1, int i1)
@@ -275,7 +267,7 @@ public class iq
         int j1 = iy1.b();
         int k1 = (org.lwjgl.input.Mouse.getX() * i1) / h.c;
         int i2 = j1 - (org.lwjgl.input.Mouse.getY() * j1) / h.d - 1;
-        if(h.e != null)
+        if(h.world != null)
         {
             c(f1);
             h.u.a(f1, h.p != null, k1, i2);
@@ -303,9 +295,9 @@ public class iq
         bi bi1 = h.g;
         e e1 = h.f;
         bq bq1 = h.h;
-        double d1 = ((dm) (bi1)).aI + (((dm) (bi1)).ak - ((dm) (bi1)).aI) * (double)f1;
-        double d2 = ((dm) (bi1)).aJ + (((dm) (bi1)).al - ((dm) (bi1)).aJ) * (double)f1;
-        double d3 = ((dm) (bi1)).aK + (((dm) (bi1)).am - ((dm) (bi1)).aK) * (double)f1;
+        double d1 = ((Player) (bi1)).aI + (((Player) (bi1)).ak - ((Player) (bi1)).aI) * (double)f1;
+        double d2 = ((Player) (bi1)).aJ + (((Player) (bi1)).al - ((Player) (bi1)).aJ) * (double)f1;
+        double d3 = ((Player) (bi1)).aK + (((Player) (bi1)).am - ((Player) (bi1)).aK) * (double)f1;
         for(int i1 = 0; i1 < 2; i1++)
         {
             if(h.y.g)
@@ -329,23 +321,23 @@ public class iq
             kl kl1 = new kl();
             ((oe) (kl1)).a(d1, d2, d3);
             h.f.a(((oe) (kl1)), f1);
-            h.f.a(((dm) (bi1)), false);
+            h.f.a(((Player) (bi1)), false);
             a(0);
             org.lwjgl.opengl.GL11.glEnable(2912);
             org.lwjgl.opengl.GL11.glBindTexture(3553, h.n.a("/terrain.png"));
             ((i)null).a();
-            e1.a(((dm) (bi1)), 0, f1);
+            e1.a(((Player) (bi1)), 0, f1);
             ((i)null).b();
-            e1.a(((dm) (bi1)).e(f1), ((oe) (kl1)), f1);
+            e1.a(((Player) (bi1)).e(f1), ((oe) (kl1)), f1);
             bq1.b(((kh) (bi1)), f1);
             ((i)null).a();
             a(0);
             bq1.a(((kh) (bi1)), f1);
-            if(h.x != null && ((dm) (bi1)).a(gb.f))
+            if(h.x != null && ((Player) (bi1)).a(gb.f))
             {
                 org.lwjgl.opengl.GL11.glDisable(3008);
-                e1.a(((dm) (bi1)), h.x, 0, ((dm) (bi1)).b.a(), f1);
-                e1.b(((dm) (bi1)), h.x, 0, ((dm) (bi1)).b.a(), f1);
+                e1.a(((Player) (bi1)), h.x, 0, ((Player) (bi1)).b.a(), f1);
+                e1.b(((Player) (bi1)), h.x, 0, ((Player) (bi1)).b.a(), f1);
                 org.lwjgl.opengl.GL11.glEnable(3008);
             }
             org.lwjgl.opengl.GL11.glBlendFunc(770, 771);
@@ -356,7 +348,7 @@ public class iq
             if(h.y.i)
             {
                 org.lwjgl.opengl.GL11.glColorMask(false, false, false, false);
-                int j1 = e1.a(((dm) (bi1)), 1, f1);
+                int j1 = e1.a(((Player) (bi1)), 1, f1);
                 org.lwjgl.opengl.GL11.glColorMask(true, true, true, true);
                 if(h.y.g)
                     if(i1 == 0)
@@ -367,20 +359,20 @@ public class iq
                     e1.a(1, f1);
             } else
             {
-                e1.a(((dm) (bi1)), 1, f1);
+                e1.a(((Player) (bi1)), 1, f1);
             }
             org.lwjgl.opengl.GL11.glDepthMask(true);
             org.lwjgl.opengl.GL11.glEnable(2884);
             org.lwjgl.opengl.GL11.glDisable(3042);
-            if(h.x != null && !((dm) (bi1)).a(gb.f))
+            if(h.x != null && !((Player) (bi1)).a(gb.f))
             {
                 org.lwjgl.opengl.GL11.glDisable(3008);
-                e1.a(((dm) (bi1)), h.x, 0, ((dm) (bi1)).b.a(), f1);
-                e1.b(((dm) (bi1)), h.x, 0, ((dm) (bi1)).b.a(), f1);
+                e1.a(((Player) (bi1)), h.x, 0, ((Player) (bi1)).b.a(), f1);
+                e1.b(((Player) (bi1)), h.x, 0, ((Player) (bi1)).b.a(), f1);
                 org.lwjgl.opengl.GL11.glEnable(3008);
             }
             org.lwjgl.opengl.GL11.glDisable(2912);
-            if(h.e.d)
+            if(h.world.snowCovered)
                 h(f1);
             if(k == null);
             a(0);
@@ -402,23 +394,23 @@ public class iq
         if(!h.y.i)
             return;
         bi bi1 = h.g;
-        cn cn1 = h.e;
-        int i1 = eo.b(((dm) (bi1)).ak);
-        int j1 = eo.b(((dm) (bi1)).al);
-        int k1 = eo.b(((dm) (bi1)).am);
+        World world1 = h.world;
+        int i1 = eo.b(((Player) (bi1)).ak);
+        int j1 = eo.b(((Player) (bi1)).al);
+        int k1 = eo.b(((Player) (bi1)).am);
         byte byte0 = 16;
         for(int l1 = 0; l1 < 150; l1++)
         {
             int i2 = (i1 + m.nextInt(((int) (byte0)))) - m.nextInt(((int) (byte0)));
             int j2 = (k1 + m.nextInt(((int) (byte0)))) - m.nextInt(((int) (byte0)));
-            int k2 = cn1.e(i2, j2);
-            int l2 = cn1.a(i2, k2 - 1, j2);
+            int k2 = world1.e(i2, j2);
+            int l2 = world1.a(i2, k2 - 1, j2);
             if(k2 > j1 + byte0 || k2 < j1 - byte0)
                 continue;
             float f1 = m.nextFloat();
             float f2 = m.nextFloat();
             if(l2 > 0)
-                h.h.a(((nq) (new nf(cn1, (float)i2 + f1, (double)((float)k2 + 0.1F) - ly.n[l2].bg, (float)j2 + f2))));
+                h.h.a(((nq) (new nf(world1, (float)i2 + f1, (double)((float)k2 + 0.1F) - ly.n[l2].bg, (float)j2 + f2))));
         }
 
     }
@@ -426,19 +418,19 @@ public class iq
     private void h(float f1)
     {
         bi bi1 = h.g;
-        cn cn1 = h.e;
-        int i1 = eo.b(((dm) (bi1)).ak);
-        int j1 = eo.b(((dm) (bi1)).al);
-        int k1 = eo.b(((dm) (bi1)).am);
+        World world1 = h.world;
+        int i1 = eo.b(((Player) (bi1)).ak);
+        int j1 = eo.b(((Player) (bi1)).al);
+        int k1 = eo.b(((Player) (bi1)).am);
         ho ho1 = ho.a;
         org.lwjgl.opengl.GL11.glDisable(2884);
         org.lwjgl.opengl.GL11.glNormal3f(0.0F, 1.0F, 0.0F);
         org.lwjgl.opengl.GL11.glEnable(3042);
         org.lwjgl.opengl.GL11.glBlendFunc(770, 771);
         org.lwjgl.opengl.GL11.glBindTexture(3553, h.n.a("/snow.png"));
-        double d1 = ((dm) (bi1)).aI + (((dm) (bi1)).ak - ((dm) (bi1)).aI) * (double)f1;
-        double d2 = ((dm) (bi1)).aJ + (((dm) (bi1)).al - ((dm) (bi1)).aJ) * (double)f1;
-        double d3 = ((dm) (bi1)).aK + (((dm) (bi1)).am - ((dm) (bi1)).aK) * (double)f1;
+        double d1 = ((Player) (bi1)).aI + (((Player) (bi1)).ak - ((Player) (bi1)).aI) * (double)f1;
+        double d2 = ((Player) (bi1)).aJ + (((Player) (bi1)).al - ((Player) (bi1)).aJ) * (double)f1;
+        double d3 = ((Player) (bi1)).aK + (((Player) (bi1)).am - ((Player) (bi1)).aK) * (double)f1;
         int l1 = 5;
         if(h.y.i)
             l1 = 10;
@@ -446,7 +438,7 @@ public class iq
         {
             for(int j2 = k1 - l1; j2 <= k1 + l1; j2++)
             {
-                int k2 = cn1.d(i2, j2);
+                int k2 = world1.d(i2, j2);
                 if(k2 < 0)
                     k2 = 0;
                 int l2 = j1 - l1;
@@ -463,11 +455,11 @@ public class iq
                     float f4 = ((float)(j & 0x1ff) + f1) / 512F;
                     float f5 = m.nextFloat() + f3 * 0.01F * (float)m.nextGaussian();
                     float f6 = m.nextFloat() + f3 * (float)m.nextGaussian() * 0.001F;
-                    double d4 = (double)((float)i2 + 0.5F) - ((dm) (bi1)).ak;
-                    double d5 = (double)((float)j2 + 0.5F) - ((dm) (bi1)).am;
+                    double d4 = (double)((float)i2 + 0.5F) - ((Player) (bi1)).ak;
+                    double d5 = (double)((float)j2 + 0.5F) - ((Player) (bi1)).am;
                     float f7 = eo.a(d4 * d4 + d5 * d5) / (float)l1;
                     ho1.b();
-                    float f8 = cn1.c(i2, 128, j2);
+                    float f8 = world1.c(i2, 128, j2);
                     org.lwjgl.opengl.GL11.glColor4f(f8, f8, f8, (1.0F - f7 * f7) * 0.7F);
                     ho1.b(-d1 * 1.0D, -d2 * 1.0D, -d3 * 1.0D);
                     ho1.a(i2 + 0, l2, j2 + 0, 0.0F * f2 + f5, ((float)l2 * f2) / 8F + f4 * f2 + f6);
@@ -505,28 +497,28 @@ public class iq
 
     private void i(float f1)
     {
-        cn cn1 = h.e;
+        World world1 = h.world;
         bi bi1 = h.g;
         float f2 = 1.0F / (float)(4 - h.y.e);
         f2 = 1.0F - (float)java.lang.Math.pow(f2, 0.25D);
-        aj aj1 = cn1.b(f1);
+        aj aj1 = world1.b(f1);
         float f3 = (float)aj1.a;
         float f4 = (float)aj1.b;
         float f5 = (float)aj1.c;
-        aj aj2 = cn1.e(f1);
+        aj aj2 = world1.e(f1);
         e = (float)aj2.a;
         f = (float)aj2.b;
         g = (float)aj2.c;
         e += (f3 - e) * f2;
         f += (f4 - f) * f2;
         g += (f5 - g) * f2;
-        if(((dm) (bi1)).a(gb.f))
+        if(((Player) (bi1)).a(gb.f))
         {
             e = 0.02F;
             f = 0.02F;
             g = 0.2F;
         } else
-        if(((dm) (bi1)).a(gb.g))
+        if(((Player) (bi1)).a(gb.g))
         {
             e = 0.6F;
             f = 0.1F;
@@ -554,7 +546,7 @@ public class iq
         org.lwjgl.opengl.GL11.glFog(2918, a(e, f, g, 1.0F));
         org.lwjgl.opengl.GL11.glNormal3f(0.0F, -1F, 0.0F);
         org.lwjgl.opengl.GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-        if(((dm) (bi1)).a(gb.f))
+        if(((Player) (bi1)).a(gb.f))
         {
             org.lwjgl.opengl.GL11.glFogi(2917, 2048);
             org.lwjgl.opengl.GL11.glFogf(2914, 0.1F);
@@ -571,7 +563,7 @@ public class iq
                 f5 = f11;
             }
         } else
-        if(((dm) (bi1)).a(gb.g))
+        if(((Player) (bi1)).a(gb.g))
         {
             org.lwjgl.opengl.GL11.glFogi(2917, 2048);
             org.lwjgl.opengl.GL11.glFogf(2914, 2.0F);
diff --git "a/temp\\src\\java/ir.java" "b/src\\main\\java/ir.java"
index edc2737..86ad786 100644
--- "a/temp\\src\\java/ir.java"
+++ "b/src\\main\\java/ir.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/is.java" "b/src\\main\\java/is.java"
index 60ad1ff..d9deb73 100644
--- "a/temp\\src\\java/is.java"
+++ "b/src\\main\\java/is.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
 import java.io.IOException;
 
 public class is extends lq
diff --git "a/temp\\src\\java/it.java" "b/src\\main\\java/it.java"
index 1b41a76..433bc95 100644
--- "a/temp\\src\\java/it.java"
+++ "b/src\\main\\java/it.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -7,10 +6,10 @@
 public class it
 {
 
-    public java.lang.String a;
+    public String a;
     public int b;
 
-    public it(java.lang.String s, int i)
+    public it(String s, int i)
     {
         a = s;
         b = i;
diff --git "a/temp\\src\\java/iu.java" "b/src\\main\\java/iu.java"
index 795bcac..61ae47f 100644
--- "a/temp\\src\\java/iu.java"
+++ "b/src\\main\\java/iu.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -24,7 +23,7 @@ public class iu extends di
         return 1.5F;
     }
 
-    public void a(ev ev1, ge ge)
+    public void a(ev ev1, Mob mob)
     {
         ev1.b(1);
     }
diff --git "a/temp\\src\\java/iv.java" "b/src\\main\\java/iv.java"
index 8f2ce49..a164e2f 100644
--- "a/temp\\src\\java/iv.java"
+++ "b/src\\main\\java/iv.java"
@@ -1,9 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.List;
 //import Minecraft;
 
 public class iv extends bh
@@ -24,7 +22,7 @@ public class iv extends bh
     public void a()
     {
         e.clear();
-        e.add(((java.lang.Object) (new fk(0, c / 2 - 100, d / 4 + 120 + 12, "Back to title screen"))));
+        e.add(((Object) (new fk(0, c / 2 - 100, d / 4 + 120 + 12, "Back to title screen"))));
     }
 
     protected void a(fk fk1)
diff --git "a/temp\\src\\java/iw.java" "b/src\\main\\java/iw.java"
index 1c8baba..60f73ee 100644
--- "a/temp\\src\\java/iw.java"
+++ "b/src\\main\\java/iw.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -7,10 +6,10 @@
 public class iw extends nq
 {
 
-    public iw(cn cn, double d, double d1, double d2, 
-            double d3, double d4, double d5, ly ly1)
+    public iw(World world, double d, double d1, double d2,
+              double d3, double d4, double d5, ly ly1)
     {
-        super(cn, d, d1, d2, d3, d4, d5);
+        super(world, d, d1, d2, d3, d4, d5);
         b = ly1.bb;
         h = ly1.bm;
         i = j = k = 0.6F;
diff --git "a/temp\\src\\java/iy.java" "b/src\\main\\java/iy.java"
index c98311d..4117189 100644
--- "a/temp\\src\\java/iy.java"
+++ "b/src\\main\\java/iy.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/iz.java" "b/src\\main\\java/iz.java"
index 7aed785..d90ed98 100644
--- "a/temp\\src\\java/iz.java"
+++ "b/src\\main\\java/iz.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class iz extends hi
 {
 
@@ -19,92 +16,92 @@ public class iz extends hi
         b(true);
     }
 
-    public void a(cn cn1, int j, int k, int l, int i1)
+    public void a(World world1, int j, int k, int l, int i1)
     {
         c = 0;
-        h(cn1, j, k, l);
-        super.a(cn1, j, k, l, i1);
+        h(world1, j, k, l);
+        super.a(world1, j, k, l, i1);
     }
 
-    public void f(cn cn1, int j, int k, int l, int i1)
+    public void f(World world1, int j, int k, int l, int i1)
     {
-        if(cn1.a(j, k, l) != bc)
+        if(world1.a(j, k, l) != bc)
             return;
-        int j1 = cn1.e(j, k, l);
+        int j1 = world1.e(j, k, l);
         if(j1 == 0 || j1 != i1 - 1)
         {
             return;
         } else
         {
-            h(cn1, j, k, l);
+            h(world1, j, k, l);
             return;
         }
     }
 
-    public void h(cn cn1, int j, int k, int l)
+    public void h(World world1, int j, int k, int l)
     {
         if(c++ >= 100)
             return;
-        int i1 = ((int) (cn1.f(j, k - 1, l).a() ? 16 : 0));
-        int j1 = cn1.e(j, k, l);
+        int i1 = ((int) (world1.f(j, k - 1, l).a() ? 16 : 0));
+        int j1 = world1.e(j, k, l);
         if(j1 == 0)
         {
             j1 = 1;
-            cn1.b(j, k, l, 1);
+            world1.b(j, k, l, 1);
         }
-        i1 = g(cn1, j, k - 1, l, i1);
-        i1 = g(cn1, j, k, l - 1, i1);
-        i1 = g(cn1, j, k, l + 1, i1);
-        i1 = g(cn1, j - 1, k, l, i1);
-        i1 = g(cn1, j + 1, k, l, i1);
+        i1 = g(world1, j, k - 1, l, i1);
+        i1 = g(world1, j, k, l - 1, i1);
+        i1 = g(world1, j, k, l + 1, i1);
+        i1 = g(world1, j - 1, k, l, i1);
+        i1 = g(world1, j + 1, k, l, i1);
         int k1 = i1 - 1;
         if(k1 < 10)
             k1 = 1;
         if(k1 != j1)
         {
-            cn1.b(j, k, l, k1);
-            f(cn1, j, k - 1, l, j1);
-            f(cn1, j, k + 1, l, j1);
-            f(cn1, j, k, l - 1, j1);
-            f(cn1, j, k, l + 1, j1);
-            f(cn1, j - 1, k, l, j1);
-            f(cn1, j + 1, k, l, j1);
+            world1.b(j, k, l, k1);
+            f(world1, j, k - 1, l, j1);
+            f(world1, j, k + 1, l, j1);
+            f(world1, j, k, l - 1, j1);
+            f(world1, j, k, l + 1, j1);
+            f(world1, j - 1, k, l, j1);
+            f(world1, j + 1, k, l, j1);
         }
     }
 
-    private int g(cn cn1, int j, int k, int l, int i1)
+    private int g(World world1, int j, int k, int l, int i1)
     {
-        int j1 = cn1.a(j, k, l);
+        int j1 = world1.a(j, k, l);
         if(j1 == ly.K.bc)
             return 16;
         if(j1 == bc)
         {
-            int k1 = cn1.e(j, k, l);
+            int k1 = world1.e(j, k, l);
             if(k1 != 0 && k1 > i1)
                 return k1;
         }
         return i1;
     }
 
-    public void a(cn cn1, int j, int k, int l, java.util.Random random)
+    public void a(World world1, int j, int k, int l, java.util.Random random)
     {
-        int i1 = cn1.e(j, k, l);
+        int i1 = world1.e(j, k, l);
         if(i1 == 0)
         {
             c = 0;
-            h(cn1, j, k, l);
+            h(world1, j, k, l);
         } else
         if(i1 == 1)
-            i(cn1, j, k, l);
+            i(world1, j, k, l);
         else
         if(random.nextInt(10) == 0)
-            h(cn1, j, k, l);
+            h(world1, j, k, l);
     }
 
-    private void i(cn cn1, int j, int k, int l)
+    private void i(World world1, int j, int k, int l)
     {
-        b_(cn1, j, k, l, cn1.e(j, k, l));
-        cn1.d(j, k, l, 0);
+        b_(world1, j, k, l, world1.e(j, k, l));
+        world1.d(j, k, l, 0);
     }
 
     public int a(java.util.Random random)
@@ -128,8 +125,8 @@ public class iz extends hi
         bb = b + (flag ? 0 : 1);
     }
 
-    public void a(cn cn1, int j, int k, int l, kh kh)
+    public void a(World world1, int j, int k, int l, kh kh)
     {
-        super.a(cn1, j, k, l, kh);
+        super.a(world1, j, k, l, kh);
     }
 }
diff --git "a/temp\\src\\java/j.java" "b/src\\main\\java/j.java"
index 0c2e2d1..a9547db 100644
--- "a/temp\\src\\java/j.java"
+++ "b/src\\main\\java/j.java"
@@ -1,12 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.nio.Buffer;
-import java.nio.FloatBuffer;
-import org.lwjgl.opengl.GL11;
-
 public class j extends bt
 {
 
diff --git "a/temp\\src\\java/ja.java" "b/src\\main\\java/ja.java"
index 028e043..6601c5d 100644
--- "a/temp\\src\\java/ja.java"
+++ "b/src\\main\\java/ja.java"
@@ -1,19 +1,16 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.List;
-
 public class ja extends bh
 {
 
     private bh a;
-    private java.lang.String h;
-    private java.lang.String i;
+    private String h;
+    private String i;
     private int j;
 
-    public ja(bh bh1, java.lang.String s, java.lang.String s1, int k)
+    public ja(bh bh1, String s, String s1, int k)
     {
         a = bh1;
         h = s;
@@ -23,8 +20,8 @@ public class ja extends bh
 
     public void a()
     {
-        e.add(((java.lang.Object) (new o(0, (c / 2 - 155) + 0, d / 6 + 96, "Yes"))));
-        e.add(((java.lang.Object) (new o(1, (c / 2 - 155) + 160, d / 6 + 96, "No"))));
+        e.add(((Object) (new o(0, (c / 2 - 155) + 0, d / 6 + 96, "Yes"))));
+        e.add(((Object) (new o(1, (c / 2 - 155) + 160, d / 6 + 96, "No"))));
     }
 
     protected void a(fk fk1)
diff --git "a/temp\\src\\java/jb.java" "b/src\\main\\java/jb.java"
index 4b84fe7..dde5377 100644
--- "a/temp\\src\\java/jb.java"
+++ "b/src\\main\\java/jb.java"
@@ -1,19 +1,16 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class jb extends nq
 {
 
     private float a;
 
-    public jb(cn cn, double d, double d1, double d2, 
-            double d3, double d4, double d5)
+    public jb(World world, double d, double d1, double d2,
+              double d3, double d4, double d5)
     {
-        super(cn, d, d1, d2, d3, d4, d5);
+        super(world, d, d1, d2, d3, d4, d5);
         an = an * 0.0099999997764825821D + d3;
         ao = ao * 0.0099999997764825821D + d4;
         ap = ap * 0.0099999997764825821D + d5;
diff --git "a/temp\\src\\java/je.java" "b/src\\main\\java/je.java"
index 02f6855..be8fbe8 100644
--- "a/temp\\src\\java/je.java"
+++ "b/src\\main\\java/je.java"
@@ -1,13 +1,9 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
 import java.util.ArrayList;
 import java.util.HashSet;
-import java.util.List;
-import java.util.Random;
-import java.util.Set;
 
 public class je
 {
@@ -16,9 +12,9 @@ public class je
     {
     }
 
-    public void a(cn cn1, kh kh1, double d, double d1, double d2, float f)
+    public void a(World world1, kh kh1, double d, double d1, double d2, float f)
     {
-        cn1.a(d, d1, d2, "random.explode", 4F, (1.0F + (cn1.n.nextFloat() - cn1.n.nextFloat()) * 0.2F) * 0.7F);
+        world1.a(d, d1, d2, "random.explode", 4F, (1.0F + (world1.n.nextFloat() - world1.n.nextFloat()) * 0.2F) * 0.7F);
         java.util.HashSet hashset = new HashSet();
         float f1 = f;
         int i = 16;
@@ -38,7 +34,7 @@ label0:
                     d3 /= d6;
                     d4 /= d6;
                     d5 /= d6;
-                    float f2 = f * (0.7F + cn1.n.nextFloat() * 0.6F);
+                    float f2 = f * (0.7F + world1.n.nextFloat() * 0.6F);
                     double d8 = d;
                     double d10 = d1;
                     double d12 = d2;
@@ -50,11 +46,11 @@ label0:
                         int j4 = eo.b(d8);
                         int k4 = eo.b(d10);
                         int l4 = eo.b(d12);
-                        int i5 = cn1.a(j4, k4, l4);
+                        int i5 = world1.a(j4, k4, l4);
                         if(i5 > 0)
                             f2 -= (ly.n[i5].a(kh1) + 0.3F) * f3;
                         if(f2 > 0.0F)
-                            ((java.util.Set) (hashset)).add(((java.lang.Object) (new mt(j4, k4, l4))));
+                            ((java.util.Set) (hashset)).add(((Object) (new mt(j4, k4, l4))));
                         d8 += d3 * (double)f3;
                         d10 += d4 * (double)f3;
                         d12 += d5 * (double)f3;
@@ -73,7 +69,7 @@ label0:
         int l1 = eo.b(d1 + (double)f + 1.0D);
         int i2 = eo.b(d2 - (double)f - 1.0D);
         int j2 = eo.b(d2 + (double)f + 1.0D);
-        java.util.List list = cn1.b(kh1, cf.b(k, k1, i2, i1, l1, j2));
+        java.util.List list = world1.b(kh1, cf.b(k, k1, i2, i1, l1, j2));
         aj aj1 = aj.b(d, d1, d2);
         for(int k2 = 0; k2 < list.size(); k2++)
         {
@@ -88,7 +84,7 @@ label0:
                 d9 /= d15;
                 d11 /= d15;
                 d13 /= d15;
-                double d17 = cn1.a(aj1, kh2.au);
+                double d17 = world1.a(aj1, kh2.au);
                 double d19 = (1.0D - d7) * d17;
                 kh2.a(kh1, (int)(((d19 * d19 + d19) / 2D) * 8D * (double)f + 1.0D));
                 double d21 = d19;
@@ -107,12 +103,12 @@ label0:
             int i3 = mt1.a;
             int j3 = mt1.b;
             int k3 = mt1.c;
-            int l3 = cn1.a(i3, j3, k3);
+            int l3 = world1.a(i3, j3, k3);
             for(int i4 = 0; i4 < 1; i4++)
             {
-                double d14 = (float)i3 + cn1.n.nextFloat();
-                double d16 = (float)j3 + cn1.n.nextFloat();
-                double d18 = (float)k3 + cn1.n.nextFloat();
+                double d14 = (float)i3 + world1.n.nextFloat();
+                double d16 = (float)j3 + world1.n.nextFloat();
+                double d18 = (float)k3 + world1.n.nextFloat();
                 double d20 = d14 - d;
                 double d22 = d16 - d1;
                 double d23 = d18 - d2;
@@ -121,19 +117,19 @@ label0:
                 d22 /= d24;
                 d23 /= d24;
                 double d25 = 0.5D / (d24 / (double)f + 0.10000000000000001D);
-                d25 *= cn1.n.nextFloat() * cn1.n.nextFloat() + 0.3F;
+                d25 *= world1.n.nextFloat() * world1.n.nextFloat() + 0.3F;
                 d20 *= d25;
                 d22 *= d25;
                 d23 *= d25;
-                cn1.a("explode", (d14 + d * 1.0D) / 2D, (d16 + d1 * 1.0D) / 2D, (d18 + d2 * 1.0D) / 2D, d20, d22, d23);
-                cn1.a("smoke", d14, d16, d18, d20, d22, d23);
+                world1.a("explode", (d14 + d * 1.0D) / 2D, (d16 + d1 * 1.0D) / 2D, (d18 + d2 * 1.0D) / 2D, d20, d22, d23);
+                world1.a("smoke", d14, d16, d18, d20, d22, d23);
             }
 
             if(l3 > 0)
             {
-                ly.n[l3].a(cn1, i3, j3, k3, cn1.e(i3, j3, k3), 0.3F);
-                cn1.d(i3, j3, k3, 0);
-                ly.n[l3].c(cn1, i3, j3, k3);
+                ly.n[l3].a(world1, i3, j3, k3, world1.e(i3, j3, k3), 0.3F);
+                world1.d(i3, j3, k3, 0);
+                ly.n[l3].c(world1, i3, j3, k3);
             }
         }
 
diff --git "a/temp\\src\\java/jf.java" "b/src\\main\\java/jf.java"
index 5a53a87..40d491b 100644
--- "a/temp\\src\\java/jf.java"
+++ "b/src\\main\\java/jf.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -25,7 +24,7 @@ public class jf
         d = l;
     }
 
-    public boolean equals(java.lang.Object obj)
+    public boolean equals(Object obj)
     {
         if(obj instanceof jf)
         {
@@ -59,7 +58,7 @@ public class jf
         return g <= jf1.g ? 0 : 1;
     }
 
-    public int compareTo(java.lang.Object obj)
+    public int compareTo(Object obj)
     {
         return a((jf)obj);
     }
diff --git "a/temp\\src\\java/jg.java" "b/src\\main\\java/jg.java"
index 4710ac6..7798400 100644
--- "a/temp\\src\\java/jg.java"
+++ "b/src\\main\\java/jg.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class jg extends di
 {
 
@@ -14,12 +11,12 @@ public class jg extends di
         aT = 1;
     }
 
-    public ev a(ev ev, cn cn1, dm dm1)
+    public ev a(ev ev, World world1, Player player1)
     {
-        if(dm1.b.b(di.j.aS))
+        if(player1.b.b(di.j.aS))
         {
-            cn1.a(((kh) (dm1)), "random.bow", 1.0F, 1.0F / (b.nextFloat() * 0.4F + 0.8F));
-            cn1.a(((kh) (new kg(cn1, ((ge) (dm1))))));
+            world1.a(((kh) (player1)), "random.bow", 1.0F, 1.0F / (b.nextFloat() * 0.4F + 0.8F));
+            world1.a(((kh) (new Arrow(world1, ((Mob) (player1))))));
         }
         return ev;
     }
diff --git "a/temp\\src\\java/jh.java" "b/src\\main\\java/jh.java"
index 8a13d75..d528fab 100644
--- "a/temp\\src\\java/jh.java"
+++ "b/src\\main\\java/jh.java"
@@ -1,10 +1,8 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
 //import Minecraft;
-import org.lwjgl.opengl.GL11;
 
 public class jh
 {
@@ -27,13 +25,13 @@ public class jh
     public void a(ev ev1)
     {
         org.lwjgl.opengl.GL11.glPushMatrix();
-        if(ev1.c < 256 && bc.a(ly.n[ev1.c].f()))
+        if(ev1.id < 256 && bc.a(ly.n[ev1.id].f()))
         {
             org.lwjgl.opengl.GL11.glBindTexture(3553, a.n.a("/terrain.png"));
-            e.a(ly.n[ev1.c]);
+            e.a(ly.n[ev1.id]);
         } else
         {
-            if(ev1.c < 256)
+            if(ev1.id < 256)
                 org.lwjgl.opengl.GL11.glBindTexture(3553, a.n.a("/terrain.png"));
             else
                 org.lwjgl.opengl.GL11.glBindTexture(3553, a.n.a("/gui/items.png"));
@@ -133,24 +131,24 @@ public class jh
         float f1 = d + (c - d) * f;
         bi bi1 = a.g;
         org.lwjgl.opengl.GL11.glPushMatrix();
-        org.lwjgl.opengl.GL11.glRotatef(((dm) (bi1)).at + (((dm) (bi1)).ar - ((dm) (bi1)).at) * f, 1.0F, 0.0F, 0.0F);
-        org.lwjgl.opengl.GL11.glRotatef(((dm) (bi1)).as + (((dm) (bi1)).aq - ((dm) (bi1)).as) * f, 0.0F, 1.0F, 0.0F);
+        org.lwjgl.opengl.GL11.glRotatef(((Player) (bi1)).at + (((Player) (bi1)).ar - ((Player) (bi1)).at) * f, 1.0F, 0.0F, 0.0F);
+        org.lwjgl.opengl.GL11.glRotatef(((Player) (bi1)).as + (((Player) (bi1)).aq - ((Player) (bi1)).as) * f, 0.0F, 1.0F, 0.0F);
         i.b();
         org.lwjgl.opengl.GL11.glPopMatrix();
-        float f2 = a.e.c(eo.b(((dm) (bi1)).ak), eo.b(((dm) (bi1)).al), eo.b(((dm) (bi1)).am));
+        float f2 = a.world.c(eo.b(((Player) (bi1)).ak), eo.b(((Player) (bi1)).al), eo.b(((Player) (bi1)).am));
         org.lwjgl.opengl.GL11.glColor4f(f2, f2, f2, 1.0F);
         if(b != null)
         {
             org.lwjgl.opengl.GL11.glPushMatrix();
             float f3 = 0.8F;
-            float f5 = ((dm) (bi1)).d(f);
+            float f5 = ((Player) (bi1)).d(f);
             float f7 = eo.a(f5 * 3.141593F);
             float f9 = eo.a(eo.c(f5) * 3.141593F);
             org.lwjgl.opengl.GL11.glTranslatef(-f9 * 0.4F, eo.a(eo.c(f5) * 3.141593F * 2.0F) * 0.2F, -f7 * 0.2F);
             org.lwjgl.opengl.GL11.glTranslatef(0.7F * f3, -0.65F * f3 - (1.0F - f1) * 0.6F, -0.9F * f3);
             org.lwjgl.opengl.GL11.glRotatef(45F, 0.0F, 1.0F, 0.0F);
             org.lwjgl.opengl.GL11.glEnable(32826);
-            f5 = ((dm) (bi1)).d(f);
+            f5 = ((Player) (bi1)).d(f);
             f7 = eo.a(f5 * f5 * 3.141593F);
             f9 = eo.a(eo.c(f5) * 3.141593F);
             org.lwjgl.opengl.GL11.glRotatef(-f7 * 20F, 0.0F, 1.0F, 0.0F);
@@ -164,14 +162,14 @@ public class jh
         {
             org.lwjgl.opengl.GL11.glPushMatrix();
             float f4 = 0.8F;
-            float f6 = ((dm) (bi1)).d(f);
+            float f6 = ((Player) (bi1)).d(f);
             float f8 = eo.a(f6 * 3.141593F);
             float f10 = eo.a(eo.c(f6) * 3.141593F);
             org.lwjgl.opengl.GL11.glTranslatef(-f10 * 0.3F, eo.a(eo.c(f6) * 3.141593F * 2.0F) * 0.4F, -f8 * 0.4F);
             org.lwjgl.opengl.GL11.glTranslatef(0.8F * f4, -0.75F * f4 - (1.0F - f1) * 0.6F, -0.9F * f4);
             org.lwjgl.opengl.GL11.glRotatef(45F, 0.0F, 1.0F, 0.0F);
             org.lwjgl.opengl.GL11.glEnable(32826);
-            f6 = ((dm) (bi1)).d(f);
+            f6 = ((Player) (bi1)).d(f);
             f8 = eo.a(f6 * f6 * 3.141593F);
             f10 = eo.a(eo.c(f6) * 3.141593F);
             org.lwjgl.opengl.GL11.glRotatef(f10 * 70F, 0.0F, 1.0F, 0.0F);
@@ -210,7 +208,7 @@ public class jh
             int j1 = eo.b(a.g.am);
             int k1 = a.n.a("/terrain.png");
             org.lwjgl.opengl.GL11.glBindTexture(3553, k1);
-            int l1 = a.e.a(k, i1, j1);
+            int l1 = a.world.a(k, i1, j1);
             if(ly.n[l1] != null)
                 a(f, ly.n[l1].a(2));
         }
@@ -318,7 +316,7 @@ public class jh
     {
         d = c;
         bi bi1 = a.g;
-        ev ev1 = ((dm) (bi1)).b.a();
+        ev ev1 = ((Player) (bi1)).b.a();
         ev ev2 = ev1;
         float f = 0.4F;
         float f1 = ev2 != b ? 0.0F : 1.0F;
diff --git "a/temp\\src\\java/ji.java" "b/src\\main\\java/ji.java"
index 0cbdb3a..98fb4b1 100644
--- "a/temp\\src\\java/ji.java"
+++ "b/src\\main\\java/ji.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
 import java.io.IOException;
 
 public class ji extends fn
diff --git "a/temp\\src\\java/jj.java" "b/src\\main\\java/jj.java"
index 76adb33..424c667 100644
--- "a/temp\\src\\java/jj.java"
+++ "b/src\\main\\java/jj.java"
@@ -1,15 +1,12 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.awt.image.BufferedImage;
-
 public class jj
 {
 
     public java.awt.image.BufferedImage a;
-    public cn b;
+    public World b;
     public int c;
     public int d;
     public boolean e;
@@ -17,13 +14,13 @@ public class jj
     public int g;
     public boolean h;
 
-    public jj(cn cn, int i, int j)
+    public jj(World world, int i, int j)
     {
         e = false;
         f = false;
         g = 0;
         h = false;
-        b = cn;
+        b = world;
         a(i, j);
     }
 
@@ -36,9 +33,9 @@ public class jj
         h = false;
     }
 
-    public void a(cn cn, int i, int j)
+    public void a(World world, int i, int j)
     {
-        b = cn;
+        b = world;
         a(i, j);
     }
 }
diff --git "a/temp\\src\\java/jk.java" "b/src\\main\\java/jk.java"
index 75e8285..c958f78 100644
--- "a/temp\\src\\java/jk.java"
+++ "b/src\\main\\java/jk.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/jl.java" "b/src\\main\\java/jl.java"
index 817eb29..59e48d8 100644
--- "a/temp\\src\\java/jl.java"
+++ "b/src\\main\\java/jl.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
 import java.io.IOException;
 
 public class jl extends fn
diff --git "a/temp\\src\\java/jm.java" "b/src\\main\\java/jm.java"
index 64df2ec..021bd0e 100644
--- "a/temp\\src\\java/jm.java"
+++ "b/src\\main\\java/jm.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class jm extends ly
 {
 
@@ -17,63 +14,63 @@ public class jm extends ly
         b(true);
     }
 
-    public void a(cn cn1, int i, int j, int k, java.util.Random random)
+    public void a(World world1, int i, int j, int k, java.util.Random random)
     {
-        if(cn1.a(i, j + 1, k) == 0)
+        if(world1.a(i, j + 1, k) == 0)
         {
             int l;
-            for(l = 1; cn1.a(i, j - l, k) == bc; l++);
+            for(l = 1; world1.a(i, j - l, k) == bc; l++);
             if(l < 3)
             {
-                int i1 = cn1.e(i, j, k);
+                int i1 = world1.e(i, j, k);
                 if(i1 == 15)
                 {
-                    cn1.d(i, j + 1, k, bc);
-                    cn1.b(i, j, k, 0);
+                    world1.d(i, j + 1, k, bc);
+                    world1.b(i, j, k, 0);
                 } else
                 {
-                    cn1.b(i, j, k, i1 + 1);
+                    world1.b(i, j, k, i1 + 1);
                 }
             }
         }
     }
 
-    public boolean a(cn cn1, int i, int j, int k)
+    public boolean a(World world1, int i, int j, int k)
     {
-        int l = cn1.a(i, j - 1, k);
+        int l = world1.a(i, j - 1, k);
         if(l == bc)
             return true;
         if(l != ly.v.bc && l != ly.w.bc)
             return false;
-        if(cn1.f(i - 1, j - 1, k) == gb.f)
+        if(world1.f(i - 1, j - 1, k) == gb.f)
             return true;
-        if(cn1.f(i + 1, j - 1, k) == gb.f)
+        if(world1.f(i + 1, j - 1, k) == gb.f)
             return true;
-        if(cn1.f(i, j - 1, k - 1) == gb.f)
+        if(world1.f(i, j - 1, k - 1) == gb.f)
             return true;
-        return cn1.f(i, j - 1, k + 1) == gb.f;
+        return world1.f(i, j - 1, k + 1) == gb.f;
     }
 
-    public void a(cn cn1, int i, int j, int k, int l)
+    public void a(World world1, int i, int j, int k, int l)
     {
-        h(cn1, i, j, k);
+        h(world1, i, j, k);
     }
 
-    protected final void h(cn cn1, int i, int j, int k)
+    protected final void h(World world1, int i, int j, int k)
     {
-        if(!g(cn1, i, j, k))
+        if(!g(world1, i, j, k))
         {
-            b_(cn1, i, j, k, cn1.e(i, j, k));
-            cn1.d(i, j, k, 0);
+            b_(world1, i, j, k, world1.e(i, j, k));
+            world1.d(i, j, k, 0);
         }
     }
 
-    public boolean g(cn cn1, int i, int j, int k)
+    public boolean g(World world1, int i, int j, int k)
     {
-        return a(cn1, i, j, k);
+        return a(world1, i, j, k);
     }
 
-    public cf d(cn cn1, int i, int j, int k)
+    public cf d(World world1, int i, int j, int k)
     {
         return null;
     }
diff --git "a/temp\\src\\java/jn.java" "b/src\\main\\java/jn.java"
index cdcea8f..0f93f6e 100644
--- "a/temp\\src\\java/jn.java"
+++ "b/src\\main\\java/jn.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -15,15 +14,15 @@ public class jn extends di
         a = j;
     }
 
-    public boolean a(ev ev1, dm dm, cn cn1, int i, int j, int k, int l)
+    public boolean a(ev ev1, Player player, World world1, int i, int j, int k, int l)
     {
         if(l != 1)
             return false;
-        int i1 = cn1.a(i, j, k);
+        int i1 = world1.a(i, j, k);
         if(i1 == ly.aB.bc)
         {
-            cn1.d(i, j + 1, k, a);
-            ev1.a--;
+            world1.d(i, j + 1, k, a);
+            ev1.count--;
             return true;
         } else
         {
diff --git "a/temp\\src\\java/jo.java" "b/src\\main\\java/jo.java"
index 19593ef..7e0d8b5 100644
--- "a/temp\\src\\java/jo.java"
+++ "b/src\\main\\java/jo.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -16,13 +15,13 @@ public class jo extends di
         a = j;
     }
 
-    public boolean a(ev ev1, dm dm, cn cn1, int i, int j, int k, int l)
+    public boolean a(ev ev1, Player player, World world1, int i, int j, int k, int l)
     {
-        int i1 = cn1.a(i, j, k);
+        int i1 = world1.a(i, j, k);
         if(i1 == ly.aH.bc)
         {
-            cn1.a(((kh) (new oc(cn1, (float)i + 0.5F, (float)j + 0.5F, (float)k + 0.5F, a))));
-            ev1.a--;
+            world1.a(((kh) (new Minecart(world1, (float)i + 0.5F, (float)j + 0.5F, (float)k + 0.5F, a))));
+            ev1.count--;
             return true;
         } else
         {
diff --git "a/temp\\src\\java/jp.java" "b/src\\main\\java/jp.java"
index 093540b..6160da5 100644
--- "a/temp\\src\\java/jp.java"
+++ "b/src\\main\\java/jp.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public abstract class jp extends ly
 {
 
@@ -38,12 +35,12 @@ public abstract class jp extends ly
             return bb + 1;
     }
 
-    protected int h(cn cn1, int k, int l, int i1)
+    protected int h(World world1, int k, int l, int i1)
     {
-        if(cn1.f(k, l, i1) != bn)
+        if(world1.f(k, l, i1) != bn)
             return -1;
         else
-            return cn1.e(k, l, i1);
+            return world1.e(k, l, i1);
     }
 
     protected int b(nm nm1, int k, int l, int i1)
@@ -84,7 +81,7 @@ public abstract class jp extends ly
             return super.c(nm1, k, l, i1, j1);
     }
 
-    public cf d(cn cn1, int k, int l, int i1)
+    public cf d(World world1, int k, int l, int i1)
     {
         return null;
     }
@@ -167,9 +164,9 @@ public abstract class jp extends ly
         return aj1;
     }
 
-    public void a(cn cn1, int k, int l, int i1, kh kh, aj aj1)
+    public void a(World world1, int k, int l, int i1, kh kh, aj aj1)
     {
-        aj aj2 = e(((nm) (cn1)), k, l, i1);
+        aj aj2 = e(((nm) (world1)), k, l, i1);
         aj1.a += aj2.a;
         aj1.b += aj2.b;
         aj1.c += aj2.c;
@@ -189,9 +186,9 @@ public abstract class jp extends ly
         return f1 <= f2 ? f2 : f1;
     }
 
-    public void a(cn cn1, int k, int l, int i1, java.util.Random random)
+    public void a(World world1, int k, int l, int i1, java.util.Random random)
     {
-        super.a(cn1, k, l, i1, random);
+        super.a(world1, k, l, i1, random);
     }
 
     public int g()
@@ -199,20 +196,20 @@ public abstract class jp extends ly
         return bn != gb.f ? 0 : 1;
     }
 
-    public void b(cn cn1, int k, int l, int i1, java.util.Random random)
+    public void b(World world1, int k, int l, int i1, java.util.Random random)
     {
         if(bn == gb.f && random.nextInt(64) == 0)
         {
-            int j1 = cn1.e(k, l, i1);
+            int j1 = world1.e(k, l, i1);
             if(j1 > 0 && j1 < 8)
-                cn1.a((float)k + 0.5F, (float)l + 0.5F, (float)i1 + 0.5F, "liquid.water", random.nextFloat() * 0.25F + 0.75F, random.nextFloat() * 1.0F + 0.5F);
+                world1.a((float)k + 0.5F, (float)l + 0.5F, (float)i1 + 0.5F, "liquid.water", random.nextFloat() * 0.25F + 0.75F, random.nextFloat() * 1.0F + 0.5F);
         }
-        if(bn == gb.g && cn1.f(k, l + 1, i1) == gb.a && !cn1.g(k, l + 1, i1) && random.nextInt(100) == 0)
+        if(bn == gb.g && world1.f(k, l + 1, i1) == gb.a && !world1.g(k, l + 1, i1) && random.nextInt(100) == 0)
         {
             double d1 = (float)k + random.nextFloat();
             double d2 = (double)l + bj;
             double d3 = (float)i1 + random.nextFloat();
-            cn1.a("lava", d1, d2, d3, 0.0D, 0.0D, 0.0D);
+            world1.a("lava", d1, d2, d3, 0.0D, 0.0D, 0.0D);
         }
     }
 
@@ -229,51 +226,51 @@ public abstract class jp extends ly
             return java.lang.Math.atan2(aj1.c, aj1.a) - 1.5707963267948966D;
     }
 
-    public void e(cn cn1, int k, int l, int i1)
+    public void e(World world1, int k, int l, int i1)
     {
-        j(cn1, k, l, i1);
+        j(world1, k, l, i1);
     }
 
-    public void a(cn cn1, int k, int l, int i1, int j1)
+    public void a(World world1, int k, int l, int i1, int j1)
     {
-        j(cn1, k, l, i1);
+        j(world1, k, l, i1);
     }
 
-    private void j(cn cn1, int k, int l, int i1)
+    private void j(World world1, int k, int l, int i1)
     {
-        if(cn1.a(k, l, i1) != bc)
+        if(world1.a(k, l, i1) != bc)
             return;
         if(bn == gb.g)
         {
             boolean flag = false;
-            if(flag || cn1.f(k, l, i1 - 1) == gb.f)
+            if(flag || world1.f(k, l, i1 - 1) == gb.f)
                 flag = true;
-            if(flag || cn1.f(k, l, i1 + 1) == gb.f)
+            if(flag || world1.f(k, l, i1 + 1) == gb.f)
                 flag = true;
-            if(flag || cn1.f(k - 1, l, i1) == gb.f)
+            if(flag || world1.f(k - 1, l, i1) == gb.f)
                 flag = true;
-            if(flag || cn1.f(k + 1, l, i1) == gb.f)
+            if(flag || world1.f(k + 1, l, i1) == gb.f)
                 flag = true;
-            if(flag || cn1.f(k, l + 1, i1) == gb.f)
+            if(flag || world1.f(k, l + 1, i1) == gb.f)
                 flag = true;
             if(flag)
             {
-                int j1 = cn1.e(k, l, i1);
+                int j1 = world1.e(k, l, i1);
                 if(j1 == 0)
-                    cn1.d(k, l, i1, ly.aq.bc);
+                    world1.d(k, l, i1, ly.aq.bc);
                 else
                 if(j1 <= 4)
-                    cn1.d(k, l, i1, ly.x.bc);
-                i(cn1, k, l, i1);
+                    world1.d(k, l, i1, ly.x.bc);
+                i(world1, k, l, i1);
             }
         }
     }
 
-    protected void i(cn cn1, int k, int l, int i1)
+    protected void i(World world1, int k, int l, int i1)
     {
-        cn1.a((float)k + 0.5F, (float)l + 0.5F, (float)i1 + 0.5F, "random.fizz", 0.5F, 2.6F + (cn1.n.nextFloat() - cn1.n.nextFloat()) * 0.8F);
+        world1.a((float)k + 0.5F, (float)l + 0.5F, (float)i1 + 0.5F, "random.fizz", 0.5F, 2.6F + (world1.n.nextFloat() - world1.n.nextFloat()) * 0.8F);
         for(int j1 = 0; j1 < 8; j1++)
-            cn1.a("largesmoke", (double)k + java.lang.Math.random(), (double)l + 1.2D, (double)i1 + java.lang.Math.random(), 0.0D, 0.0D, 0.0D);
+            world1.a("largesmoke", (double)k + java.lang.Math.random(), (double)l + 1.2D, (double)i1 + java.lang.Math.random(), 0.0D, 0.0D, 0.0D);
 
     }
 }
diff --git "a/temp\\src\\java/jq.java" "b/src\\main\\java/jq.java"
index 35b593c..9f260d1 100644
--- "a/temp\\src\\java/jq.java"
+++ "b/src\\main\\java/jq.java"
@@ -1,16 +1,14 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.List;
 //import Minecraft;
 
 public class jq extends bh
 {
 
     protected bh a;
-    protected java.lang.String h;
+    protected String h;
     private boolean i;
 
     public jq(bh bh1)
@@ -25,32 +23,32 @@ public class jq extends bh
         java.io.File file = Minecraft.b();
         for(int k = 0; k < 5; k++)
         {
-            hm hm1 = cn.a(file, (new StringBuilder()).append("World").append(k + 1).toString());
-            if(hm1 == null)
+            TagCompound tagCompound1 = World.a(file, (new StringBuilder()).append("World").append(k + 1).toString());
+            if(tagCompound1 == null)
             {
-                e.add(((java.lang.Object) (new fk(k, c / 2 - 100, d / 6 + 24 * k, "- empty -"))));
+                e.add(((Object) (new fk(k, c / 2 - 100, d / 6 + 24 * k, "- empty -"))));
             } else
             {
-                java.lang.String s = (new StringBuilder()).append("World ").append(k + 1).toString();
-                long l = hm1.f("SizeOnDisk");
+                String s = (new StringBuilder()).append("World ").append(k + 1).toString();
+                long l = tagCompound1.getLong("SizeOnDisk");
                 s = (new StringBuilder()).append(s).append(" (").append((float)(((l / 1024L) * 100L) / 1024L) / 100F).append(" MB)").toString();
-                e.add(((java.lang.Object) (new fk(k, c / 2 - 100, d / 6 + 24 * k, s))));
+                e.add(((Object) (new fk(k, c / 2 - 100, d / 6 + 24 * k, s))));
             }
         }
 
         j();
     }
 
-    protected java.lang.String d(int k)
+    protected String d(int k)
     {
         java.io.File file = Minecraft.b();
-        return cn.a(file, (new StringBuilder()).append("World").append(k).toString()) == null ? null : (new StringBuilder()).append("World").append(k).toString();
+        return World.a(file, (new StringBuilder()).append("World").append(k).toString()) == null ? null : (new StringBuilder()).append("World").append(k).toString();
     }
 
     public void j()
     {
-        e.add(((java.lang.Object) (new fk(5, c / 2 - 100, d / 6 + 120 + 12, "Delete world..."))));
-        e.add(((java.lang.Object) (new fk(6, c / 2 - 100, d / 6 + 168, "Cancel"))));
+        e.add(((Object) (new fk(5, c / 2 - 100, d / 6 + 120 + 12, "Delete world..."))));
+        e.add(((Object) (new fk(6, c / 2 - 100, d / 6 + 168, "Cancel"))));
     }
 
     protected void a(fk fk1)
diff --git "a/temp\\src\\java/jr.java" "b/src\\main\\java/jr.java"
index 1603872..130aa49 100644
--- "a/temp\\src\\java/jr.java"
+++ "b/src\\main\\java/jr.java"
@@ -1,12 +1,8 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.awt.Graphics;
 import java.awt.image.BufferedImage;
-import java.awt.image.DataBufferInt;
-import java.awt.image.WritableRaster;
 
 public class jr
     implements hb
diff --git "a/temp\\src\\java/jt.java" "b/src\\main\\java/jt.java"
index a2fba88..aab2a90 100644
--- "a/temp\\src\\java/jt.java"
+++ "b/src\\main\\java/jt.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -18,16 +17,16 @@ public abstract class jt extends ly
         super(i, j, gb);
     }
 
-    public void e(cn cn1, int i, int j, int k)
+    public void e(World world1, int i, int j, int k)
     {
-        super.e(cn1, i, j, k);
-        cn1.a(i, j, k, a_());
+        super.e(world1, i, j, k);
+        world1.a(i, j, k, a_());
     }
 
-    public void b(cn cn1, int i, int j, int k)
+    public void b(World world1, int i, int j, int k)
     {
-        super.b(cn1, i, j, k);
-        cn1.l(i, j, k);
+        super.b(world1, i, j, k);
+        world1.l(i, j, k);
     }
 
     protected abstract ic a_();
diff --git "a/temp\\src\\java/ju.java" "b/src\\main\\java/ju.java"
index b1310a6..5ac82e1 100644
--- "a/temp\\src\\java/ju.java"
+++ "b/src\\main\\java/ju.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
 import java.io.IOException;
 
 public class ju extends fn
diff --git "a/temp\\src\\java/jv.java" "b/src\\main\\java/jv.java"
index 5a4c971..2059fa2 100644
--- "a/temp\\src\\java/jv.java"
+++ "b/src\\main\\java/jv.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class jv extends ly
 {
 
diff --git "a/temp\\src\\java/jw.java" "b/src\\main\\java/jw.java"
index e8cc2c4..339ff27 100644
--- "a/temp\\src\\java/jw.java"
+++ "b/src\\main\\java/jw.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -14,21 +13,21 @@ public class jw extends di
         aU = 64;
     }
 
-    public void b(ev ev1, ge ge)
+    public void b(ev ev1, Mob mob)
     {
-        if(ge instanceof mv)
+        if(mob instanceof Pig)
         {
-            mv mv1 = (mv)ge;
-            if(!mv1.a)
+            Pig pig1 = (Pig) mob;
+            if(!pig1.saddle)
             {
-                mv1.a = true;
-                ev1.a--;
+                pig1.saddle = true;
+                ev1.count--;
             }
         }
     }
 
-    public void a(ev ev1, ge ge)
+    public void a(ev ev1, Mob mob)
     {
-        b(ev1, ge);
+        b(ev1, mob);
     }
 }
diff --git "a/temp\\src\\java/jx.java" "b/src\\main\\java/jx.java"
index dbc2025..895f285 100644
--- "a/temp\\src\\java/jx.java"
+++ "b/src\\main\\java/jx.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
 import java.io.IOException;
 
 public class jx extends lq
diff --git "a/temp\\src\\java/jy.java" "b/src\\main\\java/jy.java"
index b9a1439..d9e0f5e 100644
--- "a/temp\\src\\java/jy.java"
+++ "b/src\\main\\java/jy.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/jz.java" "b/src\\main\\java/jz.java"
index 5e7d531..c1f9875 100644
--- "a/temp\\src\\java/jz.java"
+++ "b/src\\main\\java/jz.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/k.java" "b/src\\main\\java/k.java"
index e1457e9..0d757b4 100644
--- "a/temp\\src\\java/k.java"
+++ "b/src\\main\\java/k.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 class k extends az
 {
 
@@ -16,11 +13,11 @@ class k extends az
         a = ia1;
     }
 
-    protected mt a(cn cn1, int i, int j)
+    protected mt a(World world1, int i, int j)
     {
-        int l = i + cn1.n.nextInt(16);
-        int i1 = cn1.n.nextInt(cn1.n.nextInt(120) + 8);
-        int j1 = j + cn1.n.nextInt(16);
+        int l = i + world1.n.nextInt(16);
+        int i1 = world1.n.nextInt(world1.n.nextInt(120) + 8);
+        int j1 = j + world1.n.nextInt(16);
         return new mt(l, i1, j1);
     }
 }
diff --git "a/temp\\src\\java/ka.java" "b/src\\main\\java/ka.java"
index 86c13af..1ea4c85 100644
--- "a/temp\\src\\java/ka.java"
+++ "b/src\\main\\java/ka.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
 import java.io.IOException;
 
 public class ka extends fn
diff --git "a/temp\\src\\java/kb.java" "b/src\\main\\java/kb.java"
index 9abad21..653aad4 100644
--- "a/temp\\src\\java/kb.java"
+++ "b/src\\main\\java/kb.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/kc.java" "b/src\\main\\java/kc.java"
index e305c42..0997487 100644
--- "a/temp\\src\\java/kc.java"
+++ "b/src\\main\\java/kc.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 class kc
 {
 
diff --git "a/temp\\src\\java/kd.java" "b/src\\main\\java/kd.java"
index 864586c..1177f9a 100644
--- "a/temp\\src\\java/kd.java"
+++ "b/src\\main\\java/kd.java"
@@ -1,14 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.awt.image.BufferedImage;
-import java.io.IOException;
-import java.nio.IntBuffer;
-import javax.imageio.ImageIO;
-import org.lwjgl.opengl.GL11;
-
 public class kd
 {
 
@@ -17,7 +10,7 @@ public class kd
     private int c;
     private java.nio.IntBuffer d;
 
-    public kd(fr fr1, java.lang.String s, ey ey1)
+    public kd(fr fr1, String s, ey ey1)
     {
         b = new int[256];
         a = 0;
@@ -115,18 +108,18 @@ public class kd
 
     }
 
-    public void a(java.lang.String s, int i, int j, int k)
+    public void a(String s, int i, int j, int k)
     {
         a(s, i + 1, j + 1, k, true);
         b(s, i, j, k);
     }
 
-    public void b(java.lang.String s, int i, int j, int k)
+    public void b(String s, int i, int j, int k)
     {
         a(s, i, j, k, false);
     }
 
-    public void a(java.lang.String s, int i, int j, int k, boolean flag)
+    public void a(String s, int i, int j, int k, boolean flag)
     {
         if(s == null)
             return;
@@ -179,7 +172,7 @@ public class kd
         org.lwjgl.opengl.GL11.glPopMatrix();
     }
 
-    public int a(java.lang.String s)
+    public int a(String s)
     {
         if(s == null)
             return 0;
diff --git "a/temp\\src\\java/kf.java" "b/src\\main\\java/kf.java"
index e16941b..2ab27c7 100644
--- "a/temp\\src\\java/kf.java"
+++ "b/src\\main\\java/kf.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class kf extends ly
 {
 
@@ -22,7 +19,7 @@ public class kf extends ly
         return bb + (k <= 0 ? 0 : 16);
     }
 
-    public cf d(cn cn1, int j, int k, int l)
+    public cf d(World world1, int j, int k, int l)
     {
         return null;
     }
@@ -42,17 +39,17 @@ public class kf extends ly
         return 5;
     }
 
-    public boolean a(cn cn1, int j, int k, int l)
+    public boolean a(World world1, int j, int k, int l)
     {
-        return cn1.g(j, k - 1, l);
+        return world1.g(j, k - 1, l);
     }
 
-    private void h(cn cn1, int j, int k, int l)
+    private void h(World world1, int j, int k, int l)
     {
-        int i1 = cn1.e(j, k, l);
+        int i1 = world1.e(j, k, l);
         int j1 = 0;
         a = false;
-        boolean flag = cn1.o(j, k, l);
+        boolean flag = world1.o(j, k, l);
         a = true;
         if(flag)
         {
@@ -71,14 +68,14 @@ public class kf extends ly
                     k2--;
                 if(k1 == 3)
                     k2++;
-                j1 = g(cn1, i2, k, k2, j1);
-                if(cn1.g(i2, k, k2) && !cn1.g(j, k + 1, l))
+                j1 = g(world1, i2, k, k2, j1);
+                if(world1.g(i2, k, k2) && !world1.g(j, k + 1, l))
                 {
-                    j1 = g(cn1, i2, k + 1, k2, j1);
+                    j1 = g(world1, i2, k + 1, k2, j1);
                     continue;
                 }
-                if(!cn1.g(i2, k, k2))
-                    j1 = g(cn1, i2, k - 1, k2, j1);
+                if(!world1.g(i2, k, k2))
+                    j1 = g(world1, i2, k - 1, k2, j1);
             }
 
             if(j1 > 0)
@@ -88,8 +85,8 @@ public class kf extends ly
         }
         if(i1 != j1)
         {
-            cn1.b(j, k, l, j1);
-            cn1.b(j, k, l, j, k, l);
+            world1.b(j, k, l, j1);
+            world1.b(j, k, l, j, k, l);
             if(j1 > 0)
                 j1--;
             for(int l1 = 0; l1 < 4; l1++)
@@ -105,127 +102,127 @@ public class kf extends ly
                     l2--;
                 if(l1 == 3)
                     l2++;
-                if(cn1.g(j2, k, l2))
+                if(world1.g(j2, k, l2))
                     i3 += 2;
-                int j3 = g(cn1, j2, k, l2, -1);
+                int j3 = g(world1, j2, k, l2, -1);
                 if(j3 >= 0 && j3 != j1)
-                    h(cn1, j2, k, l2);
-                j3 = g(cn1, j2, i3, l2, -1);
+                    h(world1, j2, k, l2);
+                j3 = g(world1, j2, i3, l2, -1);
                 if(j3 >= 0 && j3 != j1)
-                    h(cn1, j2, i3, l2);
+                    h(world1, j2, i3, l2);
             }
 
             if(i1 == 0 || j1 == 0)
             {
-                cn1.g(j, k, l, bc);
-                cn1.g(j - 1, k, l, bc);
-                cn1.g(j + 1, k, l, bc);
-                cn1.g(j, k, l - 1, bc);
-                cn1.g(j, k, l + 1, bc);
-                cn1.g(j, k - 1, l, bc);
-                cn1.g(j, k + 1, l, bc);
+                world1.g(j, k, l, bc);
+                world1.g(j - 1, k, l, bc);
+                world1.g(j + 1, k, l, bc);
+                world1.g(j, k, l - 1, bc);
+                world1.g(j, k, l + 1, bc);
+                world1.g(j, k - 1, l, bc);
+                world1.g(j, k + 1, l, bc);
             }
         }
     }
 
-    private void i(cn cn1, int j, int k, int l)
+    private void i(World world1, int j, int k, int l)
     {
-        if(cn1.a(j, k, l) != bc)
+        if(world1.a(j, k, l) != bc)
         {
             return;
         } else
         {
-            cn1.g(j, k, l, bc);
-            cn1.g(j - 1, k, l, bc);
-            cn1.g(j + 1, k, l, bc);
-            cn1.g(j, k, l - 1, bc);
-            cn1.g(j, k, l + 1, bc);
-            cn1.g(j, k - 1, l, bc);
-            cn1.g(j, k + 1, l, bc);
+            world1.g(j, k, l, bc);
+            world1.g(j - 1, k, l, bc);
+            world1.g(j + 1, k, l, bc);
+            world1.g(j, k, l - 1, bc);
+            world1.g(j, k, l + 1, bc);
+            world1.g(j, k - 1, l, bc);
+            world1.g(j, k + 1, l, bc);
             return;
         }
     }
 
-    public void e(cn cn1, int j, int k, int l)
+    public void e(World world1, int j, int k, int l)
     {
-        super.e(cn1, j, k, l);
-        h(cn1, j, k, l);
-        cn1.g(j, k + 1, l, bc);
-        cn1.g(j, k - 1, l, bc);
-        i(cn1, j - 1, k, l);
-        i(cn1, j + 1, k, l);
-        i(cn1, j, k, l - 1);
-        i(cn1, j, k, l + 1);
-        if(cn1.g(j - 1, k, l))
-            i(cn1, j - 1, k + 1, l);
+        super.e(world1, j, k, l);
+        h(world1, j, k, l);
+        world1.g(j, k + 1, l, bc);
+        world1.g(j, k - 1, l, bc);
+        i(world1, j - 1, k, l);
+        i(world1, j + 1, k, l);
+        i(world1, j, k, l - 1);
+        i(world1, j, k, l + 1);
+        if(world1.g(j - 1, k, l))
+            i(world1, j - 1, k + 1, l);
         else
-            i(cn1, j - 1, k - 1, l);
-        if(cn1.g(j + 1, k, l))
-            i(cn1, j + 1, k + 1, l);
+            i(world1, j - 1, k - 1, l);
+        if(world1.g(j + 1, k, l))
+            i(world1, j + 1, k + 1, l);
         else
-            i(cn1, j + 1, k - 1, l);
-        if(cn1.g(j, k, l - 1))
-            i(cn1, j, k + 1, l - 1);
+            i(world1, j + 1, k - 1, l);
+        if(world1.g(j, k, l - 1))
+            i(world1, j, k + 1, l - 1);
         else
-            i(cn1, j, k - 1, l - 1);
-        if(cn1.g(j, k, l + 1))
-            i(cn1, j, k + 1, l + 1);
+            i(world1, j, k - 1, l - 1);
+        if(world1.g(j, k, l + 1))
+            i(world1, j, k + 1, l + 1);
         else
-            i(cn1, j, k - 1, l + 1);
+            i(world1, j, k - 1, l + 1);
     }
 
-    public void b(cn cn1, int j, int k, int l)
+    public void b(World world1, int j, int k, int l)
     {
-        super.b(cn1, j, k, l);
-        cn1.g(j, k + 1, l, bc);
-        cn1.g(j, k - 1, l, bc);
-        h(cn1, j, k, l);
-        i(cn1, j - 1, k, l);
-        i(cn1, j + 1, k, l);
-        i(cn1, j, k, l - 1);
-        i(cn1, j, k, l + 1);
-        if(cn1.g(j - 1, k, l))
-            i(cn1, j - 1, k + 1, l);
+        super.b(world1, j, k, l);
+        world1.g(j, k + 1, l, bc);
+        world1.g(j, k - 1, l, bc);
+        h(world1, j, k, l);
+        i(world1, j - 1, k, l);
+        i(world1, j + 1, k, l);
+        i(world1, j, k, l - 1);
+        i(world1, j, k, l + 1);
+        if(world1.g(j - 1, k, l))
+            i(world1, j - 1, k + 1, l);
         else
-            i(cn1, j - 1, k - 1, l);
-        if(cn1.g(j + 1, k, l))
-            i(cn1, j + 1, k + 1, l);
+            i(world1, j - 1, k - 1, l);
+        if(world1.g(j + 1, k, l))
+            i(world1, j + 1, k + 1, l);
         else
-            i(cn1, j + 1, k - 1, l);
-        if(cn1.g(j, k, l - 1))
-            i(cn1, j, k + 1, l - 1);
+            i(world1, j + 1, k - 1, l);
+        if(world1.g(j, k, l - 1))
+            i(world1, j, k + 1, l - 1);
         else
-            i(cn1, j, k - 1, l - 1);
-        if(cn1.g(j, k, l + 1))
-            i(cn1, j, k + 1, l + 1);
+            i(world1, j, k - 1, l - 1);
+        if(world1.g(j, k, l + 1))
+            i(world1, j, k + 1, l + 1);
         else
-            i(cn1, j, k - 1, l + 1);
+            i(world1, j, k - 1, l + 1);
     }
 
-    private int g(cn cn1, int j, int k, int l, int i1)
+    private int g(World world1, int j, int k, int l, int i1)
     {
-        if(cn1.a(j, k, l) != bc)
+        if(world1.a(j, k, l) != bc)
             return i1;
-        int j1 = cn1.e(j, k, l);
+        int j1 = world1.e(j, k, l);
         if(j1 > i1)
             return j1;
         else
             return i1;
     }
 
-    public void a(cn cn1, int j, int k, int l, int i1)
+    public void a(World world1, int j, int k, int l, int i1)
     {
-        int j1 = cn1.e(j, k, l);
-        boolean flag = a(cn1, j, k, l);
+        int j1 = world1.e(j, k, l);
+        boolean flag = a(world1, j, k, l);
         if(!flag)
         {
-            b_(cn1, j, k, l, j1);
-            cn1.d(j, k, l, 0);
+            b_(world1, j, k, l, j1);
+            world1.d(j, k, l, 0);
         } else
         {
-            h(cn1, j, k, l);
+            h(world1, j, k, l);
         }
-        super.a(cn1, j, k, l, i1);
+        super.a(world1, j, k, l, i1);
     }
 
     public int a(int j, java.util.Random random)
@@ -233,12 +230,12 @@ public class kf extends ly
         return di.aA.aS;
     }
 
-    public boolean c(cn cn1, int j, int k, int l, int i1)
+    public boolean c(World world1, int j, int k, int l, int i1)
     {
         if(!a)
             return false;
         else
-            return b(((nm) (cn1)), j, k, l, i1);
+            return b(((nm) (world1)), j, k, l, i1);
     }
 
     public boolean b(nm nm1, int j, int k, int l, int i1)
@@ -280,14 +277,14 @@ public class kf extends ly
         return a;
     }
 
-    public void b(cn cn1, int j, int k, int l, java.util.Random random)
+    public void b(World world1, int j, int k, int l, java.util.Random random)
     {
-        if(cn1.e(j, k, l) > 0)
+        if(world1.e(j, k, l) > 0)
         {
             double d1 = (double)j + 0.5D + ((double)random.nextFloat() - 0.5D) * 0.20000000000000001D;
             double d2 = (float)k + 0.0625F;
             double d3 = (double)l + 0.5D + ((double)random.nextFloat() - 0.5D) * 0.20000000000000001D;
-            cn1.a("reddust", d1, d2, d3, 0.0D, 0.0D, 0.0D);
+            world1.a("reddust", d1, d2, d3, 0.0D, 0.0D, 0.0D);
         }
     }
 
diff --git "a/temp\\src\\java/kh.java" "b/src\\main\\java/kh.java"
index b9b2bfa..75f3a60 100644
--- "a/temp\\src\\java/kh.java"
+++ "b/src\\main\\java/kh.java"
@@ -1,9 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.List;
 import java.util.Random;
 
 public abstract class kh
@@ -15,7 +13,7 @@ public abstract class kh
     public boolean ad;
     public kh ae;
     public kh af;
-    protected cn ag;
+    protected World ag;
     public double ah;
     public double ai;
     public double aj;
@@ -61,7 +59,7 @@ public abstract class kh
     public int aW;
     public int aX;
     private boolean c;
-    public java.lang.String aY;
+    public String aY;
     private double d;
     private double e;
     public boolean aZ;
@@ -72,7 +70,7 @@ public abstract class kh
     public int be;
     public int bf;
 
-    public kh(cn cn1)
+    public kh(World world1)
     {
         ab = a++;
         ac = 1.0D;
@@ -104,11 +102,11 @@ public abstract class kh
         aX = 300;
         c = true;
         aZ = false;
-        ag = cn1;
+        ag = world1;
         a(0.0D, 0.0D, 0.0D);
     }
 
-    public boolean equals(java.lang.Object obj)
+    public boolean equals(Object obj)
     {
         if(obj instanceof kh)
             return ((kh)obj).ab == ab;
@@ -528,9 +526,9 @@ public abstract class kh
         return ag.c(i, j, k);
     }
 
-    public void a(cn cn1)
+    public void a(World world1)
     {
-        ag = cn1;
+        ag = world1;
     }
 
     public void b(double d1, double d2, double d3, float f1, 
@@ -593,7 +591,7 @@ public abstract class kh
         return d1 * d1 + d2 * d2 + d3 * d3;
     }
 
-    public void b(dm dm)
+    public void b(Player player)
     {
     }
 
@@ -665,100 +663,100 @@ public abstract class kh
         return d1 < d2 * d2;
     }
 
-    public java.lang.String x()
+    public String x()
     {
         return null;
     }
 
-    public boolean c(hm hm1)
+    public boolean c(TagCompound tagCompound1)
     {
-        java.lang.String s1 = H();
+        String s1 = H();
         if(aA || s1 == null)
         {
             return false;
         } else
         {
-            hm1.a("id", s1);
-            d(hm1);
+            tagCompound1.set("id", s1);
+            d(tagCompound1);
             return true;
         }
     }
 
-    public void d(hm hm1)
+    public void d(TagCompound tagCompound1)
     {
-        hm1.a("Pos", ((el) (a(new double[] {
+        tagCompound1.set("Pos", ((Tag) (a(new double[] {
             ak, al, am
         }))));
-        hm1.a("Motion", ((el) (a(new double[] {
+        tagCompound1.set("Motion", ((Tag) (a(new double[] {
             an, ao, ap
         }))));
-        hm1.a("Rotation", ((el) (a(new float[] {
+        tagCompound1.set("Rotation", ((Tag) (a(new float[] {
             aq, ar
         }))));
-        hm1.a("FallDistance", aH);
-        hm1.a("Fire", (short)aT);
-        hm1.a("Air", (short)aX);
-        hm1.a("OnGround", av);
-        a(hm1);
+        tagCompound1.set("FallDistance", aH);
+        tagCompound1.set("Fire", (short)aT);
+        tagCompound1.set("Air", (short)aX);
+        tagCompound1.set("OnGround", av);
+        a(tagCompound1);
     }
 
-    public void e(hm hm1)
+    public void e(TagCompound tagCompound1)
     {
-        ki ki1 = hm1.l("Pos");
-        ki ki2 = hm1.l("Motion");
-        ki ki3 = hm1.l("Rotation");
+        TagList tagList1 = tagCompound1.l("Pos");
+        TagList tagList2 = tagCompound1.l("Motion");
+        TagList tagList3 = tagCompound1.l("Rotation");
         a(0.0D, 0.0D, 0.0D);
-        an = ((kr)ki2.a(0)).a;
-        ao = ((kr)ki2.a(1)).a;
-        ap = ((kr)ki2.a(2)).a;
-        ah = aI = ak = ((kr)ki1.a(0)).a;
-        ai = aJ = al = ((kr)ki1.a(1)).a;
-        aj = aK = am = ((kr)ki1.a(2)).a;
-        as = aq = ((f)ki3.a(0)).a;
-        at = ar = ((f)ki3.a(1)).a;
-        aH = hm1.g("FallDistance");
-        aT = ((int) (hm1.d("Fire")));
-        aX = ((int) (hm1.d("Air")));
-        av = hm1.m("OnGround");
+        an = ((TagDouble) tagList2.a(0)).a;
+        ao = ((TagDouble) tagList2.a(1)).a;
+        ap = ((TagDouble) tagList2.a(2)).a;
+        ah = aI = ak = ((TagDouble) tagList1.a(0)).a;
+        ai = aJ = al = ((TagDouble) tagList1.a(1)).a;
+        aj = aK = am = ((TagDouble) tagList1.a(2)).a;
+        as = aq = ((TagFloat) tagList3.a(0)).a;
+        at = ar = ((TagFloat) tagList3.a(1)).a;
+        aH = tagCompound1.getFloat("FallDistance");
+        aT = ((int) (tagCompound1.getShort("Fire")));
+        aX = ((int) (tagCompound1.getShort("Air")));
+        av = tagCompound1.isTrueByte("OnGround");
         a(ak, al, am);
-        b(hm1);
+        b(tagCompound1);
     }
 
-    protected final java.lang.String H()
+    protected final String H()
     {
         return ew.b(this);
     }
 
-    protected abstract void b(hm hm1);
+    protected abstract void b(TagCompound tagCompound1);
 
-    protected abstract void a(hm hm1);
+    protected abstract void a(TagCompound tagCompound1);
 
-    protected ki a(double ad1[])
+    protected TagList a(double ad1[])
     {
-        ki ki1 = new ki();
+        TagList tagList1 = new TagList();
         double ad2[] = ad1;
         int i = ad2.length;
         for(int j = 0; j < i; j++)
         {
             double d1 = ad2[j];
-            ki1.a(((el) (new kr(d1))));
+            tagList1.a(((Tag) (new TagDouble(d1))));
         }
 
-        return ki1;
+        return tagList1;
     }
 
-    protected ki a(float af1[])
+    protected TagList a(float af1[])
     {
-        ki ki1 = new ki();
+        TagList tagList1 = new TagList();
         float af2[] = af1;
         int i = af2.length;
         for(int j = 0; j < i; j++)
         {
             float f1 = af2[j];
-            ki1.a(((el) (new f(f1))));
+            tagList1.a(((Tag) (new TagFloat(f1))));
         }
 
-        return ki1;
+        return tagList1;
     }
 
     public float h_()
@@ -766,17 +764,17 @@ public abstract class kh
         return aD / 2.0F;
     }
 
-    public dx b(int i, int j)
+    public Item b(int i, int j)
     {
         return a(i, j, 0.0F);
     }
 
-    public dx a(int i, int j, float f1)
+    public Item a(int i, int j, float f1)
     {
-        dx dx1 = new dx(ag, ak, al + (double)f1, am, new ev(i, j));
-        dx1.c = 10;
-        ag.a(((kh) (dx1)));
-        return dx1;
+        Item item1 = new Item(ag, ak, al + (double)f1, am, new ev(i, j));
+        item1.c = 10;
+        ag.a(((kh) (item1)));
+        return item1;
     }
 
     public boolean B()
@@ -792,7 +790,7 @@ public abstract class kh
         return ag.g(i, j, k);
     }
 
-    public boolean a(dm dm)
+    public boolean a(Player player)
     {
         return false;
     }
diff --git "a/temp\\src\\java/kj.java" "b/src\\main\\java/kj.java"
index 2aa4fc7..6f07e02 100644
--- "a/temp\\src\\java/kj.java"
+++ "b/src\\main\\java/kj.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
 import java.io.IOException;
 
 public class kj extends fn
diff --git "a/temp\\src\\java/kk.java" "b/src\\main\\java/kk.java"
index 81a5bc5..9d1d8cb 100644
--- "a/temp\\src\\java/kk.java"
+++ "b/src\\main\\java/kk.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -155,7 +154,7 @@ public class kk extends cy
 
     }
 
-    protected void a(cn cn, int i, int j, int k, int l, byte abyte0[])
+    protected void a(World world, int i, int j, int k, int l, byte abyte0[])
     {
         int i1 = b.nextInt(b.nextInt(b.nextInt(40) + 1) + 1);
         if(b.nextInt(15) != 0)
diff --git "a/temp\\src\\java/kl.java" "b/src\\main\\java/kl.java"
index 548ef6c..0d35771 100644
--- "a/temp\\src\\java/kl.java"
+++ "b/src\\main\\java/kl.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/km.java" "b/src\\main\\java/km.java"
index 94d31d2..1fc92dc 100644
--- "a/temp\\src\\java/km.java"
+++ "b/src\\main\\java/km.java"
@@ -1,11 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.ArrayList;
-import java.util.Random;
-
 public class km extends ly
 {
 
@@ -40,128 +36,128 @@ public class km extends ly
         return super.c(nm, k, l, i1, j1);
     }
 
-    public void a(cn cn1, int k, int l, int i1, cf cf, java.util.ArrayList arraylist)
+    public void a(World world1, int k, int l, int i1, cf cf, java.util.ArrayList arraylist)
     {
-        int j1 = cn1.e(k, l, i1);
+        int j1 = world1.e(k, l, i1);
         if(j1 == 0)
         {
             a(0.0F, 0.0F, 0.0F, 0.5F, 0.5F, 1.0F);
-            super.a(cn1, k, l, i1, cf, arraylist);
+            super.a(world1, k, l, i1, cf, arraylist);
             a(0.5F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
-            super.a(cn1, k, l, i1, cf, arraylist);
+            super.a(world1, k, l, i1, cf, arraylist);
         } else
         if(j1 == 1)
         {
             a(0.0F, 0.0F, 0.0F, 0.5F, 1.0F, 1.0F);
-            super.a(cn1, k, l, i1, cf, arraylist);
+            super.a(world1, k, l, i1, cf, arraylist);
             a(0.5F, 0.0F, 0.0F, 1.0F, 0.5F, 1.0F);
-            super.a(cn1, k, l, i1, cf, arraylist);
+            super.a(world1, k, l, i1, cf, arraylist);
         } else
         if(j1 == 2)
         {
             a(0.0F, 0.0F, 0.0F, 1.0F, 0.5F, 0.5F);
-            super.a(cn1, k, l, i1, cf, arraylist);
+            super.a(world1, k, l, i1, cf, arraylist);
             a(0.0F, 0.0F, 0.5F, 1.0F, 1.0F, 1.0F);
-            super.a(cn1, k, l, i1, cf, arraylist);
+            super.a(world1, k, l, i1, cf, arraylist);
         } else
         if(j1 == 3)
         {
             a(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 0.5F);
-            super.a(cn1, k, l, i1, cf, arraylist);
+            super.a(world1, k, l, i1, cf, arraylist);
             a(0.0F, 0.0F, 0.5F, 1.0F, 0.5F, 1.0F);
-            super.a(cn1, k, l, i1, cf, arraylist);
+            super.a(world1, k, l, i1, cf, arraylist);
         }
         a(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
     }
 
-    public void a(cn cn1, int k, int l, int i1, int j1)
+    public void a(World world1, int k, int l, int i1, int j1)
     {
-        if(cn1.y)
+        if(world1.y)
             return;
-        if(cn1.f(k, l + 1, i1).a())
+        if(world1.f(k, l + 1, i1).a())
         {
-            cn1.d(k, l, i1, a.bc);
+            world1.d(k, l, i1, a.bc);
         } else
         {
-            h(cn1, k, l, i1);
-            h(cn1, k + 1, l - 1, i1);
-            h(cn1, k - 1, l - 1, i1);
-            h(cn1, k, l - 1, i1 - 1);
-            h(cn1, k, l - 1, i1 + 1);
-            h(cn1, k + 1, l + 1, i1);
-            h(cn1, k - 1, l + 1, i1);
-            h(cn1, k, l + 1, i1 - 1);
-            h(cn1, k, l + 1, i1 + 1);
+            h(world1, k, l, i1);
+            h(world1, k + 1, l - 1, i1);
+            h(world1, k - 1, l - 1, i1);
+            h(world1, k, l - 1, i1 - 1);
+            h(world1, k, l - 1, i1 + 1);
+            h(world1, k + 1, l + 1, i1);
+            h(world1, k - 1, l + 1, i1);
+            h(world1, k, l + 1, i1 - 1);
+            h(world1, k, l + 1, i1 + 1);
         }
-        a.a(cn1, k, l, i1, j1);
+        a.a(world1, k, l, i1, j1);
     }
 
-    private void h(cn cn1, int k, int l, int i1)
+    private void h(World world1, int k, int l, int i1)
     {
-        if(!j(cn1, k, l, i1))
+        if(!j(world1, k, l, i1))
             return;
         byte byte0 = -1;
-        if(j(cn1, k + 1, l + 1, i1))
+        if(j(world1, k + 1, l + 1, i1))
             byte0 = 0;
-        if(j(cn1, k - 1, l + 1, i1))
+        if(j(world1, k - 1, l + 1, i1))
             byte0 = 1;
-        if(j(cn1, k, l + 1, i1 + 1))
+        if(j(world1, k, l + 1, i1 + 1))
             byte0 = 2;
-        if(j(cn1, k, l + 1, i1 - 1))
+        if(j(world1, k, l + 1, i1 - 1))
             byte0 = 3;
         if(byte0 < 0)
         {
-            if(i(cn1, k + 1, l, i1) && !i(cn1, k - 1, l, i1))
+            if(i(world1, k + 1, l, i1) && !i(world1, k - 1, l, i1))
                 byte0 = 0;
-            if(i(cn1, k - 1, l, i1) && !i(cn1, k + 1, l, i1))
+            if(i(world1, k - 1, l, i1) && !i(world1, k + 1, l, i1))
                 byte0 = 1;
-            if(i(cn1, k, l, i1 + 1) && !i(cn1, k, l, i1 - 1))
+            if(i(world1, k, l, i1 + 1) && !i(world1, k, l, i1 - 1))
                 byte0 = 2;
-            if(i(cn1, k, l, i1 - 1) && !i(cn1, k, l, i1 + 1))
+            if(i(world1, k, l, i1 - 1) && !i(world1, k, l, i1 + 1))
                 byte0 = 3;
         }
         if(byte0 < 0)
         {
-            if(j(cn1, k - 1, l - 1, i1))
+            if(j(world1, k - 1, l - 1, i1))
                 byte0 = 0;
-            if(j(cn1, k + 1, l - 1, i1))
+            if(j(world1, k + 1, l - 1, i1))
                 byte0 = 1;
-            if(j(cn1, k, l - 1, i1 - 1))
+            if(j(world1, k, l - 1, i1 - 1))
                 byte0 = 2;
-            if(j(cn1, k, l - 1, i1 + 1))
+            if(j(world1, k, l - 1, i1 + 1))
                 byte0 = 3;
         }
         if(byte0 >= 0)
-            cn1.b(k, l, i1, ((int) (byte0)));
+            world1.b(k, l, i1, ((int) (byte0)));
     }
 
-    private boolean i(cn cn1, int k, int l, int i1)
+    private boolean i(World world1, int k, int l, int i1)
     {
-        return cn1.f(k, l, i1).a();
+        return world1.f(k, l, i1).a();
     }
 
-    private boolean j(cn cn1, int k, int l, int i1)
+    private boolean j(World world1, int k, int l, int i1)
     {
-        int j1 = cn1.a(k, l, i1);
+        int j1 = world1.a(k, l, i1);
         if(j1 == 0)
             return false;
         else
             return ly.n[j1].f() == 10;
     }
 
-    public void b(cn cn1, int k, int l, int i1, java.util.Random random)
+    public void b(World world1, int k, int l, int i1, java.util.Random random)
     {
-        a.b(cn1, k, l, i1, random);
+        a.b(world1, k, l, i1, random);
     }
 
-    public void b(cn cn1, int k, int l, int i1, dm dm)
+    public void b(World world1, int k, int l, int i1, Player player)
     {
-        a.b(cn1, k, l, i1, dm);
+        a.b(world1, k, l, i1, player);
     }
 
-    public void b(cn cn1, int k, int l, int i1, int j1)
+    public void b(World world1, int k, int l, int i1, int j1)
     {
-        a.b(cn1, k, l, i1, j1);
+        a.b(world1, k, l, i1, j1);
     }
 
     public float c(nm nm, int k, int l, int i1)
@@ -209,14 +205,14 @@ public class km extends ly
         return a.a();
     }
 
-    public cf f(cn cn1, int k, int l, int i1)
+    public cf f(World world1, int k, int l, int i1)
     {
-        return a.f(cn1, k, l, i1);
+        return a.f(world1, k, l, i1);
     }
 
-    public void a(cn cn1, int k, int l, int i1, kh kh, aj aj)
+    public void a(World world1, int k, int l, int i1, kh kh, aj aj)
     {
-        a.a(cn1, k, l, i1, kh, aj);
+        a.a(world1, k, l, i1, kh, aj);
     }
 
     public boolean h()
@@ -229,49 +225,49 @@ public class km extends ly
         return a.a(k, flag);
     }
 
-    public boolean a(cn cn1, int k, int l, int i1)
+    public boolean a(World world1, int k, int l, int i1)
     {
-        return a.a(cn1, k, l, i1);
+        return a.a(world1, k, l, i1);
     }
 
-    public void e(cn cn1, int k, int l, int i1)
+    public void e(World world1, int k, int l, int i1)
     {
-        a(cn1, k, l, i1, 0);
-        a.e(cn1, k, l, i1);
+        a(world1, k, l, i1, 0);
+        a.e(world1, k, l, i1);
     }
 
-    public void b(cn cn1, int k, int l, int i1)
+    public void b(World world1, int k, int l, int i1)
     {
-        a.b(cn1, k, l, i1);
+        a.b(world1, k, l, i1);
     }
 
-    public void a(cn cn1, int k, int l, int i1, int j1, float f1)
+    public void a(World world1, int k, int l, int i1, int j1, float f1)
     {
-        a.a(cn1, k, l, i1, j1, f1);
+        a.a(world1, k, l, i1, j1, f1);
     }
 
-    public void b_(cn cn1, int k, int l, int i1, int j1)
+    public void b_(World world1, int k, int l, int i1, int j1)
     {
-        a.b_(cn1, k, l, i1, j1);
+        a.b_(world1, k, l, i1, j1);
     }
 
-    public void a(cn cn1, int k, int l, int i1, kh kh)
+    public void a(World world1, int k, int l, int i1, kh kh)
     {
-        a.a(cn1, k, l, i1, kh);
+        a.a(world1, k, l, i1, kh);
     }
 
-    public void a(cn cn1, int k, int l, int i1, java.util.Random random)
+    public void a(World world1, int k, int l, int i1, java.util.Random random)
     {
-        a.a(cn1, k, l, i1, random);
+        a.a(world1, k, l, i1, random);
     }
 
-    public boolean a(cn cn1, int k, int l, int i1, dm dm)
+    public boolean a(World world1, int k, int l, int i1, Player player)
     {
-        return a.a(cn1, k, l, i1, dm);
+        return a.a(world1, k, l, i1, player);
     }
 
-    public void c(cn cn1, int k, int l, int i1)
+    public void c(World world1, int k, int l, int i1)
     {
-        a.c(cn1, k, l, i1);
+        a.c(world1, k, l, i1);
     }
 }
diff --git "a/temp\\src\\java/kn.java" "b/src\\main\\java/kn.java"
index ea7d921..9bc5f70 100644
--- "a/temp\\src\\java/kn.java"
+++ "b/src\\main\\java/kn.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -26,7 +25,7 @@ public class kn
         g = j1;
     }
 
-    public void a(cn cn1)
+    public void a(World world1)
     {
         int i = e - b;
         int j = f - c;
@@ -38,22 +37,22 @@ public class kn
         {
             for(int j1 = d; j1 <= g; j1++)
             {
-                if(!cn1.d(i1, 0, j1))
+                if(!world1.d(i1, 0, j1))
                     continue;
                 for(int k1 = c; k1 <= f; k1++)
                 {
                     if(k1 < 0 || k1 >= 128)
                         continue;
-                    int l1 = cn1.a(a, i1, k1, j1);
+                    int l1 = world1.a(a, i1, k1, j1);
                     int i2 = 0;
-                    int j2 = cn1.a(i1, k1, j1);
+                    int j2 = world1.a(i1, k1, j1);
                     int k2 = ly.r[j2];
                     if(k2 == 0)
                         k2 = 1;
                     int l2 = 0;
                     if(a == by.a)
                     {
-                        if(cn1.k(i1, k1, j1))
+                        if(world1.k(i1, k1, j1))
                             l2 = 15;
                     } else
                     if(a == by.b)
@@ -63,12 +62,12 @@ public class kn
                         i2 = 0;
                     } else
                     {
-                        int i3 = cn1.a(a, i1 - 1, k1, j1);
-                        int k3 = cn1.a(a, i1 + 1, k1, j1);
-                        int l3 = cn1.a(a, i1, k1 - 1, j1);
-                        int i4 = cn1.a(a, i1, k1 + 1, j1);
-                        int j4 = cn1.a(a, i1, k1, j1 - 1);
-                        int k4 = cn1.a(a, i1, k1, j1 + 1);
+                        int i3 = world1.a(a, i1 - 1, k1, j1);
+                        int k3 = world1.a(a, i1 + 1, k1, j1);
+                        int l3 = world1.a(a, i1, k1 - 1, j1);
+                        int i4 = world1.a(a, i1, k1 + 1, j1);
+                        int j4 = world1.a(a, i1, k1, j1 - 1);
+                        int k4 = world1.a(a, i1, k1, j1 + 1);
                         i2 = i3;
                         if(k3 > i2)
                             i2 = k3;
@@ -88,19 +87,19 @@ public class kn
                     }
                     if(l1 == i2)
                         continue;
-                    cn1.b(a, i1, k1, j1, i2);
+                    world1.b(a, i1, k1, j1, i2);
                     int j3 = i2 - 1;
                     if(j3 < 0)
                         j3 = 0;
-                    cn1.a(a, i1 - 1, k1, j1, j3);
-                    cn1.a(a, i1, k1 - 1, j1, j3);
-                    cn1.a(a, i1, k1, j1 - 1, j3);
+                    world1.a(a, i1 - 1, k1, j1, j3);
+                    world1.a(a, i1, k1 - 1, j1, j3);
+                    world1.a(a, i1, k1, j1 - 1, j3);
                     if(i1 + 1 >= e)
-                        cn1.a(a, i1 + 1, k1, j1, j3);
+                        world1.a(a, i1 + 1, k1, j1, j3);
                     if(k1 + 1 >= f)
-                        cn1.a(a, i1, k1 + 1, j1, j3);
+                        world1.a(a, i1, k1 + 1, j1, j3);
                     if(j1 + 1 >= g)
-                        cn1.a(a, i1, k1, j1 + 1, j3);
+                        world1.a(a, i1, k1, j1 + 1, j3);
                 }
 
             }
diff --git "a/temp\\src\\java/ko.java" "b/src\\main\\java/ko.java"
index 78480b8..ef179ff 100644
--- "a/temp\\src\\java/ko.java"
+++ "b/src\\main\\java/ko.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -7,10 +6,10 @@
 public class ko
 {
 
-    public java.lang.String a;
+    public String a;
     public int b;
 
-    public ko(java.lang.String s)
+    public ko(String s)
     {
         a = s;
         b = 0;
diff --git "a/temp\\src\\java/kp.java" "b/src\\main\\java/kp.java"
index 38f2d26..9f08b12 100644
--- "a/temp\\src\\java/kp.java"
+++ "b/src\\main\\java/kp.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
 import java.io.IOException;
 
 public class kp extends lq
diff --git "a/temp\\src\\java/kq.java" "b/src\\main\\java/kq.java"
index eb51736..bc7b01f 100644
--- "a/temp\\src\\java/kq.java"
+++ "b/src\\main\\java/kq.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -7,10 +6,10 @@
 public class kq extends nf
 {
 
-    public kq(cn cn, double d, double d1, double d2, 
-            double d3, double d4, double d5)
+    public kq(World world, double d, double d1, double d2,
+              double d3, double d4, double d5)
     {
-        super(cn, d, d1, d2);
+        super(world, d, d1, d2);
         h = 0.04F;
         b++;
         if(d4 == 0.0D && (d3 != 0.0D || d5 != 0.0D))
diff --git "a/temp\\src\\java/ks.java" "b/src\\main\\java/ks.java"
index 081c4e7..7a35cba 100644
--- "a/temp\\src\\java/ks.java"
+++ "b/src\\main\\java/ks.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/kt.java" "b/src\\main\\java/kt.java"
index ec2fe16..ef77293 100644
--- "a/temp\\src\\java/kt.java"
+++ "b/src\\main\\java/kt.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import org.lwjgl.opengl.GL11;
-
 public class kt extends ak
 {
 
@@ -16,20 +13,20 @@ public class kt extends ak
         d = ((fo) (new hj()));
     }
 
-    public void a(oc oc1, double d1, double d2, double d3, 
-            float f, float f1)
+    public void a(Minecart minecart1, double d1, double d2, double d3,
+                  float f, float f1)
     {
         org.lwjgl.opengl.GL11.glPushMatrix();
-        double d4 = oc1.aI + (oc1.ak - oc1.aI) * (double)f1;
-        double d5 = oc1.aJ + (oc1.al - oc1.aJ) * (double)f1;
-        double d6 = oc1.aK + (oc1.am - oc1.aK) * (double)f1;
+        double d4 = minecart1.aI + (minecart1.ak - minecart1.aI) * (double)f1;
+        double d5 = minecart1.aJ + (minecart1.al - minecart1.aJ) * (double)f1;
+        double d6 = minecart1.aK + (minecart1.am - minecart1.aK) * (double)f1;
         double d7 = 0.30000001192092896D;
-        aj aj1 = oc1.g(d4, d5, d6);
-        float f2 = oc1.at + (oc1.ar - oc1.at) * f1;
+        aj aj1 = minecart1.g(d4, d5, d6);
+        float f2 = minecart1.at + (minecart1.ar - minecart1.at) * f1;
         if(aj1 != null)
         {
-            aj aj2 = oc1.a(d4, d5, d6, d7);
-            aj aj3 = oc1.a(d4, d5, d6, -d7);
+            aj aj2 = minecart1.a(d4, d5, d6, d7);
+            aj aj3 = minecart1.a(d4, d5, d6, -d7);
             if(aj2 == null)
                 aj2 = aj1;
             if(aj3 == null)
@@ -48,23 +45,23 @@ public class kt extends ak
         org.lwjgl.opengl.GL11.glTranslatef((float)d1, (float)d2, (float)d3);
         org.lwjgl.opengl.GL11.glRotatef(180F - f, 0.0F, 1.0F, 0.0F);
         org.lwjgl.opengl.GL11.glRotatef(-f2, 0.0F, 0.0F, 1.0F);
-        float f3 = (float)oc1.b - f1;
-        float f4 = (float)oc1.a - f1;
+        float f3 = (float) minecart1.b - f1;
+        float f4 = (float) minecart1.a - f1;
         if(f4 < 0.0F)
             f4 = 0.0F;
         if(f3 > 0.0F)
-            org.lwjgl.opengl.GL11.glRotatef(((eo.a(f3) * f3 * f4) / 10F) * (float)oc1.c, 1.0F, 0.0F, 0.0F);
-        if(oc1.d != 0)
+            org.lwjgl.opengl.GL11.glRotatef(((eo.a(f3) * f3 * f4) / 10F) * (float) minecart1.c, 1.0F, 0.0F, 0.0F);
+        if(minecart1.type != 0)
         {
             a("/terrain.png");
             float f5 = 0.75F;
             org.lwjgl.opengl.GL11.glScalef(f5, f5, f5);
             org.lwjgl.opengl.GL11.glTranslatef(0.0F, 0.3125F, 0.0F);
             org.lwjgl.opengl.GL11.glRotatef(90F, 0.0F, 1.0F, 0.0F);
-            if(oc1.d == 1)
+            if(minecart1.type == 1)
                 (new bc()).a(ly.av);
             else
-            if(oc1.d == 2)
+            if(minecart1.type == 2)
                 (new bc()).a(ly.aC);
             org.lwjgl.opengl.GL11.glRotatef(-90F, 0.0F, 1.0F, 0.0F);
             org.lwjgl.opengl.GL11.glTranslatef(0.0F, -0.3125F, 0.0F);
@@ -78,6 +75,6 @@ public class kt extends ak
 
     public void a(kh kh, double d1, double d2, double d3, float f, float f1)
     {
-        a((oc)kh, d1, d2, d3, f, f1);
+        a((Minecart)kh, d1, d2, d3, f, f1);
     }
 }
diff --git "a/temp\\src\\java/ku.java" "b/src\\main\\java/ku.java"
index 750c228..72c3426 100644
--- "a/temp\\src\\java/ku.java"
+++ "b/src\\main\\java/ku.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class ku extends jt
 {
 
@@ -22,18 +19,18 @@ public class ku extends jt
         return ly.aC.bc;
     }
 
-    public void e(cn cn1, int i, int j, int k)
+    public void e(World world1, int i, int j, int k)
     {
-        super.e(cn1, i, j, k);
-        h(cn1, i, j, k);
+        super.e(world1, i, j, k);
+        h(world1, i, j, k);
     }
 
-    private void h(cn cn1, int i, int j, int k)
+    private void h(World world1, int i, int j, int k)
     {
-        int l = cn1.a(i, j, k - 1);
-        int i1 = cn1.a(i, j, k + 1);
-        int j1 = cn1.a(i - 1, j, k);
-        int k1 = cn1.a(i + 1, j, k);
+        int l = world1.a(i, j, k - 1);
+        int i1 = world1.a(i, j, k + 1);
+        int j1 = world1.a(i - 1, j, k);
+        int k1 = world1.a(i + 1, j, k);
         byte byte0 = 3;
         if(ly.p[l] && !ly.p[i1])
             byte0 = 3;
@@ -43,7 +40,7 @@ public class ku extends jt
             byte0 = 5;
         if(ly.p[k1] && !ly.p[j1])
             byte0 = 4;
-        cn1.b(i, j, k, ((int) (byte0)));
+        world1.b(i, j, k, ((int) (byte0)));
     }
 
     public int a(nm nm1, int i, int j, int k, int l)
@@ -61,11 +58,11 @@ public class ku extends jt
             return bb - 1;
     }
 
-    public void b(cn cn1, int i, int j, int k, java.util.Random random)
+    public void b(World world1, int i, int j, int k, java.util.Random random)
     {
         if(!a)
             return;
-        int l = cn1.e(i, j, k);
+        int l = world1.e(i, j, k);
         float f = (float)i + 0.5F;
         float f1 = (float)j + 0.0F + (random.nextFloat() * 6F) / 16F;
         float f2 = (float)k + 0.5F;
@@ -73,23 +70,23 @@ public class ku extends jt
         float f4 = random.nextFloat() * 0.6F - 0.3F;
         if(l == 4)
         {
-            cn1.a("smoke", f - f3, f1, f2 + f4, 0.0D, 0.0D, 0.0D);
-            cn1.a("flame", f - f3, f1, f2 + f4, 0.0D, 0.0D, 0.0D);
+            world1.a("smoke", f - f3, f1, f2 + f4, 0.0D, 0.0D, 0.0D);
+            world1.a("flame", f - f3, f1, f2 + f4, 0.0D, 0.0D, 0.0D);
         } else
         if(l == 5)
         {
-            cn1.a("smoke", f + f3, f1, f2 + f4, 0.0D, 0.0D, 0.0D);
-            cn1.a("flame", f + f3, f1, f2 + f4, 0.0D, 0.0D, 0.0D);
+            world1.a("smoke", f + f3, f1, f2 + f4, 0.0D, 0.0D, 0.0D);
+            world1.a("flame", f + f3, f1, f2 + f4, 0.0D, 0.0D, 0.0D);
         } else
         if(l == 2)
         {
-            cn1.a("smoke", f + f4, f1, f2 - f3, 0.0D, 0.0D, 0.0D);
-            cn1.a("flame", f + f4, f1, f2 - f3, 0.0D, 0.0D, 0.0D);
+            world1.a("smoke", f + f4, f1, f2 - f3, 0.0D, 0.0D, 0.0D);
+            world1.a("flame", f + f4, f1, f2 - f3, 0.0D, 0.0D, 0.0D);
         } else
         if(l == 3)
         {
-            cn1.a("smoke", f + f4, f1, f2 + f3, 0.0D, 0.0D, 0.0D);
-            cn1.a("flame", f + f4, f1, f2 + f3, 0.0D, 0.0D, 0.0D);
+            world1.a("smoke", f + f4, f1, f2 + f3, 0.0D, 0.0D, 0.0D);
+            world1.a("flame", f + f4, f1, f2 + f3, 0.0D, 0.0D, 0.0D);
         }
     }
 
@@ -105,27 +102,27 @@ public class ku extends jt
             return bb;
     }
 
-    public boolean a(cn cn1, int i, int j, int k, dm dm1)
+    public boolean a(World world1, int i, int j, int k, Player player1)
     {
-        ke ke1 = (ke)cn1.b(i, j, k);
-        dm1.a(ke1);
+        Furnace furnace1 = (Furnace) world1.b(i, j, k);
+        player1.a(furnace1);
         return true;
     }
 
-    public static void a(boolean flag, cn cn1, int i, int j, int k)
+    public static void a(boolean flag, World world1, int i, int j, int k)
     {
-        int l = cn1.e(i, j, k);
-        ic ic = cn1.b(i, j, k);
+        int l = world1.e(i, j, k);
+        ic ic = world1.b(i, j, k);
         if(flag)
-            cn1.d(i, j, k, ly.aD.bc);
+            world1.d(i, j, k, ly.aD.bc);
         else
-            cn1.d(i, j, k, ly.aC.bc);
-        cn1.b(i, j, k, l);
-        cn1.a(i, j, k, ic);
+            world1.d(i, j, k, ly.aC.bc);
+        world1.b(i, j, k, l);
+        world1.a(i, j, k, ic);
     }
 
     protected ic a_()
     {
-        return ((ic) (new ke()));
+        return ((ic) (new Furnace()));
     }
 }
diff --git "a/temp\\src\\java/kv.java" "b/src\\main\\java/kv.java"
index 4d7fdb0..e0972d3 100644
--- "a/temp\\src\\java/kv.java"
+++ "b/src\\main\\java/kv.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/kw.java" "b/src\\main\\java/kw.java"
index 4277203..d6e4575 100644
--- "a/temp\\src\\java/kw.java"
+++ "b/src\\main\\java/kw.java"
@@ -1,11 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.nio.IntBuffer;
-import org.lwjgl.opengl.GL11;
-
 public class kw
 {
 
diff --git "a/temp\\src\\java/kx.java" "b/src\\main\\java/kx.java"
index 8d01cc7..44f2eb8 100644
--- "a/temp\\src\\java/kx.java"
+++ "b/src\\main\\java/kx.java"
@@ -1,13 +1,8 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Collection;
 import java.util.HashMap;
-import java.util.Iterator;
-import java.util.Map;
-import org.lwjgl.opengl.GL11;
 
 public class kx
 {
@@ -20,8 +15,8 @@ public class kx
     public static double d;
     public ey e;
     public jh f;
-    public cn g;
-    public dm h;
+    public World g;
+    public Player h;
     public float i;
     public float j;
     public fr k;
@@ -32,27 +27,27 @@ public class kx
     private kx()
     {
         o = ((java.util.Map) (new HashMap()));
-        o.put(ax.class, ((java.lang.Object) (new ok())));
-        o.put(mv.class, ((java.lang.Object) (new gm(((fo) (new ca())), ((fo) (new ca(0.5F))), 0.7F))));
-        o.put(bo.class, ((java.lang.Object) (new ns(((fo) (new gx())), ((fo) (new bx())), 0.7F))));
-        o.put(am.class, ((java.lang.Object) (new mc(((fo) (new dv())), 0.7F))));
-        o.put(mz.class, ((java.lang.Object) (new eq(((fo) (new kv())), 0.3F))));
-        o.put(dd.class, ((java.lang.Object) (new d())));
-        o.put(cw.class, ((java.lang.Object) (new dn(((fo) (new fv())), 0.5F))));
-        o.put(mb.class, ((java.lang.Object) (new dn(((fo) (new cb())), 0.5F))));
-        o.put(ma.class, ((java.lang.Object) (new gq(((fo) (new hh(16))), ((fo) (new hh(0))), 0.25F))));
-        o.put(dm.class, ((java.lang.Object) (new bu())));
-        o.put(hl.class, ((java.lang.Object) (new nz(((fo) (new cb())), 0.5F, 6F))));
-        o.put(ge.class, ((java.lang.Object) (new dn(((fo) (new cr())), 0.5F))));
-        o.put(kh.class, ((java.lang.Object) (new gj())));
-        o.put(jc.class, ((java.lang.Object) (new bw())));
-        o.put(kg.class, ((java.lang.Object) (new gk())));
-        o.put(ao.class, ((java.lang.Object) (new ei())));
-        o.put(dx.class, ((java.lang.Object) (new ab())));
-        o.put(jd.class, ((java.lang.Object) (new hw())));
-        o.put(ff.class, ((java.lang.Object) (new dj())));
-        o.put(oc.class, ((java.lang.Object) (new kt())));
-        o.put(dc.class, ((java.lang.Object) (new cp())));
+        o.put(Spider.class, ((Object) (new ok())));
+        o.put(Pig.class, ((Object) (new gm(((fo) (new ca())), ((fo) (new ca(0.5F))), 0.7F))));
+        o.put(Sheep.class, ((Object) (new ns(((fo) (new gx())), ((fo) (new bx())), 0.7F))));
+        o.put(Cow.class, ((Object) (new mc(((fo) (new dv())), 0.7F))));
+        o.put(Chicken.class, ((Object) (new eq(((fo) (new kv())), 0.3F))));
+        o.put(Creeper.class, ((Object) (new d())));
+        o.put(Skeleton.class, ((Object) (new dn(((fo) (new fv())), 0.5F))));
+        o.put(Zombie.class, ((Object) (new dn(((fo) (new cb())), 0.5F))));
+        o.put(Slime.class, ((Object) (new gq(((fo) (new hh(16))), ((fo) (new hh(0))), 0.25F))));
+        o.put(Player.class, ((Object) (new bu())));
+        o.put(Giant.class, ((Object) (new nz(((fo) (new cb())), 0.5F, 6F))));
+        o.put(Mob.class, ((Object) (new dn(((fo) (new cr())), 0.5F))));
+        o.put(kh.class, ((Object) (new gj())));
+        o.put(Painting.class, ((Object) (new bw())));
+        o.put(Arrow.class, ((Object) (new gk())));
+        o.put(Snowball.class, ((Object) (new ei())));
+        o.put(Item.class, ((Object) (new ab())));
+        o.put(PrimedTnt.class, ((Object) (new hw())));
+        o.put(FallingSand.class, ((Object) (new dj())));
+        o.put(Minecart.class, ((Object) (new kt())));
+        o.put(Boat.class, ((Object) (new cp())));
         ak ak1;
         for(java.util.Iterator iterator = o.values().iterator(); iterator.hasNext(); ak1.a(this))
             ak1 = (ak)iterator.next();
@@ -61,32 +56,32 @@ public class kx
 
     public ak a(java.lang.Class class1)
     {
-        ak ak1 = (ak)o.get(((java.lang.Object) (class1)));
+        ak ak1 = (ak)o.get(((Object) (class1)));
         if(ak1 == null && class1 != kh.class)
         {
             ak1 = a(class1.getSuperclass());
-            o.put(((java.lang.Object) (class1)), ((java.lang.Object) (ak1)));
+            o.put(((Object) (class1)), ((Object) (ak1)));
         }
         return ak1;
     }
 
     public ak a(kh kh1)
     {
-        return a(((java.lang.Object) (kh1)).getClass());
+        return a(((Object) (kh1)).getClass());
     }
 
-    public void a(cn cn, ey ey, kd kd, dm dm1, fr fr, float f1)
+    public void a(World world, ey ey, kd kd, Player player1, fr fr, float f1)
     {
-        g = cn;
+        g = world;
         e = ey;
         k = fr;
-        h = dm1;
+        h = player1;
         p = kd;
-        i = dm1.as + (dm1.aq - dm1.as) * f1;
-        j = dm1.at + (dm1.ar - dm1.at) * f1;
-        l = dm1.aI + (dm1.ak - dm1.aI) * (double)f1;
-        m = dm1.aJ + (dm1.al - dm1.aJ) * (double)f1;
-        n = dm1.aK + (dm1.am - dm1.aK) * (double)f1;
+        i = player1.as + (player1.aq - player1.as) * f1;
+        j = player1.at + (player1.ar - player1.at) * f1;
+        l = player1.aI + (player1.ak - player1.aI) * (double)f1;
+        m = player1.aJ + (player1.al - player1.aJ) * (double)f1;
+        n = player1.aK + (player1.am - player1.aK) * (double)f1;
     }
 
     public void a(kh kh1, float f1)
@@ -111,9 +106,9 @@ public class kx
         }
     }
 
-    public void a(cn cn)
+    public void a(World world)
     {
-        g = cn;
+        g = world;
     }
 
     public double a(double d1, double d2, double d3)
diff --git "a/temp\\src\\java/ky.java" "b/src\\main\\java/ky.java"
index ea61b23..863089f 100644
--- "a/temp\\src\\java/ky.java"
+++ "b/src\\main\\java/ky.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -19,8 +18,8 @@ public class ky extends mq
         return ly.p[i];
     }
 
-    public boolean g(cn cn1, int i, int j, int k)
+    public boolean g(World world1, int i, int j, int k)
     {
-        return cn1.j(i, j, k) <= 13 && b(cn1.a(i, j - 1, k));
+        return world1.j(i, j, k) <= 13 && b(world1.a(i, j - 1, k));
     }
 }
diff --git "a/temp\\src\\java/kz.java" "b/src\\main\\java/kz.java"
index 4c75cbc..29640b9 100644
--- "a/temp\\src\\java/kz.java"
+++ "b/src\\main\\java/kz.java"
@@ -1,20 +1,17 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.net.HttpURLConnection;
 import java.net.URL;
-import javax.imageio.ImageIO;
 
 class kz extends java.lang.Thread
 {
 
-    final java.lang.String a;
+    final String a;
     final hb b;
     final cc c;
 
-    kz(cc cc1, java.lang.String s, hb hb1)
+    kz(cc cc1, String s, hb hb1)
     {
         super();
         c = cc1;
diff --git "a/temp\\src\\java/l.java" "b/src\\main\\java/l.java"
index d125a52..9ece598 100644
--- "a/temp\\src\\java/l.java"
+++ "b/src\\main\\java/l.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -7,7 +6,7 @@
 public class l
 {
 
-    private java.lang.String a[][] = {
+    private String a[][] = {
         {
             "XXX", "X X"
         }, {
@@ -18,20 +17,20 @@ public class l
             "X X", "X X"
         }
     };
-    private java.lang.Object b[][];
+    private Object b[][];
 
     public l()
     {
-        b = (new java.lang.Object[][] {
-            new java.lang.Object[] {
+        b = (new Object[][] {
+            new Object[] {
                 di.aD, ly.as, di.m, di.l, di.n
-            }, new java.lang.Object[] {
+            }, new Object[] {
                 di.T, di.X, di.ab, di.af, di.aj
-            }, new java.lang.Object[] {
+            }, new Object[] {
                 di.U, di.Y, di.ac, di.ag, di.ak
-            }, new java.lang.Object[] {
+            }, new Object[] {
                 di.V, di.Z, di.ad, di.ah, di.al
-            }, new java.lang.Object[] {
+            }, new Object[] {
                 di.W, di.aa, di.ae, di.ai, di.am
             }
         });
@@ -41,11 +40,11 @@ public class l
     {
         for(int i = 0; i < b[0].length; i++)
         {
-            java.lang.Object obj = b[0][i];
+            Object obj = b[0][i];
             for(int j = 0; j < b.length - 1; j++)
             {
                 di di1 = (di)b[j + 1][i];
-                dw1.a(new ev(di1), new java.lang.Object[] {
+                dw1.a(new ev(di1), new Object[] {
                     a[j], java.lang.Character.valueOf('X'), obj
                 });
             }
diff --git "a/temp\\src\\java/la.java" "b/src\\main\\java/la.java"
index df5d828..a480e94 100644
--- "a/temp\\src\\java/la.java"
+++ "b/src\\main\\java/la.java"
@@ -1,9 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.PrintStream;
 //import Minecraft;
 
 public class la extends bi
@@ -19,11 +17,11 @@ public class la extends bi
     private float bn;
     private eu bo;
 
-    public la(Minecraft minecraft, cn cn, dl dl, gy gy1)
+    public la(Minecraft minecraft, World world, dl dl, gy gy1)
     {
-        super(minecraft, cn, dl);
+        super(minecraft, world, dl);
         bh = 0;
-        bo = new eu(((dm) (null)));
+        bo = new eu(((Player) (null)));
         bg = gy1;
     }
 
@@ -44,9 +42,9 @@ public class la extends bi
         {
             if(!b.a(bo))
             {
-                bg.a(((fn) (new m(-1, b.a))));
-                bg.a(((fn) (new m(-2, b.c))));
-                bg.a(((fn) (new m(-3, b.b))));
+                bg.a(((fn) (new m(-1, b.slots1))));
+                bg.a(((fn) (new m(-2, b.slots3))));
+                bg.a(((fn) (new m(-3, b.slots2))));
                 bo = b.i();
             }
             bh = 0;
@@ -83,20 +81,20 @@ public class la extends bi
         }
     }
 
-    protected void a(dx dx1)
+    protected void a(Item item1)
     {
         java.lang.System.out.println("Dropping?");
-        ha ha1 = new ha(dx1);
+        ha ha1 = new ha(item1);
         bg.a(((fn) (ha1)));
-        dx1.ak = (double)ha1.b / 32D;
-        dx1.al = (double)ha1.c / 32D;
-        dx1.am = (double)ha1.d / 32D;
-        dx1.an = (double)ha1.e / 128D;
-        dx1.ao = (double)ha1.f / 128D;
-        dx1.ap = (double)ha1.g / 128D;
+        item1.ak = (double)ha1.b / 32D;
+        item1.al = (double)ha1.c / 32D;
+        item1.am = (double)ha1.d / 32D;
+        item1.an = (double)ha1.e / 128D;
+        item1.ao = (double)ha1.f / 128D;
+        item1.ap = (double)ha1.g / 128D;
     }
 
-    public void a(java.lang.String s1)
+    public void a(String s1)
     {
         bg.a(((fn) (new ij(s1))));
     }
diff --git "a/temp\\src\\java/lb.java" "b/src\\main\\java/lb.java"
index 0a4af66..d97b8ce 100644
--- "a/temp\\src\\java/lb.java"
+++ "b/src\\main\\java/lb.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -19,7 +18,7 @@ public class lb
     {
     }
 
-    public void a(java.lang.String s)
+    public void a(String s)
     {
     }
 
diff --git "a/temp\\src\\java/lc.java" "b/src\\main\\java/lc.java"
index 20a184e..b322c47 100644
--- "a/temp\\src\\java/lc.java"
+++ "b/src\\main\\java/lc.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/ld.java" "b/src\\main\\java/ld.java"
index f82b68f..e5f95e2 100644
--- "a/temp\\src\\java/ld.java"
+++ "b/src\\main\\java/ld.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
 import java.io.IOException;
 
 public class ld extends fn
diff --git "a/temp\\src\\java/le.java" "b/src\\main\\java/le.java"
index accd726..94a12bd 100644
--- "a/temp\\src\\java/le.java"
+++ "b/src\\main\\java/le.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -6,11 +5,6 @@
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
-import java.io.PrintStream;
-import java.util.Collection;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
 
 public class le
     implements af
@@ -27,9 +21,9 @@ public class le
 
     private java.io.File a(int i, int j)
     {
-        java.lang.String s = (new StringBuilder()).append("c.").append(java.lang.Integer.toString(i, 36)).append(".").append(java.lang.Integer.toString(j, 36)).append(".dat").toString();
-        java.lang.String s1 = java.lang.Integer.toString(i & 0x3f, 36);
-        java.lang.String s2 = java.lang.Integer.toString(j & 0x3f, 36);
+        String s = (new StringBuilder()).append("c.").append(java.lang.Integer.toString(i, 36)).append(".").append(java.lang.Integer.toString(j, 36)).append(".dat").toString();
+        String s1 = java.lang.Integer.toString(i & 0x3f, 36);
+        String s2 = java.lang.Integer.toString(j & 0x3f, 36);
         java.io.File file = new File(a, s1);
         if(!file.exists())
             if(b)
@@ -49,7 +43,7 @@ public class le
             return file;
     }
 
-    public ga a(cn cn1, int i, int j)
+    public Chunk a(World world1, int i, int j)
     {
         java.io.File file;
         file = a(i, j);
@@ -57,28 +51,28 @@ public class le
         {
             try
             {
-        hm hm1;
+        TagCompound tagCompound1;
         java.io.FileInputStream fileinputstream = new FileInputStream(file);
-        hm1 = x.a(((java.io.InputStream) (fileinputstream)));
-        if(!hm1.b("Level"))
+        tagCompound1 = x.a(((java.io.InputStream) (fileinputstream)));
+        if(!tagCompound1.b("Level"))
         {
             java.lang.System.out.println((new StringBuilder()).append("Chunk file at ").append(i).append(",").append(j).append(" is missing level data, skipping").toString());
             return null;
         }
-        if(!hm1.k("Level").b("Blocks"))
+        if(!tagCompound1.k("Level").b("Blocks"))
         {
             java.lang.System.out.println((new StringBuilder()).append("Chunk file at ").append(i).append(",").append(j).append(" is missing block data, skipping").toString());
             return null;
         }
-            ga ga1 = le.a(cn1, hm1.k("Level"));
-            if(!ga1.a(i, j))
+            Chunk chunk1 = le.a(world1, tagCompound1.k("Level"));
+            if(!chunk1.a(i, j))
             {
-                java.lang.System.out.println((new StringBuilder()).append("Chunk file at ").append(i).append(",").append(j).append(" is in the wrong location; relocating. (Expected ").append(i).append(", ").append(j).append(", got ").append(ga1.j).append(", ").append(ga1.k).append(")").toString());
-                hm1.a("xPos", i);
-                hm1.a("zPos", j);
-                ga1 = le.a(cn1, hm1.k("Level"));
+                java.lang.System.out.println((new StringBuilder()).append("Chunk file at ").append(i).append(",").append(j).append(" is in the wrong location; relocating. (Expected ").append(i).append(", ").append(j).append(", got ").append(chunk1.j).append(", ").append(chunk1.k).append(")").toString());
+                tagCompound1.set("xPos", i);
+                tagCompound1.set("zPos", j);
+                chunk1 = le.a(world1, tagCompound1.k("Level"));
             }
-            return ga1;
+            return chunk1;
         }
         catch(java.lang.Exception exception)
         {
@@ -88,26 +82,26 @@ public class le
         return null;
     }
 
-    public void a(cn cn1, ga ga1)
+    public void a(World world1, Chunk chunk1)
     {
-        cn1.l();
-        java.io.File file = a(ga1.j, ga1.k);
+        world1.l();
+        java.io.File file = a(chunk1.j, chunk1.k);
         if(file.exists())
-            cn1.v -= file.length();
+            world1.sizeOnDisk -= file.length();
         try
         {
             java.io.File file1 = new File(a, "tmp_chunk.dat");
             java.io.FileOutputStream fileoutputstream = new FileOutputStream(file1);
-            hm hm1 = new hm();
-            hm hm2 = new hm();
-            hm1.a("Level", ((el) (hm2)));
-            a(ga1, cn1, hm2);
-            x.a(hm1, ((java.io.OutputStream) (fileoutputstream)));
+            TagCompound tagCompound1 = new TagCompound();
+            TagCompound tagCompound2 = new TagCompound();
+            tagCompound1.set("Level", ((Tag) (tagCompound2)));
+            a(chunk1, world1, tagCompound2);
+            x.a(tagCompound1, ((java.io.OutputStream) (fileoutputstream)));
             fileoutputstream.close();
             if(file.exists())
                 file.delete();
             file1.renameTo(file);
-            cn1.v += file.length();
+            world1.sizeOnDisk += file.length();
         }
         catch(java.lang.Exception exception)
         {
@@ -115,99 +109,99 @@ public class le
         }
     }
 
-    public void a(ga ga1, cn cn1, hm hm1)
+    public void a(Chunk chunk1, World world1, TagCompound tagCompound1)
     {
-        cn1.l();
-        hm1.a("xPos", ga1.j);
-        hm1.a("zPos", ga1.k);
-        hm1.a("LastUpdate", cn1.c);
-        hm1.a("Blocks", ga1.b);
-        hm1.a("Data", ga1.e.a);
-        hm1.a("SkyLight", ga1.f.a);
-        hm1.a("BlockLight", ga1.g.a);
-        hm1.a("HeightMap", ga1.h);
-        hm1.a("TerrainPopulated", ga1.n);
-        ga1.r = false;
-        ki ki1 = new ki();
+        world1.l();
+        tagCompound1.set("xPos", chunk1.j);
+        tagCompound1.set("zPos", chunk1.k);
+        tagCompound1.set("LastUpdate", world1.time);
+        tagCompound1.set("Blocks", chunk1.b);
+        tagCompound1.set("Data", chunk1.e.a);
+        tagCompound1.set("SkyLight", chunk1.f.a);
+        tagCompound1.set("BlockLight", chunk1.g.a);
+        tagCompound1.set("HeightMap", chunk1.h);
+        tagCompound1.set("TerrainPopulated", chunk1.n);
+        chunk1.r = false;
+        TagList tagList1 = new TagList();
 label0:
-        for(int i = 0; i < ga1.m.length; i++)
+        for(int i = 0; i < chunk1.m.length; i++)
         {
-            java.util.Iterator iterator = ga1.m[i].iterator();
+            java.util.Iterator iterator = chunk1.m[i].iterator();
             do
             {
                 if(!iterator.hasNext())
                     continue label0;
                 kh kh1 = (kh)iterator.next();
-                ga1.r = true;
-                hm hm2 = new hm();
-                if(kh1.c(hm2))
-                    ki1.a(((el) (hm2)));
+                chunk1.r = true;
+                TagCompound tagCompound2 = new TagCompound();
+                if(kh1.c(tagCompound2))
+                    tagList1.a(((Tag) (tagCompound2)));
             } while(true);
         }
 
-        hm1.a("Entities", ((el) (ki1)));
-        ki ki2 = new ki();
-        hm hm3;
-        for(java.util.Iterator iterator1 = ga1.l.values().iterator(); iterator1.hasNext(); ki2.a(((el) (hm3))))
+        tagCompound1.set("Entities", ((Tag) (tagList1)));
+        TagList tagList2 = new TagList();
+        TagCompound tagCompound3;
+        for(java.util.Iterator iterator1 = chunk1.l.values().iterator(); iterator1.hasNext(); tagList2.a(((Tag) (tagCompound3))))
         {
             ic ic1 = (ic)iterator1.next();
-            hm3 = new hm();
-            ic1.b(hm3);
+            tagCompound3 = new TagCompound();
+            ic1.b(tagCompound3);
         }
 
-        hm1.a("TileEntities", ((el) (ki2)));
+        tagCompound1.set("TileEntities", ((Tag) (tagList2)));
     }
 
-    public static ga a(cn cn1, hm hm1)
+    public static Chunk a(World world1, TagCompound tagCompound1)
     {
-        int i = hm1.e("xPos");
-        int j = hm1.e("zPos");
-        ga ga1 = new ga(cn1, i, j);
-        ga1.b = hm1.j("Blocks");
-        ga1.e = new mu(hm1.j("Data"));
-        ga1.f = new mu(hm1.j("SkyLight"));
-        ga1.g = new mu(hm1.j("BlockLight"));
-        ga1.h = hm1.j("HeightMap");
-        ga1.n = hm1.m("TerrainPopulated");
-        if(!ga1.e.a())
-            ga1.e = new mu(ga1.b.length);
-        if(ga1.h == null || !ga1.f.a())
+        int i = tagCompound1.getInt("xPos");
+        int j = tagCompound1.getInt("zPos");
+        Chunk chunk1 = new Chunk(world1, i, j);
+        chunk1.b = tagCompound1.getByteArray("Blocks");
+        chunk1.e = new mu(tagCompound1.getByteArray("Data"));
+        chunk1.f = new mu(tagCompound1.getByteArray("SkyLight"));
+        chunk1.g = new mu(tagCompound1.getByteArray("BlockLight"));
+        chunk1.h = tagCompound1.getByteArray("HeightMap");
+        chunk1.n = tagCompound1.isTrueByte("TerrainPopulated");
+        if(!chunk1.e.a())
+            chunk1.e = new mu(chunk1.b.length);
+        if(chunk1.h == null || !chunk1.f.a())
         {
-            ga1.h = new byte[256];
-            ga1.f = new mu(ga1.b.length);
-            ga1.c();
+            chunk1.h = new byte[256];
+            chunk1.f = new mu(chunk1.b.length);
+            chunk1.c();
         }
-        if(!ga1.g.a())
+        if(!chunk1.g.a())
         {
-            ga1.g = new mu(ga1.b.length);
-            ga1.a();
+            chunk1.g = new mu(chunk1.b.length);
+            chunk1.a();
         }
-        ki ki1 = hm1.l("Entities");
-        if(ki1 != null)
+        TagList tagList1 = tagCompound1.l("Entities");
+        if(tagList1 != null)
         {
-            for(int k = 0; k < ki1.c(); k++)
+            for(int k = 0; k < tagList1.c(); k++)
             {
-                hm hm2 = (hm)ki1.a(k);
-                kh kh1 = ew.a(hm2, cn1);
-                ga1.r = true;
+                TagCompound tagCompound2 = (TagCompound) tagList1.a(k);
+                kh kh1 = ew.a(tagCompound2, world1);
+                chunk1.r = true;
                 if(kh1 != null)
-                    ga1.a(kh1);
+                    chunk1.a(kh1);
             }
 
         }
-        ki ki2 = hm1.l("TileEntities");
-        if(ki2 != null)
+        TagList tagList2 = tagCompound1.l("TileEntities");
+        if(tagList2 != null)
         {
-            for(int l = 0; l < ki2.c(); l++)
+            for(int l = 0; l < tagList2.c(); l++)
             {
-                hm hm3 = (hm)ki2.a(l);
-                ic ic1 = ic.c(hm3);
+                TagCompound tagCompound3 = (TagCompound) tagList2.a(l);
+                ic ic1 = ic.c(tagCompound3);
                 if(ic1 != null)
-                    ga1.a(ic1);
+                    chunk1.a(ic1);
             }
 
         }
-        return ga1;
+        return chunk1;
     }
 
     public void a()
@@ -218,7 +212,7 @@ label0:
     {
     }
 
-    public void b(cn cn1, ga ga1)
+    public void b(World world1, Chunk chunk1)
     {
     }
 }
diff --git "a/temp\\src\\java/lf.java" "b/src\\main\\java/lf.java"
index 9e23e1a..e3da453 100644
--- "a/temp\\src\\java/lf.java"
+++ "b/src\\main\\java/lf.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -7,16 +6,16 @@
 public class lf
 {
 
-    private java.lang.Object a[][];
+    private Object a[][];
 
     public lf()
     {
-        a = (new java.lang.Object[][] {
-            new java.lang.Object[] {
+        a = (new Object[][] {
+            new Object[] {
                 ly.ai, di.n
-            }, new java.lang.Object[] {
+            }, new Object[] {
                 ly.aj, di.m
-            }, new java.lang.Object[] {
+            }, new Object[] {
                 ly.ay, di.l
             }
         });
@@ -28,10 +27,10 @@ public class lf
         {
             ly ly1 = (ly)a[i][0];
             di di1 = (di)a[i][1];
-            dw1.a(new ev(ly1), new java.lang.Object[] {
+            dw1.a(new ev(ly1), new Object[] {
                 "###", "###", "###", java.lang.Character.valueOf('#'), di1
             });
-            dw1.a(new ev(di1, 9), new java.lang.Object[] {
+            dw1.a(new ev(di1, 9), new Object[] {
                 "#", java.lang.Character.valueOf('#'), ly1
             });
         }
diff --git "a/temp\\src\\java/lg.java" "b/src\\main\\java/lg.java"
index 0a8f809..bc81900 100644
--- "a/temp\\src\\java/lg.java"
+++ "b/src\\main\\java/lg.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -7,22 +6,22 @@
 public class lg extends di
 {
 
-    private java.lang.String a;
+    private String a;
 
-    protected lg(int i, java.lang.String s)
+    protected lg(int i, String s)
     {
         super(i);
         a = s;
         aT = 1;
     }
 
-    public boolean a(ev ev1, dm dm, cn cn1, int i, int j, int k, int l)
+    public boolean a(ev ev1, Player player, World world1, int i, int j, int k, int l)
     {
-        if(cn1.a(i, j, k) == ly.aZ.bc && cn1.e(i, j, k) == 0)
+        if(world1.a(i, j, k) == ly.aZ.bc && world1.e(i, j, k) == 0)
         {
-            cn1.b(i, j, k, (aS - di.aQ.aS) + 1);
-            cn1.a(a, i, j, k);
-            ev1.a--;
+            world1.b(i, j, k, (aS - di.aQ.aS) + 1);
+            world1.a(a, i, j, k);
+            ev1.count--;
             return true;
         } else
         {
diff --git "a/temp\\src\\java/lh.java" "b/src\\main\\java/lh.java"
index 8a46235..2e2290d 100644
--- "a/temp\\src\\java/lh.java"
+++ "b/src\\main\\java/lh.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/li.java" "b/src\\main\\java/li.java"
index 08e341e..ddb4101 100644
--- "a/temp\\src\\java/li.java"
+++ "b/src\\main\\java/li.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
 import java.io.IOException;
 
 public class li extends fn
diff --git "a/temp\\src\\java/lj.java" "b/src\\main\\java/lj.java"
index bf55f16..787b68a 100644
--- "a/temp\\src\\java/lj.java"
+++ "b/src\\main\\java/lj.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/lk.java" "b/src\\main\\java/lk.java"
index d8754e8..95e7e18 100644
--- "a/temp\\src\\java/lk.java"
+++ "b/src\\main\\java/lk.java"
@@ -1,23 +1,20 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.File;
-
-class lk extends cn
+class lk extends World
 {
 
     final ad z;
 
-    lk(ad ad1, java.io.File file, java.lang.String s)
+    lk(ad ad1, java.io.File file, String s)
     {
         super(file, s);
         z = ad1;
     }
 
-    protected aw a(java.io.File file)
+    protected IChunkProvider a(java.io.File file)
     {
-        return ((aw) (new ck(((cn) (this)), ((af) (new le(file, false))))));
+        return ((IChunkProvider) (new ck(((World) (this)), ((af) (new le(file, false))))));
     }
 }
diff --git "a/temp\\src\\java/ll.java" "b/src\\main\\java/ll.java"
index 7c7462c..fc01827 100644
--- "a/temp\\src\\java/ll.java"
+++ "b/src\\main\\java/ll.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/lm.java" "b/src\\main\\java/lm.java"
index b363b3e..a5b03c5 100644
--- "a/temp\\src\\java/lm.java"
+++ "b/src\\main\\java/lm.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import org.lwjgl.opengl.GL11;
-
 public class lm
 {
 
@@ -66,12 +63,12 @@ public class lm
         org.lwjgl.opengl.GL11.glEnable(3553);
     }
 
-    public void a(kd kd1, java.lang.String s, int i, int j, int l)
+    public void a(kd kd1, String s, int i, int j, int l)
     {
         kd1.a(s, i - kd1.a(s) / 2, j, l);
     }
 
-    public void b(kd kd1, java.lang.String s, int i, int j, int l)
+    public void b(kd kd1, String s, int i, int j, int l)
     {
         kd1.a(s, i, j, l);
     }
diff --git "a/temp\\src\\java/ln.java" "b/src\\main\\java/ln.java"
index f2a7cb4..5ab75e6 100644
--- "a/temp\\src\\java/ln.java"
+++ "b/src\\main\\java/ln.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/lo.java" "b/src\\main\\java/lo.java"
index 688cc88..f466320 100644
--- "a/temp\\src\\java/lo.java"
+++ "b/src\\main\\java/lo.java"
@@ -1,11 +1,9 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.List;
 //import Minecraft;
-import org.lwjgl.opengl.GL11;
+
 
 public class lo extends ee
 {
@@ -18,29 +16,29 @@ public class lo extends ee
     {
         f = true;
         j = new n(aev);
-        i.add(((java.lang.Object) (new an(((ee) (this)), ((gh) (j.a)), j.b, 0, 144, 36))));
+        i.add(((Object) (new an(((ee) (this)), ((gh) (j.a)), j.b, 0, 144, 36))));
         for(int k = 0; k < 2; k++)
         {
             for(int l1 = 0; l1 < 2; l1++)
-                i.add(((java.lang.Object) (new mm(((ee) (this)), ((gh) (j.a)), l1 + k * 2, 88 + l1 * 18, 26 + k * 18))));
+                i.add(((Object) (new mm(((ee) (this)), ((gh) (j.a)), l1 + k * 2, 88 + l1 * 18, 26 + k * 18))));
 
         }
 
         for(int i1 = 0; i1 < 4; i1++)
         {
             int i2 = i1;
-            i.add(((java.lang.Object) (new lj(this, ((ee) (this)), gh1, gh1.c() - 1 - i1, 8, 8 + i1 * 18, i2))));
+            i.add(((Object) (new lj(this, ((ee) (this)), gh1, gh1.c() - 1 - i1, 8, 8 + i1 * 18, i2))));
         }
 
         for(int j1 = 0; j1 < 3; j1++)
         {
             for(int j2 = 0; j2 < 9; j2++)
-                i.add(((java.lang.Object) (new mm(((ee) (this)), gh1, j2 + (j1 + 1) * 9, 8 + j2 * 18, 84 + j1 * 18))));
+                i.add(((Object) (new mm(((ee) (this)), gh1, j2 + (j1 + 1) * 9, 8 + j2 * 18, 84 + j1 * 18))));
 
         }
 
         for(int k1 = 0; k1 < 9; k1++)
-            i.add(((java.lang.Object) (new mm(((ee) (this)), gh1, k1, 8 + k1 * 18, 142))));
+            i.add(((Object) (new mm(((ee) (this)), gh1, k1, 8 + k1 * 18, 142))));
 
     }
 
diff --git "a/temp\\src\\java/lp.java" "b/src\\main\\java/lp.java"
index 6e3df55..376e718 100644
--- "a/temp\\src\\java/lp.java"
+++ "b/src\\main\\java/lp.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class lp extends bk
 {
 
diff --git "a/temp\\src\\java/lq.java" "b/src\\main\\java/lq.java"
index fcfbde6..94101b2 100644
--- "a/temp\\src\\java/lq.java"
+++ "b/src\\main\\java/lq.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
 import java.io.IOException;
 
 public class lq extends fn
diff --git "a/temp\\src\\java/lr.java" "b/src\\main\\java/lr.java"
index bd31a9e..1fbde4a 100644
--- "a/temp\\src\\java/lr.java"
+++ "b/src\\main\\java/lr.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class lr extends jt
 {
 
@@ -22,15 +19,15 @@ public class lr extends jt
         a(0.5F - f1, 0.0F, 0.5F - f1, 0.5F + f1, f2, 0.5F + f1);
     }
 
-    public cf d(cn cn1, int i, int j, int k)
+    public cf d(World world1, int i, int j, int k)
     {
         return null;
     }
 
-    public cf f(cn cn1, int i, int j, int k)
+    public cf f(World world1, int i, int j, int k)
     {
-        a(((nm) (cn1)), i, j, k);
-        return super.f(cn1, i, j, k);
+        a(((nm) (world1)), i, j, k);
+        return super.f(world1, i, j, k);
     }
 
     public void a(nm nm1, int i, int j, int k)
@@ -86,31 +83,31 @@ public class lr extends jt
         return di.as.aS;
     }
 
-    public void a(cn cn1, int i, int j, int k, int l)
+    public void a(World world1, int i, int j, int k, int l)
     {
         boolean flag = false;
         if(b)
         {
-            if(!cn1.f(i, j - 1, k).a())
+            if(!world1.f(i, j - 1, k).a())
                 flag = true;
         } else
         {
-            int i1 = cn1.e(i, j, k);
+            int i1 = world1.e(i, j, k);
             flag = true;
-            if(i1 == 2 && cn1.f(i, j, k + 1).a())
+            if(i1 == 2 && world1.f(i, j, k + 1).a())
                 flag = false;
-            if(i1 == 3 && cn1.f(i, j, k - 1).a())
+            if(i1 == 3 && world1.f(i, j, k - 1).a())
                 flag = false;
-            if(i1 == 4 && cn1.f(i + 1, j, k).a())
+            if(i1 == 4 && world1.f(i + 1, j, k).a())
                 flag = false;
-            if(i1 == 5 && cn1.f(i - 1, j, k).a())
+            if(i1 == 5 && world1.f(i - 1, j, k).a())
                 flag = false;
         }
         if(flag)
         {
-            b_(cn1, i, j, k, cn1.e(i, j, k));
-            cn1.d(i, j, k, 0);
+            b_(world1, i, j, k, world1.e(i, j, k));
+            world1.d(i, j, k, 0);
         }
-        super.a(cn1, i, j, k, l);
+        super.a(world1, i, j, k, l);
     }
 }
diff --git "a/temp\\src\\java/lt.java" "b/src\\main\\java/lt.java"
index 2559f58..94aa5b7 100644
--- "a/temp\\src\\java/lt.java"
+++ "b/src\\main\\java/lt.java"
@@ -1,12 +1,8 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
 import java.awt.image.BufferedImage;
-import java.io.IOException;
-import java.util.Arrays;
-import javax.imageio.ImageIO;
 
 public class lt
 {
@@ -82,8 +78,8 @@ public class lt
 
     public void a(jj jj1)
     {
-        cn cn1 = jj1.b;
-        if(cn1 == null)
+        World world1 = jj1.b;
+        if(world1 == null)
         {
             jj1.f = true;
             jj1.e = true;
@@ -93,8 +89,8 @@ public class lt
         int j = jj1.d * 16;
         int k = i + 16;
         int l = j + 16;
-        ga ga1 = cn1.b(jj1.c, jj1.d);
-        if(ga1.q)
+        Chunk chunk1 = world1.b(jj1.c, jj1.d);
+        if(chunk1.q)
         {
             jj1.f = true;
             jj1.e = true;
@@ -117,7 +113,7 @@ public class lt
                     int k2 = ((l1 - k1 - j2) + 160) - 16;
                     if(k2 >= f[i2] && k2 >= f[i2 + 1])
                         continue;
-                    ly ly1 = ly.n[cn1.a(j1, j2, i1)];
+                    ly ly1 = ly.n[world1.a(j1, j2, i1)];
                     if(ly1 == null)
                     {
                         flag = false;
@@ -125,11 +121,11 @@ public class lt
                     }
                     if(ly1.bn == gb.f)
                     {
-                        int l2 = cn1.a(j1, j2 + 1, i1);
+                        int l2 = world1.a(j1, j2 + 1, i1);
                         if(l2 != 0 && ly.n[l2].bn == gb.f)
                             continue;
                         float f2 = ((float)j2 / 127F) * 0.6F + 0.4F;
-                        float f3 = cn1.c(j1, j2 + 1, i1) * f2;
+                        float f3 = world1.c(j1, j2 + 1, i1) * f2;
                         if(k2 < 0 || k2 >= 160)
                             continue;
                         int i4 = i2 + k2 * 32;
@@ -158,7 +154,7 @@ public class lt
                     {
                         int i3 = i2 + k2 * 32;
                         int k3 = g[ly1.bc * 3 + 0];
-                        float f4 = (cn1.c(j1, j2 + 1, i1) * 0.8F + 0.2F) * f1;
+                        float f4 = (world1.c(j1, j2 + 1, i1) * 0.8F + 0.2F) * f1;
                         int j4 = k3;
                         if(i2 >= 0)
                         {
@@ -183,9 +179,9 @@ public class lt
                         continue;
                     int j3 = i2 + (k2 + 1) * 32;
                     int l3 = g[ly1.bc * 3 + 1];
-                    float f5 = cn1.c(j1 - 1, j2, i1) * 0.8F + 0.2F;
+                    float f5 = world1.c(j1 - 1, j2, i1) * 0.8F + 0.2F;
                     int k4 = g[ly1.bc * 3 + 2];
-                    float f8 = cn1.c(j1, j2, i1 + 1) * 0.8F + 0.2F;
+                    float f8 = world1.c(j1, j2, i1 + 1) * 0.8F + 0.2F;
                     if(i2 >= 0)
                     {
                         float f9 = f5 * f1 * 0.6F;
diff --git "a/temp\\src\\java/lu.java" "b/src\\main\\java/lu.java"
index f0d11b8..2045733 100644
--- "a/temp\\src\\java/lu.java"
+++ "b/src\\main\\java/lu.java"
@@ -1,14 +1,11 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.awt.Color;
 import java.util.ArrayList;
 import java.util.Random;
 //import Minecraft;
-import org.lwjgl.input.Keyboard;
-import org.lwjgl.opengl.GL11;
+
 
 public class lu extends lm
 {
@@ -17,9 +14,9 @@ public class lu extends lm
     private java.util.List e;
     private java.util.Random f;
     private Minecraft g;
-    public java.lang.String a;
+    public String a;
     private int h;
-    private java.lang.String i;
+    private String i;
     private int j;
     public float b;
     float c;
@@ -60,7 +57,7 @@ public class lu extends lm
         boolean flag1 = (g.g.aW / 3) % 2 == 1;
         if(g.g.aW < 10)
             flag1 = false;
-        int k1 = g.g.E;
+        int k1 = g.g.health;
         int l1 = g.g.F;
         f.setSeed(h * 0x4c627);
         if(g.b.d())
@@ -136,7 +133,7 @@ public class lu extends lm
             long l4 = java.lang.Runtime.getRuntime().totalMemory();
             long l6 = java.lang.Runtime.getRuntime().freeMemory();
             long l7 = l4 - l6;
-            java.lang.String s = (new StringBuilder()).append("Used memory: ").append((l7 * 100L) / l2).append("% (").append(l7 / 1024L / 1024L).append("MB) of ").append(l2 / 1024L / 1024L).append("MB").toString();
+            String s = (new StringBuilder()).append("Used memory: ").append((l7 * 100L) / l2).append("% (").append(l7 / 1024L / 1024L).append("MB) of ").append(l2 / 1024L / 1024L).append("MB").toString();
             b(kd1, s, i1 - kd1.a(s) - 2, 2, 0xe0e0e0);
             s = (new StringBuilder()).append("Allocated memory: ").append((l4 * 100L) / l2).append("% (").append(l4 / 1024L / 1024L).append("MB)").toString();
             b(kd1, s, i1 - kd1.a(s) - 2, 12, 0xe0e0e0);
@@ -193,7 +190,7 @@ public class lu extends lm
             {
                 byte byte1 = 2;
                 int k6 = -i5 * 9;
-                java.lang.String s1 = ((ko)e.get(i5)).a;
+                String s1 = ((ko)e.get(i5)).a;
                 a(((int) (byte1)), k6 - 1, byte1 + 320, k6 + 8, j6 / 2 << 24);
                 org.lwjgl.opengl.GL11.glEnable(3042);
                 kd1.a(s1, ((int) (byte1)), k6, 0xffffff + (j6 << 24));
@@ -233,7 +230,7 @@ public class lu extends lm
 
     private void a(int k, int l, int i1, float f1)
     {
-        ev ev1 = g.g.b.a[k];
+        ev ev1 = g.g.b.slots1[k];
         if(ev1 == null)
             return;
         float f2 = (float)ev1.b - f1;
@@ -261,7 +258,7 @@ public class lu extends lm
 
     }
 
-    public void a(java.lang.String s)
+    public void a(String s)
     {
         int k;
         for(; g.o.a(s) > 320; s = s.substring(k))
@@ -270,11 +267,11 @@ public class lu extends lm
             a(s.substring(0, k));
         }
 
-        e.add(0, ((java.lang.Object) (new ko(s))));
+        e.add(0, ((Object) (new ko(s))));
         for(; e.size() > 50; e.remove(e.size() - 1));
     }
 
-    public void b(java.lang.String s)
+    public void b(String s)
     {
         i = (new StringBuilder()).append("Now playing: ").append(s).toString();
         j = 60;
diff --git "a/temp\\src\\java/lv.java" "b/src\\main\\java/lv.java"
index 6f86018..850b208 100644
--- "a/temp\\src\\java/lv.java"
+++ "b/src\\main\\java/lv.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -22,7 +21,7 @@ public class lv
         e = false;
     }
 
-    public void a(dm dm)
+    public void a(Player player)
     {
     }
 
diff --git "a/temp\\src\\java/lw.java" "b/src\\main\\java/lw.java"
index 92adc90..2c8999d 100644
--- "a/temp\\src\\java/lw.java"
+++ "b/src\\main\\java/lw.java"
@@ -1,16 +1,14 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.List;
 //import Minecraft;
 
 public class lw extends bh
 {
 
     private bh h;
-    protected java.lang.String a;
+    protected String a;
     private fr i;
     private int j;
 
@@ -25,9 +23,9 @@ public class lw extends bh
     public void a()
     {
         for(int k = 0; k < i.t.length; k++)
-            e.add(((java.lang.Object) (new o(k, (c / 2 - 155) + (k % 2) * 160, d / 6 + 24 * (k >> 1), i.a(k)))));
+            e.add(((Object) (new o(k, (c / 2 - 155) + (k % 2) * 160, d / 6 + 24 * (k >> 1), i.a(k)))));
 
-        e.add(((java.lang.Object) (new fk(200, c / 2 - 100, d / 6 + 168, "Done"))));
+        e.add(((Object) (new fk(200, c / 2 - 100, d / 6 + 168, "Done"))));
     }
 
     protected void a(fk fk1)
diff --git "a/temp\\src\\java/lx.java" "b/src\\main\\java/lx.java"
index 26b0bca..fa6065f 100644
--- "a/temp\\src\\java/lx.java"
+++ "b/src\\main\\java/lx.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -7,7 +6,7 @@
 public class lx extends java.lang.RuntimeException
 {
 
-    public lx(java.lang.String s)
+    public lx(String s)
     {
         super(s);
     }
diff --git "a/temp\\src\\java/ly.java" "b/src\\main\\java/ly.java"
index b4e4602..3021aa5 100644
--- "a/temp\\src\\java/ly.java"
+++ "b/src\\main\\java/ly.java"
@@ -1,11 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.ArrayList;
-import java.util.Random;
-
 public class ly
 {
 
@@ -132,7 +128,7 @@ public class ly
         bo = 0.6F;
         if(n[i1] != null)
         {
-            throw new IllegalArgumentException((new StringBuilder()).append("Slot ").append(i1).append(" is already occupied by ").append(((java.lang.Object) (n[i1]))).append(" when adding ").append(((java.lang.Object) (this))).toString());
+            throw new IllegalArgumentException((new StringBuilder()).append("Slot ").append(i1).append(" is already occupied by ").append(((Object) (n[i1]))).append(" when adding ").append(((Object) (this))).toString());
         } else
         {
             bn = gb1;
@@ -253,19 +249,19 @@ public class ly
         return bb;
     }
 
-    public cf f(cn cn1, int i1, int j1, int k1)
+    public cf f(World world1, int i1, int j1, int k1)
     {
         return cf.b((double)i1 + bf, (double)j1 + bg, (double)k1 + bh, (double)i1 + bi, (double)j1 + bj, (double)k1 + bk);
     }
 
-    public void a(cn cn1, int i1, int j1, int k1, cf cf1, java.util.ArrayList arraylist)
+    public void a(World world1, int i1, int j1, int k1, cf cf1, java.util.ArrayList arraylist)
     {
-        cf cf2 = d(cn1, i1, j1, k1);
+        cf cf2 = d(world1, i1, j1, k1);
         if(cf2 != null && cf1.a(cf2))
-            arraylist.add(((java.lang.Object) (cf2)));
+            arraylist.add(((Object) (cf2)));
     }
 
-    public cf d(cn cn1, int i1, int j1, int k1)
+    public cf d(World world1, int i1, int j1, int k1)
     {
         return cf.b((double)i1 + bf, (double)j1 + bg, (double)k1 + bh, (double)i1 + bi, (double)j1 + bj, (double)k1 + bk);
     }
@@ -285,19 +281,19 @@ public class ly
         return true;
     }
 
-    public void a(cn cn1, int i1, int j1, int k1, java.util.Random random)
+    public void a(World world1, int i1, int j1, int k1, java.util.Random random)
     {
     }
 
-    public void b(cn cn1, int i1, int j1, int k1, java.util.Random random)
+    public void b(World world1, int i1, int j1, int k1, java.util.Random random)
     {
     }
 
-    public void b(cn cn1, int i1, int j1, int k1, int l1)
+    public void b(World world1, int i1, int j1, int k1, int l1)
     {
     }
 
-    public void a(cn cn1, int i1, int j1, int k1, int l1)
+    public void a(World world1, int i1, int j1, int k1, int l1)
     {
     }
 
@@ -306,11 +302,11 @@ public class ly
         return 10;
     }
 
-    public void e(cn cn1, int i1, int j1, int k1)
+    public void e(World world1, int i1, int j1, int k1)
     {
     }
 
-    public void b(cn cn1, int i1, int j1, int k1)
+    public void b(World world1, int i1, int j1, int k1)
     {
     }
 
@@ -324,40 +320,40 @@ public class ly
         return bc;
     }
 
-    public float a(dm dm1)
+    public float a(Player player1)
     {
         if(bd < 0.0F)
             return 0.0F;
-        if(!dm1.b(this))
+        if(!player1.b(this))
             return 1.0F / bd / 100F;
         else
-            return dm1.a(this) / bd / 30F;
+            return player1.a(this) / bd / 30F;
     }
 
-    public void b_(cn cn1, int i1, int j1, int k1, int l1)
+    public void b_(World world1, int i1, int j1, int k1, int l1)
     {
-        a(cn1, i1, j1, k1, l1, 1.0F);
+        a(world1, i1, j1, k1, l1, 1.0F);
     }
 
-    public void a(cn cn1, int i1, int j1, int k1, int l1, float f1)
+    public void a(World world1, int i1, int j1, int k1, int l1, float f1)
     {
-        if(cn1.y)
+        if(world1.y)
             return;
-        int i2 = a(cn1.n);
+        int i2 = a(world1.n);
         for(int j2 = 0; j2 < i2; j2++)
         {
-            if(cn1.n.nextFloat() > f1)
+            if(world1.n.nextFloat() > f1)
                 continue;
-            int k2 = a(l1, cn1.n);
+            int k2 = a(l1, world1.n);
             if(k2 > 0)
             {
                 float f2 = 0.7F;
-                double d1 = (double)(cn1.n.nextFloat() * f2) + (double)(1.0F - f2) * 0.5D;
-                double d2 = (double)(cn1.n.nextFloat() * f2) + (double)(1.0F - f2) * 0.5D;
-                double d3 = (double)(cn1.n.nextFloat() * f2) + (double)(1.0F - f2) * 0.5D;
-                dx dx1 = new dx(cn1, (double)i1 + d1, (double)j1 + d2, (double)k1 + d3, new ev(k2));
-                dx1.c = 10;
-                cn1.a(((kh) (dx1)));
+                double d1 = (double)(world1.n.nextFloat() * f2) + (double)(1.0F - f2) * 0.5D;
+                double d2 = (double)(world1.n.nextFloat() * f2) + (double)(1.0F - f2) * 0.5D;
+                double d3 = (double)(world1.n.nextFloat() * f2) + (double)(1.0F - f2) * 0.5D;
+                Item item1 = new Item(world1, (double)i1 + d1, (double)j1 + d2, (double)k1 + d3, new ev(k2));
+                item1.c = 10;
+                world1.a(((kh) (item1)));
             }
         }
 
@@ -368,9 +364,9 @@ public class ly
         return be / 5F;
     }
 
-    public mf a(cn cn1, int i1, int j1, int k1, aj aj1, aj aj2)
+    public mf a(World world1, int i1, int j1, int k1, aj aj1, aj aj2)
     {
-        a(((nm) (cn1)), i1, j1, k1);
+        a(((nm) (world1)), i1, j1, k1);
         aj1 = aj1.c(-i1, -j1, -k1);
         aj2 = aj2.c(-i1, -j1, -k1);
         aj aj3 = aj1.a(aj2, bf);
@@ -446,7 +442,7 @@ public class ly
             return aj1.a >= bf && aj1.a <= bi && aj1.b >= bg && aj1.b <= bj;
     }
 
-    public void c(cn cn1, int i1, int j1, int k1)
+    public void c(World world1, int i1, int j1, int k1)
     {
     }
 
@@ -455,30 +451,30 @@ public class ly
         return 0;
     }
 
-    public boolean a(cn cn1, int i1, int j1, int k1)
+    public boolean a(World world1, int i1, int j1, int k1)
     {
-        int l1 = cn1.a(i1, j1, k1);
+        int l1 = world1.a(i1, j1, k1);
         return l1 == 0 || n[l1].bn.d();
     }
 
-    public boolean a(cn cn1, int i1, int j1, int k1, dm dm1)
+    public boolean a(World world1, int i1, int j1, int k1, Player player1)
     {
         return false;
     }
 
-    public void a(cn cn1, int i1, int j1, int k1, kh kh)
+    public void a(World world1, int i1, int j1, int k1, kh kh)
     {
     }
 
-    public void d(cn cn1, int i1, int j1, int k1, int l1)
+    public void d(World world1, int i1, int j1, int k1, int l1)
     {
     }
 
-    public void b(cn cn1, int i1, int j1, int k1, dm dm1)
+    public void b(World world1, int i1, int j1, int k1, Player player1)
     {
     }
 
-    public void a(cn cn1, int i1, int j1, int k1, kh kh, aj aj1)
+    public void a(World world1, int i1, int j1, int k1, kh kh, aj aj1)
     {
     }
 
@@ -501,11 +497,11 @@ public class ly
         return false;
     }
 
-    public void b(cn cn1, int i1, int j1, int k1, kh kh)
+    public void b(World world1, int i1, int j1, int k1, kh kh)
     {
     }
 
-    public boolean c(cn cn1, int i1, int j1, int k1, int l1)
+    public boolean c(World world1, int i1, int j1, int k1, int l1)
     {
         return false;
     }
@@ -514,12 +510,12 @@ public class ly
     {
     }
 
-    public void a_(cn cn1, int i1, int j1, int k1, int l1)
+    public void a_(World world1, int i1, int j1, int k1, int l1)
     {
-        b_(cn1, i1, j1, k1, l1);
+        b_(world1, i1, j1, k1, l1);
     }
 
-    public boolean g(cn cn1, int i1, int j1, int k1)
+    public boolean g(World world1, int i1, int j1, int k1)
     {
         return true;
     }
@@ -583,12 +579,12 @@ public class ly
         aB = (new mi(60)).c(0.6F).a(g);
         aC = (new ku(61, false)).c(3.5F).a(i);
         aD = (new ku(62, true)).c(3.5F).a(i).a(0.875F);
-        aE = (new lr(63, ob.class, true)).c(1.0F).a(f);
+        aE = (new lr(63, Sign.class, true)).c(1.0F).a(f);
         aF = (new fw(64, gb.c)).c(3F).a(f);
         aG = (new br(65, 83)).c(0.4F).a(f);
         aH = (new iffix(66, 128)).c(0.7F).a(j);
         aI = ((ly) (new km(67, x)));
-        aJ = (new lr(68, ob.class, false)).c(1.0F).a(f);
+        aJ = (new lr(68, Sign.class, false)).c(1.0F).a(f);
         aK = (new no(69, 96)).c(0.5F).a(f);
         aL = (new al(70, u.bb, js.b)).c(0.5F).a(i);
         aM = (new fw(71, gb.e)).c(5F).a(j);
diff --git "a/temp\\src\\java/lz.java" "b/src\\main\\java/lz.java"
index ba44ba6..fd684bd 100644
--- "a/temp\\src\\java/lz.java"
+++ "b/src\\main\\java/lz.java"
@@ -1,85 +1,81 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
 
 public class lz
-    implements aw
+    implements IChunkProvider
 {
 
-    private ga a;
+    private Chunk a;
     private java.util.Map b;
     private java.util.List c;
-    private cn d;
+    private World d;
 
-    public lz(cn cn)
+    public lz(World world)
     {
         b = ((java.util.Map) (new HashMap()));
         c = ((java.util.List) (new ArrayList()));
-        a = new ga(cn, new byte[32768], 0, 0);
+        a = new Chunk(world, new byte[32768], 0, 0);
         a.q = true;
         a.p = true;
-        d = cn;
+        d = world;
     }
 
-    public boolean a(int i, int j)
+    public boolean chunkExists(int x, int y)
     {
-        hc hc1 = new hc(i, j);
-        return b.containsKey(((java.lang.Object) (hc1)));
+        hc hc1 = new hc(x, y);
+        return b.containsKey(((Object) (hc1)));
     }
 
     public void c(int i, int j)
     {
-        ga ga1 = b(i, j);
-        if(!ga1.q)
-            ga1.e();
-        b.remove(((java.lang.Object) (new hc(i, j))));
-        c.remove(((java.lang.Object) (ga1)));
+        Chunk chunk1 = provideChunk(i, j);
+        if(!chunk1.q)
+            chunk1.e();
+        b.remove(((Object) (new hc(i, j))));
+        c.remove(((Object) (chunk1)));
     }
 
-    public ga d(int i, int j)
+    public Chunk d(int i, int j)
     {
         hc hc1 = new hc(i, j);
         byte abyte0[] = new byte[32768];
-        ga ga1 = new ga(d, abyte0, i, j);
-        java.util.Arrays.fill(ga1.f.a, (byte)-1);
-        b.put(((java.lang.Object) (hc1)), ((java.lang.Object) (ga1)));
-        ga1.c = true;
-        return ga1;
+        Chunk chunk1 = new Chunk(d, abyte0, i, j);
+        java.util.Arrays.fill(chunk1.f.a, (byte)-1);
+        b.put(((Object) (hc1)), ((Object) (chunk1)));
+        chunk1.c = true;
+        return chunk1;
     }
 
-    public ga b(int i, int j)
+    public Chunk provideChunk(int x, int y)
     {
-        hc hc1 = new hc(i, j);
-        ga ga1 = (ga)b.get(((java.lang.Object) (hc1)));
-        if(ga1 == null)
+        hc hc1 = new hc(x, y);
+        Chunk chunk1 = (Chunk)b.get(((Object) (hc1)));
+        if(chunk1 == null)
             return a;
         else
-            return ga1;
+            return chunk1;
     }
 
-    public boolean a(boolean flag, nu nu)
+    public boolean saveChunks(boolean flag, IProgressUpdate iProgressUpdate)
     {
         return true;
     }
 
-    public boolean a()
+    public boolean unloadQueuedChunks()
     {
         return false;
     }
 
-    public boolean b()
+    public boolean canSave()
     {
         return false;
     }
 
-    public void a(aw aw1, int i, int j)
+    public void a(IChunkProvider iChunkProvider1, int i, int j)
     {
     }
 }
diff --git "a/temp\\src\\java/m.java" "b/src\\main\\java/m.java"
index a8238f2..1d347dc 100644
--- "a/temp\\src\\java/m.java"
+++ "b/src\\main\\java/m.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
 import java.io.IOException;
 
 public class m extends fn
@@ -54,9 +51,9 @@ public class m extends fn
                 dataoutputstream.writeShort(-1);
             } else
             {
-                dataoutputstream.writeShort(((int) ((short)b[i].c)));
-                dataoutputstream.writeByte(((int) ((byte)b[i].a)));
-                dataoutputstream.writeShort(((int) ((short)b[i].d)));
+                dataoutputstream.writeShort(((int) ((short)b[i].id)));
+                dataoutputstream.writeByte(((int) ((byte)b[i].count)));
+                dataoutputstream.writeShort(((int) ((short)b[i].damage)));
             }
 
     }
diff --git "a/temp\\src\\java/mc.java" "b/src\\main\\java/mc.java"
index d110305..47e89b9 100644
--- "a/temp\\src\\java/mc.java"
+++ "b/src\\main\\java/mc.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -12,19 +11,19 @@ public class mc extends dn
         super(fo, f);
     }
 
-    public void a(am am1, double d, double d1, double d2, 
-            float f, float f1)
+    public void a(Cow cow1, double d, double d1, double d2,
+                  float f, float f1)
     {
-        super.a(((ge) (am1)), d, d1, d2, f, f1);
+        super.a(((Mob) (cow1)), d, d1, d2, f, f1);
     }
 
-    public void a(ge ge, double d, double d1, double d2, float f, float f1)
+    public void a(Mob mob, double d, double d1, double d2, float f, float f1)
     {
-        a((am)ge, d, d1, d2, f, f1);
+        a((Cow) mob, d, d1, d2, f, f1);
     }
 
     public void a(kh kh, double d, double d1, double d2, float f, float f1)
     {
-        a((am)kh, d, d1, d2, f, f1);
+        a((Cow)kh, d, d1, d2, f, f1);
     }
 }
diff --git "a/temp\\src\\java/md.java" "b/src\\main\\java/md.java"
index 32cd6fb..8d10787 100644
--- "a/temp\\src\\java/md.java"
+++ "b/src\\main\\java/md.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -14,11 +13,11 @@ public class md extends di
         aT = 1;
     }
 
-    public boolean a(ev ev1, dm dm1, cn cn1, int i, int j, int k, int l)
+    public boolean a(ev ev1, Player player1, World world1, int i, int j, int k, int l)
     {
         if(l == 0)
             return false;
-        if(!cn1.f(i, j, k).a())
+        if(!world1.f(i, j, k).a())
             return false;
         if(l == 1)
             j++;
@@ -30,14 +29,14 @@ public class md extends di
             i--;
         if(l == 5)
             i++;
-        if(!ly.aE.a(cn1, i, j, k))
+        if(!ly.aE.a(world1, i, j, k))
             return false;
         if(l == 1)
-            cn1.b(i, j, k, ly.aE.bc, eo.b((double)(((dm1.aq + 180F) * 16F) / 360F) + 0.5D) & 0xf);
+            world1.b(i, j, k, ly.aE.bc, eo.b((double)(((player1.aq + 180F) * 16F) / 360F) + 0.5D) & 0xf);
         else
-            cn1.b(i, j, k, ly.aJ.bc, l);
-        ev1.a--;
-        dm1.a((ob)cn1.b(i, j, k));
+            world1.b(i, j, k, ly.aJ.bc, l);
+        ev1.count--;
+        player1.a((Sign) world1.b(i, j, k));
         return true;
     }
 }
diff --git "a/temp\\src\\java/me.java" "b/src\\main\\java/me.java"
index 5255c85..b336b8e 100644
--- "a/temp\\src\\java/me.java"
+++ "b/src\\main\\java/me.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -13,14 +12,14 @@ public class me extends di
         aT = 1;
     }
 
-    public ev a(ev ev1, cn cn1, dm dm1)
+    public ev a(ev ev1, World world1, Player player1)
     {
         float f = 1.0F;
-        float f1 = dm1.at + (dm1.ar - dm1.at) * f;
-        float f2 = dm1.as + (dm1.aq - dm1.as) * f;
-        double d = dm1.ah + (dm1.ak - dm1.ah) * (double)f;
-        double d1 = dm1.ai + (dm1.al - dm1.ai) * (double)f;
-        double d2 = dm1.aj + (dm1.am - dm1.aj) * (double)f;
+        float f1 = player1.at + (player1.ar - player1.at) * f;
+        float f2 = player1.as + (player1.aq - player1.as) * f;
+        double d = player1.ah + (player1.ak - player1.ah) * (double)f;
+        double d1 = player1.ai + (player1.al - player1.ai) * (double)f;
+        double d2 = player1.aj + (player1.am - player1.aj) * (double)f;
         aj aj1 = ((aj)null).b(d, d1, d2);
         float f3 = eo.b(-f2 * 0.01745329F - 3.141593F);
         float f4 = eo.a(-f2 * 0.01745329F - 3.141593F);
@@ -31,7 +30,7 @@ public class me extends di
         float f9 = f3 * f5;
         double d3 = 5D;
         aj aj2 = aj1.c((double)f7 * d3, (double)f8 * d3, (double)f9 * d3);
-        mf mf1 = cn1.a(aj1, aj2, true);
+        mf mf1 = world1.a(aj1, aj2, true);
         if(mf1 == null)
             return ev1;
         if(mf1.a == 0)
@@ -39,8 +38,8 @@ public class me extends di
             int i = mf1.b;
             int j = mf1.c;
             int k = mf1.d;
-            cn1.a(((kh) (new dc(cn1, (float)i + 0.5F, (float)j + 1.5F, (float)k + 0.5F))));
-            ev1.a--;
+            world1.a(((kh) (new Boat(world1, (float)i + 0.5F, (float)j + 1.5F, (float)k + 0.5F))));
+            ev1.count--;
         }
         return ev1;
     }
diff --git "a/temp\\src\\java/mf.java" "b/src\\main\\java/mf.java"
index 4ea7e82..25d828a 100644
--- "a/temp\\src\\java/mf.java"
+++ "b/src\\main\\java/mf.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/mg.java" "b/src\\main\\java/mg.java"
index 58d5905..6a57c29 100644
--- "a/temp\\src\\java/mg.java"
+++ "b/src\\main\\java/mg.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class mg extends ly
 {
 
diff --git "a/temp\\src\\java/mh.java" "b/src\\main\\java/mh.java"
index bbf7330..0a947ac 100644
--- "a/temp\\src\\java/mh.java"
+++ "b/src\\main\\java/mh.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
 import java.io.IOException;
 
 public class mh extends eh
diff --git "a/temp\\src\\java/mi.java" "b/src\\main\\java/mi.java"
index 6eca4f4..9001f9e 100644
--- "a/temp\\src\\java/mi.java"
+++ "b/src\\main\\java/mi.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class mi extends ly
 {
 
@@ -17,7 +14,7 @@ public class mi extends ly
         d(255);
     }
 
-    public cf d(cn cn1, int j, int k, int l)
+    public cf d(World world1, int j, int k, int l)
     {
         return cf.b(j + 0, k + 0, l + 0, j + 1, k + 1, l + 1);
     }
@@ -42,36 +39,36 @@ public class mi extends ly
             return 2;
     }
 
-    public void a(cn cn1, int j, int k, int l, java.util.Random random)
+    public void a(World world1, int j, int k, int l, java.util.Random random)
     {
         if(random.nextInt(5) == 0)
-            if(i(cn1, j, k, l))
+            if(i(world1, j, k, l))
             {
-                cn1.b(j, k, l, 7);
+                world1.b(j, k, l, 7);
             } else
             {
-                int i1 = cn1.e(j, k, l);
+                int i1 = world1.e(j, k, l);
                 if(i1 > 0)
-                    cn1.b(j, k, l, i1 - 1);
+                    world1.b(j, k, l, i1 - 1);
                 else
-                if(!h(cn1, j, k, l))
-                    cn1.d(j, k, l, ly.w.bc);
+                if(!h(world1, j, k, l))
+                    world1.d(j, k, l, ly.w.bc);
             }
     }
 
-    public void a(cn cn1, int j, int k, int l, kh kh)
+    public void a(World world1, int j, int k, int l, kh kh)
     {
-        if(cn1.n.nextInt(4) == 0)
-            cn1.d(j, k, l, ly.w.bc);
+        if(world1.n.nextInt(4) == 0)
+            world1.d(j, k, l, ly.w.bc);
     }
 
-    private boolean h(cn cn1, int j, int k, int l)
+    private boolean h(World world1, int j, int k, int l)
     {
         int i1 = 0;
         for(int j1 = j - i1; j1 <= j + i1; j1++)
         {
             for(int k1 = l - i1; k1 <= l + i1; k1++)
-                if(cn1.a(j1, k + 1, k1) == ly.aA.bc)
+                if(world1.a(j1, k + 1, k1) == ly.aA.bc)
                     return true;
 
         }
@@ -79,14 +76,14 @@ public class mi extends ly
         return false;
     }
 
-    private boolean i(cn cn1, int j, int k, int l)
+    private boolean i(World world1, int j, int k, int l)
     {
         for(int i1 = j - 4; i1 <= j + 4; i1++)
         {
             for(int j1 = k; j1 <= k + 1; j1++)
             {
                 for(int k1 = l - 4; k1 <= l + 4; k1++)
-                    if(cn1.f(i1, j1, k1) == gb.f)
+                    if(world1.f(i1, j1, k1) == gb.f)
                         return true;
 
             }
@@ -96,12 +93,12 @@ public class mi extends ly
         return false;
     }
 
-    public void a(cn cn1, int j, int k, int l, int i1)
+    public void a(World world1, int j, int k, int l, int i1)
     {
-        super.a(cn1, j, k, l, i1);
-        gb gb1 = cn1.f(j, k + 1, l);
+        super.a(world1, j, k, l, i1);
+        gb gb1 = world1.f(j, k + 1, l);
         if(gb1.a())
-            cn1.d(j, k, l, ly.w.bc);
+            world1.d(j, k, l, ly.w.bc);
     }
 
     public int a(int j, java.util.Random random)
diff --git "a/temp\\src\\java/mj.java" "b/src\\main\\java/mj.java"
index cc3c1ac..e394f1a 100644
--- "a/temp\\src\\java/mj.java"
+++ "b/src\\main\\java/mj.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class mj extends ly
 {
 
@@ -14,7 +11,7 @@ public class mj extends ly
         b(true);
     }
 
-    public cf d(cn cn1, int i, int j, int k)
+    public cf d(World world1, int i, int j, int k)
     {
         return null;
     }
@@ -34,91 +31,91 @@ public class mj extends ly
         return 2;
     }
 
-    public boolean a(cn cn1, int i, int j, int k)
+    public boolean a(World world1, int i, int j, int k)
     {
-        if(cn1.g(i - 1, j, k))
+        if(world1.g(i - 1, j, k))
             return true;
-        if(cn1.g(i + 1, j, k))
+        if(world1.g(i + 1, j, k))
             return true;
-        if(cn1.g(i, j, k - 1))
+        if(world1.g(i, j, k - 1))
             return true;
-        if(cn1.g(i, j, k + 1))
+        if(world1.g(i, j, k + 1))
             return true;
-        return cn1.g(i, j - 1, k);
+        return world1.g(i, j - 1, k);
     }
 
-    public void d(cn cn1, int i, int j, int k, int l)
+    public void d(World world1, int i, int j, int k, int l)
     {
-        int i1 = cn1.e(i, j, k);
-        if(l == 1 && cn1.g(i, j - 1, k))
+        int i1 = world1.e(i, j, k);
+        if(l == 1 && world1.g(i, j - 1, k))
             i1 = 5;
-        if(l == 2 && cn1.g(i, j, k + 1))
+        if(l == 2 && world1.g(i, j, k + 1))
             i1 = 4;
-        if(l == 3 && cn1.g(i, j, k - 1))
+        if(l == 3 && world1.g(i, j, k - 1))
             i1 = 3;
-        if(l == 4 && cn1.g(i + 1, j, k))
+        if(l == 4 && world1.g(i + 1, j, k))
             i1 = 2;
-        if(l == 5 && cn1.g(i - 1, j, k))
+        if(l == 5 && world1.g(i - 1, j, k))
             i1 = 1;
-        cn1.b(i, j, k, i1);
+        world1.b(i, j, k, i1);
     }
 
-    public void a(cn cn1, int i, int j, int k, java.util.Random random)
+    public void a(World world1, int i, int j, int k, java.util.Random random)
     {
-        super.a(cn1, i, j, k, random);
-        if(cn1.e(i, j, k) == 0)
-            e(cn1, i, j, k);
+        super.a(world1, i, j, k, random);
+        if(world1.e(i, j, k) == 0)
+            e(world1, i, j, k);
     }
 
-    public void e(cn cn1, int i, int j, int k)
+    public void e(World world1, int i, int j, int k)
     {
-        if(cn1.g(i - 1, j, k))
-            cn1.b(i, j, k, 1);
+        if(world1.g(i - 1, j, k))
+            world1.b(i, j, k, 1);
         else
-        if(cn1.g(i + 1, j, k))
-            cn1.b(i, j, k, 2);
+        if(world1.g(i + 1, j, k))
+            world1.b(i, j, k, 2);
         else
-        if(cn1.g(i, j, k - 1))
-            cn1.b(i, j, k, 3);
+        if(world1.g(i, j, k - 1))
+            world1.b(i, j, k, 3);
         else
-        if(cn1.g(i, j, k + 1))
-            cn1.b(i, j, k, 4);
+        if(world1.g(i, j, k + 1))
+            world1.b(i, j, k, 4);
         else
-        if(cn1.g(i, j - 1, k))
-            cn1.b(i, j, k, 5);
-        h(cn1, i, j, k);
+        if(world1.g(i, j - 1, k))
+            world1.b(i, j, k, 5);
+        h(world1, i, j, k);
     }
 
-    public void a(cn cn1, int i, int j, int k, int l)
+    public void a(World world1, int i, int j, int k, int l)
     {
-        if(h(cn1, i, j, k))
+        if(h(world1, i, j, k))
         {
-            int i1 = cn1.e(i, j, k);
+            int i1 = world1.e(i, j, k);
             boolean flag = false;
-            if(!cn1.g(i - 1, j, k) && i1 == 1)
+            if(!world1.g(i - 1, j, k) && i1 == 1)
                 flag = true;
-            if(!cn1.g(i + 1, j, k) && i1 == 2)
+            if(!world1.g(i + 1, j, k) && i1 == 2)
                 flag = true;
-            if(!cn1.g(i, j, k - 1) && i1 == 3)
+            if(!world1.g(i, j, k - 1) && i1 == 3)
                 flag = true;
-            if(!cn1.g(i, j, k + 1) && i1 == 4)
+            if(!world1.g(i, j, k + 1) && i1 == 4)
                 flag = true;
-            if(!cn1.g(i, j - 1, k) && i1 == 5)
+            if(!world1.g(i, j - 1, k) && i1 == 5)
                 flag = true;
             if(flag)
             {
-                b_(cn1, i, j, k, cn1.e(i, j, k));
-                cn1.d(i, j, k, 0);
+                b_(world1, i, j, k, world1.e(i, j, k));
+                world1.d(i, j, k, 0);
             }
         }
     }
 
-    private boolean h(cn cn1, int i, int j, int k)
+    private boolean h(World world1, int i, int j, int k)
     {
-        if(!a(cn1, i, j, k))
+        if(!a(world1, i, j, k))
         {
-            b_(cn1, i, j, k, cn1.e(i, j, k));
-            cn1.d(i, j, k, 0);
+            b_(world1, i, j, k, world1.e(i, j, k));
+            world1.d(i, j, k, 0);
             return false;
         } else
         {
@@ -126,9 +123,9 @@ public class mj extends ly
         }
     }
 
-    public mf a(cn cn1, int i, int j, int k, aj aj, aj aj1)
+    public mf a(World world1, int i, int j, int k, aj aj, aj aj1)
     {
-        int l = cn1.e(i, j, k) & 7;
+        int l = world1.e(i, j, k) & 7;
         float f1 = 0.15F;
         if(l == 1)
             a(0.0F, 0.2F, 0.5F - f1, f1 * 2.0F, 0.8F, 0.5F + f1);
@@ -147,12 +144,12 @@ public class mj extends ly
             float f2 = 0.1F;
             a(0.5F - f2, 0.0F, 0.5F - f2, 0.5F + f2, 0.6F, 0.5F + f2);
         }
-        return super.a(cn1, i, j, k, aj, aj1);
+        return super.a(world1, i, j, k, aj, aj1);
     }
 
-    public void b(cn cn1, int i, int j, int k, java.util.Random random)
+    public void b(World world1, int i, int j, int k, java.util.Random random)
     {
-        int l = cn1.e(i, j, k);
+        int l = world1.e(i, j, k);
         double d1 = (float)i + 0.5F;
         double d2 = (float)j + 0.7F;
         double d3 = (float)k + 0.5F;
@@ -160,27 +157,27 @@ public class mj extends ly
         double d5 = 0.27000001072883606D;
         if(l == 1)
         {
-            cn1.a("smoke", d1 - d5, d2 + d4, d3, 0.0D, 0.0D, 0.0D);
-            cn1.a("flame", d1 - d5, d2 + d4, d3, 0.0D, 0.0D, 0.0D);
+            world1.a("smoke", d1 - d5, d2 + d4, d3, 0.0D, 0.0D, 0.0D);
+            world1.a("flame", d1 - d5, d2 + d4, d3, 0.0D, 0.0D, 0.0D);
         } else
         if(l == 2)
         {
-            cn1.a("smoke", d1 + d5, d2 + d4, d3, 0.0D, 0.0D, 0.0D);
-            cn1.a("flame", d1 + d5, d2 + d4, d3, 0.0D, 0.0D, 0.0D);
+            world1.a("smoke", d1 + d5, d2 + d4, d3, 0.0D, 0.0D, 0.0D);
+            world1.a("flame", d1 + d5, d2 + d4, d3, 0.0D, 0.0D, 0.0D);
         } else
         if(l == 3)
         {
-            cn1.a("smoke", d1, d2 + d4, d3 - d5, 0.0D, 0.0D, 0.0D);
-            cn1.a("flame", d1, d2 + d4, d3 - d5, 0.0D, 0.0D, 0.0D);
+            world1.a("smoke", d1, d2 + d4, d3 - d5, 0.0D, 0.0D, 0.0D);
+            world1.a("flame", d1, d2 + d4, d3 - d5, 0.0D, 0.0D, 0.0D);
         } else
         if(l == 4)
         {
-            cn1.a("smoke", d1, d2 + d4, d3 + d5, 0.0D, 0.0D, 0.0D);
-            cn1.a("flame", d1, d2 + d4, d3 + d5, 0.0D, 0.0D, 0.0D);
+            world1.a("smoke", d1, d2 + d4, d3 + d5, 0.0D, 0.0D, 0.0D);
+            world1.a("flame", d1, d2 + d4, d3 + d5, 0.0D, 0.0D, 0.0D);
         } else
         {
-            cn1.a("smoke", d1, d2, d3, 0.0D, 0.0D, 0.0D);
-            cn1.a("flame", d1, d2, d3, 0.0D, 0.0D, 0.0D);
+            world1.a("smoke", d1, d2, d3, 0.0D, 0.0D, 0.0D);
+            world1.a("flame", d1, d2, d3, 0.0D, 0.0D, 0.0D);
         }
     }
 }
diff --git "a/temp\\src\\java/mk.java" "b/src\\main\\java/mk.java"
index 60b2fd1..5d9029d 100644
--- "a/temp\\src\\java/mk.java"
+++ "b/src\\main\\java/mk.java"
@@ -1,15 +1,13 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
 import java.util.ArrayList;
-import java.util.List;
 
 class mk
 {
 
-    private cn b;
+    private World b;
     private int c;
     private int d;
     private int e;
@@ -17,16 +15,16 @@ class mk
     private java.util.List g;
     final iffix a;
 
-    public mk(iffix if1, cn cn1, int i, int j, int k)
+    public mk(iffix if1, World world1, int i, int j, int k)
     {
         super();
         a = if1;
         g = ((java.util.List) (new ArrayList()));
-        b = cn1;
+        b = world1;
         c = i;
         d = j;
         e = k;
-        f = cn1.e(i, j, k);
+        f = world1.e(i, j, k);
         a();
     }
 
@@ -35,53 +33,53 @@ class mk
         g.clear();
         if(f == 0)
         {
-            g.add(((java.lang.Object) (new mt(c, d, e - 1))));
-            g.add(((java.lang.Object) (new mt(c, d, e + 1))));
+            g.add(((Object) (new mt(c, d, e - 1))));
+            g.add(((Object) (new mt(c, d, e + 1))));
         } else
         if(f == 1)
         {
-            g.add(((java.lang.Object) (new mt(c - 1, d, e))));
-            g.add(((java.lang.Object) (new mt(c + 1, d, e))));
+            g.add(((Object) (new mt(c - 1, d, e))));
+            g.add(((Object) (new mt(c + 1, d, e))));
         } else
         if(f == 2)
         {
-            g.add(((java.lang.Object) (new mt(c - 1, d, e))));
-            g.add(((java.lang.Object) (new mt(c + 1, d + 1, e))));
+            g.add(((Object) (new mt(c - 1, d, e))));
+            g.add(((Object) (new mt(c + 1, d + 1, e))));
         } else
         if(f == 3)
         {
-            g.add(((java.lang.Object) (new mt(c - 1, d + 1, e))));
-            g.add(((java.lang.Object) (new mt(c + 1, d, e))));
+            g.add(((Object) (new mt(c - 1, d + 1, e))));
+            g.add(((Object) (new mt(c + 1, d, e))));
         } else
         if(f == 4)
         {
-            g.add(((java.lang.Object) (new mt(c, d + 1, e - 1))));
-            g.add(((java.lang.Object) (new mt(c, d, e + 1))));
+            g.add(((Object) (new mt(c, d + 1, e - 1))));
+            g.add(((Object) (new mt(c, d, e + 1))));
         } else
         if(f == 5)
         {
-            g.add(((java.lang.Object) (new mt(c, d, e - 1))));
-            g.add(((java.lang.Object) (new mt(c, d + 1, e + 1))));
+            g.add(((Object) (new mt(c, d, e - 1))));
+            g.add(((Object) (new mt(c, d + 1, e + 1))));
         } else
         if(f == 6)
         {
-            g.add(((java.lang.Object) (new mt(c + 1, d, e))));
-            g.add(((java.lang.Object) (new mt(c, d, e + 1))));
+            g.add(((Object) (new mt(c + 1, d, e))));
+            g.add(((Object) (new mt(c, d, e + 1))));
         } else
         if(f == 7)
         {
-            g.add(((java.lang.Object) (new mt(c - 1, d, e))));
-            g.add(((java.lang.Object) (new mt(c, d, e + 1))));
+            g.add(((Object) (new mt(c - 1, d, e))));
+            g.add(((Object) (new mt(c, d, e + 1))));
         } else
         if(f == 8)
         {
-            g.add(((java.lang.Object) (new mt(c - 1, d, e))));
-            g.add(((java.lang.Object) (new mt(c, d, e - 1))));
+            g.add(((Object) (new mt(c - 1, d, e))));
+            g.add(((Object) (new mt(c, d, e - 1))));
         } else
         if(f == 9)
         {
-            g.add(((java.lang.Object) (new mt(c + 1, d, e))));
-            g.add(((java.lang.Object) (new mt(c, d, e - 1))));
+            g.add(((Object) (new mt(c + 1, d, e))));
+            g.add(((Object) (new mt(c, d, e - 1))));
         }
     }
 
@@ -93,7 +91,7 @@ class mk
             if(mk1 == null || !mk1.b(this))
                 g.remove(i--);
             else
-                g.set(i, ((java.lang.Object) (new mt(mk1.c, mk1.d, mk1.e))));
+                g.set(i, ((Object) (new mt(mk1.c, mk1.d, mk1.e))));
         }
 
     }
@@ -171,7 +169,7 @@ class mk
 
     private void d(mk mk1)
     {
-        g.add(((java.lang.Object) (new mt(mk1.c, mk1.d, mk1.e))));
+        g.add(((Object) (new mt(mk1.c, mk1.d, mk1.e))));
         boolean flag = b(c, d, e - 1);
         boolean flag1 = b(c, d, e + 1);
         boolean flag2 = b(c - 1, d, e);
diff --git "a/temp\\src\\java/ml.java" "b/src\\main\\java/ml.java"
index c3ed7ea..62860e5 100644
--- "a/temp\\src\\java/ml.java"
+++ "b/src\\main\\java/ml.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/mm.java" "b/src\\main\\java/mm.java"
index ac163a1..d5d39a0 100644
--- "a/temp\\src\\java/mm.java"
+++ "b/src\\main\\java/mm.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/mn.java" "b/src\\main\\java/mn.java"
index 67b22cd..d54b03e 100644
--- "a/temp\\src\\java/mn.java"
+++ "b/src\\main\\java/mn.java"
@@ -1,9 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.List;
 //import Minecraft;
 
 public class mn extends bh
@@ -12,10 +10,10 @@ public class mn extends bh
     private gy a;
     private boolean h;
 
-    public mn(Minecraft minecraft, java.lang.String s, int i)
+    public mn(Minecraft minecraft, String s, int i)
     {
         h = false;
-        minecraft.a(((cn) (null)));
+        minecraft.a(((World) (null)));
         (new nc(this, minecraft, s, i)).start();
     }
 
@@ -32,7 +30,7 @@ public class mn extends bh
     public void a()
     {
         e.clear();
-        e.add(((java.lang.Object) (new fk(0, c / 2 - 100, d / 4 + 120 + 12, "Cancel"))));
+        e.add(((Object) (new fk(0, c / 2 - 100, d / 4 + 120 + 12, "Cancel"))));
     }
 
     protected void a(fk fk1)
diff --git "a/temp\\src\\java/mo.java" "b/src\\main\\java/mo.java"
index 4c9c91e..c40e133 100644
--- "a/temp\\src\\java/mo.java"
+++ "b/src\\main\\java/mo.java"
@@ -1,10 +1,8 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
 //import Minecraft;
-import org.lwjgl.opengl.GL11;
 
 public class mo extends fk
 {
@@ -13,7 +11,7 @@ public class mo extends fk
     public boolean j;
     private int l;
 
-    public mo(int k, int i1, int j1, int k1, java.lang.String s, float f)
+    public mo(int k, int i1, int j1, int k1, String s, float f)
     {
         super(k, i1, j1, 150, 20, s);
         i = 1.0F;
diff --git "a/temp\\src\\java/mp.java" "b/src\\main\\java/mp.java"
index bd10bd3..f24fb1b 100644
--- "a/temp\\src\\java/mp.java"
+++ "b/src\\main\\java/mp.java"
@@ -1,13 +1,8 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.awt.Component;
-import java.nio.IntBuffer;
-import org.lwjgl.LWJGLException;
 import org.lwjgl.input.Cursor;
-import org.lwjgl.input.Mouse;
 
 public class mp
 {
diff --git "a/temp\\src\\java/mq.java" "b/src\\main\\java/mq.java"
index a8d7b3f..5e47267 100644
--- "a/temp\\src\\java/mq.java"
+++ "b/src\\main\\java/mq.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class mq extends ly
 {
 
@@ -17,9 +14,9 @@ public class mq extends ly
         a(0.5F - f1, 0.0F, 0.5F - f1, 0.5F + f1, f1 * 3F, 0.5F + f1);
     }
 
-    public boolean a(cn cn1, int i, int j, int k)
+    public boolean a(World world1, int i, int j, int k)
     {
-        return b(cn1.a(i, j - 1, k));
+        return b(world1.a(i, j - 1, k));
     }
 
     protected boolean b(int i)
@@ -27,32 +24,32 @@ public class mq extends ly
         return i == ly.v.bc || i == ly.w.bc || i == ly.aB.bc;
     }
 
-    public void a(cn cn1, int i, int j, int k, int l)
+    public void a(World world1, int i, int j, int k, int l)
     {
-        super.a(cn1, i, j, k, l);
-        h(cn1, i, j, k);
+        super.a(world1, i, j, k, l);
+        h(world1, i, j, k);
     }
 
-    public void a(cn cn1, int i, int j, int k, java.util.Random random)
+    public void a(World world1, int i, int j, int k, java.util.Random random)
     {
-        h(cn1, i, j, k);
+        h(world1, i, j, k);
     }
 
-    protected final void h(cn cn1, int i, int j, int k)
+    protected final void h(World world1, int i, int j, int k)
     {
-        if(!g(cn1, i, j, k))
+        if(!g(world1, i, j, k))
         {
-            b_(cn1, i, j, k, cn1.e(i, j, k));
-            cn1.d(i, j, k, 0);
+            b_(world1, i, j, k, world1.e(i, j, k));
+            world1.d(i, j, k, 0);
         }
     }
 
-    public boolean g(cn cn1, int i, int j, int k)
+    public boolean g(World world1, int i, int j, int k)
     {
-        return (cn1.j(i, j, k) >= 8 || cn1.i(i, j, k)) && b(cn1.a(i, j - 1, k));
+        return (world1.j(i, j, k) >= 8 || world1.i(i, j, k)) && b(world1.a(i, j - 1, k));
     }
 
-    public cf d(cn cn1, int i, int j, int k)
+    public cf d(World world1, int i, int j, int k)
     {
         return null;
     }
diff --git "a/temp\\src\\java/mr.java" "b/src\\main\\java/mr.java"
index b4d3fee..846c980 100644
--- "a/temp\\src\\java/mr.java"
+++ "b/src\\main\\java/mr.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/ms.java" "b/src\\main\\java/ms.java"
index 967732b..ba76880 100644
--- "a/temp\\src\\java/ms.java"
+++ "b/src\\main\\java/ms.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/mt.java" "b/src\\main\\java/mt.java"
index 80af759..dea9989 100644
--- "a/temp\\src\\java/mt.java"
+++ "b/src\\main\\java/mt.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -18,7 +17,7 @@ public class mt
         c = k;
     }
 
-    public boolean equals(java.lang.Object obj)
+    public boolean equals(Object obj)
     {
         if(obj instanceof mt)
         {
diff --git "a/temp\\src\\java/mu.java" "b/src\\main\\java/mu.java"
index e256025..413b4af 100644
--- "a/temp\\src\\java/mu.java"
+++ "b/src\\main\\java/mu.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/mv.java" "b/temp\\src\\java/mv.java"
deleted file mode 100644
index df9c6fe..0000000
--- "a/temp\\src\\java/mv.java"
+++ /dev/null
@@ -1,64 +0,0 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
-// Jad home page: http://www.kpdus.com/jad.html
-// Decompiler options: fullnames deadcode fieldsfirst safe 
-// Source File Name:   SourceFile
-
-
-public class mv extends ag
-{
-
-    public boolean a;
-
-    public mv(cn cn)
-    {
-        super(cn);
-        a = false;
-        u = "/mob/pig.png";
-        a(0.9F, 0.9F);
-        a = false;
-    }
-
-    public void a(hm hm1)
-    {
-        super.a(hm1);
-        hm1.a("Saddle", a);
-    }
-
-    public void b(hm hm1)
-    {
-        super.b(hm1);
-        a = hm1.m("Saddle");
-    }
-
-    protected java.lang.String c()
-    {
-        return "mob.pig";
-    }
-
-    protected java.lang.String d()
-    {
-        return "mob.pig";
-    }
-
-    protected java.lang.String e()
-    {
-        return "mob.pigdeath";
-    }
-
-    public boolean a(dm dm1)
-    {
-        if(a)
-        {
-            dm1.g(((kh) (this)));
-            return true;
-        } else
-        {
-            return false;
-        }
-    }
-
-    protected int g()
-    {
-        return di.ao.aS;
-    }
-}
diff --git "a/temp\\src\\java/mw.java" "b/src\\main\\java/mw.java"
index 9b6786a..65e879c 100644
--- "a/temp\\src\\java/mw.java"
+++ "b/src\\main\\java/mw.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -25,7 +24,7 @@ public class mw
         return a[i];
     }
 
-    public java.lang.String d()
+    public String d()
     {
         return "Result";
     }
diff --git "a/temp\\src\\java/mx.java" "b/src\\main\\java/mx.java"
index 4a668a5..9ed7f88 100644
--- "a/temp\\src\\java/mx.java"
+++ "b/src\\main\\java/mx.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -8,11 +7,11 @@ class mx
 {
 
     final int a;
-    java.lang.Object b;
+    Object b;
     mx c;
     final int d;
 
-    mx(int i, int j, java.lang.Object obj, mx mx1)
+    mx(int i, int j, Object obj, mx mx1)
     {
         b = obj;
         c = mx1;
@@ -25,22 +24,22 @@ class mx
         return a;
     }
 
-    public final java.lang.Object b()
+    public final Object b()
     {
         return b;
     }
 
-    public final boolean equals(java.lang.Object obj)
+    public final boolean equals(Object obj)
     {
         if(!(obj instanceof mx))
             return false;
         mx mx1 = (mx)obj;
         java.lang.Integer integer = java.lang.Integer.valueOf(a());
         java.lang.Integer integer1 = java.lang.Integer.valueOf(mx1.a());
-        if(integer == integer1 || integer != null && ((java.lang.Object) (integer)).equals(((java.lang.Object) (integer1))))
+        if(integer == integer1 || integer != null && ((Object) (integer)).equals(((Object) (integer1))))
         {
-            java.lang.Object obj1 = b();
-            java.lang.Object obj2 = mx1.b();
+            Object obj1 = b();
+            Object obj2 = mx1.b();
             if(obj1 == obj2 || obj1 != null && obj1.equals(obj2))
                 return true;
         }
@@ -52,7 +51,7 @@ class mx
         return fi.d(a);
     }
 
-    public final java.lang.String toString()
+    public final String toString()
     {
         return (new StringBuilder()).append(a()).append("=").append(b()).toString();
     }
diff --git "a/temp\\src\\java/my.java" "b/src\\main\\java/my.java"
index 0a519e8..a741a5c 100644
--- "a/temp\\src\\java/my.java"
+++ "b/src\\main\\java/my.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class my extends ly
 {
 
@@ -25,21 +22,21 @@ public class my extends ly
         return gb1 != gb.s && gb1 != gb.t ? 3 : 68;
     }
 
-    public void a(cn cn1, int i, int j, int k, java.util.Random random)
+    public void a(World world1, int i, int j, int k, java.util.Random random)
     {
-        if(cn1.j(i, j + 1, k) < 4 && cn1.f(i, j + 1, k).b())
+        if(world1.j(i, j + 1, k) < 4 && world1.f(i, j + 1, k).b())
         {
             if(random.nextInt(4) != 0)
                 return;
-            cn1.d(i, j, k, ly.w.bc);
+            world1.d(i, j, k, ly.w.bc);
         } else
-        if(cn1.j(i, j + 1, k) >= 9)
+        if(world1.j(i, j + 1, k) >= 9)
         {
             int l = (i + random.nextInt(3)) - 1;
             int i1 = (j + random.nextInt(5)) - 3;
             int j1 = (k + random.nextInt(3)) - 1;
-            if(cn1.a(l, i1, j1) == ly.w.bc && cn1.j(l, i1 + 1, j1) >= 4 && !cn1.f(l, i1 + 1, j1).b())
-                cn1.d(l, i1, j1, ly.v.bc);
+            if(world1.a(l, i1, j1) == ly.w.bc && world1.j(l, i1 + 1, j1) >= 4 && !world1.f(l, i1 + 1, j1).b())
+                world1.d(l, i1, j1, ly.v.bc);
         }
     }
 
diff --git "a/temp\\src\\java/n.java" "b/src\\main\\java/n.java"
index 6aecbde..6792d98 100644
--- "a/temp\\src\\java/n.java"
+++ "b/src\\main\\java/n.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -29,7 +28,7 @@ public class n extends ar
                 {
                     ev ev1 = a.c(i + j * 2);
                     if(ev1 != null)
-                        k = ev1.c;
+                        k = ev1.id;
                 }
                 ai[i + j * 3] = k;
             }
@@ -39,14 +38,14 @@ public class n extends ar
         b.a(0, dw.a().a(ai));
     }
 
-    public void a(dm dm1)
+    public void a(Player player1)
     {
-        super.a(dm1);
+        super.a(player1);
         for(int i = 0; i < 9; i++)
         {
             ev ev1 = a.c(i);
             if(ev1 != null)
-                dm1.a(ev1);
+                player1.a(ev1);
         }
 
     }
diff --git "a/temp\\src\\java/na.java" "b/src\\main\\java/na.java"
index 1168204..3a3603f 100644
--- "a/temp\\src\\java/na.java"
+++ "b/src\\main\\java/na.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
 import java.io.IOException;
 
 public class na extends fn
diff --git "a/temp\\src\\java/nb.java" "b/src\\main\\java/nb.java"
index fc33542..85f5a20 100644
--- "a/temp\\src\\java/nb.java"
+++ "b/src\\main\\java/nb.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/nc.java" "b/src\\main\\java/nc.java"
index 452976d..eb6fef8 100644
--- "a/temp\\src\\java/nc.java"
+++ "b/src\\main\\java/nc.java"
@@ -1,25 +1,22 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.net.ConnectException;
-import java.net.UnknownHostException;
 //import Minecraft;
 
 class nc extends java.lang.Thread
 {
 
-    final Minecraft a;
-    final java.lang.String b;
+    final Minecraft minecraft;
+    final String b;
     final int c;
     final mn d;
 
-    nc(mn mn1, Minecraft minecraft, java.lang.String s, int i)
+    nc(mn mn1, Minecraft minecraft, String s, int i)
     {
         super();
         d = mn1;
-        a = minecraft;
+        this.minecraft = minecraft;
         b = s;
         c = i;
     }
@@ -28,29 +25,29 @@ class nc extends java.lang.Thread
     {
         try
         {
-        mn.a(d, new gy(a, b, c));
+        mn.a(d, new gy(minecraft, b, c));
         if(mn.a(d))
             return;
-            mn.b(d).a(((fn) (new gt(a.i.b))));
+            mn.b(d).a(((fn) (new gt(minecraft.i.b))));
         }
         catch(java.net.UnknownHostException unknownhostexception)
         {
             if(mn.a(d))
                 return;
-            a.a(((bh) (new cj("Failed to connect to the server", (new StringBuilder()).append("Unknown host '").append(b).append("'").toString()))));
+            minecraft.a(((bh) (new cj("Failed to connect to the server", (new StringBuilder()).append("Unknown host '").append(b).append("'").toString()))));
         }
         catch(java.net.ConnectException connectexception)
         {
             if(mn.a(d))
                 return;
-            a.a(((bh) (new cj("Failed to connect to the server", connectexception.getMessage()))));
+            minecraft.a(((bh) (new cj("Failed to connect to the server", connectexception.getMessage()))));
         }
         catch(java.lang.Exception exception)
         {
             if(mn.a(d))
                 return;
             exception.printStackTrace();
-            a.a(((bh) (new cj("Failed to connect to the server", exception.toString()))));
+            minecraft.a(((bh) (new cj("Failed to connect to the server", exception.toString()))));
         }
     }
 }
diff --git "a/temp\\src\\java/nd.java" "b/src\\main\\java/nd.java"
index 82d1292..b262ccb 100644
--- "a/temp\\src\\java/nd.java"
+++ "b/src\\main\\java/nd.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -7,19 +6,19 @@
 public class nd
 {
 
-    private java.lang.String a[][] = {
+    private String a[][] = {
         {
             "X", "X", "#"
         }
     };
-    private java.lang.Object b[][];
+    private Object b[][];
 
     public nd()
     {
-        b = (new java.lang.Object[][] {
-            new java.lang.Object[] {
+        b = (new Object[][] {
+            new Object[] {
                 ly.y, ly.x, di.m, di.l, di.n
-            }, new java.lang.Object[] {
+            }, new Object[] {
                 di.p, di.t, di.o, di.x, di.E
             }
         });
@@ -29,21 +28,21 @@ public class nd
     {
         for(int i = 0; i < b[0].length; i++)
         {
-            java.lang.Object obj = b[0][i];
+            Object obj = b[0][i];
             for(int j = 0; j < b.length - 1; j++)
             {
                 di di1 = (di)b[j + 1][i];
-                dw1.a(new ev(di1), new java.lang.Object[] {
+                dw1.a(new ev(di1), new Object[] {
                     a[j], java.lang.Character.valueOf('#'), di.B, java.lang.Character.valueOf('X'), obj
                 });
             }
 
         }
 
-        dw1.a(new ev(di.i, 1), new java.lang.Object[] {
+        dw1.a(new ev(di.i, 1), new Object[] {
             " #X", "# X", " #X", java.lang.Character.valueOf('X'), di.I, java.lang.Character.valueOf('#'), di.B
         });
-        dw1.a(new ev(di.j, 4), new java.lang.Object[] {
+        dw1.a(new ev(di.j, 4), new Object[] {
             "X", "#", "Y", java.lang.Character.valueOf('Y'), di.J, java.lang.Character.valueOf('X'), di.an, java.lang.Character.valueOf('#'), di.B
         });
     }
diff --git "a/src\\main\\java/net/minecraft/launchwrapper/AlphaVanillaTweaker.java" "b/src\\main\\java/net/minecraft/launchwrapper/AlphaVanillaTweaker.java"
new file mode 100644
index 0000000..2172ea4
--- /dev/null
+++ "b/src\\main\\java/net/minecraft/launchwrapper/AlphaVanillaTweaker.java"
@@ -0,0 +1,33 @@
+/*    */ package net.minecraft.launchwrapper;
+/*    */ 
+/*    */ import java.io.File;
+/*    */ import java.util.List;
+/*    */ 
+/*    */ public class AlphaVanillaTweaker
+/*    */   implements ITweaker
+/*    */ {
+/*    */   public static File gameDir;
+/*    */   public static File assetsDir;
+/*    */   private List<String> args;
+/*    */   
+/*    */   public void acceptOptions(List<String> args, File gameDir, File assetsDir, String profile) {
+/* 14 */     this.args = args;
+/* 15 */     AlphaVanillaTweaker.gameDir = gameDir;
+/* 16 */     AlphaVanillaTweaker.assetsDir = assetsDir;
+/*    */   }
+/*    */ 
+/*    */   
+/*    */   public void injectIntoClassLoader(LaunchClassLoader classLoader) {
+/* 21 */     classLoader.registerTransformer("net.minecraft.launchwrapper.injector.AlphaVanillaTweakInjector");
+/*    */   }
+/*    */ 
+/*    */   
+/*    */   public String getLaunchTarget() {
+/* 26 */     return "net.minecraft.launchwrapper.injector.AlphaVanillaTweakInjector";
+/*    */   }
+/*    */ 
+/*    */   
+/*    */   public String[] getLaunchArguments() {
+/* 31 */     return this.args.<String>toArray(new String[this.args.size()]);
+/*    */   }
+/*    */ }
diff --git "a/src\\main\\java/net/minecraft/launchwrapper/IClassNameTransformer.java" "b/src\\main\\java/net/minecraft/launchwrapper/IClassNameTransformer.java"
new file mode 100644
index 0000000..08a4d99
--- /dev/null
+++ "b/src\\main\\java/net/minecraft/launchwrapper/IClassNameTransformer.java"
@@ -0,0 +1,7 @@
+package net.minecraft.launchwrapper;
+
+public interface IClassNameTransformer {
+  String unmapClassName(String paramString);
+  
+  String remapClassName(String paramString);
+}
diff --git "a/src\\main\\java/net/minecraft/launchwrapper/IClassTransformer.java" "b/src\\main\\java/net/minecraft/launchwrapper/IClassTransformer.java"
new file mode 100644
index 0000000..bfe8c05
--- /dev/null
+++ "b/src\\main\\java/net/minecraft/launchwrapper/IClassTransformer.java"
@@ -0,0 +1,5 @@
+package net.minecraft.launchwrapper;
+
+public interface IClassTransformer {
+  byte[] transform(String paramString1, String paramString2, byte[] paramArrayOfbyte);
+}
diff --git "a/src\\main\\java/net/minecraft/launchwrapper/ITweaker.java" "b/src\\main\\java/net/minecraft/launchwrapper/ITweaker.java"
new file mode 100644
index 0000000..cd6cc6f
--- /dev/null
+++ "b/src\\main\\java/net/minecraft/launchwrapper/ITweaker.java"
@@ -0,0 +1,14 @@
+package net.minecraft.launchwrapper;
+
+import java.io.File;
+import java.util.List;
+
+public interface ITweaker {
+  void acceptOptions(List<String> paramList, File paramFile1, File paramFile2, String paramString);
+  
+  void injectIntoClassLoader(LaunchClassLoader paramLaunchClassLoader);
+  
+  String getLaunchTarget();
+  
+  String[] getLaunchArguments();
+}
diff --git "a/src\\main\\java/net/minecraft/launchwrapper/IndevVanillaTweaker.java" "b/src\\main\\java/net/minecraft/launchwrapper/IndevVanillaTweaker.java"
new file mode 100644
index 0000000..f10a64f
--- /dev/null
+++ "b/src\\main\\java/net/minecraft/launchwrapper/IndevVanillaTweaker.java"
@@ -0,0 +1,33 @@
+/*    */ package net.minecraft.launchwrapper;
+/*    */ 
+/*    */ import java.io.File;
+/*    */ import java.util.List;
+/*    */ 
+/*    */ public class IndevVanillaTweaker
+/*    */   implements ITweaker
+/*    */ {
+/*    */   public static File gameDir;
+/*    */   public static File assetsDir;
+/*    */   private List<String> args;
+/*    */   
+/*    */   public void acceptOptions(List<String> args, File gameDir, File assetsDir, String profile) {
+/* 14 */     this.args = args;
+/* 15 */     IndevVanillaTweaker.gameDir = gameDir;
+/* 16 */     IndevVanillaTweaker.assetsDir = assetsDir;
+/*    */   }
+/*    */ 
+/*    */   
+/*    */   public void injectIntoClassLoader(LaunchClassLoader classLoader) {
+/* 21 */     classLoader.registerTransformer("net.minecraft.launchwrapper.injector.IndevVanillaTweakInjector");
+/*    */   }
+/*    */ 
+/*    */   
+/*    */   public String getLaunchTarget() {
+/* 26 */     return "net.minecraft.launchwrapper.injector.AlphaVanillaTweakInjector";
+/*    */   }
+/*    */ 
+/*    */   
+/*    */   public String[] getLaunchArguments() {
+/* 31 */     return this.args.<String>toArray(new String[this.args.size()]);
+/*    */   }
+/*    */ }
diff --git "a/src\\main\\java/net/minecraft/launchwrapper/Launch.java" "b/src\\main\\java/net/minecraft/launchwrapper/Launch.java"
new file mode 100644
index 0000000..1919071
--- /dev/null
+++ "b/src\\main\\java/net/minecraft/launchwrapper/Launch.java"
@@ -0,0 +1,64 @@
+/*    */ package net.minecraft.launchwrapper;
+/*    */ 
+/*    */ import java.io.File;
+/*    */ import java.lang.reflect.Method;
+/*    */ import java.net.URLClassLoader;
+/*    */ import java.util.logging.Level;
+/*    */ import joptsimple.ArgumentAcceptingOptionSpec;
+/*    */ import joptsimple.NonOptionArgumentSpec;
+/*    */ import joptsimple.OptionParser;
+/*    */ import joptsimple.OptionSet;
+/*    */ import joptsimple.OptionSpec;
+
+/*    */
+/*    */ public class Launch {
+/*    */   private static final String DEFAULT_TWEAK = "net.minecraft.launchwrapper.VanillaTweaker";
+/*    */   public static File minecraftHome;
+/*    */   
+/*    */   public static void main(String[] args) {
+/* 18 */     (new Launch()).launch(args);
+/*    */   }
+/*    */   
+/*    */   public static File assetsDir;
+/*    */   
+/*    */   private Launch() {
+/* 24 */     URLClassLoader ucl = (URLClassLoader)getClass().getClassLoader();
+/* 25 */     classLoader = new LaunchClassLoader(ucl.getURLs());
+/*    */   }
+/*    */   public static LaunchClassLoader classLoader;
+/*    */   private void launch(String[] args) {
+/* 29 */     OptionParser parser = new OptionParser();
+/* 30 */     parser.allowsUnrecognizedOptions();
+/*    */     
+/* 32 */     ArgumentAcceptingOptionSpec argumentAcceptingOptionSpec1 = parser.accepts("version", "The version we launched with").withRequiredArg();
+/* 33 */     ArgumentAcceptingOptionSpec argumentAcceptingOptionSpec2 = parser.accepts("gameDir", "Alternative game directory").withRequiredArg().ofType(File.class);
+/* 34 */     ArgumentAcceptingOptionSpec argumentAcceptingOptionSpec3 = parser.accepts("assetsDir", "Assets directory").withRequiredArg().ofType(File.class);
+/* 35 */     ArgumentAcceptingOptionSpec argumentAcceptingOptionSpec4 = parser.accepts("tweakClass", "Tweak class to load").withRequiredArg().defaultsTo("net.minecraft.launchwrapper.VanillaTweaker", new String[0]);
+/* 36 */     NonOptionArgumentSpec nonOptionArgumentSpec = parser.nonOptions();
+/*    */     
+/* 38 */     OptionSet options = parser.parse(args);
+/* 39 */     minecraftHome = (File)options.valueOf((OptionSpec)argumentAcceptingOptionSpec2);
+/* 40 */     assetsDir = (File)options.valueOf((OptionSpec)argumentAcceptingOptionSpec3);
+/* 41 */     String profileName = (String)options.valueOf((OptionSpec)argumentAcceptingOptionSpec1);
+/* 42 */     String tweakClassName = (String)options.valueOf((OptionSpec)argumentAcceptingOptionSpec4);
+/*    */     
+/*    */     try {
+/* 45 */       LogWrapper.log(Level.INFO, "Using tweak class name %s", new Object[] { tweakClassName });
+/*    */ 
+/*    */       
+/* 48 */       classLoader.addClassLoaderExclusion(tweakClassName.substring(0, tweakClassName.lastIndexOf('.')));
+/* 49 */       ITweaker tweaker = (ITweaker)Class.forName(tweakClassName, true, classLoader).newInstance();
+/* 50 */       tweaker.acceptOptions(options.valuesOf((OptionSpec)nonOptionArgumentSpec), minecraftHome, assetsDir, profileName);
+/* 51 */       tweaker.injectIntoClassLoader(classLoader);
+/*    */
+                Class<?> clazz = Class.forName(tweaker.getLaunchTarget());
+/* 54 */       Method mainMethod = clazz.getMethod("main", new Class[] { String[].class });
+
+/*    */       
+/* 56 */       LogWrapper.info("Launching wrapped minecraft", new Object[0]);
+/* 57 */       mainMethod.invoke(null, new Object[] { tweaker.getLaunchArguments() });
+/* 58 */     } catch (Exception e) {
+/* 59 */       LogWrapper.log(Level.SEVERE, e, "Unable to launch", new Object[0]);
+/*    */     } 
+/*    */   }
+/*    */ }
diff --git "a/src\\main\\java/net/minecraft/launchwrapper/LaunchClassLoader.java" "b/src\\main\\java/net/minecraft/launchwrapper/LaunchClassLoader.java"
new file mode 100644
index 0000000..c07f247
--- /dev/null
+++ "b/src\\main\\java/net/minecraft/launchwrapper/LaunchClassLoader.java"
@@ -0,0 +1,372 @@
+/*     */ package net.minecraft.launchwrapper;
+/*     */ import java.io.*;
+/*     */
+/*     */
+/*     */
+/*     */ import java.net.JarURLConnection;
+/*     */ import java.net.URL;
+/*     */ import java.net.URLClassLoader;
+import java.net.URLConnection;
+/*     */ import java.security.CodeSigner;
+/*     */ import java.security.CodeSource;
+/*     */ import java.util.*;
+/*     */
+/*     */
+/*     */
+/*     */ import java.util.jar.Attributes;
+/*     */ import java.util.jar.JarEntry;
+import java.util.jar.JarFile;
+/*     */ import java.util.jar.Manifest;
+/*     */ import java.util.logging.Level;
+/*     */ 
+/*     */ public class LaunchClassLoader extends URLClassLoader {
+/*  21 */   private ClassLoader parent = getClass().getClassLoader(); public static final int BUFFER_SIZE = 4096;
+/*     */   private List<URL> sources;
+/*  23 */   private List<IClassTransformer> transformers = new ArrayList<>(2);
+/*  24 */   private Map<String, Class> cachedClasses = (Map)new HashMap<String, Class<?>>(1000);
+/*  25 */   private Set<String> invalidClasses = new HashSet<String>(1000);
+/*     */   
+/*  27 */   private Set<String> classLoaderExceptions = new HashSet<String>();
+/*  28 */   private Set<String> transformerExceptions = new HashSet<String>();
+/*  29 */   private Map<Package, Manifest> packageManifests = new HashMap<>();
+/*     */   
+/*     */   private IClassNameTransformer renameTransformer;
+/*  32 */   private static final Manifest EMPTY = new Manifest();
+/*     */   
+/*  34 */   private final ThreadLocal<Byte[]> loadBuffer = (ThreadLocal)new ThreadLocal<Byte>();
+/*     */   
+/*  36 */   private static final String[] RESERVED_NAMES = new String[] { "CON", "PRN", "AUX", "NUL", "COM1", "COM2", "COM3", "COM4", "COM5", "COM6", "COM7", "COM8", "COM9", "LPT1", "LPT2", "LPT3", "LPT4", "LPT5", "LPT6", "LPT7", "LPT8", "LPT9" };
+/*     */   
+/*  38 */   private static final boolean DEBUG = Boolean.parseBoolean(System.getProperty("legacy.debugClassLoading", "false"));
+/*  39 */   private static final boolean DEBUG_FINER = (DEBUG && Boolean.parseBoolean(System.getProperty("legacy.debugClassLoadingFiner", "false")));
+/*  40 */   private static final boolean DEBUG_SAVE = (DEBUG && Boolean.parseBoolean(System.getProperty("legacy.debugClassLoadingSave", "false")));
+/*  41 */   private static File tempFolder = null;
+/*     */   
+/*     */   public LaunchClassLoader(URL[] sources) {
+/*  44 */     super(sources, (ClassLoader)null);
+/*  45 */     this.sources = new ArrayList<>(Arrays.asList(sources));
+/*  46 */     Thread.currentThread().setContextClassLoader(this);
+/*     */ 
+/*     */     
+/*  49 */     addClassLoaderExclusion("java.");
+/*  50 */     addClassLoaderExclusion("sun.");
+/*  51 */     addClassLoaderExclusion("org.lwjgl.");
+/*  52 */     addClassLoaderExclusion("net.minecraft.launchwrapper.");
+/*     */ 
+/*     */     
+/*  55 */     addTransformerExclusion("javax.");
+/*  56 */     addTransformerExclusion("argo.");
+/*  57 */     addTransformerExclusion("org.objectweb.asm.");
+/*  58 */     addTransformerExclusion("com.google.common.");
+/*  59 */     addTransformerExclusion("org.bouncycastle.");
+/*  60 */     addTransformerExclusion("net.minecraft.launchwrapper.injector.");
+/*     */     
+/*  62 */     if (DEBUG_SAVE) {
+/*  63 */       int x = 1;
+/*  64 */       tempFolder = new File(Launch.minecraftHome, "CLASSLOADER_TEMP");
+/*  65 */       while (tempFolder.exists() && x <= 10) {
+/*  66 */         tempFolder = new File(Launch.minecraftHome, "CLASSLOADER_TEMP" + x++);
+/*     */       }
+/*     */       
+/*  69 */       if (tempFolder.exists()) {
+/*  70 */         LogWrapper.info("DEBUG_SAVE enabled, but 10 temp directories already exist, clean them and try again.", new Object[0]);
+/*  71 */         tempFolder = null;
+/*     */       } else {
+/*  73 */         LogWrapper.info("DEBUG_SAVE Enabled, saving all classes to \"%s\"", new Object[] { tempFolder.getAbsolutePath().replace('\\', '/') });
+/*  74 */         tempFolder.mkdirs();
+/*     */       } 
+/*     */     } 
+/*     */   }
+/*     */   
+/*     */   public void registerTransformer(String transformerClassName) {
+/*     */     try {
+/*  81 */       IClassTransformer transformer = (IClassTransformer)loadClass(transformerClassName).newInstance();
+/*  82 */       this.transformers.add(transformer);
+/*  83 */       if (transformer instanceof IClassNameTransformer && this.renameTransformer == null) {
+/*  84 */         this.renameTransformer = (IClassNameTransformer)transformer;
+/*     */       }
+/*  86 */     } catch (Exception e) {
+/*  87 */       LogWrapper.log(Level.SEVERE, e, "A critical problem occurred registering the ASM transformer class %s", new Object[] { transformerClassName });
+/*     */     } 
+/*     */   }
+/*     */ 
+/*     */   
+/*     */   public Class<?> findClass(String name) throws ClassNotFoundException {
+/*  93 */     if (this.invalidClasses.contains(name)) {
+/*  94 */       throw new ClassNotFoundException(name);
+/*     */     }
+/*     */     
+/*  97 */     for (String exception : this.classLoaderExceptions) {
+/*  98 */       if (name.startsWith(exception)) {
+/*  99 */         return this.parent.loadClass(name);
+/*     */       }
+/*     */     } 
+/*     */     
+/* 103 */     if (this.cachedClasses.containsKey(name)) {
+/* 104 */       return this.cachedClasses.get(name);
+/*     */     }
+/*     */     
+/* 107 */     for (String exception : this.transformerExceptions) {
+/* 108 */       if (name.startsWith(exception)) {
+/*     */         try {
+/* 110 */           Class<?> clazz = super.findClass(name);
+/* 111 */           this.cachedClasses.put(name, clazz);
+/* 112 */           return clazz;
+/* 113 */         } catch (ClassNotFoundException e) {
+/* 114 */           this.invalidClasses.add(name);
+/* 115 */           throw e;
+/*     */         } 
+/*     */       }
+/*     */     } 
+/*     */     
+/*     */     try {
+/* 121 */       String transformedName = transformName(name);
+/* 122 */       String untransformedName = untransformName(name);
+/*     */       
+/* 124 */       int lastDot = untransformedName.lastIndexOf('.');
+/* 125 */       String packageName = (lastDot == -1) ? "" : untransformedName.substring(0, lastDot);
+/* 126 */       String fileName = untransformedName.replace('.', '/').concat(".class");
+/* 127 */       URLConnection urlConnection = findCodeSourceConnectionFor(fileName);
+/*     */       
+/* 129 */       CodeSigner[] signers = null;
+/*     */       
+/* 131 */       if (lastDot > -1 && !untransformedName.startsWith("net.minecraft.")) {
+/* 132 */         if (urlConnection instanceof JarURLConnection) {
+/* 133 */           JarURLConnection jarURLConnection = (JarURLConnection)urlConnection;
+/* 134 */           JarFile jarFile = jarURLConnection.getJarFile();
+/*     */           
+/* 136 */           if (jarFile != null && jarFile.getManifest() != null) {
+/* 137 */             Manifest manifest = jarFile.getManifest();
+/* 138 */             JarEntry entry = jarFile.getJarEntry(fileName);
+/*     */             
+/* 140 */             Package pkg = getPackage(packageName);
+/* 141 */             getClassBytes(untransformedName);
+/* 142 */             signers = entry.getCodeSigners();
+/* 143 */             if (pkg == null) {
+/* 144 */               pkg = definePackage(packageName, manifest, jarURLConnection.getJarFileURL());
+/* 145 */               this.packageManifests.put(pkg, manifest);
+/*     */             }
+/* 147 */             else if (pkg.isSealed() && !pkg.isSealed(jarURLConnection.getJarFileURL())) {
+/* 148 */               LogWrapper.severe("The jar file %s is trying to seal already secured path %s", new Object[] { jarFile.getName(), packageName });
+/* 149 */             } else if (isSealed(packageName, manifest)) {
+/* 150 */               LogWrapper.severe("The jar file %s has a security seal for path %s, but that path is defined and not secure", new Object[] { jarFile.getName(), packageName });
+/*     */             } 
+/*     */           } 
+/*     */         } else {
+/*     */           
+/* 155 */           Package pkg = getPackage(packageName);
+/* 156 */           if (pkg == null) {
+/* 157 */             pkg = definePackage(packageName, null, null, null, null, null, null, null);
+/* 158 */             this.packageManifests.put(pkg, EMPTY);
+/* 159 */           } else if (pkg.isSealed()) {
+/* 160 */             LogWrapper.severe("The URL %s is defining elements for sealed path %s", new Object[] { urlConnection.getURL(), packageName });
+/*     */           } 
+/*     */         } 
+/*     */       }
+/*     */       
+/* 165 */       byte[] transformedClass = runTransformers(untransformedName, transformedName, getClassBytes(untransformedName));
+/* 166 */       if (DEBUG_SAVE) {
+/* 167 */         saveTransformedClass(transformedClass, transformedName);
+/*     */       }
+/*     */       
+/* 170 */       CodeSource codeSource = (urlConnection == null) ? null : new CodeSource(urlConnection.getURL(), signers);
+/* 171 */       Class<?> clazz = defineClass(transformedName, transformedClass, 0, transformedClass.length, codeSource);
+/* 172 */       this.cachedClasses.put(transformedName, clazz);
+/* 173 */       return clazz;
+/* 174 */     } catch (Throwable e) {
+/* 175 */       this.invalidClasses.add(name);
+/* 176 */       if (DEBUG) {
+/* 177 */         LogWrapper.log(Level.FINEST, e, "Exception encountered attempting classloading of %s", new Object[] { name });
+/*     */       }
+/* 179 */       throw new ClassNotFoundException(name, e);
+/*     */     } 
+/*     */   }
+/*     */   
+/*     */   private void saveTransformedClass(byte[] data, String transformedName) {
+/* 184 */     if (tempFolder == null) {
+/*     */       return;
+/*     */     }
+/*     */     
+/* 188 */     File outFile = new File(tempFolder, transformedName.replace('.', File.separatorChar) + ".class");
+/* 189 */     File outDir = outFile.getParentFile();
+/*     */     
+/* 191 */     if (!outDir.exists()) {
+/* 192 */       outDir.mkdirs();
+/*     */     }
+/*     */     
+/* 195 */     if (outFile.exists()) {
+/* 196 */       outFile.delete();
+/*     */     }
+/*     */     
+/*     */     try {
+/* 200 */       LogWrapper.fine("Saving transformed class \"%s\" to \"%s\"", new Object[] { transformedName, outFile.getAbsolutePath().replace('\\', '/') });
+/*     */       
+/* 202 */       OutputStream output = new FileOutputStream(outFile);
+/* 203 */       output.write(data);
+/* 204 */       output.close();
+/* 205 */     } catch (IOException ex) {
+/* 206 */       LogWrapper.log(Level.WARNING, ex, "Could not save transformed class \"%s\"", new Object[] { transformedName });
+/*     */     } 
+/*     */   }
+/*     */   
+/*     */   private String untransformName(String name) {
+/* 211 */     if (this.renameTransformer != null) {
+/* 212 */       return this.renameTransformer.unmapClassName(name);
+/*     */     }
+/*     */     
+/* 215 */     return name;
+/*     */   }
+/*     */   
+/*     */   private String transformName(String name) {
+/* 219 */     if (this.renameTransformer != null) {
+/* 220 */       return this.renameTransformer.remapClassName(name);
+/*     */     }
+/*     */     
+/* 223 */     return name;
+/*     */   }
+/*     */   
+/*     */   private boolean isSealed(String path, Manifest manifest) {
+/* 227 */     Attributes attributes = manifest.getAttributes(path);
+/* 228 */     String sealed = null;
+/* 229 */     if (attributes != null) {
+/* 230 */       sealed = attributes.getValue(Attributes.Name.SEALED);
+/*     */     }
+/*     */     
+/* 233 */     if (sealed == null) {
+/* 234 */       attributes = manifest.getMainAttributes();
+/* 235 */       if (attributes != null) {
+/* 236 */         sealed = attributes.getValue(Attributes.Name.SEALED);
+/*     */       }
+/*     */     } 
+/* 239 */     return "true".equalsIgnoreCase(sealed);
+/*     */   }
+/*     */   
+/*     */   private URLConnection findCodeSourceConnectionFor(String name) {
+/* 243 */     URL resource = findResource(name);
+/* 244 */     if (resource != null) {
+/*     */       try {
+/* 246 */         return resource.openConnection();
+/* 247 */       } catch (IOException e) {
+/* 248 */         throw new RuntimeException(e);
+/*     */       } 
+/*     */     }
+/*     */     
+/* 252 */     return null;
+/*     */   }
+/*     */   
+/*     */   private byte[] runTransformers(String name, String transformedName, byte[] basicClass) {
+/* 256 */     if (DEBUG_FINER) {
+/* 257 */       LogWrapper.finest("Beginning transform of %s (%s) Start Length: %d", new Object[] { name, transformedName, Integer.valueOf((basicClass == null) ? 0 : basicClass.length) });
+/* 258 */       for (IClassTransformer transformer : this.transformers) {
+/* 259 */         String transName = transformer.getClass().getName();
+/* 260 */         LogWrapper.finest("Before Transformer %s: %d", new Object[] { transName, Integer.valueOf((basicClass == null) ? 0 : basicClass.length) });
+/* 261 */         basicClass = transformer.transform(name, transformedName, basicClass);
+/* 262 */         LogWrapper.finest("After  Transformer %s: %d", new Object[] { transName, Integer.valueOf((basicClass == null) ? 0 : basicClass.length) });
+/*     */       } 
+/* 264 */       LogWrapper.finest("Ending transform of %s (%s) Start Length: %d", new Object[] { name, transformedName, Integer.valueOf((basicClass == null) ? 0 : basicClass.length) });
+/*     */     } else {
+/* 266 */       for (IClassTransformer transformer : this.transformers) {
+/* 267 */         basicClass = transformer.transform(name, transformedName, basicClass);
+/*     */       }
+/*     */     } 
+/* 270 */     return basicClass;
+/*     */   }
+/*     */ 
+/*     */   
+/*     */   public void addURL(URL url) {
+/* 275 */     super.addURL(url);
+/* 276 */     this.sources.add(url);
+/*     */   }
+/*     */   
+/*     */   public List<URL> getSources() {
+/* 280 */     return this.sources;
+/*     */   }
+/*     */   
+/*     */   private byte[] readFully(InputStream stream) {
+/*     */     try {
+/* 285 */       byte[] buffer = getOrCreateBuffer();
+/*     */ 
+/*     */       
+/* 288 */       int totalLength = 0; int read;
+/* 289 */       while ((read = stream.read(buffer, totalLength, buffer.length - totalLength)) != -1) {
+/* 290 */         totalLength += read;
+/*     */ 
+/*     */         
+/* 293 */         if (totalLength >= buffer.length - 1) {
+/* 294 */           byte[] newBuffer = new byte[buffer.length + 4096];
+/* 295 */           System.arraycopy(buffer, 0, newBuffer, 0, buffer.length);
+/* 296 */           buffer = newBuffer;
+/*     */         } 
+/*     */       } 
+/*     */       
+/* 300 */       byte[] result = new byte[totalLength];
+/* 301 */       System.arraycopy(buffer, 0, result, 0, totalLength);
+/* 302 */       return result;
+/* 303 */     } catch (Throwable t) {
+/* 304 */       LogWrapper.log(Level.WARNING, t, "Problem loading class", new Object[0]);
+/* 305 */       return new byte[0];
+/*     */     } 
+/*     */   }
+/*     */   
+/*     */   private byte[] getOrCreateBuffer() {
+/* 310 */     Byte[] buffer = (Byte[])this.loadBuffer.get();
+/* 311 */     if (buffer == null) {
+/* 312 */       this.loadBuffer.set(new Byte[4096]);
+/* 313 */       buffer = (Byte[])this.loadBuffer.get();
+/*     */     }
+              byte[] primitiveBuffer = new byte[buffer.length];
+              int j = 0;
+              for(Byte b: buffer)
+                  primitiveBuffer[j++] = b.byteValue();
+/* 315 */     return primitiveBuffer;
+/*     */   }
+/*     */   
+/*     */   public List<IClassTransformer> getTransformers() {
+/* 319 */     return Collections.unmodifiableList(this.transformers);
+/*     */   }
+/*     */   
+/*     */   public void addClassLoaderExclusion(String toExclude) {
+/* 323 */     this.classLoaderExceptions.add(toExclude);
+/*     */   }
+/*     */   
+/*     */   public void addTransformerExclusion(String toExclude) {
+/* 327 */     this.transformerExceptions.add(toExclude);
+/*     */   }
+/*     */   
+/*     */   public byte[] getClassBytes(String name) throws IOException {
+/* 331 */     if (name.indexOf('.') == -1) {
+/* 332 */       for (String reservedName : RESERVED_NAMES) {
+/* 333 */         if (name.toUpperCase(Locale.ENGLISH).startsWith(reservedName)) {
+/* 334 */           byte[] data = getClassBytes("_" + name);
+/* 335 */           if (data != null) {
+/* 336 */             return data;
+/*     */           }
+/*     */         } 
+/*     */       } 
+/*     */     }
+/*     */     
+/* 342 */     InputStream classStream = null;
+/*     */     try {
+/* 344 */       String resourcePath = name.replace('.', '/').concat(".class");
+/* 345 */       URL classResource = findResource(resourcePath);
+/*     */       
+/* 347 */       if (classResource == null) {
+/* 348 */         if (DEBUG) LogWrapper.finest("Failed to find class resource %s", new Object[] { resourcePath }); 
+/* 349 */         return null;
+/*     */       } 
+/* 351 */       classStream = classResource.openStream();
+/*     */       
+/* 353 */       if (DEBUG) LogWrapper.finest("Loading class %s from resource %s", new Object[] { name, classResource.toString() }); 
+/* 354 */       return readFully(classStream);
+/*     */     } finally {
+/* 356 */       closeSilently(classStream);
+/*     */     } 
+/*     */   }
+/*     */   
+/*     */   private static void closeSilently(Closeable closeable) {
+/* 361 */     if (closeable != null)
+/*     */       try {
+/* 363 */         closeable.close();
+/* 364 */       } catch (IOException ignored) {} 
+/*     */   }
+/*     */ }
diff --git "a/src\\main\\java/net/minecraft/launchwrapper/LogWrapper.java" "b/src\\main\\java/net/minecraft/launchwrapper/LogWrapper.java"
new file mode 100644
index 0000000..fcfa804
--- /dev/null
+++ "b/src\\main\\java/net/minecraft/launchwrapper/LogWrapper.java"
@@ -0,0 +1,71 @@
+/*    */ package net.minecraft.launchwrapper;
+/*    */ 
+/*    */ import java.util.logging.Level;
+/*    */ import java.util.logging.Logger;
+/*    */ 
+/*    */ public class LogWrapper {
+/*  7 */   public static LogWrapper log = new LogWrapper();
+/*    */   
+/*    */   private Logger myLog;
+/*    */   private static boolean configured;
+/*    */   
+/*    */   private static void configureLogging() {
+/* 13 */     log.myLog = Logger.getLogger("LaunchWrapper");
+/* 14 */     configured = true;
+/*    */   }
+/*    */   
+/*    */   public static void retarget(Logger to) {
+/* 18 */     log.myLog = to;
+/*    */   }
+/*    */   public static void log(String logChannel, Level level, String format, Object... data) {
+/* 21 */     makeLog(logChannel);
+/* 22 */     Logger.getLogger(logChannel).log(level, String.format(format, data));
+/*    */   }
+/*    */   
+/*    */   public static void log(Level level, String format, Object... data) {
+/* 26 */     if (!configured) {
+/* 27 */       configureLogging();
+/*    */     }
+/* 29 */     log.myLog.log(level, String.format(format, data));
+/*    */   }
+/*    */   
+/*    */   public static void log(String logChannel, Level level, Throwable ex, String format, Object... data) {
+/* 33 */     makeLog(logChannel);
+/* 34 */     Logger.getLogger(logChannel).log(level, String.format(format, data), ex);
+/*    */   }
+/*    */   
+/*    */   public static void log(Level level, Throwable ex, String format, Object... data) {
+/* 38 */     if (!configured) {
+/* 39 */       configureLogging();
+/*    */     }
+/* 41 */     log.myLog.log(level, String.format(format, data), ex);
+/*    */   }
+/*    */   
+/*    */   public static void severe(String format, Object... data) {
+/* 45 */     log(Level.SEVERE, format, data);
+/*    */   }
+/*    */   
+/*    */   public static void warning(String format, Object... data) {
+/* 49 */     log(Level.WARNING, format, data);
+/*    */   }
+/*    */   
+/*    */   public static void info(String format, Object... data) {
+/* 53 */     log(Level.INFO, format, data);
+/*    */   }
+/*    */   
+/*    */   public static void fine(String format, Object... data) {
+/* 57 */     log(Level.FINE, format, data);
+/*    */   }
+/*    */   
+/*    */   public static void finer(String format, Object... data) {
+/* 61 */     log(Level.FINER, format, data);
+/*    */   }
+/*    */   
+/*    */   public static void finest(String format, Object... data) {
+/* 65 */     log(Level.FINEST, format, data);
+/*    */   }
+/*    */   
+/*    */   public static void makeLog(String logChannel) {
+/* 69 */     Logger.getLogger(logChannel).setParent(log.myLog);
+/*    */   }
+/*    */ }
diff --git "a/src\\main\\java/net/minecraft/launchwrapper/VanillaTweaker.java" "b/src\\main\\java/net/minecraft/launchwrapper/VanillaTweaker.java"
new file mode 100644
index 0000000..501ae0d
--- /dev/null
+++ "b/src\\main\\java/net/minecraft/launchwrapper/VanillaTweaker.java"
@@ -0,0 +1,33 @@
+/*    */ package net.minecraft.launchwrapper;
+/*    */ 
+/*    */ import java.io.File;
+/*    */ import java.util.List;
+/*    */ 
+/*    */ public class VanillaTweaker
+/*    */   implements ITweaker
+/*    */ {
+/*    */   public static File gameDir;
+/*    */   public static File assetsDir;
+/*    */   private List<String> args;
+/*    */   
+/*    */   public void acceptOptions(List<String> args, File gameDir, File assetsDir, String profile) {
+/* 14 */     this.args = args;
+/* 15 */     VanillaTweaker.gameDir = gameDir;
+/* 16 */     VanillaTweaker.assetsDir = assetsDir;
+/*    */   }
+/*    */ 
+/*    */   
+/*    */   public void injectIntoClassLoader(LaunchClassLoader classLoader) {
+/* 21 */     classLoader.registerTransformer("net.minecraft.launchwrapper.injector.VanillaTweakInjector");
+/*    */   }
+/*    */ 
+/*    */   
+/*    */   public String getLaunchTarget() {
+/* 26 */     return "Minecraft";
+/*    */   }
+/*    */ 
+/*    */   
+/*    */   public String[] getLaunchArguments() {
+/* 31 */     return this.args.<String>toArray(new String[this.args.size()]);
+/*    */   }
+/*    */ }
diff --git "a/src\\main\\java/net/minecraft/launchwrapper/injector/AlphaVanillaTweakInjector.java" "b/src\\main\\java/net/minecraft/launchwrapper/injector/AlphaVanillaTweakInjector.java"
new file mode 100644
index 0000000..919ea31
--- /dev/null
+++ "b/src\\main\\java/net/minecraft/launchwrapper/injector/AlphaVanillaTweakInjector.java"
@@ -0,0 +1,162 @@
+/*     */ package net.minecraft.launchwrapper.injector;
+/*     */ 
+/*     */ import java.applet.Applet;
+/*     */ import java.applet.AppletStub;
+/*     */ import java.awt.BorderLayout;
+/*     */ import java.awt.Color;
+/*     */ import java.awt.Component;
+/*     */ import java.awt.Dimension;
+/*     */ import java.awt.Frame;
+/*     */ import java.awt.event.WindowAdapter;
+/*     */ import java.awt.event.WindowEvent;
+/*     */ import java.lang.reflect.Constructor;
+/*     */ import java.lang.reflect.Field;
+/*     */ import java.lang.reflect.InvocationTargetException;
+/*     */ import java.lang.reflect.Modifier;
+/*     */ import java.net.MalformedURLException;
+/*     */ import java.net.URL;
+/*     */ import java.util.HashMap;
+/*     */ import java.util.Map;
+/*     */ import javax.swing.JPanel;
+/*     */ import net.minecraft.launchwrapper.AlphaVanillaTweaker;
+/*     */ import net.minecraft.launchwrapper.IClassTransformer;
+/*     */ import net.minecraft.launchwrapper.Launch;
+/*     */ 
+/*     */ public class AlphaVanillaTweakInjector
+/*     */   implements IClassTransformer {
+/*     */   private static String minecraftClass;
+/*     */   private static String minecraftField;
+/*     */   
+/*     */   public byte[] transform(String name, String transformedName, byte[] bytes) {
+/*  31 */     return bytes;
+/*     */   }
+/*     */   
+/*     */   public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {
+/*  35 */     Class<?> clazz = getaClass("net.minecraft.client.MinecraftApplet");
+/*  36 */     System.out.println("AlphaVanillaTweakInjector.class.getClassLoader() = " + AlphaVanillaTweakInjector.class.getClassLoader());
+/*  37 */     Constructor<?> constructor = clazz.getConstructor(new Class[0]);
+/*  38 */     Object object = constructor.newInstance(new Object[0]);
+/*     */     
+/*  40 */     for (Field field : clazz.getDeclaredFields()) {
+/*  41 */       String name = field.getType().getName();
+/*     */       
+/*  43 */       if (!name.contains("awt") && !name.contains("java")) {
+/*  44 */         System.out.println("Found likely Minecraft candidate: " + field);
+/*     */         
+/*  46 */         Field fileField = getWorkingDirField(name);
+/*  47 */         if (fileField != null) {
+/*  48 */           System.out.println("Found File, changing to " + Launch.minecraftHome);
+/*  49 */           fileField.setAccessible(true);
+/*  50 */           fileField.set(null, Launch.minecraftHome);
+/*     */           
+/*     */           break;
+/*     */         } 
+/*     */       } 
+/*     */     } 
+/*  56 */     startMinecraft((Applet)object, args);
+/*     */   }
+/*     */   
+/*     */   private static void startMinecraft(final Applet applet, String[] args) {
+/*  60 */     final Map<String, String> params = new HashMap<String, String>();
+/*     */ 
+/*     */     
+/*  63 */     String name = "Player" + (System.currentTimeMillis() % 1000L);
+/*  64 */     if (args.length > 0) name = args[0];
+/*     */     
+/*  66 */     String sessionId = "-";
+/*  67 */     if (args.length > 1) sessionId = args[1];
+/*     */     
+/*  69 */     params.put("username", name);
+/*  70 */     params.put("sessionid", sessionId);
+/*     */     
+/*  72 */     Frame launcherFrameFake = new Frame();
+/*  73 */     launcherFrameFake.setTitle("Minecraft");
+/*  74 */     launcherFrameFake.setBackground(Color.BLACK);
+/*     */     
+/*  76 */     JPanel panel = new JPanel();
+/*  77 */     launcherFrameFake.setLayout(new BorderLayout());
+/*  78 */     panel.setPreferredSize(new Dimension(854, 480));
+/*  79 */     launcherFrameFake.add(panel, "Center");
+/*  80 */     launcherFrameFake.pack();
+/*     */     
+/*  82 */     launcherFrameFake.setLocationRelativeTo((Component)null);
+/*  83 */     launcherFrameFake.setVisible(true);
+/*     */     
+/*  85 */     launcherFrameFake.addWindowListener(new WindowAdapter()
+/*     */         {
+/*     */           public void windowClosing(WindowEvent e) {
+/*  88 */             System.exit(1);
+/*     */           }
+/*     */         });
+/*     */     class LauncherFake
+/*     */       extends Applet
+/*     */       implements AppletStub
+/*     */     {
+/*     */       public void appletResize(int width, int height) {}
+/*     */ 
+/*     */ 
+/*     */       
+/*     */       public boolean isActive() {
+/* 100 */         return true;
+/*     */       }
+/*     */ 
+/*     */       
+/*     */       public URL getDocumentBase() {
+/*     */         try {
+/* 106 */           return new URL("http://www.minecraft.net/game/");
+/* 107 */         } catch (MalformedURLException e) {
+/* 108 */           e.printStackTrace();
+/*     */           
+/* 110 */           return null;
+/*     */         } 
+/*     */       }
+/*     */       
+/*     */       public String getParameter(String paramName) {
+/* 115 */         if (params.containsKey(paramName)) {
+/* 116 */           return (String)params.get(paramName);
+/*     */         }
+/* 118 */         System.err.println("Client asked for parameter: " + paramName);
+/* 119 */         return null;
+/*     */       }
+/*     */     };
+/*     */     
+/* 123 */     LauncherFake fakeLauncher = new LauncherFake();
+/* 124 */     applet.setStub(fakeLauncher);
+/*     */     
+/* 126 */     fakeLauncher.setLayout(new BorderLayout());
+/* 127 */     fakeLauncher.add(applet, "Center");
+/* 128 */     fakeLauncher.validate();
+/*     */     
+/* 130 */     launcherFrameFake.removeAll();
+/* 131 */     launcherFrameFake.setLayout(new BorderLayout());
+/* 132 */     launcherFrameFake.add(fakeLauncher, "Center");
+/* 133 */     launcherFrameFake.validate();
+/*     */     
+/* 135 */     applet.init();
+/* 136 */     applet.start();
+/*     */     
+/* 138 */     Runtime.getRuntime().addShutdownHook(new Thread() {
+/*     */           public void run() {
+/* 140 */             applet.stop();
+/*     */           }
+/*     */         });
+/*     */     
+/* 144 */     VanillaTweakInjector.loadIconsOnFrames(AlphaVanillaTweaker.assetsDir);
+/*     */   }
+/*     */   
+/*     */   private static Class<?> getaClass(String name) throws ClassNotFoundException {
+/* 148 */     return Launch.classLoader.findClass(name);
+/*     */   }
+/*     */   
+/*     */   private static Field getWorkingDirField(String name) throws ClassNotFoundException {
+/* 152 */     Class<?> clazz = getaClass(name);
+/*     */     
+/* 154 */     for (Field field : clazz.getDeclaredFields()) {
+/* 155 */       if (Modifier.isStatic(field.getModifiers()) && field.getType().getName().equals("java.io.File")) {
+/* 156 */         return field;
+/*     */       }
+/*     */     } 
+/*     */     
+/* 160 */     return null;
+/*     */   }
+/*     */ }
diff --git "a/src\\main\\java/net/minecraft/launchwrapper/injector/IndevVanillaTweakInjector.java" "b/src\\main\\java/net/minecraft/launchwrapper/injector/IndevVanillaTweakInjector.java"
new file mode 100644
index 0000000..82e6bcd
--- /dev/null
+++ "b/src\\main\\java/net/minecraft/launchwrapper/injector/IndevVanillaTweakInjector.java"
@@ -0,0 +1,103 @@
+/*     */ package net.minecraft.launchwrapper.injector;
+/*     */ 
+/*     */ import java.io.File;
+/*     */ import java.util.List;
+import java.util.ListIterator;
+/*     */ import javax.imageio.ImageIO;
+/*     */ import net.minecraft.launchwrapper.IClassTransformer;
+/*     */ import net.minecraft.launchwrapper.IndevVanillaTweaker;
+/*     */ import org.objectweb.asm.ClassReader;
+/*     */ import org.objectweb.asm.ClassVisitor;
+/*     */ import org.objectweb.asm.ClassWriter;
+/*     */ import org.objectweb.asm.tree.AbstractInsnNode;
+/*     */ import org.objectweb.asm.tree.ClassNode;
+/*     */ import org.objectweb.asm.tree.JumpInsnNode;
+/*     */ import org.objectweb.asm.tree.MethodInsnNode;
+/*     */ import org.objectweb.asm.tree.MethodNode;
+/*     */ import org.objectweb.asm.tree.TableSwitchInsnNode;
+/*     */ import org.objectweb.asm.tree.VarInsnNode;
+/*     */ 
+/*     */ public class IndevVanillaTweakInjector
+/*     */   implements IClassTransformer {
+/*     */   private static String workDirFieldName;
+/*     */   
+/*     */   public byte[] transform(String name, String transformedName, byte[] bytes) {
+/*  24 */     if (bytes == null) {
+/*  25 */       return null;
+/*     */     }
+/*     */     
+/*  28 */     if (name.equals("net.minecraft.client.d")) {
+/*  29 */       String beep = name.toLowerCase();
+/*     */     }
+/*     */     
+/*  32 */     ClassNode classNode = new ClassNode();
+/*  33 */     ClassReader classReader = new ClassReader(bytes);
+/*  34 */     classReader.accept((ClassVisitor)classNode, 8);
+/*     */     
+/*  36 */     if (!classNode.interfaces.contains("java/lang/Runnable")) {
+/*  37 */       return bytes;
+/*     */     }
+/*     */     
+/*  40 */     MethodNode runMethod = null;
+/*  41 */     for (MethodNode methodNode : (List<MethodNode>)classNode.methods) {
+/*  42 */       if ("run".equals(methodNode.name)) {
+/*  43 */         runMethod = methodNode;
+/*     */         break;
+/*     */       } 
+/*     */     } 
+/*  47 */     if (runMethod == null)
+/*     */     {
+/*  49 */       return bytes;
+/*     */     }
+/*     */     
+/*  52 */     System.out.println("Probably the minecraft class (it has run && is applet!): " + name);
+/*     */     
+/*  54 */     ListIterator<AbstractInsnNode> iterator = runMethod.instructions.iterator();
+/*  55 */     int firstSwitchJump = -1;
+/*     */     
+/*  57 */     while (iterator.hasNext()) {
+/*  58 */       AbstractInsnNode instruction = iterator.next();
+/*     */       
+/*  60 */       if (instruction.getOpcode() == 170) {
+/*  61 */         TableSwitchInsnNode tableSwitchInsnNode = (TableSwitchInsnNode)instruction;
+/*     */         
+/*  63 */         firstSwitchJump = runMethod.instructions.indexOf((AbstractInsnNode)tableSwitchInsnNode.labels.get(0)); continue;
+/*  64 */       }  if (firstSwitchJump >= 0 && runMethod.instructions.indexOf(instruction) == firstSwitchJump) {
+/*  65 */         int endOfSwitch = -1;
+/*  66 */         while (iterator.hasNext()) {
+/*  67 */           instruction = iterator.next();
+/*  68 */           if (instruction.getOpcode() == 167) {
+/*  69 */             endOfSwitch = runMethod.instructions.indexOf((AbstractInsnNode)((JumpInsnNode)instruction).label);
+/*     */             
+/*     */             break;
+/*     */           } 
+/*     */         } 
+/*  74 */         if (endOfSwitch >= 0) {
+/*  75 */           while (runMethod.instructions.indexOf(instruction) != endOfSwitch && iterator.hasNext()) {
+/*  76 */             instruction = iterator.next();
+/*     */           }
+/*     */           
+/*  79 */           instruction = iterator.next();
+/*  80 */           runMethod.instructions.insertBefore(instruction, (AbstractInsnNode)new MethodInsnNode(184, "net/minecraft/launchwrapper/injector/IndevVanillaTweakInjector", "inject", "()Ljava/io/File;"));
+/*  81 */           runMethod.instructions.insertBefore(instruction, (AbstractInsnNode)new VarInsnNode(58, 2));
+/*     */         } 
+/*     */       } 
+/*     */     } 
+/*     */     
+/*  86 */     ClassWriter writer = new ClassWriter(3);
+/*  87 */     classNode.accept(writer);
+/*  88 */     return writer.toByteArray();
+/*     */   }
+/*     */ 
+/*     */   
+/*     */   public static File inject() {
+/*  93 */     System.out.println("Turning of ImageIO disk-caching");
+/*  94 */     ImageIO.setUseCache(false);
+/*     */     
+/*  96 */     VanillaTweakInjector.loadIconsOnFrames(IndevVanillaTweaker.assetsDir);
+/*     */ 
+/*     */     
+/*  99 */     System.out.println("Setting gameDir to: " + IndevVanillaTweaker.gameDir);
+/* 100 */     return IndevVanillaTweaker.gameDir;
+/*     */   }
+/*     */ }
diff --git "a/src\\main\\java/net/minecraft/launchwrapper/injector/VanillaTweakInjector.java" "b/src\\main\\java/net/minecraft/launchwrapper/injector/VanillaTweakInjector.java"
new file mode 100644
index 0000000..20d3433
--- /dev/null
+++ "b/src\\main\\java/net/minecraft/launchwrapper/injector/VanillaTweakInjector.java"
@@ -0,0 +1,141 @@
+/*     */ package net.minecraft.launchwrapper.injector;
+/*     */ 
+/*     */ import java.awt.Frame;
+/*     */ import java.awt.Image;
+/*     */ import java.awt.image.BufferedImage;
+/*     */ import java.io.File;
+/*     */ import java.io.IOException;
+/*     */ import java.nio.ByteBuffer;
+/*     */ import java.util.Arrays;
+/*     */ import java.util.List;
+/*     */ import java.util.ListIterator;
+/*     */ import javax.imageio.ImageIO;
+/*     */ import net.minecraft.launchwrapper.IClassTransformer;
+/*     */ import net.minecraft.launchwrapper.VanillaTweaker;
+/*     */ import org.lwjgl.opengl.Display;
+/*     */ import org.objectweb.asm.ClassReader;
+/*     */ import org.objectweb.asm.ClassVisitor;
+/*     */ import org.objectweb.asm.ClassWriter;
+/*     */ import org.objectweb.asm.Label;
+/*     */ import org.objectweb.asm.Type;
+/*     */ import org.objectweb.asm.tree.AbstractInsnNode;
+/*     */ import org.objectweb.asm.tree.ClassNode;
+/*     */ import org.objectweb.asm.tree.FieldNode;
+/*     */ import org.objectweb.asm.tree.MethodNode;
+/*     */ 
+/*     */ 
+/*     */ public class VanillaTweakInjector
+/*     */   implements IClassTransformer
+/*     */ {
+/*     */   private static String workDirFieldName;
+/*     */   
+/*     */   public byte[] transform(String name, String transformedName, byte[] bytes) {
+/*  33 */     if (bytes == null) {
+/*  34 */       return null;
+/*     */     }
+/*  36 */     if (!"net.minecraft.client.Minecraft".equals(name)) {
+/*  37 */       return bytes;
+/*     */     }
+/*     */     
+/*  40 */     ClassNode classNode = new ClassNode();
+/*  41 */     ClassReader classReader = new ClassReader(bytes);
+/*  42 */     classReader.accept((ClassVisitor)classNode, 8);
+/*     */     
+/*  44 */     MethodNode mainMethod = null;
+/*  45 */     for (MethodNode methodNode : (List<MethodNode>)classNode.methods) {
+/*  46 */       if ("main".equals(methodNode.name)) {
+/*  47 */         mainMethod = methodNode;
+/*     */         break;
+/*     */       } 
+/*     */     } 
+/*  51 */     if (mainMethod == null)
+/*     */     {
+/*  53 */       return bytes;
+/*     */     }
+/*     */     
+/*  56 */     FieldNode workDirNode = null;
+/*  57 */     for (FieldNode fieldNode : (List<FieldNode>)classNode.fields) {
+/*  58 */       String fileTypeDescriptor = Type.getDescriptor(File.class);
+/*  59 */       if (fileTypeDescriptor.equals(fieldNode.desc) && (fieldNode.access & 0x8) == 8) {
+/*  60 */         workDirNode = fieldNode;
+/*     */         
+/*     */         break;
+/*     */       } 
+/*     */     } 
+/*     */     
+/*  66 */     MethodNode injectedMethod = new MethodNode();
+/*  67 */     Label label = new Label();
+/*  68 */     injectedMethod.visitLabel(label);
+/*  69 */     injectedMethod.visitLineNumber(9001, label);
+/*     */     
+/*  71 */     injectedMethod.visitMethodInsn(184, "net/minecraft/launchwrapper/injector/VanillaTweakInjector", "inject", "()Ljava/io/File;");
+/*     */     
+/*  73 */     injectedMethod.visitFieldInsn(179, "net/minecraft/client/Minecraft", workDirNode.name, "Ljava/io/File;");
+/*     */ 
+/*     */     
+/*  76 */     ListIterator<AbstractInsnNode> iterator = mainMethod.instructions.iterator();
+/*  77 */     while (iterator.hasNext()) {
+/*  78 */       AbstractInsnNode insn = iterator.next();
+/*  79 */       if (insn.getOpcode() == 177) {
+/*  80 */         mainMethod.instructions.insertBefore(insn, injectedMethod.instructions);
+/*     */       }
+/*     */     } 
+/*     */     
+/*  84 */     ClassWriter writer = new ClassWriter(3);
+/*  85 */     classNode.accept(writer);
+/*  86 */     return writer.toByteArray();
+/*     */   }
+/*     */ 
+/*     */   
+/*     */   public static File inject() {
+/*  91 */     System.out.println("Turning of ImageIO disk-caching");
+/*  92 */     ImageIO.setUseCache(false);
+/*     */     
+/*  94 */     loadIconsOnFrames(VanillaTweaker.assetsDir);
+/*     */ 
+/*     */     
+/*  97 */     System.out.println("Setting gameDir to: " + VanillaTweaker.gameDir);
+/*  98 */     return VanillaTweaker.gameDir;
+/*     */   }
+/*     */ 
+/*     */   
+/*     */   public static void loadIconsOnFrames(File assetsDir) {
+/*     */     try {
+/* 104 */       File smallIcon = new File(assetsDir, "icons/icon_16x16.png");
+/* 105 */       File bigIcon = new File(assetsDir, "icons/icon_32x32.png");
+/* 106 */       System.out.println("Loading current icons for window from: " + smallIcon + " and " + bigIcon);
+/* 107 */       Display.setIcon(new ByteBuffer[] { loadIcon(smallIcon), loadIcon(bigIcon) });
+/*     */ 
+/*     */ 
+/*     */       
+/* 111 */       Frame[] frames = Frame.getFrames();
+/*     */       
+/* 113 */       if (frames != null) {
+/* 114 */         List<Image> icons = Arrays.asList(new Image[] { ImageIO.read(smallIcon), ImageIO.read(bigIcon) });
+/*     */         
+/* 116 */         for (Frame frame : frames) {
+/*     */           try {
+/* 118 */             frame.setIconImages(icons);
+/* 119 */           } catch (Throwable throwable) {
+/* 120 */             throwable.printStackTrace();
+/*     */           } 
+/*     */         } 
+/*     */       } 
+/* 124 */     } catch (IOException e) {
+/* 125 */       e.printStackTrace();
+/*     */     } 
+/*     */   }
+/*     */   
+/*     */   private static ByteBuffer loadIcon(File iconFile) throws IOException {
+/* 130 */     BufferedImage icon = ImageIO.read(iconFile);
+/*     */     
+/* 132 */     int[] rgb = icon.getRGB(0, 0, icon.getWidth(), icon.getHeight(), null, 0, icon.getWidth());
+/*     */     
+/* 134 */     ByteBuffer buffer = ByteBuffer.allocate(4 * rgb.length);
+/* 135 */     for (int color : rgb) {
+/* 136 */       buffer.putInt(color << 8 | color >> 24 & 0xFF);
+/*     */     }
+/* 138 */     buffer.flip();
+/* 139 */     return buffer;
+/*     */   }
+/*     */ }
diff --git "a/temp\\src\\java/nf.java" "b/src\\main\\java/nf.java"
index 06ecc63..d0d87e1 100644
--- "a/temp\\src\\java/nf.java"
+++ "b/src\\main\\java/nf.java"
@@ -1,16 +1,13 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class nf extends nq
 {
 
-    public nf(cn cn1, double d, double d1, double d2)
+    public nf(World world1, double d, double d1, double d2)
     {
-        super(cn1, d, d1, d2, 0.0D, 0.0D, 0.0D);
+        super(world1, d, d1, d2, 0.0D, 0.0D, 0.0D);
         an *= 0.30000001192092896D;
         ao = (float)java.lang.Math.random() * 0.2F + 0.1F;
         ap *= 0.30000001192092896D;
diff --git "a/temp\\src\\java/ng.java" "b/src\\main\\java/ng.java"
index e62929d..484533c 100644
--- "a/temp\\src\\java/ng.java"
+++ "b/src\\main\\java/ng.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -13,7 +12,7 @@ public class ng extends ly
         bb = 48;
     }
 
-    public void e(cn cn1, int i, int j, int k)
+    public void e(World world1, int i, int j, int k)
     {
         byte byte0 = 2;
         for(int l = i - byte0; l <= i + byte0; l++)
@@ -21,7 +20,7 @@ public class ng extends ly
             for(int i1 = j - byte0; i1 <= j + byte0; i1++)
             {
                 for(int j1 = k - byte0; j1 <= k + byte0; j1++)
-                    if(cn1.f(l, i1, j1) != gb.f);
+                    if(world1.f(l, i1, j1) != gb.f);
 
             }
 
@@ -29,7 +28,7 @@ public class ng extends ly
 
     }
 
-    public void b(cn cn1, int i, int j, int k)
+    public void b(World world1, int i, int j, int k)
     {
         byte byte0 = 2;
         for(int l = i - byte0; l <= i + byte0; l++)
@@ -37,7 +36,7 @@ public class ng extends ly
             for(int i1 = j - byte0; i1 <= j + byte0; i1++)
             {
                 for(int j1 = k - byte0; j1 <= k + byte0; j1++)
-                    cn1.g(l, i1, j1, cn1.a(l, i1, j1));
+                    world1.g(l, i1, j1, world1.a(l, i1, j1));
 
             }
 
diff --git "a/temp\\src\\java/nh.java" "b/src\\main\\java/nh.java"
index 6632097..3147c9f 100644
--- "a/temp\\src\\java/nh.java"
+++ "b/src\\main\\java/nh.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/ni.java" "b/src\\main\\java/ni.java"
index 89fa79a..c7d3ebc 100644
--- "a/temp\\src\\java/ni.java"
+++ "b/src\\main\\java/ni.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -9,7 +8,7 @@ class ni extends java.lang.Thread
 
     final ii a;
 
-    ni(ii ii1, java.lang.String s)
+    ni(ii ii1, String s)
     {
         super(s);
         a = ii1;
diff --git "a/temp\\src\\java/nj.java" "b/src\\main\\java/nj.java"
index f24bac4..1ef2816 100644
--- "a/temp\\src\\java/nj.java"
+++ "b/src\\main\\java/nj.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -34,29 +33,29 @@ public class nj extends hq
         k = gy1;
     }
 
-    public void a(dm dm1)
+    public void a(Player player1)
     {
-        dm1.aq = -180F;
+        player1.aq = -180F;
     }
 
     public boolean b(int i1, int j1, int k1, int l1)
     {
         k.a(((fn) (new fg(3, i1, j1, k1, l1))));
-        int i2 = a.e.a(i1, j1, k1);
-        int j2 = a.e.e(i1, j1, k1);
+        int i2 = a.world.a(i1, j1, k1);
+        int j2 = a.world.e(i1, j1, k1);
         boolean flag = super.b(i1, j1, k1, l1);
         ev ev1 = a.g.t();
         if(ev1 != null)
         {
             ev1.a(i2, i1, j1, k1);
-            if(ev1.a == 0)
+            if(ev1.count == 0)
             {
-                ev1.a(((dm) (a.g)));
+                ev1.a(((Player) (a.g)));
                 a.g.u();
             }
         }
         if(flag && a.g.b(ly.n[i2]))
-            ly.n[i2].b_(a.e, i1, j1, k1, j2);
+            ly.n[i2].b_(a.world, i1, j1, k1, j2);
         return flag;
     }
 
@@ -64,10 +63,10 @@ public class nj extends hq
     {
         j = true;
         k.a(((fn) (new fg(0, i1, j1, k1, l1))));
-        int i2 = a.e.a(i1, j1, k1);
+        int i2 = a.world.a(i1, j1, k1);
         if(i2 > 0 && f == 0.0F)
-            ly.n[i2].b(a.e, i1, j1, k1, ((dm) (a.g)));
-        if(i2 > 0 && ly.n[i2].a(((dm) (a.g))) >= 1.0F)
+            ly.n[i2].b(a.world, i1, j1, k1, ((Player) (a.g)));
+        if(i2 > 0 && ly.n[i2].a(((Player) (a.g))) >= 1.0F)
             b(i1, j1, k1, l1);
     }
 
@@ -98,11 +97,11 @@ public class nj extends hq
         }
         if(i1 == c && j1 == d && k1 == e)
         {
-            int i2 = a.e.a(i1, j1, k1);
+            int i2 = a.world.a(i1, j1, k1);
             if(i2 == 0)
                 return;
             ly ly1 = ly.n[i2];
-            f += ly1.a(((dm) (a.g)));
+            f += ly1.a(((Player) (a.g)));
             if(h % 4F == 0.0F && ly1 != null)
                 a.A.b(ly1.bl.d(), (float)i1 + 0.5F, (float)j1 + 0.5F, (float)k1 + 0.5F, (ly1.bl.b() + 1.0F) / 8F, ly1.bl.c() * 0.5F);
             h++;
@@ -144,9 +143,9 @@ public class nj extends hq
         return 4F;
     }
 
-    public void a(cn cn1)
+    public void a(World world1)
     {
-        super.a(cn1);
+        super.a(world1);
     }
 
     public void c()
@@ -160,7 +159,7 @@ public class nj extends hq
         ev ev1 = a.g.b.a();
         int i1 = 0;
         if(ev1 != null)
-            i1 = ev1.c;
+            i1 = ev1.id;
         if(i1 != l)
         {
             l = i1;
@@ -168,15 +167,15 @@ public class nj extends hq
         }
     }
 
-    public boolean a(dm dm1, cn cn1, ev ev1, int i1, int j1, int k1, int l1)
+    public boolean a(Player player1, World world1, ev ev1, int i1, int j1, int k1, int l1)
     {
         e();
-        k.a(((fn) (new dofix(ev1 == null ? -1 : ev1.c, i1, j1, k1, l1))));
-        return super.a(dm1, cn1, ev1, i1, j1, k1, l1);
+        k.a(((fn) (new dofix(ev1 == null ? -1 : ev1.id, i1, j1, k1, l1))));
+        return super.a(player1, world1, ev1, i1, j1, k1, l1);
     }
 
-    public dm b(cn cn1)
+    public Player b(World world1)
     {
-        return ((dm) (new la(a, cn1, a.i, k)));
+        return ((Player) (new la(a, world1, a.i, k)));
     }
 }
diff --git "a/temp\\src\\java/nk.java" "b/src\\main\\java/nk.java"
index 18d4bf3..0b5d62d 100644
--- "a/temp\\src\\java/nk.java"
+++ "b/src\\main\\java/nk.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -9,7 +8,7 @@ class nk extends java.lang.Thread
 
     final ii a;
 
-    nk(ii ii1, java.lang.String s)
+    nk(ii ii1, String s)
     {
         super(s);
         a = ii1;
diff --git "a/temp\\src\\java/nl.java" "b/src\\main\\java/nl.java"
index 243d9cd..e7cd797 100644
--- "a/temp\\src\\java/nl.java"
+++ "b/src\\main\\java/nl.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -9,15 +8,15 @@ public class nl extends nq
 
     float a;
 
-    public nl(cn cn, double d, double d1, double d2)
+    public nl(World world, double d, double d1, double d2)
     {
-        this(cn, d, d1, d2, 1.0F);
+        this(world, d, d1, d2, 1.0F);
     }
 
-    public nl(cn cn, double d, double d1, double d2, 
-            float f)
+    public nl(World world, double d, double d1, double d2,
+              float f)
     {
-        super(cn, d, d1, d2, 0.0D, 0.0D, 0.0D);
+        super(world, d, d1, d2, 0.0D, 0.0D, 0.0D);
         an *= 0.10000000149011612D;
         ao *= 0.10000000149011612D;
         ap *= 0.10000000149011612D;
diff --git "a/temp\\src\\java/nm.java" "b/src\\main\\java/nm.java"
index 92aee4b..81460c5 100644
--- "a/temp\\src\\java/nm.java"
+++ "b/src\\main\\java/nm.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/nn.java" "b/src\\main\\java/nn.java"
index 55792a8..ad8dcef 100644
--- "a/temp\\src\\java/nn.java"
+++ "b/src\\main\\java/nn.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class nn extends ik
 {
 
@@ -15,34 +12,34 @@ public class nn extends ik
         a = i;
     }
 
-    public boolean a(cn cn1, java.util.Random random, int i, int j, int k)
+    public boolean a(World world1, java.util.Random random, int i, int j, int k)
     {
-        if(cn1.a(i, j + 1, k) != ly.u.bc)
+        if(world1.a(i, j + 1, k) != ly.u.bc)
             return false;
-        if(cn1.a(i, j - 1, k) != ly.u.bc)
+        if(world1.a(i, j - 1, k) != ly.u.bc)
             return false;
-        if(cn1.a(i, j, k) != 0 && cn1.a(i, j, k) != ly.u.bc)
+        if(world1.a(i, j, k) != 0 && world1.a(i, j, k) != ly.u.bc)
             return false;
         int l = 0;
-        if(cn1.a(i - 1, j, k) == ly.u.bc)
+        if(world1.a(i - 1, j, k) == ly.u.bc)
             l++;
-        if(cn1.a(i + 1, j, k) == ly.u.bc)
+        if(world1.a(i + 1, j, k) == ly.u.bc)
             l++;
-        if(cn1.a(i, j, k - 1) == ly.u.bc)
+        if(world1.a(i, j, k - 1) == ly.u.bc)
             l++;
-        if(cn1.a(i, j, k + 1) == ly.u.bc)
+        if(world1.a(i, j, k + 1) == ly.u.bc)
             l++;
         int i1 = 0;
-        if(cn1.a(i - 1, j, k) == 0)
+        if(world1.a(i - 1, j, k) == 0)
             i1++;
-        if(cn1.a(i + 1, j, k) == 0)
+        if(world1.a(i + 1, j, k) == 0)
             i1++;
-        if(cn1.a(i, j, k - 1) == 0)
+        if(world1.a(i, j, k - 1) == 0)
             i1++;
-        if(cn1.a(i, j, k + 1) == 0)
+        if(world1.a(i, j, k + 1) == 0)
             i1++;
         if(l == 3 && i1 == 1)
-            cn1.d(i, j, k, a);
+            world1.d(i, j, k, a);
         return true;
     }
 }
diff --git "a/temp\\src\\java/no.java" "b/src\\main\\java/no.java"
index 2b53f60..53a598d 100644
--- "a/temp\\src\\java/no.java"
+++ "b/src\\main\\java/no.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class no extends ly
 {
 
@@ -13,7 +10,7 @@ public class no extends ly
         super(i, j, gb.n);
     }
 
-    public cf d(cn cn1, int i, int j, int k)
+    public cf d(World world1, int i, int j, int k)
     {
         return null;
     }
@@ -33,86 +30,86 @@ public class no extends ly
         return 12;
     }
 
-    public boolean a(cn cn1, int i, int j, int k)
+    public boolean a(World world1, int i, int j, int k)
     {
-        if(cn1.g(i - 1, j, k))
+        if(world1.g(i - 1, j, k))
             return true;
-        if(cn1.g(i + 1, j, k))
+        if(world1.g(i + 1, j, k))
             return true;
-        if(cn1.g(i, j, k - 1))
+        if(world1.g(i, j, k - 1))
             return true;
-        if(cn1.g(i, j, k + 1))
+        if(world1.g(i, j, k + 1))
             return true;
-        return cn1.g(i, j - 1, k);
+        return world1.g(i, j - 1, k);
     }
 
-    public void d(cn cn1, int i, int j, int k, int l)
+    public void d(World world1, int i, int j, int k, int l)
     {
-        int i1 = cn1.e(i, j, k);
+        int i1 = world1.e(i, j, k);
         int j1 = i1 & 8;
         i1 &= 7;
-        if(l == 1 && cn1.g(i, j - 1, k))
-            i1 = 5 + cn1.n.nextInt(2);
-        if(l == 2 && cn1.g(i, j, k + 1))
+        if(l == 1 && world1.g(i, j - 1, k))
+            i1 = 5 + world1.n.nextInt(2);
+        if(l == 2 && world1.g(i, j, k + 1))
             i1 = 4;
-        if(l == 3 && cn1.g(i, j, k - 1))
+        if(l == 3 && world1.g(i, j, k - 1))
             i1 = 3;
-        if(l == 4 && cn1.g(i + 1, j, k))
+        if(l == 4 && world1.g(i + 1, j, k))
             i1 = 2;
-        if(l == 5 && cn1.g(i - 1, j, k))
+        if(l == 5 && world1.g(i - 1, j, k))
             i1 = 1;
-        cn1.b(i, j, k, i1 + j1);
+        world1.b(i, j, k, i1 + j1);
     }
 
-    public void e(cn cn1, int i, int j, int k)
+    public void e(World world1, int i, int j, int k)
     {
-        if(cn1.g(i - 1, j, k))
-            cn1.b(i, j, k, 1);
+        if(world1.g(i - 1, j, k))
+            world1.b(i, j, k, 1);
         else
-        if(cn1.g(i + 1, j, k))
-            cn1.b(i, j, k, 2);
+        if(world1.g(i + 1, j, k))
+            world1.b(i, j, k, 2);
         else
-        if(cn1.g(i, j, k - 1))
-            cn1.b(i, j, k, 3);
+        if(world1.g(i, j, k - 1))
+            world1.b(i, j, k, 3);
         else
-        if(cn1.g(i, j, k + 1))
-            cn1.b(i, j, k, 4);
+        if(world1.g(i, j, k + 1))
+            world1.b(i, j, k, 4);
         else
-        if(cn1.g(i, j - 1, k))
-            cn1.b(i, j, k, 5 + cn1.n.nextInt(2));
-        h(cn1, i, j, k);
+        if(world1.g(i, j - 1, k))
+            world1.b(i, j, k, 5 + world1.n.nextInt(2));
+        h(world1, i, j, k);
     }
 
-    public void a(cn cn1, int i, int j, int k, int l)
+    public void a(World world1, int i, int j, int k, int l)
     {
-        if(h(cn1, i, j, k))
+        if(h(world1, i, j, k))
         {
-            int i1 = cn1.e(i, j, k) & 7;
+            int i1 = world1.e(i, j, k) & 7;
             boolean flag = false;
-            if(!cn1.g(i - 1, j, k) && i1 == 1)
+            if(!world1.g(i - 1, j, k) && i1 == 1)
                 flag = true;
-            if(!cn1.g(i + 1, j, k) && i1 == 2)
+            if(!world1.g(i + 1, j, k) && i1 == 2)
                 flag = true;
-            if(!cn1.g(i, j, k - 1) && i1 == 3)
+            if(!world1.g(i, j, k - 1) && i1 == 3)
                 flag = true;
-            if(!cn1.g(i, j, k + 1) && i1 == 4)
+            if(!world1.g(i, j, k + 1) && i1 == 4)
                 flag = true;
-            if(!cn1.g(i, j - 1, k) && i1 == 5)
+            if(!world1.g(i, j - 1, k) && i1 == 5)
                 flag = true;
             if(flag)
             {
-                b_(cn1, i, j, k, cn1.e(i, j, k));
-                cn1.d(i, j, k, 0);
+                b_(world1, i, j, k, world1.e(i, j, k));
+                world1.d(i, j, k, 0);
             }
         }
     }
 
-    private boolean h(cn cn1, int i, int j, int k)
+    private boolean h(World world1, int i, int j, int k)
     {
-        if(!a(cn1, i, j, k))
+        if(!a(world1, i, j, k))
         {
-            b_(cn1, i, j, k, cn1.e(i, j, k));
-            cn1.d(i, j, k, 0);
+            b_(world1, i, j, k, world1.e(i, j, k));
+            world1.d(i, j, k, 0);
             return false;
         } else
         {
@@ -143,58 +140,58 @@ public class no extends ly
         }
     }
 
-    public void b(cn cn1, int i, int j, int k, dm dm)
+    public void b(World world1, int i, int j, int k, Player player)
     {
-        a(cn1, i, j, k, dm);
+        a(world1, i, j, k, player);
     }
 
-    public boolean a(cn cn1, int i, int j, int k, dm dm)
+    public boolean a(World world1, int i, int j, int k, Player player)
     {
-        int l = cn1.e(i, j, k);
+        int l = world1.e(i, j, k);
         int i1 = l & 7;
         int j1 = 8 - (l & 8);
-        cn1.b(i, j, k, i1 + j1);
-        cn1.b(i, j, k, i, j, k);
-        cn1.a((double)i + 0.5D, (double)j + 0.5D, (double)k + 0.5D, "random.click", 0.3F, j1 <= 0 ? 0.5F : 0.6F);
-        cn1.g(i, j, k, bc);
+        world1.b(i, j, k, i1 + j1);
+        world1.b(i, j, k, i, j, k);
+        world1.a((double)i + 0.5D, (double)j + 0.5D, (double)k + 0.5D, "random.click", 0.3F, j1 <= 0 ? 0.5F : 0.6F);
+        world1.g(i, j, k, bc);
         if(i1 == 1)
-            cn1.g(i - 1, j, k, bc);
+            world1.g(i - 1, j, k, bc);
         else
         if(i1 == 2)
-            cn1.g(i + 1, j, k, bc);
+            world1.g(i + 1, j, k, bc);
         else
         if(i1 == 3)
-            cn1.g(i, j, k - 1, bc);
+            world1.g(i, j, k - 1, bc);
         else
         if(i1 == 4)
-            cn1.g(i, j, k + 1, bc);
+            world1.g(i, j, k + 1, bc);
         else
-            cn1.g(i, j - 1, k, bc);
+            world1.g(i, j - 1, k, bc);
         return true;
     }
 
-    public void b(cn cn1, int i, int j, int k)
+    public void b(World world1, int i, int j, int k)
     {
-        int l = cn1.e(i, j, k);
+        int l = world1.e(i, j, k);
         if((l & 8) > 0)
         {
-            cn1.g(i, j, k, bc);
+            world1.g(i, j, k, bc);
             int i1 = l & 7;
             if(i1 == 1)
-                cn1.g(i - 1, j, k, bc);
+                world1.g(i - 1, j, k, bc);
             else
             if(i1 == 2)
-                cn1.g(i + 1, j, k, bc);
+                world1.g(i + 1, j, k, bc);
             else
             if(i1 == 3)
-                cn1.g(i, j, k - 1, bc);
+                world1.g(i, j, k - 1, bc);
             else
             if(i1 == 4)
-                cn1.g(i, j, k + 1, bc);
+                world1.g(i, j, k + 1, bc);
             else
-                cn1.g(i, j - 1, k, bc);
+                world1.g(i, j - 1, k, bc);
         }
-        super.b(cn1, i, j, k);
+        super.b(world1, i, j, k);
     }
 
     public boolean b(nm nm1, int i, int j, int k, int l)
@@ -202,9 +199,9 @@ public class no extends ly
         return (nm1.e(i, j, k) & 8) > 0;
     }
 
-    public boolean c(cn cn1, int i, int j, int k, int l)
+    public boolean c(World world1, int i, int j, int k, int l)
     {
-        int i1 = cn1.e(i, j, k);
+        int i1 = world1.e(i, j, k);
         if((i1 & 8) == 0)
             return false;
         int j1 = i1 & 7;
diff --git "a/temp\\src\\java/np.java" "b/src\\main\\java/np.java"
index 4437e22..72b0482 100644
--- "a/temp\\src\\java/np.java"
+++ "b/src\\main\\java/np.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/nq.java" "b/src\\main\\java/nq.java"
index 6dcac27..e37fe07 100644
--- "a/temp\\src\\java/nq.java"
+++ "b/src\\main\\java/nq.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class nq extends kh
 {
 
@@ -22,10 +19,10 @@ public class nq extends kh
     public static double m;
     public static double n;
 
-    public nq(cn cn, double d1, double d2, double d3, 
-            double d4, double d5, double d6)
+    public nq(World world, double d1, double d2, double d3,
+              double d4, double d5, double d6)
     {
-        super(cn);
+        super(world);
         e = 0;
         f = 0;
         a(0.2F, 0.2F);
@@ -105,11 +102,11 @@ public class nq extends kh
         return 0;
     }
 
-    public void a(hm hm)
+    public void a(TagCompound tagCompound)
     {
     }
 
-    public void b(hm hm)
+    public void b(TagCompound tagCompound)
     {
     }
 }
diff --git "a/temp\\src\\java/nr.java" "b/src\\main\\java/nr.java"
index 83fb2c3..addb445 100644
--- "a/temp\\src\\java/nr.java"
+++ "b/src\\main\\java/nr.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/ns.java" "b/src\\main\\java/ns.java"
index ddc2511..db7173b 100644
--- "a/temp\\src\\java/ns.java"
+++ "b/src\\main\\java/ns.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -13,14 +12,14 @@ public class ns extends dn
         a(fo1);
     }
 
-    protected boolean a(bo bo1, int i)
+    protected boolean a(Sheep sheep1, int i)
     {
         a("/mob/sheep_fur.png");
-        return i == 0 && !bo1.a;
+        return i == 0 && !sheep1.sheared;
     }
 
-    protected boolean a(ge ge, int i)
+    protected boolean a(Mob mob, int i)
     {
-        return a((bo)ge, i);
+        return a((Sheep) mob, i);
     }
 }
diff --git "a/temp\\src\\java/nt.java" "b/src\\main\\java/nt.java"
index fd53ed0..34527f2 100644
--- "a/temp\\src\\java/nt.java"
+++ "b/src\\main\\java/nt.java"
@@ -1,11 +1,8 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.PrintStream;
-
-public class nt extends dm
+public class nt extends Player
 {
 
     private int bg;
@@ -16,9 +13,9 @@ public class nt extends dm
     private double bl;
     float a;
 
-    public nt(cn cn, java.lang.String s)
+    public nt(World world, String s)
     {
-        super(cn);
+        super(world);
         a = 0.0F;
         i = s;
         aB = 0.0F;
@@ -89,9 +86,9 @@ public class nt extends dm
         float f1 = (float)java.lang.Math.atan(-ao * 0.20000000298023224D) * 15F;
         if(f > 0.1F)
             f = 0.1F;
-        if(!av || E <= 0)
+        if(!av || health <= 0)
             f = 0.0F;
-        if(av || E <= 0)
+        if(av || health <= 0)
             f1 = 0.0F;
         this.f += (f - this.f) * 0.4F;
         M += (f1 - M) * 0.8F;
diff --git "a/temp\\src\\java/nu.java" "b/temp\\src\\java/nu.java"
deleted file mode 100644
index 9070fc6..0000000
--- "a/temp\\src\\java/nu.java"
+++ /dev/null
@@ -1,15 +0,0 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
-// Jad home page: http://www.kpdus.com/jad.html
-// Decompiler options: fullnames deadcode fieldsfirst safe 
-// Source File Name:   SourceFile
-
-
-public interface nu
-{
-
-    public abstract void b(java.lang.String s);
-
-    public abstract void d(java.lang.String s);
-
-    public abstract void a(int i);
-}
diff --git "a/temp\\src\\java/nv.java" "b/src\\main\\java/nv.java"
index dc48ee6..9bfc082 100644
--- "a/temp\\src\\java/nv.java"
+++ "b/src\\main\\java/nv.java"
@@ -1,33 +1,30 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.List;
 //import Minecraft;
-import org.lwjgl.input.Keyboard;
-import org.lwjgl.opengl.GL11;
+
 
 public class nv extends bh
 {
 
-    protected java.lang.String a;
-    private ob h;
+    protected String a;
+    private Sign h;
     private int i;
     private int j;
 
-    public nv(ob ob1)
+    public nv(Sign sign1)
     {
         a = "Edit sign message:";
         j = 0;
-        h = ob1;
+        h = sign1;
     }
 
     public void a()
     {
         e.clear();
         org.lwjgl.input.Keyboard.enableRepeatEvents(true);
-        e.add(((java.lang.Object) (new fk(0, c / 2 - 100, d / 4 + 120, "Done"))));
+        e.add(((Object) (new fk(0, c / 2 - 100, d / 4 + 120, "Done"))));
     }
 
     public void h()
@@ -57,11 +54,11 @@ public class nv extends bh
             j = j - 1 & 3;
         if(k == 208 || k == 28)
             j = j + 1 & 3;
-        if(k == 14 && h.a[j].length() > 0)
-            h.a[j] = h.a[j].substring(0, h.a[j].length() - 1);
-        if ((" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_'abcdefghijklmnopqrstuvwxyz{|}~⌂ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»".indexOf(c) >= 0) && (h.a[j].length() < 15))
+        if(k == 14 && h.lines[j].length() > 0)
+            h.lines[j] = h.lines[j].substring(0, h.lines[j].length() - 1);
+        if ((" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_'abcdefghijklmnopqrstuvwxyz{|}~⌂ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»".indexOf(c) >= 0) && (h.lines[j].length() < 15))
         {
-            h.a[j] = h.a[j] + c;
+            h.lines[j] = h.lines[j] + c;
         }
     }
 
diff --git "a/temp\\src\\java/nw.java" "b/src\\main\\java/nw.java"
index 11ef6ae..68e83d5 100644
--- "a/temp\\src\\java/nw.java"
+++ "b/src\\main\\java/nw.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -6,7 +5,7 @@
 import java.util.Random;
 
 public class nw
-    implements aw
+    implements IChunkProvider
 {
 
     private java.util.Random j;
@@ -18,7 +17,7 @@ public class nw
     public lp a;
     public lp b;
     public lp c;
-    private cn p;
+    private World p;
     private double q[];
     private double r[];
     private double s[];
@@ -31,14 +30,14 @@ public class nw
     double h[];
     int i[][];
 
-    public nw(cn cn1, long l1)
+    public nw(World world1, long l1)
     {
         r = new double[256];
         s = new double[256];
         t = new double[256];
         u = ((cy) (new kk()));
         i = new int[32][32];
-        p = cn1;
+        p = world1;
         j = new Random(l1);
         k = new lp(j, 16);
         l = new lp(j, 16);
@@ -91,7 +90,7 @@ public class nw
                             {
                                 int l3 = 0;
                                 if(k2 * 8 + l2 < byte1)
-                                    if(p.d && k2 * 8 + l2 >= byte1 - 1)
+                                    if(p.snowCovered && k2 * 8 + l2 >= byte1 - 1)
                                         l3 = ly.aU.bc;
                                     else
                                         l3 = ly.C.bc;
@@ -195,16 +194,16 @@ public class nw
 
     }
 
-    public ga b(int i1, int j1)
+    public Chunk provideChunk(int x, int y)
     {
-        j.setSeed((long)i1 * 0x4f9939f508L + (long)j1 * 0x1ef1565bd5L);
+        j.setSeed((long) x * 0x4f9939f508L + (long) y * 0x1ef1565bd5L);
         byte abyte0[] = new byte[32768];
-        ga ga1 = new ga(p, abyte0, i1, j1);
-        a(i1, j1, abyte0);
-        b(i1, j1, abyte0);
-        u.a(this, p, i1, j1, abyte0);
-        ga1.c();
-        return ga1;
+        Chunk chunk1 = new Chunk(p, abyte0, x, y);
+        a(x, y, abyte0);
+        b(x, y, abyte0);
+        u.a(this, p, x, y, abyte0);
+        chunk1.c();
+        return chunk1;
     }
 
     private double[] a(double ad[], int i1, int j1, int k1, int l1, int i2, int j2)
@@ -292,20 +291,20 @@ public class nw
         return ad;
     }
 
-    public boolean a(int i1, int j1)
+    public boolean chunkExists(int x, int y)
     {
         return true;
     }
 
-    public void a(aw aw1, int i1, int j1)
+    public void a(IChunkProvider iChunkProvider1, int i1, int j1)
     {
         dh.a = true;
         int k1 = i1 * 16;
         int l1 = j1 * 16;
-        j.setSeed(p.u);
+        j.setSeed(p.randomSeed);
         long l2 = (j.nextLong() / 2L) * 2L + 1L;
         long l3 = (j.nextLong() / 2L) * 2L + 1L;
-        j.setSeed((long)i1 * l2 + (long)j1 * l3 ^ p.u);
+        j.setSeed((long)i1 * l2 + (long)j1 * l3 ^ p.randomSeed);
         double d1 = 0.25D;
         for(int i2 = 0; i2 < 8; i2++)
         {
@@ -385,9 +384,9 @@ public class nw
             l4 = 0;
         if(j.nextInt(10) == 0)
             l4++;
-        java.lang.Object obj = ((java.lang.Object) (new oa()));
+        Object obj = ((Object) (new oa()));
         if(j.nextInt(10) == 0)
-            obj = ((java.lang.Object) (new ej()));
+            obj = ((Object) (new ej()));
         for(int k9 = 0; k9 < l4; k9++)
         {
             int j14 = k1 + j.nextInt(16) + 8;
@@ -462,7 +461,7 @@ public class nw
             for(int k16 = l1 + 8 + 0; k16 < l1 + 8 + 16; k16++)
             {
                 int i19 = p.d(l11, k16);
-                if(p.d && i19 > 0 && i19 < 128 && p.a(l11, i19, k16) == 0 && p.f(l11, i19 - 1, k16).c() && p.f(l11, i19 - 1, k16) != gb.r)
+                if(p.snowCovered && i19 > 0 && i19 < 128 && p.a(l11, i19, k16) == 0 && p.f(l11, i19 - 1, k16).c() && p.f(l11, i19 - 1, k16) != gb.r)
                     p.d(l11, i19, k16, ly.aT.bc);
             }
 
@@ -471,17 +470,17 @@ public class nw
         dh.a = false;
     }
 
-    public boolean a(boolean flag, nu nu)
+    public boolean saveChunks(boolean flag, IProgressUpdate iProgressUpdate)
     {
         return true;
     }
 
-    public boolean a()
+    public boolean unloadQueuedChunks()
     {
         return false;
     }
 
-    public boolean b()
+    public boolean canSave()
     {
         return true;
     }
diff --git "a/temp\\src\\java/nx.java" "b/src\\main\\java/nx.java"
index b82e86c..2db362f 100644
--- "a/temp\\src\\java/nx.java"
+++ "b/src\\main\\java/nx.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class nx extends di
 {
 
@@ -15,7 +12,7 @@ public class nx extends di
         aU = 64;
     }
 
-    public boolean a(ev ev1, dm dm, cn cn1, int i, int j, int k, int l)
+    public boolean a(ev ev1, Player player, World world1, int i, int j, int k, int l)
     {
         if(l == 0)
             j--;
@@ -29,11 +26,11 @@ public class nx extends di
             i--;
         if(l == 5)
             i++;
-        int i1 = cn1.a(i, j, k);
+        int i1 = world1.a(i, j, k);
         if(i1 == 0)
         {
-            cn1.a((double)i + 0.5D, (double)j + 0.5D, (double)k + 0.5D, "fire.ignite", 1.0F, b.nextFloat() * 0.4F + 0.8F);
-            cn1.d(i, j, k, ly.as.bc);
+            world1.a((double)i + 0.5D, (double)j + 0.5D, (double)k + 0.5D, "fire.ignite", 1.0F, b.nextFloat() * 0.4F + 0.8F);
+            world1.d(i, j, k, ly.as.bc);
         }
         ev1.b(1);
         return true;
diff --git "a/temp\\src\\java/ny.java" "b/src\\main\\java/ny.java"
index d188bf6..33954c7 100644
--- "a/temp\\src\\java/ny.java"
+++ "b/src\\main\\java/ny.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
 import java.io.IOException;
 
 public class ny extends fn
@@ -14,7 +11,7 @@ public class ny extends fn
     public int b;
     public int c;
     public byte d[];
-    public hm e;
+    public TagCompound e;
 
     public ny()
     {
@@ -27,7 +24,7 @@ public class ny extends fn
         a = i;
         b = j;
         c = k;
-        e = new hm();
+        e = new TagCompound();
         ic1.b(e);
         try
         {
diff --git "a/temp\\src\\java/nz.java" "b/src\\main\\java/nz.java"
index 9c0b5b5..4a43acd 100644
--- "a/temp\\src\\java/nz.java"
+++ "b/src\\main\\java/nz.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import org.lwjgl.opengl.GL11;
-
 public class nz extends dn
 {
 
@@ -16,13 +13,13 @@ public class nz extends dn
         f = f2;
     }
 
-    protected void a(hl hl1, float f1)
+    protected void a(Giant giant1, float f1)
     {
         org.lwjgl.opengl.GL11.glScalef(f, f, f);
     }
 
-    protected void a(ge ge, float f1)
+    protected void a(Mob mob, float f1)
     {
-        a((hl)ge, f1);
+        a((Giant) mob, f1);
     }
 }
diff --git "a/temp\\src\\java/o.java" "b/src\\main\\java/o.java"
index 3a9b636..5d6c48e 100644
--- "a/temp\\src\\java/o.java"
+++ "b/src\\main\\java/o.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -7,7 +6,7 @@
 public class o extends fk
 {
 
-    public o(int i, int j, int k, java.lang.String s)
+    public o(int i, int j, int k, String s)
     {
         super(i, j, k, 150, 20, s);
     }
diff --git "a/temp\\src\\java/oa.java" "b/src\\main\\java/oa.java"
index 0d69fab..cfb33b6 100644
--- "a/temp\\src\\java/oa.java"
+++ "b/src\\main\\java/oa.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class oa extends ik
 {
 
@@ -12,7 +9,7 @@ public class oa extends ik
     {
     }
 
-    public boolean a(cn cn1, java.util.Random random, int i, int j, int k)
+    public boolean a(World world1, java.util.Random random, int i, int j, int k)
     {
         int l = random.nextInt(3) + 4;
         boolean flag = true;
@@ -30,7 +27,7 @@ public class oa extends ik
                 for(int l2 = k - byte0; l2 <= k + byte0 && flag; l2++)
                     if(i1 >= 0 && i1 < 128)
                     {
-                        int j3 = cn1.a(i2, i1, l2);
+                        int j3 = world1.a(i2, i1, l2);
                         if(j3 != 0 && j3 != ly.L.bc)
                             flag = false;
                     } else
@@ -44,10 +41,10 @@ public class oa extends ik
 
         if(!flag)
             return false;
-        int j1 = cn1.a(i, j - 1, k);
+        int j1 = world1.a(i, j - 1, k);
         if(j1 != ly.v.bc && j1 != ly.w.bc || j >= 128 - l - 1)
             return false;
-        cn1.a(i, j - 1, k, ly.w.bc);
+        world1.a(i, j - 1, k, ly.w.bc);
         for(int k1 = (j - 3) + l; k1 <= j + l; k1++)
         {
             int j2 = k1 - (j + l);
@@ -58,8 +55,8 @@ public class oa extends ik
                 for(int i4 = k - i3; i4 <= k + i3; i4++)
                 {
                     int j4 = i4 - k;
-                    if((java.lang.Math.abs(l3) != i3 || java.lang.Math.abs(j4) != i3 || random.nextInt(2) != 0 && j2 != 0) && !ly.p[cn1.a(k3, k1, i4)])
-                        cn1.a(k3, k1, i4, ly.L.bc);
+                    if((java.lang.Math.abs(l3) != i3 || java.lang.Math.abs(j4) != i3 || random.nextInt(2) != 0 && j2 != 0) && !ly.p[world1.a(k3, k1, i4)])
+                        world1.a(k3, k1, i4, ly.L.bc);
                 }
 
             }
@@ -68,9 +65,9 @@ public class oa extends ik
 
         for(int l1 = 0; l1 < l; l1++)
         {
-            int k2 = cn1.a(i, j + l1, k);
+            int k2 = world1.a(i, j + l1, k);
             if(k2 == 0 || k2 == ly.L.bc)
-                cn1.a(i, j + l1, k, ly.K.bc);
+                world1.a(i, j + l1, k, ly.K.bc);
         }
 
         return true;
diff --git "a/temp\\src\\java/ob.java" "b/temp\\src\\java/ob.java"
deleted file mode 100644
index 36f06c8..0000000
--- "a/temp\\src\\java/ob.java"
+++ /dev/null
@@ -1,40 +0,0 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
-// Jad home page: http://www.kpdus.com/jad.html
-// Decompiler options: fullnames deadcode fieldsfirst safe 
-// Source File Name:   SourceFile
-
-
-public class ob extends ic
-{
-
-    public java.lang.String a[] = {
-        "", "", "", ""
-    };
-    public int b;
-
-    public ob()
-    {
-        b = -1;
-    }
-
-    public void b(hm hm1)
-    {
-        super.b(hm1);
-        hm1.a("Text1", a[0]);
-        hm1.a("Text2", a[1]);
-        hm1.a("Text3", a[2]);
-        hm1.a("Text4", a[3]);
-    }
-
-    public void a(hm hm1)
-    {
-        super.a(hm1);
-        for(int i = 0; i < 4; i++)
-        {
-            a[i] = hm1.i((new StringBuilder()).append("Text").append(i + 1).toString());
-            if(a[i].length() > 15)
-                a[i] = a[i].substring(0, 15);
-        }
-
-    }
-}
diff --git "a/temp\\src\\java/od.java" "b/src\\main\\java/od.java"
index 61790ca..fb3defd 100644
--- "a/temp\\src\\java/od.java"
+++ "b/src\\main\\java/od.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -13,7 +12,7 @@ public class od extends di
         aU = 64;
     }
 
-    public boolean a(ev ev1, dm dm, cn cn1, int i, int j, int k, int l)
+    public boolean a(ev ev1, Player player, World world1, int i, int j, int k, int l)
     {
         if(l == 0)
             return false;
@@ -26,11 +25,11 @@ public class od extends di
             byte0 = 2;
         if(l == 5)
             byte0 = 3;
-        jc jc1 = new jc(cn1, i, j, k, ((int) (byte0)));
-        if(jc1.i())
+        Painting painting1 = new Painting(world1, i, j, k, ((int) (byte0)));
+        if(painting1.i())
         {
-            cn1.a(((kh) (jc1)));
-            ev1.a--;
+            world1.a(((kh) (painting1)));
+            ev1.count--;
         }
         return true;
     }
diff --git "a/temp\\src\\java/oe.java" "b/src\\main\\java/oe.java"
index 3677d84..30e0cef 100644
--- "a/temp\\src\\java/oe.java"
+++ "b/src\\main\\java/oe.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/of.java" "b/src\\main\\java/of.java"
index c95babc..5875405 100644
--- "a/temp\\src\\java/of.java"
+++ "b/src\\main\\java/of.java"
@@ -1,13 +1,9 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.File;
-import java.io.PrintStream;
 import java.util.Random;
 import paulscode.sound.SoundSystem;
-import paulscode.sound.SoundSystemConfig;
 import paulscode.sound.codecs.CodecJOrbis;
 import paulscode.sound.codecs.CodecWav;
 import paulscode.sound.libraries.LibraryLWJGLOpenAL;
@@ -85,17 +81,17 @@ public class of
             a.cleanup();
     }
 
-    public void a(java.lang.String s, java.io.File file)
+    public void a(String s, java.io.File file)
     {
         b.a(s, file);
     }
 
-    public void b(java.lang.String s, java.io.File file)
+    public void b(String s, java.io.File file)
     {
         c.a(s, file);
     }
 
-    public void c(java.lang.String s, java.io.File file)
+    public void c(String s, java.io.File file)
     {
         d.a(s, file);
     }
@@ -122,19 +118,19 @@ public class of
         }
     }
 
-    public void a(ge ge1, float f1)
+    public void a(Mob mob1, float f1)
     {
         if(!g || f.b == 0.0F)
             return;
-        if(ge1 == null)
+        if(mob1 == null)
         {
             return;
         } else
         {
-            float f2 = ge1.as + (ge1.aq - ge1.as) * f1;
-            double d1 = ge1.ah + (ge1.ak - ge1.ah) * (double)f1;
-            double d2 = ge1.ai + (ge1.al - ge1.ai) * (double)f1;
-            double d3 = ge1.aj + (ge1.am - ge1.aj) * (double)f1;
+            float f2 = mob1.as + (mob1.aq - mob1.as) * f1;
+            double d1 = mob1.ah + (mob1.ak - mob1.ah) * (double)f1;
+            double d2 = mob1.ai + (mob1.al - mob1.ai) * (double)f1;
+            double d3 = mob1.aj + (mob1.am - mob1.aj) * (double)f1;
             float f3 = eo.b(-f2 * 0.01745329F - 3.141593F);
             float f4 = eo.a(-f2 * 0.01745329F - 3.141593F);
             float f5 = -f4;
@@ -149,11 +145,11 @@ public class of
         }
     }
 
-    public void a(java.lang.String s, float f1, float f2, float f3, float f4, float f5)
+    public void a(String s, float f1, float f2, float f3, float f4, float f5)
     {
         if(!g || f.b == 0.0F)
             return;
-        java.lang.String s1 = "streaming";
+        String s1 = "streaming";
         if(a.playing("streaming"))
             a.stop("streaming");
         if(s == null)
@@ -170,7 +166,7 @@ public class of
         }
     }
 
-    public void b(java.lang.String s, float f1, float f2, float f3, float f4, float f5)
+    public void b(String s, float f1, float f2, float f3, float f4, float f5)
     {
         if(!g || f.b == 0.0F)
             return;
@@ -178,7 +174,7 @@ public class of
         if(ah1 != null && f4 > 0.0F)
         {
             e = (e + 1) % 256;
-            java.lang.String s1 = (new StringBuilder()).append("sound_").append(e).toString();
+            String s1 = (new StringBuilder()).append("sound_").append(e).toString();
             float f6 = 16F;
             if(f4 > 1.0F)
                 f6 *= f4;
@@ -191,7 +187,7 @@ public class of
         }
     }
 
-    public void a(java.lang.String s, float f1, float f2)
+    public void a(String s, float f1, float f2)
     {
         if(!g || f.b == 0.0F)
             return;
@@ -199,7 +195,7 @@ public class of
         if(ah1 != null)
         {
             e = (e + 1) % 256;
-            java.lang.String s1 = (new StringBuilder()).append("sound_").append(e).toString();
+            String s1 = (new StringBuilder()).append("sound_").append(e).toString();
             a.newSource(false, s1, ah1.b, ah1.a, false, 0.0F, 0.0F, 0.0F, 0, 0.0F);
             if(f1 > 1.0F)
                 f1 = 1.0F;
diff --git "a/temp\\src\\java/og.java" "b/src\\main\\java/og.java"
index 3431449..982a44e 100644
--- "a/temp\\src\\java/og.java"
+++ "b/src\\main\\java/og.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class og extends ly
 {
 
@@ -31,7 +28,7 @@ public class og extends ly
         b[j] = l;
     }
 
-    public cf d(cn cn1, int j, int k, int l)
+    public cf d(World world1, int j, int k, int l)
     {
         return null;
     }
@@ -61,33 +58,33 @@ public class og extends ly
         return 10;
     }
 
-    public void a(cn cn1, int j, int k, int l, java.util.Random random)
+    public void a(World world1, int j, int k, int l, java.util.Random random)
     {
-        int i1 = cn1.e(j, k, l);
+        int i1 = world1.e(j, k, l);
         if(i1 < 15)
         {
-            cn1.b(j, k, l, i1 + 1);
-            cn1.h(j, k, l, bc);
+            world1.b(j, k, l, i1 + 1);
+            world1.h(j, k, l, bc);
         }
-        if(!h(cn1, j, k, l))
+        if(!h(world1, j, k, l))
         {
-            if(!cn1.g(j, k - 1, l) || i1 > 3)
-                cn1.d(j, k, l, 0);
+            if(!world1.g(j, k - 1, l) || i1 > 3)
+                world1.d(j, k, l, 0);
             return;
         }
-        if(!b(((nm) (cn1)), j, k - 1, l) && i1 == 15 && random.nextInt(4) == 0)
+        if(!b(((nm) (world1)), j, k - 1, l) && i1 == 15 && random.nextInt(4) == 0)
         {
-            cn1.d(j, k, l, 0);
+            world1.d(j, k, l, 0);
             return;
         }
         if(i1 % 2 == 0 && i1 > 2)
         {
-            a(cn1, j + 1, k, l, 300, random);
-            a(cn1, j - 1, k, l, 300, random);
-            a(cn1, j, k - 1, l, 200, random);
-            a(cn1, j, k + 1, l, 250, random);
-            a(cn1, j, k, l - 1, 300, random);
-            a(cn1, j, k, l + 1, 300, random);
+            a(world1, j + 1, k, l, 300, random);
+            a(world1, j - 1, k, l, 300, random);
+            a(world1, j, k - 1, l, 200, random);
+            a(world1, j, k + 1, l, 250, random);
+            a(world1, j, k, l - 1, 300, random);
+            a(world1, j, k, l + 1, 300, random);
             for(int j1 = j - 1; j1 <= j + 1; j1++)
             {
                 for(int k1 = l - 1; k1 <= l + 1; k1++)
@@ -99,9 +96,9 @@ public class og extends ly
                         int i2 = 100;
                         if(l1 > k + 1)
                             i2 += (l1 - (k + 1)) * 100;
-                        int j2 = i(cn1, j1, l1, k1);
+                        int j2 = i(world1, j1, l1, k1);
                         if(j2 > 0 && random.nextInt(i2) <= j2)
-                            cn1.d(j1, l1, k1, bc);
+                            world1.d(j1, l1, k1, bc);
                     }
 
                 }
@@ -111,50 +108,50 @@ public class og extends ly
         }
     }
 
-    private void a(cn cn1, int j, int k, int l, int i1, java.util.Random random)
+    private void a(World world1, int j, int k, int l, int i1, java.util.Random random)
     {
-        int j1 = b[cn1.a(j, k, l)];
+        int j1 = b[world1.a(j, k, l)];
         if(random.nextInt(i1) < j1)
         {
-            boolean flag = cn1.a(j, k, l) == ly.an.bc;
+            boolean flag = world1.a(j, k, l) == ly.an.bc;
             if(random.nextInt(2) == 0)
-                cn1.d(j, k, l, bc);
+                world1.d(j, k, l, bc);
             else
-                cn1.d(j, k, l, 0);
+                world1.d(j, k, l, 0);
             if(flag)
-                ly.an.b(cn1, j, k, l, 0);
+                ly.an.b(world1, j, k, l, 0);
         }
     }
 
-    private boolean h(cn cn1, int j, int k, int l)
+    private boolean h(World world1, int j, int k, int l)
     {
-        if(b(((nm) (cn1)), j + 1, k, l))
+        if(b(((nm) (world1)), j + 1, k, l))
             return true;
-        if(b(((nm) (cn1)), j - 1, k, l))
+        if(b(((nm) (world1)), j - 1, k, l))
             return true;
-        if(b(((nm) (cn1)), j, k - 1, l))
+        if(b(((nm) (world1)), j, k - 1, l))
             return true;
-        if(b(((nm) (cn1)), j, k + 1, l))
+        if(b(((nm) (world1)), j, k + 1, l))
             return true;
-        if(b(((nm) (cn1)), j, k, l - 1))
+        if(b(((nm) (world1)), j, k, l - 1))
             return true;
-        return b(((nm) (cn1)), j, k, l + 1);
+        return b(((nm) (world1)), j, k, l + 1);
     }
 
-    private int i(cn cn1, int j, int k, int l)
+    private int i(World world1, int j, int k, int l)
     {
         int i1 = 0;
-        if(cn1.a(j, k, l) != 0)
+        if(world1.a(j, k, l) != 0)
         {
             return 0;
         } else
         {
-            i1 = g(cn1, j + 1, k, l, i1);
-            i1 = g(cn1, j - 1, k, l, i1);
-            i1 = g(cn1, j, k - 1, l, i1);
-            i1 = g(cn1, j, k + 1, l, i1);
-            i1 = g(cn1, j, k, l - 1, i1);
-            i1 = g(cn1, j, k, l + 1, i1);
+            i1 = g(world1, j + 1, k, l, i1);
+            i1 = g(world1, j - 1, k, l, i1);
+            i1 = g(world1, j, k - 1, l, i1);
+            i1 = g(world1, j, k + 1, l, i1);
+            i1 = g(world1, j, k, l - 1, i1);
+            i1 = g(world1, j, k, l + 1, i1);
             return i1;
         }
     }
@@ -169,25 +166,25 @@ public class og extends ly
         return a[nm1.a(j, k, l)] > 0;
     }
 
-    public int g(cn cn1, int j, int k, int l, int i1)
+    public int g(World world1, int j, int k, int l, int i1)
     {
-        int j1 = a[cn1.a(j, k, l)];
+        int j1 = a[world1.a(j, k, l)];
         if(j1 > i1)
             return j1;
         else
             return i1;
     }
 
-    public boolean a(cn cn1, int j, int k, int l)
+    public boolean a(World world1, int j, int k, int l)
     {
-        return cn1.g(j, k - 1, l) || h(cn1, j, k, l);
+        return world1.g(j, k - 1, l) || h(world1, j, k, l);
     }
 
-    public void a(cn cn1, int j, int k, int l, int i1)
+    public void a(World world1, int j, int k, int l, int i1)
     {
-        if(!cn1.g(j, k - 1, l) && !h(cn1, j, k, l))
+        if(!world1.g(j, k - 1, l) && !h(world1, j, k, l))
         {
-            cn1.d(j, k, l, 0);
+            world1.d(j, k, l, 0);
             return;
         } else
         {
@@ -195,87 +192,87 @@ public class og extends ly
         }
     }
 
-    public void e(cn cn1, int j, int k, int l)
+    public void e(World world1, int j, int k, int l)
     {
-        if(!cn1.g(j, k - 1, l) && !h(cn1, j, k, l))
+        if(!world1.g(j, k - 1, l) && !h(world1, j, k, l))
         {
-            cn1.d(j, k, l, 0);
+            world1.d(j, k, l, 0);
             return;
         } else
         {
-            cn1.h(j, k, l, bc);
+            world1.h(j, k, l, bc);
             return;
         }
     }
 
-    public void b(cn cn1, int j, int k, int l, java.util.Random random)
+    public void b(World world1, int j, int k, int l, java.util.Random random)
     {
         if(random.nextInt(24) == 0)
-            cn1.a((float)j + 0.5F, (float)k + 0.5F, (float)l + 0.5F, "fire.fire", 1.0F + random.nextFloat(), random.nextFloat() * 0.7F + 0.3F);
-        if(cn1.g(j, k - 1, l) || ly.as.b(((nm) (cn1)), j, k - 1, l))
+            world1.a((float)j + 0.5F, (float)k + 0.5F, (float)l + 0.5F, "fire.fire", 1.0F + random.nextFloat(), random.nextFloat() * 0.7F + 0.3F);
+        if(world1.g(j, k - 1, l) || ly.as.b(((nm) (world1)), j, k - 1, l))
         {
             for(int i1 = 0; i1 < 3; i1++)
             {
                 float f1 = (float)j + random.nextFloat();
                 float f7 = (float)k + random.nextFloat() * 0.5F + 0.5F;
                 float f13 = (float)l + random.nextFloat();
-                cn1.a("largesmoke", f1, f7, f13, 0.0D, 0.0D, 0.0D);
+                world1.a("largesmoke", f1, f7, f13, 0.0D, 0.0D, 0.0D);
             }
 
         } else
         {
-            if(ly.as.b(((nm) (cn1)), j - 1, k, l))
+            if(ly.as.b(((nm) (world1)), j - 1, k, l))
             {
                 for(int j1 = 0; j1 < 2; j1++)
                 {
                     float f2 = (float)j + random.nextFloat() * 0.1F;
                     float f8 = (float)k + random.nextFloat();
                     float f14 = (float)l + random.nextFloat();
-                    cn1.a("largesmoke", f2, f8, f14, 0.0D, 0.0D, 0.0D);
+                    world1.a("largesmoke", f2, f8, f14, 0.0D, 0.0D, 0.0D);
                 }
 
             }
-            if(ly.as.b(((nm) (cn1)), j + 1, k, l))
+            if(ly.as.b(((nm) (world1)), j + 1, k, l))
             {
                 for(int k1 = 0; k1 < 2; k1++)
                 {
                     float f3 = (float)(j + 1) - random.nextFloat() * 0.1F;
                     float f9 = (float)k + random.nextFloat();
                     float f15 = (float)l + random.nextFloat();
-                    cn1.a("largesmoke", f3, f9, f15, 0.0D, 0.0D, 0.0D);
+                    world1.a("largesmoke", f3, f9, f15, 0.0D, 0.0D, 0.0D);
                 }
 
             }
-            if(ly.as.b(((nm) (cn1)), j, k, l - 1))
+            if(ly.as.b(((nm) (world1)), j, k, l - 1))
             {
                 for(int l1 = 0; l1 < 2; l1++)
                 {
                     float f4 = (float)j + random.nextFloat();
                     float f10 = (float)k + random.nextFloat();
                     float f16 = (float)l + random.nextFloat() * 0.1F;
-                    cn1.a("largesmoke", f4, f10, f16, 0.0D, 0.0D, 0.0D);
+                    world1.a("largesmoke", f4, f10, f16, 0.0D, 0.0D, 0.0D);
                 }
 
             }
-            if(ly.as.b(((nm) (cn1)), j, k, l + 1))
+            if(ly.as.b(((nm) (world1)), j, k, l + 1))
             {
                 for(int i2 = 0; i2 < 2; i2++)
                 {
                     float f5 = (float)j + random.nextFloat();
                     float f11 = (float)k + random.nextFloat();
                     float f17 = (float)(l + 1) - random.nextFloat() * 0.1F;
-                    cn1.a("largesmoke", f5, f11, f17, 0.0D, 0.0D, 0.0D);
+                    world1.a("largesmoke", f5, f11, f17, 0.0D, 0.0D, 0.0D);
                 }
 
             }
-            if(ly.as.b(((nm) (cn1)), j, k + 1, l))
+            if(ly.as.b(((nm) (world1)), j, k + 1, l))
             {
                 for(int j2 = 0; j2 < 2; j2++)
                 {
                     float f6 = (float)j + random.nextFloat();
                     float f12 = (float)(k + 1) - random.nextFloat() * 0.1F;
                     float f18 = (float)l + random.nextFloat();
-                    cn1.a("largesmoke", f6, f12, f18, 0.0D, 0.0D, 0.0D);
+                    world1.a("largesmoke", f6, f12, f18, 0.0D, 0.0D, 0.0D);
                 }
 
             }
diff --git "a/temp\\src\\java/oh.java" "b/src\\main\\java/oh.java"
index 7d1b675..b5ee5de 100644
--- "a/temp\\src\\java/oh.java"
+++ "b/src\\main\\java/oh.java"
@@ -1,22 +1,19 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
 import java.io.IOException;
 
 public class oh extends fn
 {
 
-    public java.lang.String a;
+    public String a;
 
     public oh()
     {
     }
 
-    public oh(java.lang.String s)
+    public oh(String s)
     {
         a = s;
     }
diff --git "a/temp\\src\\java/oi.java" "b/src\\main\\java/oi.java"
index 0093d50..d8e007d 100644
--- "a/temp\\src\\java/oi.java"
+++ "b/src\\main\\java/oi.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class oi extends ly
 {
 
@@ -29,7 +26,7 @@ public class oi extends ly
         return a;
     }
 
-    public void a(cn cn1, int i, int j, int k, int l)
+    public void a(World world1, int i, int j, int k, int l)
     {
         if(this != ly.al)
             return;
@@ -37,15 +34,15 @@ public class oi extends ly
             return;
     }
 
-    public void e(cn cn1, int i, int j, int k)
+    public void e(World world1, int i, int j, int k)
     {
         if(this != ly.al)
-            super.e(cn1, i, j, k);
-        int l = cn1.a(i, j - 1, k);
+            super.e(world1, i, j, k);
+        int l = world1.a(i, j - 1, k);
         if(l == al.bc)
         {
-            cn1.d(i, j, k, 0);
-            cn1.d(i, j - 1, k, ly.ak.bc);
+            world1.d(i, j, k, 0);
+            world1.d(i, j - 1, k, ly.ak.bc);
         }
     }
 
diff --git "a/temp\\src\\java/oj.java" "b/src\\main\\java/oj.java"
index 49dbf1b..680a15b 100644
--- "a/temp\\src\\java/oj.java"
+++ "b/src\\main\\java/oj.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -16,10 +15,10 @@ public class oj extends di
         aT = 1;
     }
 
-    public ev a(ev ev1, cn cn, dm dm1)
+    public ev a(ev ev1, World world, Player player1)
     {
-        ev1.a--;
-        dm1.b(a);
+        ev1.count--;
+        player1.b(a);
         return ev1;
     }
 }
diff --git "a/temp\\src\\java/ok.java" "b/src\\main\\java/ok.java"
index 8172152..a871097 100644
--- "a/temp\\src\\java/ok.java"
+++ "b/src\\main\\java/ok.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import org.lwjgl.opengl.GL11;
-
 public class ok extends dn
 {
 
@@ -14,12 +11,12 @@ public class ok extends dn
         a(((fo) (new jy())));
     }
 
-    protected float a(ax ax1)
+    protected float a(Spider spider1)
     {
         return 180F;
     }
 
-    protected boolean a(ax ax1, int i)
+    protected boolean a(Spider spider1, int i)
     {
         if(i != 0)
             return false;
@@ -29,7 +26,7 @@ public class ok extends dn
         } else
         {
             a("/mob/spider_eyes.png");
-            float f = (1.0F - ax1.a(1.0F)) * 0.5F;
+            float f = (1.0F - spider1.a(1.0F)) * 0.5F;
             org.lwjgl.opengl.GL11.glEnable(3042);
             org.lwjgl.opengl.GL11.glDisable(3008);
             org.lwjgl.opengl.GL11.glBlendFunc(770, 771);
@@ -38,13 +35,13 @@ public class ok extends dn
         }
     }
 
-    protected float a(ge ge)
+    protected float a(Mob mob)
     {
-        return a((ax)ge);
+        return a((Spider) mob);
     }
 
-    protected boolean a(ge ge, int i)
+    protected boolean a(Mob mob, int i)
     {
-        return a((ax)ge, i);
+        return a((Spider) mob, i);
     }
 }
diff --git "a/temp\\src\\java/ol.java" "b/src\\main\\java/ol.java"
index 89d4566..7cb0347 100644
--- "a/temp\\src\\java/ol.java"
+++ "b/src\\main\\java/ol.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -21,7 +20,7 @@ public class ol
         return a << 8 | b;
     }
 
-    public boolean equals(java.lang.Object obj)
+    public boolean equals(Object obj)
     {
         ol ol1 = (ol)obj;
         return ol1.a == a && ol1.b == b;
diff --git "a/temp\\src\\java/p.java" "b/src\\main\\java/p.java"
index 8a254a6..0d6485d 100644
--- "a/temp\\src\\java/p.java"
+++ "b/src\\main\\java/p.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class p extends ly
 {
 
@@ -24,12 +21,12 @@ public class p extends ly
         return 4;
     }
 
-    public void a(cn cn1, int i, int j, int k, java.util.Random random)
+    public void a(World world1, int i, int j, int k, java.util.Random random)
     {
-        if(cn1.a(by.b, i, j, k) > 11)
+        if(world1.a(by.b, i, j, k) > 11)
         {
-            b_(cn1, i, j, k, cn1.e(i, j, k));
-            cn1.d(i, j, k, 0);
+            b_(world1, i, j, k, world1.e(i, j, k));
+            world1.d(i, j, k, 0);
         }
     }
 }
diff --git "a/temp\\src\\java/q.java" "b/src\\main\\java/q.java"
index 7bf6285..b5d7e4d 100644
--- "a/temp\\src\\java/q.java"
+++ "b/src\\main\\java/q.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.util.Random;
-
 public class q extends ly
 {
 
@@ -23,12 +20,12 @@ public class q extends ly
             return bb;
     }
 
-    public void a(cn cn1, int i, int j, int k, int l)
+    public void a(World world1, int i, int j, int k, int l)
     {
-        if(l > 0 && ly.n[l].d() && cn1.o(i, j, k))
+        if(l > 0 && ly.n[l].d() && world1.o(i, j, k))
         {
-            b(cn1, i, j, k, 0);
-            cn1.d(i, j, k, 0);
+            b(world1, i, j, k, 0);
+            world1.d(i, j, k, 0);
         }
     }
 
@@ -37,17 +34,17 @@ public class q extends ly
         return 0;
     }
 
-    public void c(cn cn1, int i, int j, int k)
+    public void c(World world1, int i, int j, int k)
     {
-        jd jd1 = new jd(cn1, (float)i + 0.5F, (float)j + 0.5F, (float)k + 0.5F);
-        jd1.a = cn1.n.nextInt(jd1.a / 4) + jd1.a / 8;
-        cn1.a(((kh) (jd1)));
+        PrimedTnt primedTnt1 = new PrimedTnt(world1, (float)i + 0.5F, (float)j + 0.5F, (float)k + 0.5F);
+        primedTnt1.a = world1.n.nextInt(primedTnt1.a / 4) + primedTnt1.a / 8;
+        world1.a(((kh) (primedTnt1)));
     }
 
-    public void b(cn cn1, int i, int j, int k, int l)
+    public void b(World world1, int i, int j, int k, int l)
     {
-        jd jd1 = new jd(cn1, (float)i + 0.5F, (float)j + 0.5F, (float)k + 0.5F);
-        cn1.a(((kh) (jd1)));
-        cn1.a(((kh) (jd1)), "random.fuse", 1.0F, 1.0F);
+        PrimedTnt primedTnt1 = new PrimedTnt(world1, (float)i + 0.5F, (float)j + 0.5F, (float)k + 0.5F);
+        world1.a(((kh) (primedTnt1)));
+        world1.a(((kh) (primedTnt1)), "random.fuse", 1.0F, 1.0F);
     }
 }
diff --git "a/temp\\src\\java/r.java" "b/src\\main\\java/r.java"
index 2d440f6..a5ca561 100644
--- "a/temp\\src\\java/r.java"
+++ "b/src\\main\\java/r.java"
@@ -1,11 +1,8 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
 import java.util.HashMap;
-import java.util.Map;
-import org.lwjgl.opengl.GL11;
 
 public class r extends ex
 {
@@ -17,23 +14,23 @@ public class r extends ex
         b = ((java.util.Map) (new HashMap()));
     }
 
-    public void a(bd bd1, double d, double d1, double d2, 
-            float f)
+    public void a(MobSpawner mobSpawner1, double d, double d1, double d2,
+                  float f)
     {
         org.lwjgl.opengl.GL11.glPushMatrix();
         org.lwjgl.opengl.GL11.glTranslatef((float)d + 0.5F, (float)d1, (float)d2 + 0.5F);
-        kh kh1 = (kh)b.get(((java.lang.Object) (bd1.b)));
+        kh kh1 = (kh)b.get(((Object) (mobSpawner1.entityId)));
         if(kh1 == null)
         {
-            kh1 = ew.a(bd1.b, ((cn) (null)));
-            b.put(((java.lang.Object) (bd1.b)), ((java.lang.Object) (kh1)));
+            kh1 = ew.a(mobSpawner1.entityId, ((World) (null)));
+            b.put(((Object) (mobSpawner1.entityId)), ((Object) (kh1)));
         }
         if(kh1 != null)
         {
-            kh1.a(bd1.e);
+            kh1.a(mobSpawner1.e);
             float f1 = 0.4375F;
             org.lwjgl.opengl.GL11.glTranslatef(0.0F, 0.4F, 0.0F);
-            org.lwjgl.opengl.GL11.glRotatef((float)(bd1.d + (bd1.c - bd1.d) * (double)f) * 10F, 0.0F, 1.0F, 0.0F);
+            org.lwjgl.opengl.GL11.glRotatef((float)(mobSpawner1.d + (mobSpawner1.c - mobSpawner1.d) * (double)f) * 10F, 0.0F, 1.0F, 0.0F);
             org.lwjgl.opengl.GL11.glRotatef(-30F, 1.0F, 0.0F, 0.0F);
             org.lwjgl.opengl.GL11.glTranslatef(0.0F, -0.4F, 0.0F);
             org.lwjgl.opengl.GL11.glScalef(f1, f1, f1);
@@ -45,6 +42,6 @@ public class r extends ex
 
     public void a(ic ic, double d, double d1, double d2, float f)
     {
-        a((bd)ic, d, d1, d2, f);
+        a((MobSpawner)ic, d, d1, d2, f);
     }
 }
diff --git "a/temp\\src\\java/s.java" "b/src\\main\\java/s.java"
index da1297d..838d972 100644
--- "a/temp\\src\\java/s.java"
+++ "b/src\\main\\java/s.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
 import java.io.IOException;
 
 public class s extends eh
diff --git "a/temp\\src\\java/t.java" "b/src\\main\\java/t.java"
index 60a3205..234ba7e 100644
--- "a/temp\\src\\java/t.java"
+++ "b/src\\main\\java/t.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -7,12 +6,12 @@
 final class t extends bb
 {
 
-    t(java.lang.String s, float f, float f1)
+    t(String s, float f, float f1)
     {
         super(s, f, f1);
     }
 
-    public java.lang.String a()
+    public String a()
     {
         return "step.gravel";
     }
diff --git "a/temp\\src\\java/u.java" "b/src\\main\\java/u.java"
index e747abe..fbe215a 100644
--- "a/temp\\src\\java/u.java"
+++ "b/src\\main\\java/u.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
@@ -7,12 +6,12 @@
 final class u extends bb
 {
 
-    u(java.lang.String s, float f, float f1)
+    u(String s, float f, float f1)
     {
         super(s, f, f1);
     }
 
-    public java.lang.String a()
+    public String a()
     {
         return "random.glass";
     }
diff --git "a/temp\\src\\java/v.java" "b/src\\main\\java/v.java"
index 14aa662..503cf39 100644
--- "a/temp\\src\\java/v.java"
+++ "b/src\\main\\java/v.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/w.java" "b/src\\main\\java/w.java"
index 510f9eb..fe8916d 100644
--- "a/temp\\src\\java/w.java"
+++ "b/src\\main\\java/w.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/x.java" "b/src\\main\\java/x.java"
index b95c35c..1c7fcbd 100644
--- "a/temp\\src\\java/x.java"
+++ "b/src\\main\\java/x.java"
@@ -1,17 +1,12 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
-import java.io.DataInput;
 import java.io.DataInputStream;
-import java.io.DataOutput;
 import java.io.DataOutputStream;
 import java.io.IOException;
-import java.io.InputStream;
-import java.io.OutputStream;
 import java.util.zip.GZIPInputStream;
 import java.util.zip.GZIPOutputStream;
 
@@ -22,13 +17,13 @@ public class x
     {
     }
 
-    public static hm a(java.io.InputStream inputstream) throws IOException
+    public static TagCompound a(java.io.InputStream inputstream) throws IOException
     {
         java.io.DataInputStream datainputstream = new DataInputStream(((java.io.InputStream) (new GZIPInputStream(inputstream))));
         try
         {
-        hm hm1 = x.a(((java.io.DataInput) (datainputstream)));
-        return hm1;
+        TagCompound tagCompound1 = x.a(((java.io.DataInput) (datainputstream)));
+        return tagCompound1;
         }
         finally
         {
@@ -36,12 +31,12 @@ public class x
         }
     }
 
-    public static void a(hm hm1, java.io.OutputStream outputstream) throws IOException
+    public static void a(TagCompound tagCompound1, java.io.OutputStream outputstream) throws IOException
     {
         java.io.DataOutputStream dataoutputstream = new DataOutputStream(((java.io.OutputStream) (new GZIPOutputStream(outputstream))));
     try
     {
-        x.a(hm1, ((java.io.DataOutput) (dataoutputstream)));
+        x.a(tagCompound1, ((java.io.DataOutput) (dataoutputstream)));
     }
     finally
     {
@@ -50,13 +45,13 @@ public class x
     }
     }
 
-    public static hm a(byte abyte0[]) throws IOException
+    public static TagCompound a(byte abyte0[]) throws IOException
     {
         java.io.DataInputStream datainputstream = new DataInputStream(((java.io.InputStream) (new GZIPInputStream(((java.io.InputStream) (new ByteArrayInputStream(abyte0)))))));
         try
         {
-        hm hm1 = x.a(((java.io.DataInput) (datainputstream)));
-        return hm1;
+        TagCompound tagCompound1 = x.a(((java.io.DataInput) (datainputstream)));
+        return tagCompound1;
         }
         finally
         {
@@ -64,7 +59,7 @@ public class x
         }
     }
 
-    public static byte[] a(hm hm1) throws IOException
+    public static byte[] a(TagCompound tagCompound1) throws IOException
     {
         java.io.ByteArrayOutputStream bytearrayoutputstream;
         java.io.DataOutputStream dataoutputstream;
@@ -72,7 +67,7 @@ public class x
         dataoutputstream = new DataOutputStream(((java.io.OutputStream) (new GZIPOutputStream(((java.io.OutputStream) (bytearrayoutputstream))))));
         try
         {
-        x.a(hm1, ((java.io.DataOutput) (dataoutputstream)));
+        x.a(tagCompound1, ((java.io.DataOutput) (dataoutputstream)));
         }
         finally
         {
@@ -82,17 +77,17 @@ public class x
         return bytearrayoutputstream.toByteArray();
     }
 
-    public static hm a(java.io.DataInput datainput) throws IOException
+    public static TagCompound a(java.io.DataInput datainput) throws IOException
     {
-        el el1 = el.b(datainput);
-        if(el1 instanceof hm)
-            return (hm)el1;
+        Tag el1 = Tag.b(datainput);
+        if(el1 instanceof TagCompound)
+            return (TagCompound)el1;
         else
             throw new IOException("Root tag must be a named compound tag");
     }
 
-    public static void a(hm hm1, java.io.DataOutput dataoutput) throws IOException
+    public static void a(TagCompound tagCompound1, java.io.DataOutput dataoutput) throws IOException
     {
-        el.a(((el) (hm1)), dataoutput);
+        Tag.a(((Tag) (tagCompound1)), dataoutput);
     }
 }
diff --git "a/temp\\src\\java/y.java" "b/src\\main\\java/y.java"
index 619c873..2f1e8c8 100644
--- "a/temp\\src\\java/y.java"
+++ "b/src\\main\\java/y.java"
@@ -1,4 +1,3 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
diff --git "a/temp\\src\\java/z.java" "b/src\\main\\java/z.java"
index 397f4f1..7a85d48 100644
--- "a/temp\\src\\java/z.java"
+++ "b/src\\main\\java/z.java"
@@ -1,10 +1,7 @@
-// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
 // Jad home page: http://www.kpdus.com/jad.html
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import org.lwjgl.opengl.GL11;
-
 public class z
 {
 
