diff --git "a/temp\\src\\java/Arrow.java" "b/src\\main\\java/Arrow.java"
index 13976d2..c194ec4 100644
--- "a/temp\\src\\java/Arrow.java"
+++ "b/src\\main\\java/Arrow.java"
@@ -2,7 +2,7 @@
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-public class Arrow extends kh
+public class Arrow extends Entity
 {
 
     private int xTile;
@@ -11,7 +11,7 @@ public class Arrow extends kh
     private int inTile;
     private boolean inGround;
     public int shake;
-    private Mob g;
+    private EntityMob g;
     private int h;
     private int i;
 
@@ -28,7 +28,7 @@ public class Arrow extends kh
         a(0.5F, 0.5F);
     }
 
-    public Arrow(World world1, Mob mob1)
+    public Arrow(World world1, EntityMob entityMob1)
     {
         super(world1);
         xTile = -1;
@@ -38,39 +38,39 @@ public class Arrow extends kh
         inGround = false;
         shake = 0;
         i = 0;
-        g = mob1;
+        g = entityMob1;
         a(0.5F, 0.5F);
-        c(mob1.ak, mob1.al, mob1.am, mob1.aq, mob1.ar);
-        ak -= eo.b((aq / 180F) * 3.141593F) * 0.16F;
-        al -= 0.10000000149011612D;
-        am -= eo.a((aq / 180F) * 3.141593F) * 0.16F;
-        a(ak, al, am);
+        c(entityMob1.posX, entityMob1.posY, entityMob1.posZ, entityMob1.yaw, entityMob1.pitch);
+        posX -= MathLib.cos((yaw / 180F) * 3.141593F) * 0.16F;
+        posY -= 0.10000000149011612D;
+        posZ -= MathLib.sin((yaw / 180F) * 3.141593F) * 0.16F;
+        setPosition(posX, posY, posZ);
         aB = 0.0F;
-        an = -eo.a((aq / 180F) * 3.141593F) * eo.b((ar / 180F) * 3.141593F);
-        ap = eo.b((aq / 180F) * 3.141593F) * eo.b((ar / 180F) * 3.141593F);
-        ao = -eo.a((ar / 180F) * 3.141593F);
-        a(an, ao, ap, 1.5F, 1.0F);
+        motionX = -MathLib.sin((yaw / 180F) * 3.141593F) * MathLib.cos((pitch / 180F) * 3.141593F);
+        motionZ = MathLib.cos((yaw / 180F) * 3.141593F) * MathLib.cos((pitch / 180F) * 3.141593F);
+        motionY = -MathLib.sin((pitch / 180F) * 3.141593F);
+        a(motionX, motionY, motionZ, 1.5F, 1.0F);
     }
 
     public void a(double d1, double d2, double d3, float f1, 
             float f2)
     {
-        float f3 = eo.a(d1 * d1 + d2 * d2 + d3 * d3);
+        float f3 = MathLib.sqrt(d1 * d1 + d2 * d2 + d3 * d3);
         d1 /= f3;
         d2 /= f3;
         d3 /= f3;
-        d1 += aQ.nextGaussian() * 0.0074999998323619366D * (double)f2;
-        d2 += aQ.nextGaussian() * 0.0074999998323619366D * (double)f2;
-        d3 += aQ.nextGaussian() * 0.0074999998323619366D * (double)f2;
+        d1 += rnd.nextGaussian() * 0.0074999998323619366D * (double)f2;
+        d2 += rnd.nextGaussian() * 0.0074999998323619366D * (double)f2;
+        d3 += rnd.nextGaussian() * 0.0074999998323619366D * (double)f2;
         d1 *= f1;
         d2 *= f1;
         d3 *= f1;
-        an = d1;
-        ao = d2;
-        ap = d3;
-        float f4 = eo.a(d1 * d1 + d3 * d3);
-        as = aq = (float)((java.lang.Math.atan2(d1, d3) * 180D) / 3.1415927410125732D);
-        at = ar = (float)((java.lang.Math.atan2(d2, f4) * 180D) / 3.1415927410125732D);
+        motionX = d1;
+        motionY = d2;
+        motionZ = d3;
+        float f4 = MathLib.sqrt(d1 * d1 + d3 * d3);
+        prevYaw = yaw = (float)((java.lang.Math.atan2(d1, d3) * 180D) / 3.1415927410125732D);
+        prevPitch = pitch = (float)((java.lang.Math.atan2(d2, f4) * 180D) / 3.1415927410125732D);
         h = 0;
     }
 
@@ -85,9 +85,9 @@ public class Arrow extends kh
             if(j != inTile)
             {
                 inGround = false;
-                an *= aQ.nextFloat() * 0.2F;
-                ao *= aQ.nextFloat() * 0.2F;
-                ap *= aQ.nextFloat() * 0.2F;
+                motionX *= rnd.nextFloat() * 0.2F;
+                motionY *= rnd.nextFloat() * 0.2F;
+                motionZ *= rnd.nextFloat() * 0.2F;
                 h = 0;
                 i = 0;
             } else
@@ -101,50 +101,50 @@ public class Arrow extends kh
         {
             i++;
         }
-        aj aj1 = ((aj)null).b(ak, al, am);
-        aj aj2 = ((aj)null).b(ak + an, al + ao, am + ap);
-        mf mf1 = ag.a(aj1, aj2);
-        aj1 = ((aj)null).b(ak, al, am);
-        aj2 = ((aj)null).b(ak + an, al + ao, am + ap);
+        Vec3 vec31 = ((Vec3)null).recycle(posX, posY, posZ);
+        Vec3 vec32 = ((Vec3)null).recycle(posX + motionX, posY + motionY, posZ + motionZ);
+        mf mf1 = ag.a(vec31, vec32);
+        vec31 = ((Vec3)null).recycle(posX, posY, posZ);
+        vec32 = ((Vec3)null).recycle(posX + motionX, posY + motionY, posZ + motionZ);
         if(mf1 != null)
-            aj2 = ((aj)null).b(mf1.f.a, mf1.f.b, mf1.f.c);
-        kh kh1 = null;
-        java.util.List list = ag.b(((kh) (this)), au.a(an, ao, ap).b(1.0D, 1.0D, 1.0D));
+            vec32 = ((Vec3)null).recycle(mf1.f.x, mf1.f.y, mf1.f.z);
+        Entity entity1 = null;
+        java.util.List list = ag.b(((Entity) (this)), au.a(motionX, motionY, motionZ).b(1.0D, 1.0D, 1.0D));
         double d1 = 0.0D;
         for(int k = 0; k < list.size(); k++)
         {
-            kh kh2 = (kh)list.get(k);
-            if(!kh2.c_() || kh2 == g && i < 5)
+            Entity entity2 = (Entity)list.get(k);
+            if(!entity2.c_() || entity2 == g && i < 5)
                 continue;
             float f4 = 0.3F;
-            cf cf1 = kh2.au.b(f4, f4, f4);
-            mf mf2 = cf1.a(aj1, aj2);
+            cf cf1 = entity2.au.b(f4, f4, f4);
+            mf mf2 = cf1.a(vec31, vec32);
             if(mf2 == null)
                 continue;
-            double d2 = aj1.c(mf2.f);
+            double d2 = vec31.squareDistance(mf2.f);
             if(d2 < d1 || d1 == 0.0D)
             {
-                kh1 = kh2;
+                entity1 = entity2;
                 d1 = d2;
             }
         }
 
-        if(kh1 != null)
-            mf1 = new mf(kh1);
+        if(entity1 != null)
+            mf1 = new mf(entity1);
         if(mf1 != null)
             if(mf1.g != null)
             {
-                if(mf1.g.a(((kh) (g)), 4))
+                if(mf1.g.a(((Entity) (g)), 4))
                 {
-                    ag.a(((kh) (this)), "random.drr", 1.0F, 1.2F / (aQ.nextFloat() * 0.2F + 0.9F));
+                    ag.a(((Entity) (this)), "random.drr", 1.0F, 1.2F / (rnd.nextFloat() * 0.2F + 0.9F));
                     F();
                 } else
                 {
-                    an *= -0.10000000149011612D;
-                    ao *= -0.10000000149011612D;
-                    ap *= -0.10000000149011612D;
-                    aq += 180F;
-                    as += 180F;
+                    motionX *= -0.10000000149011612D;
+                    motionY *= -0.10000000149011612D;
+                    motionZ *= -0.10000000149011612D;
+                    yaw += 180F;
+                    prevYaw += 180F;
                     i = 0;
                 }
             } else
@@ -153,28 +153,28 @@ public class Arrow extends kh
                 yTile = mf1.c;
                 zTile = mf1.d;
                 inTile = ag.a(xTile, yTile, zTile);
-                an = (float)(mf1.f.a - ak);
-                ao = (float)(mf1.f.b - al);
-                ap = (float)(mf1.f.c - am);
-                float f1 = eo.a(an * an + ao * ao + ap * ap);
-                ak -= (an / (double)f1) * 0.05000000074505806D;
-                al -= (ao / (double)f1) * 0.05000000074505806D;
-                am -= (ap / (double)f1) * 0.05000000074505806D;
-                ag.a(((kh) (this)), "random.drr", 1.0F, 1.2F / (aQ.nextFloat() * 0.2F + 0.9F));
+                motionX = (float)(mf1.f.x - posX);
+                motionY = (float)(mf1.f.y - posY);
+                motionZ = (float)(mf1.f.z - posZ);
+                float f1 = MathLib.sqrt(motionX * motionX + motionY * motionY + motionZ * motionZ);
+                posX -= (motionX / (double)f1) * 0.05000000074505806D;
+                posY -= (motionY / (double)f1) * 0.05000000074505806D;
+                posZ -= (motionZ / (double)f1) * 0.05000000074505806D;
+                ag.a(((Entity) (this)), "random.drr", 1.0F, 1.2F / (rnd.nextFloat() * 0.2F + 0.9F));
                 inGround = true;
                 shake = 7;
             }
-        ak += an;
-        al += ao;
-        am += ap;
-        float f2 = eo.a(an * an + ap * ap);
-        aq = (float)((java.lang.Math.atan2(an, ap) * 180D) / 3.1415927410125732D);
-        for(ar = (float)((java.lang.Math.atan2(ao, f2) * 180D) / 3.1415927410125732D); ar - at < -180F; at -= 360F);
-        for(; ar - at >= 180F; at += 360F);
-        for(; aq - as < -180F; as -= 360F);
-        for(; aq - as >= 180F; as += 360F);
-        ar = at + (ar - at) * 0.2F;
-        aq = as + (aq - as) * 0.2F;
+        posX += motionX;
+        posY += motionY;
+        posZ += motionZ;
+        float f2 = MathLib.sqrt(motionX * motionX + motionZ * motionZ);
+        yaw = (float)((java.lang.Math.atan2(motionX, motionZ) * 180D) / 3.1415927410125732D);
+        for(pitch = (float)((java.lang.Math.atan2(motionY, f2) * 180D) / 3.1415927410125732D); pitch - prevPitch < -180F; prevPitch -= 360F);
+        for(; pitch - prevPitch >= 180F; prevPitch += 360F);
+        for(; yaw - prevYaw < -180F; prevYaw -= 360F);
+        for(; yaw - prevYaw >= 180F; prevYaw += 360F);
+        pitch = prevPitch + (pitch - prevPitch) * 0.2F;
+        yaw = prevYaw + (yaw - prevYaw) * 0.2F;
         float f3 = 0.99F;
         float f5 = 0.03F;
         if(g_())
@@ -182,19 +182,19 @@ public class Arrow extends kh
             for(int l = 0; l < 4; l++)
             {
                 float f6 = 0.25F;
-                ag.a("bubble", ak - an * (double)f6, al - ao * (double)f6, am - ap * (double)f6, an, ao, ap);
+                ag.a("bubble", posX - motionX * (double)f6, posY - motionY * (double)f6, posZ - motionZ * (double)f6, motionX, motionY, motionZ);
             }
 
             f3 = 0.8F;
         }
-        an *= f3;
-        ao *= f3;
-        ap *= f3;
-        ao -= f5;
-        a(ak, al, am);
+        motionX *= f3;
+        motionY *= f3;
+        motionZ *= f3;
+        motionY -= f5;
+        setPosition(posX, posY, posZ);
     }
 
-    public void a(TagCompound tagCompound1)
+    public void writeToTag(TagCompound tagCompound1)
     {
         tagCompound1.set("xTile", (short) xTile);
         tagCompound1.set("yTile", (short) yTile);
@@ -204,7 +204,7 @@ public class Arrow extends kh
         tagCompound1.set("inGround", (byte)(inGround ? 1 : 0));
     }
 
-    public void b(TagCompound tagCompound1)
+    public void readFromTag(TagCompound tagCompound1)
     {
         xTile = ((int) (tagCompound1.getShort("xTile")));
         yTile = ((int) (tagCompound1.getShort("yTile")));
@@ -214,12 +214,12 @@ public class Arrow extends kh
         inGround = tagCompound1.getByte("inGround") == 1;
     }
 
-    public void b(Player player1)
+    public void onCollideWithPlayer(EntityPlayer entityPlayer1)
     {
-        if(inGround && g == player1 && shake <= 0 && player1.b.a(new ev(di.j.aS, 1)))
+        if(inGround && g == entityPlayer1 && shake <= 0 && entityPlayer1.b.a(new ev(di.j.aS, 1)))
         {
-            ag.a(((kh) (this)), "random.pop", 0.2F, ((aQ.nextFloat() - aQ.nextFloat()) * 0.7F + 1.0F) * 2.0F);
-            player1.a_(((kh) (this)), 1);
+            ag.a(((Entity) (this)), "random.pop", 0.2F, ((rnd.nextFloat() - rnd.nextFloat()) * 0.7F + 1.0F) * 2.0F);
+            entityPlayer1.a_(((Entity) (this)), 1);
             F();
         }
     }
diff --git "a/temp\\src\\java/Boat.java" "b/src\\main\\java/Boat.java"
index cd58a7a..e18b9f4 100644
--- "a/temp\\src\\java/Boat.java"
+++ "b/src\\main\\java/Boat.java"
@@ -2,7 +2,7 @@
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-public class Boat extends kh
+public class Boat extends Entity
 {
 
     public int a;
@@ -21,9 +21,9 @@ public class Boat extends kh
         aG = false;
     }
 
-    public cf b_(kh kh1)
+    public cf b_(Entity entity1)
     {
-        return kh1.au;
+        return entity1.au;
     }
 
     public cf f_()
@@ -39,13 +39,13 @@ public class Boat extends kh
     public Boat(World world1, double d, double d1, double d2)
     {
         this(world1);
-        a(d, d1 + (double)aB, d2);
-        an = 0.0D;
-        ao = 0.0D;
-        ap = 0.0D;
-        ah = d;
-        ai = d1;
-        aj = d2;
+        setPosition(d, d1 + (double)aB, d2);
+        motionX = 0.0D;
+        motionY = 0.0D;
+        motionZ = 0.0D;
+        prevPosX = d;
+        prevPosY = d1;
+        prevPosZ = d2;
     }
 
     public double h()
@@ -53,7 +53,7 @@ public class Boat extends kh
         return (double)aD * 0.0D - 0.30000001192092896D;
     }
 
-    public boolean a(kh kh1, int i)
+    public boolean a(Entity entity1, int i)
     {
         c = -c;
         b = 10;
@@ -83,9 +83,9 @@ public class Boat extends kh
             b--;
         if(a > 0)
             a--;
-        ah = ak;
-        ai = al;
-        aj = am;
+        prevPosX = posX;
+        prevPosY = posY;
+        prevPosZ = posZ;
         int i = 5;
         double d = 0.0D;
         for(int j = 0; j < i; j++)
@@ -98,47 +98,47 @@ public class Boat extends kh
         }
 
         double d1 = d * 2D - 1.0D;
-        ao += 0.039999999105930328D * d1;
+        motionY += 0.039999999105930328D * d1;
         if(ae != null)
         {
-            an += ae.an * 0.20000000000000001D;
-            ap += ae.ap * 0.20000000000000001D;
+            motionX += ae.motionX * 0.20000000000000001D;
+            motionZ += ae.motionZ * 0.20000000000000001D;
         }
         double d3 = 0.40000000000000002D;
-        if(an < -d3)
-            an = -d3;
-        if(an > d3)
-            an = d3;
-        if(ap < -d3)
-            ap = -d3;
-        if(ap > d3)
-            ap = d3;
-        if(av)
+        if(motionX < -d3)
+            motionX = -d3;
+        if(motionX > d3)
+            motionX = d3;
+        if(motionZ < -d3)
+            motionZ = -d3;
+        if(motionZ > d3)
+            motionZ = d3;
+        if(onGround)
         {
-            an *= 0.5D;
-            ao *= 0.5D;
-            ap *= 0.5D;
+            motionX *= 0.5D;
+            motionY *= 0.5D;
+            motionZ *= 0.5D;
         }
-        c(an, ao, ap);
-        double d5 = java.lang.Math.sqrt(an * an + ap * ap);
+        c(motionX, motionY, motionZ);
+        double d5 = java.lang.Math.sqrt(motionX * motionX + motionZ * motionZ);
         if(d5 > 0.14999999999999999D)
         {
-            double d6 = java.lang.Math.cos(((double)aq * 3.1415926535897931D) / 180D);
-            double d8 = java.lang.Math.sin(((double)aq * 3.1415926535897931D) / 180D);
+            double d6 = java.lang.Math.cos(((double) yaw * 3.1415926535897931D) / 180D);
+            double d8 = java.lang.Math.sin(((double) yaw * 3.1415926535897931D) / 180D);
             for(int i1 = 0; (double)i1 < 1.0D + d5 * 60D; i1++)
             {
-                double d11 = aQ.nextFloat() * 2.0F - 1.0F;
-                double d13 = (double)(aQ.nextInt(2) * 2 - 1) * 0.69999999999999996D;
-                if(aQ.nextBoolean())
+                double d11 = rnd.nextFloat() * 2.0F - 1.0F;
+                double d13 = (double)(rnd.nextInt(2) * 2 - 1) * 0.69999999999999996D;
+                if(rnd.nextBoolean())
                 {
-                    double d14 = (ak - d6 * d11 * 0.80000000000000004D) + d8 * d13;
-                    double d16 = am - d8 * d11 * 0.80000000000000004D - d6 * d13;
-                    ag.a("splash", d14, al - 0.125D, d16, an, ao, ap);
+                    double d14 = (posX - d6 * d11 * 0.80000000000000004D) + d8 * d13;
+                    double d16 = posZ - d8 * d11 * 0.80000000000000004D - d6 * d13;
+                    ag.a("splash", d14, posY - 0.125D, d16, motionX, motionY, motionZ);
                 } else
                 {
-                    double d15 = ak + d6 + d8 * d11 * 0.69999999999999996D;
-                    double d17 = (am + d8) - d6 * d11 * 0.69999999999999996D;
-                    ag.a("splash", d15, al - 0.125D, d17, an, ao, ap);
+                    double d15 = posX + d6 + d8 * d11 * 0.69999999999999996D;
+                    double d17 = (posZ + d8) - d6 * d11 * 0.69999999999999996D;
+                    ag.a("splash", d15, posY - 0.125D, d17, motionX, motionY, motionZ);
                 }
             }
 
@@ -154,33 +154,33 @@ public class Boat extends kh
 
         } else
         {
-            an *= 0.99000000953674316D;
-            ao *= 0.94999998807907104D;
-            ap *= 0.99000000953674316D;
+            motionX *= 0.99000000953674316D;
+            motionY *= 0.94999998807907104D;
+            motionZ *= 0.99000000953674316D;
         }
-        ar = 0.0F;
-        double d7 = aq;
-        double d9 = ah - ak;
-        double d10 = aj - am;
+        pitch = 0.0F;
+        double d7 = yaw;
+        double d9 = prevPosX - posX;
+        double d10 = prevPosZ - posZ;
         if(d9 * d9 + d10 * d10 > 0.001D)
             d7 = (float)((java.lang.Math.atan2(d10, d9) * 180D) / 3.1415926535897931D);
         double d12;
-        for(d12 = d7 - (double)aq; d12 >= 180D; d12 -= 360D);
+        for(d12 = d7 - (double) yaw; d12 >= 180D; d12 -= 360D);
         for(; d12 < -180D; d12 += 360D);
         if(d12 > 20D)
             d12 = 20D;
         if(d12 < -20D)
             d12 = -20D;
-        aq += ((float) (d12));
-        c(aq, ar);
-        java.util.List list = ag.b(((kh) (this)), au.b(0.20000000298023224D, 0.0D, 0.20000000298023224D));
+        yaw += ((float) (d12));
+        c(yaw, pitch);
+        java.util.List list = ag.b(((Entity) (this)), au.b(0.20000000298023224D, 0.0D, 0.20000000298023224D));
         if(list != null && list.size() > 0)
         {
             for(int j1 = 0; j1 < list.size(); j1++)
             {
-                kh kh1 = (kh)list.get(j1);
-                if(kh1 != ae && kh1.d_() && (kh1 instanceof Boat))
-                    kh1.f(((kh) (this)));
+                Entity entity1 = (Entity)list.get(j1);
+                if(entity1 != ae && entity1.d_() && (entity1 instanceof Boat))
+                    entity1.applyEntityCollision(((Entity) (this)));
             }
 
         }
@@ -190,16 +190,16 @@ public class Boat extends kh
 
     protected void i_()
     {
-        double d = java.lang.Math.cos(((double)aq * 3.1415926535897931D) / 180D) * 0.40000000000000002D;
-        double d1 = java.lang.Math.sin(((double)aq * 3.1415926535897931D) / 180D) * 0.40000000000000002D;
-        ae.a(ak + d, al + h() + ae.v(), am + d1);
+        double d = java.lang.Math.cos(((double) yaw * 3.1415926535897931D) / 180D) * 0.40000000000000002D;
+        double d1 = java.lang.Math.sin(((double) yaw * 3.1415926535897931D) / 180D) * 0.40000000000000002D;
+        ae.setPosition(posX + d, posY + h() + ae.v(), posZ + d1);
     }
 
-    protected void a(TagCompound tagCompound)
+    protected void writeToTag(TagCompound tagCompound)
     {
     }
 
-    protected void b(TagCompound tagCompound)
+    protected void readFromTag(TagCompound tagCompound)
     {
     }
 
@@ -208,9 +208,9 @@ public class Boat extends kh
         return 0.0F;
     }
 
-    public boolean a(Player player1)
+    public boolean a(EntityPlayer entityPlayer1)
     {
-        player1.g(((kh) (this)));
+        entityPlayer1.g(((Entity) (this)));
         return true;
     }
 }
diff --git "a/temp\\src\\java/Chest.java" "b/src\\main\\java/Chest.java"
index 09ce5aa..c3a6e47 100644
--- "a/temp\\src\\java/Chest.java"
+++ "b/src\\main\\java/Chest.java"
@@ -62,11 +62,11 @@ public class Chest extends ic
     public void a(TagCompound tagCompound1)
     {
         super.a(tagCompound1);
-        TagList tagList1 = tagCompound1.l("Items");
+        TagList tagList1 = tagCompound1.getList("Items");
         a = new ev[c()];
-        for(int i = 0; i < tagList1.c(); i++)
+        for(int i = 0; i < tagList1.size(); i++)
         {
-            TagCompound tagCompound2 = (TagCompound) tagList1.a(i);
+            TagCompound tagCompound2 = (TagCompound) tagList1.get(i);
             int j = tagCompound2.getByte("Slot") & 0xff;
             if(j >= 0 && j < a.length)
                 a[j] = new ev(tagCompound2);
@@ -84,7 +84,7 @@ public class Chest extends ic
                 TagCompound tagCompound2 = new TagCompound();
                 tagCompound2.set("Slot", (byte)slot);
                 a[slot].writeCompound(tagCompound2);
-                tagList1.a(((Tag) (tagCompound2)));
+                tagList1.add(((Tag) (tagCompound2)));
             }
 
         tagCompound1.set("Items", ((Tag) (tagList1)));
diff --git "a/temp\\src\\java/Chunk.java" "b/src\\main\\java/Chunk.java"
index c291e43..a2637eb 100644
--- "a/temp\\src\\java/Chunk.java"
+++ "b/src\\main\\java/Chunk.java"
@@ -306,39 +306,39 @@ public class Chunk
         return i2;
     }
 
-    public void a(kh kh1)
+    public void a(Entity entity1)
     {
         if(q)
             return;
         r = true;
-        int i1 = eo.b(kh1.ak / 16D);
-        int j1 = eo.b(kh1.am / 16D);
+        int i1 = MathLib.castIgnoringSign(entity1.posX / 16D);
+        int j1 = MathLib.castIgnoringSign(entity1.posZ / 16D);
         if(i1 != j || j1 != k)
-            java.lang.System.out.println((new StringBuilder()).append("Wrong location! ").append(((Object) (kh1))).toString());
-        int k1 = eo.b(kh1.al / 16D);
+            java.lang.System.out.println((new StringBuilder()).append("Wrong location! ").append(((Object) (entity1))).toString());
+        int k1 = MathLib.castIgnoringSign(entity1.posY / 16D);
         if(k1 < 0)
             k1 = 0;
         if(k1 >= m.length)
             k1 = m.length - 1;
-        kh1.aZ = true;
-        kh1.ba = j;
-        kh1.bb = k1;
-        kh1.bc = k;
-        m[k1].add(((Object) (kh1)));
+        entity1.aZ = true;
+        entity1.ba = j;
+        entity1.bb = k1;
+        entity1.bc = k;
+        m[k1].add(((Object) (entity1)));
     }
 
-    public void b(kh kh1)
+    public void b(Entity entity1)
     {
-        a(kh1, kh1.bb);
+        a(entity1, entity1.bb);
     }
 
-    public void a(kh kh1, int i1)
+    public void a(Entity entity1, int i1)
     {
         if(i1 < 0)
             i1 = 0;
         if(i1 >= m.length)
             i1 = m.length - 1;
-        m[i1].remove(((Object) (kh1)));
+        m[i1].remove(((Object) (entity1)));
     }
 
     public boolean c(int i1, int j1, int k1)
@@ -421,10 +421,10 @@ public class Chunk
         o = true;
     }
 
-    public void a(kh kh1, cf cf1, java.util.List list)
+    public void a(Entity entity1, cf cf1, java.util.List list)
     {
-        int i1 = eo.b((cf1.b - 2D) / 16D);
-        int j1 = eo.b((cf1.e + 2D) / 16D);
+        int i1 = MathLib.castIgnoringSign((cf1.b - 2D) / 16D);
+        int j1 = MathLib.castIgnoringSign((cf1.e + 2D) / 16D);
         if(i1 < 0)
             i1 = 0;
         if(j1 >= m.length)
@@ -434,9 +434,9 @@ public class Chunk
             java.util.List list1 = m[k1];
             for(int l1 = 0; l1 < list1.size(); l1++)
             {
-                kh kh2 = (kh)list1.get(l1);
-                if(kh2 != kh1 && kh2.au.a(cf1))
-                    list.add(((Object) (kh2)));
+                Entity entity2 = (Entity)list1.get(l1);
+                if(entity2 != entity1 && entity2.au.a(cf1))
+                    list.add(((Object) (entity2)));
             }
 
         }
@@ -445,8 +445,8 @@ public class Chunk
 
     public void a(java.lang.Class class1, cf cf1, java.util.List list)
     {
-        int i1 = eo.b((cf1.b - 2D) / 16D);
-        int j1 = eo.b((cf1.e + 2D) / 16D);
+        int i1 = MathLib.castIgnoringSign((cf1.b - 2D) / 16D);
+        int j1 = MathLib.castIgnoringSign((cf1.e + 2D) / 16D);
         if(i1 < 0)
             i1 = 0;
         if(j1 >= m.length)
@@ -456,9 +456,9 @@ public class Chunk
             java.util.List list1 = m[k1];
             for(int l1 = 0; l1 < list1.size(); l1++)
             {
-                kh kh1 = (kh)list1.get(l1);
-                if(class1.isAssignableFrom(((Object) (kh1)).getClass()) && kh1.au.a(cf1))
-                    list.add(((Object) (kh1)));
+                Entity entity1 = (Entity)list1.get(l1);
+                if(class1.isAssignableFrom(((Object) (entity1)).getClass()) && entity1.au.a(cf1))
+                    list.add(((Object) (entity1)));
             }
 
         }
diff --git "a/temp\\src\\java/Entity.java" "b/src\\main\\java/Entity.java"
index 3705d2a..c7f52d1 100644
--- "a/temp\\src\\java/Entity.java"
+++ "b/src\\main\\java/Entity.java"
@@ -2,147 +2,878 @@
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-public class Entity extends Mob
+import java.util.Random;
+
+public abstract class Entity
 {
 
-    private bl a;
-    protected kh f;
-    protected boolean g;
+    private static int a = 0;
+    public int ab;
+    public double ac;
+    public boolean ad;
+    public Entity ae;
+    public Entity af;
+    protected World ag;
+    public double prevPosX;
+    public double prevPosY;
+    public double prevPosZ;
+    public double posX;
+    public double posY;
+    public double posZ;
+    public double motionX;
+    public double motionY;
+    public double motionZ;
+    public float yaw;
+    public float pitch;
+    public float prevYaw;
+    public float prevPitch;
+    public final cf au = cf.a(0.0D, 0.0D, 0.0D, 0.0D, 0.0D, 0.0D);
+    public boolean onGround;
+    public boolean aw;
+    public boolean ax;
+    public boolean ay;
+    public boolean az;
+    public boolean aA;
+    public float aB;
+    public float aC;
+    public float aD;
+    public float aE;
+    public float aF;
+    protected boolean aG;
+    protected float fallDistance;
+    private int b;
+    public double aI;
+    public double aJ;
+    public double aK;
+    public float aL;
+    public float aM;
+    public boolean aN;
+    public float aO;
+    public boolean aP;
+    protected java.util.Random rnd;
+    public int aR;
+    public int aS;
+    public int fire;
+    protected int aU;
+    protected boolean aV;
+    public int aW;
+    public int air;
+    private boolean c;
+    public String aY;
+    private double d;
+    private double e;
+    public boolean aZ;
+    public int ba;
+    public int bb;
+    public int bc;
+    public int bd;
+    public int be;
+    public int bf;
 
     public Entity(World world1)
     {
-        super(world1);
-        g = false;
+        ab = a++;
+        ac = 1.0D;
+        ad = false;
+        onGround = false;
+        ay = false;
+        az = true;
+        aA = false;
+        aB = 0.0F;
+        aC = 0.6F;
+        aD = 1.8F;
+        aE = 0.0F;
+        aF = 0.0F;
+        aG = true;
+        fallDistance = 0.0F;
+        b = 1;
+        aL = 0.0F;
+        aM = 0.0F;
+        aN = false;
+        aO = 0.0F;
+        aP = false;
+        rnd = new Random();
+        aR = 0;
+        aS = 1;
+        fire = 0;
+        aU = 300;
+        aV = false;
+        aW = 0;
+        air = 300;
+        c = true;
+        aZ = false;
+        ag = world1;
+        setPosition(0.0D, 0.0D, 0.0D);
+    }
+
+    public boolean equals(Object obj)
+    {
+        if(obj instanceof Entity)
+            return ((Entity)obj).ab == ab;
+        else
+            return false;
+    }
+
+    public int hashCode()
+    {
+        return ab;
     }
 
-    protected void b_()
+    protected void q()
     {
-        g = false;
-        float f1 = 16F;
-        if(f == null)
+        if(ag == null)
+            return;
+        do
         {
-            f = i();
-            if(f != null)
-                a = ag.a(((kh) (this)), f, f1);
-        } else
-        if(!f.B())
+            if(posY <= 0.0D)
+                break;
+            setPosition(posX, posY, posZ);
+            if(ag.a(this, au).size() == 0)
+                break;
+            posY++;
+        } while(true);
+        motionX = motionY = motionZ = 0.0D;
+        pitch = 0.0F;
+    }
+
+    public void F()
+    {
+        aA = true;
+    }
+
+    protected void a(float f1, float f2)
+    {
+        aC = f1;
+        aD = f2;
+    }
+
+    protected void c(float f1, float f2)
+    {
+        yaw = f1;
+        pitch = f2;
+    }
+
+    public void setPosition(double posX, double posY, double posZ)
+    {
+        this.posX = posX;
+        this.posY = posY;
+        this.posZ = posZ;
+        float f1 = aC / 2.0F;
+        float f2 = aD;
+        au.c(posX - (double)f1, (posY - (double)aB) + (double)aL, posZ - (double)f1, posX + (double)f1, (posY - (double)aB) + (double)aL + (double)f2, posZ + (double)f1);
+    }
+
+    public void d(float f1, float f2)
+    {
+        float pitch = this.pitch;
+        float yaw = this.yaw;
+        this.yaw += ((float) ((double)f1 * 0.14999999999999999D));
+        this.pitch -= ((float) ((double)f2 * 0.14999999999999999D));
+        if(this.pitch < -90F)
+            this.pitch = -90F;
+        if(this.pitch > 90F)
+            this.pitch = 90F;
+        prevPitch += this.pitch - pitch;
+        prevYaw += this.yaw - yaw;
+    }
+
+    public void e_()
+    {
+        y();
+    }
+
+    public void y()
+    {
+        if(af != null && af.aA)
+            af = null;
+        aR++;
+        aE = aF;
+        prevPosX = posX;
+        prevPosY = posY;
+        prevPosZ = posZ;
+        prevPitch = pitch;
+        prevYaw = yaw;
+        if(g_())
         {
-            f = null;
+            if(!aV && !c)
+            {
+                float f1 = MathLib.sqrt(motionX * motionX * 0.20000000298023224D + motionY * motionY + motionZ * motionZ * 0.20000000298023224D) * 0.2F;
+                if(f1 > 1.0F)
+                    f1 = 1.0F;
+                ag.a(this, "random.splash", f1, 1.0F + (rnd.nextFloat() - rnd.nextFloat()) * 0.4F);
+                float f2 = MathLib.castIgnoringSign(au.b);
+                for(int i = 0; (float)i < 1.0F + aC * 20F; i++)
+                {
+                    float f3 = (rnd.nextFloat() * 2.0F - 1.0F) * aC;
+                    float f5 = (rnd.nextFloat() * 2.0F - 1.0F) * aC;
+                    ag.a("bubble", posX + (double)f3, f2 + 1.0F, posZ + (double)f5, motionX, motionY - (double)(rnd.nextFloat() * 0.2F), motionZ);
+                }
+
+                for(int j = 0; (float)j < 1.0F + aC * 20F; j++)
+                {
+                    float f4 = (rnd.nextFloat() * 2.0F - 1.0F) * aC;
+                    float f6 = (rnd.nextFloat() * 2.0F - 1.0F) * aC;
+                    ag.a("splash", posX + (double)f4, f2 + 1.0F, posZ + (double)f6, motionX, motionY, motionZ);
+                }
+
+            }
+            fallDistance = 0.0F;
+            aV = true;
+            fire = 0;
         } else
         {
-            float f2 = f.d(((kh) (this)));
-            if(c(f))
-                a(f, f2);
+            aV = false;
         }
-        if(!g && f != null && (a == null || aQ.nextInt(20) == 0))
-            a = ag.a(((kh) (this)), f, f1);
-        else
-        if(a == null && aQ.nextInt(80) == 0 || aQ.nextInt(80) == 0)
-        {
-            boolean flag = false;
-            int k = -1;
-            int l = -1;
-            int i1 = -1;
-            float f3 = -99999F;
-            for(int j1 = 0; j1 < 10; j1++)
+        if(fire > 0)
+        {
+            if(fire % 20 == 0)
+                a(((Entity) (null)), 1);
+            fire--;
+        }
+        if(G())
+        {
+            a(((Entity) (null)), 10);
+            fire = 600;
+        }
+        if(posY < -64D)
+            E();
+        c = false;
+    }
+
+    protected void E()
+    {
+        F();
+    }
+
+    public boolean b(double d1, double d2, double d3)
+    {
+        cf cf1 = au.c(d1, d2, d3);
+        java.util.List list = ag.a(this, cf1);
+        if(list.size() > 0)
+            return false;
+        return !ag.b(cf1);
+    }
+
+    public void c(double d1, double d2, double d3)
+    {
+        if(aN)
+        {
+            au.d(d1, d2, d3);
+            posX = (au.a + au.d) / 2D;
+            posY = (au.b + (double)aB) - (double)aL;
+            posZ = (au.c + au.f) / 2D;
+            return;
+        }
+        double d4 = posX;
+        double d5 = posZ;
+        double d6 = d1;
+        double d7 = d2;
+        double d8 = d3;
+        cf cf1 = au.c();
+        boolean flag = onGround && o();
+        if(flag)
+        {
+            double d9 = 0.050000000000000003D;
+            for(; d1 != 0.0D && ag.a(this, au.c(d1, -1D, 0.0D)).size() == 0; d6 = d1)
+            {
+                if(d1 < d9 && d1 >= -d9)
+                {
+                    d1 = 0.0D;
+                    continue;
+                }
+                if(d1 > 0.0D)
+                    d1 -= d9;
+                else
+                    d1 += d9;
+            }
+
+            for(; d3 != 0.0D && ag.a(this, au.c(0.0D, -1D, d3)).size() == 0; d8 = d3)
             {
-                int k1 = eo.b((ak + (double)aQ.nextInt(13)) - 6D);
-                int l1 = eo.b((al + (double)aQ.nextInt(7)) - 3D);
-                int i2 = eo.b((am + (double)aQ.nextInt(13)) - 6D);
-                float f4 = a(k1, l1, i2);
-                if(f4 > f3)
+                if(d3 < d9 && d3 >= -d9)
                 {
-                    f3 = f4;
-                    k = k1;
-                    l = l1;
-                    i1 = i2;
-                    flag = true;
+                    d3 = 0.0D;
+                    continue;
                 }
+                if(d3 > 0.0D)
+                    d3 -= d9;
+                else
+                    d3 += d9;
             }
 
-            if(flag)
-                a = ag.a(((kh) (this)), k, l, i1, 10F);
         }
-        int j = eo.b(au.b);
-        boolean flag1 = g_();
-        boolean flag2 = G();
-        ar = 0.0F;
-        if(a == null || aQ.nextInt(100) == 0)
+        java.util.List list = ag.a(this, au.a(d1, d2, d3));
+        for(int i = 0; i < list.size(); i++)
+            d2 = ((cf)list.get(i)).b(au, d2);
+
+        au.d(0.0D, d2, 0.0D);
+        if(!az && d7 != d2)
+            d1 = d2 = d3 = 0.0D;
+        boolean flag1 = onGround || d7 != d2 && d7 < 0.0D;
+        for(int j = 0; j < list.size(); j++)
+            d1 = ((cf)list.get(j)).a(au, d1);
+
+        au.d(d1, 0.0D, 0.0D);
+        if(!az && d6 != d1)
+            d1 = d2 = d3 = 0.0D;
+        for(int k = 0; k < list.size(); k++)
+            d3 = ((cf)list.get(k)).c(au, d3);
+
+        au.d(0.0D, 0.0D, d3);
+        if(!az && d8 != d3)
+            d1 = d2 = d3 = 0.0D;
+        if(aM > 0.0F && flag1 && aL < 0.05F && (d6 != d1 || d8 != d3))
         {
-            super.b_();
-            a = null;
-            return;
+            double d10 = d1;
+            double d12 = d2;
+            double d14 = d3;
+            d1 = d6;
+            d2 = aM;
+            d3 = d8;
+            cf cf2 = au.c();
+            au.b(cf1);
+            java.util.List list1 = ag.a(this, au.a(d1, d2, d3));
+            for(int j2 = 0; j2 < list1.size(); j2++)
+                d2 = ((cf)list1.get(j2)).b(au, d2);
+
+            au.d(0.0D, d2, 0.0D);
+            if(!az && d7 != d2)
+                d1 = d2 = d3 = 0.0D;
+            for(int k2 = 0; k2 < list1.size(); k2++)
+                d1 = ((cf)list1.get(k2)).a(au, d1);
+
+            au.d(d1, 0.0D, 0.0D);
+            if(!az && d6 != d1)
+                d1 = d2 = d3 = 0.0D;
+            for(int l2 = 0; l2 < list1.size(); l2++)
+                d3 = ((cf)list1.get(l2)).c(au, d3);
+
+            au.d(0.0D, 0.0D, d3);
+            if(!az && d8 != d3)
+                d1 = d2 = d3 = 0.0D;
+            if(d10 * d10 + d14 * d14 >= d1 * d1 + d3 * d3)
+            {
+                d1 = d10;
+                d2 = d12;
+                d3 = d14;
+                au.b(cf2);
+            } else
+            {
+                aL += 0.5D;
+            }
         }
-        aj aj1 = a.a(((kh) (this)));
-        for(double d = aC * 2.0F; aj1 != null && aj1.d(ak, aj1.b, am) < d * d;)
+        posX = (au.a + au.d) / 2D;
+        posY = (au.b + (double)aB) - (double)aL;
+        posZ = (au.c + au.f) / 2D;
+        aw = d6 != d1 || d8 != d3;
+        ax = d7 != d2;
+        onGround = d7 != d2 && d7 < 0.0D;
+        ay = aw || ax;
+        if(onGround)
         {
-            a.a();
-            if(a.b())
+            if(fallDistance > 0.0F)
             {
-                aj1 = null;
-                a = null;
-            } else
+                c(fallDistance);
+                fallDistance = 0.0F;
+            }
+        } else
+        if(d2 < 0.0D)
+            fallDistance -= ((float) (d2));
+        if(d6 != d1)
+            motionX = 0.0D;
+        if(d7 != d2)
+            motionY = 0.0D;
+        if(d8 != d3)
+            motionZ = 0.0D;
+        double d11 = posX - d4;
+        double d13 = posZ - d5;
+        aF += ((float) ((double) MathLib.sqrt(d11 * d11 + d13 * d13) * 0.59999999999999998D));
+        if(aG && !flag)
+        {
+            int l = MathLib.castIgnoringSign(posX);
+            int j1 = MathLib.castIgnoringSign(posY - 0.20000000298023224D - (double)aB);
+            int l1 = MathLib.castIgnoringSign(posZ);
+            int i3 = ag.a(l, j1, l1);
+            if(aF > (float)b && i3 > 0)
             {
-                aj1 = a.a(((kh) (this)));
+                b++;
+                bb bb1 = ly.n[i3].bl;
+                if(ag.a(l, j1 + 1, l1) == ly.aT.bc)
+                {
+                    bb1 = ly.aT.bl;
+                    ag.a(this, bb1.d(), bb1.b() * 0.15F, bb1.c());
+                } else
+                if(!ly.n[i3].bn.d())
+                    ag.a(this, bb1.d(), bb1.b() * 0.15F, bb1.c());
+                ly.n[i3].a(ag, l, j1, l1, this);
             }
         }
+        int i1 = MathLib.castIgnoringSign(au.a);
+        int k1 = MathLib.castIgnoringSign(au.b);
+        int i2 = MathLib.castIgnoringSign(au.c);
+        int j3 = MathLib.castIgnoringSign(au.d);
+        int k3 = MathLib.castIgnoringSign(au.e);
+        int l3 = MathLib.castIgnoringSign(au.f);
+        for(int i4 = i1; i4 <= j3; i4++)
+        {
+            for(int j4 = k1; j4 <= k3; j4++)
+            {
+                for(int k4 = i2; k4 <= l3; k4++)
+                {
+                    int l4 = ag.a(i4, j4, k4);
+                    if(l4 > 0)
+                        ly.n[l4].b(ag, i4, j4, k4, this);
+                }
+
+            }
 
-        Y = false;
-        if(aj1 != null)
-        {
-            double d1 = aj1.a - ak;
-            double d2 = aj1.c - am;
-            double d3 = aj1.b - (double)j;
-            float f5 = (float)((java.lang.Math.atan2(d2, d1) * 180D) / 3.1415927410125732D) - 90F;
-            float f6 = f5 - aq;
-            W = aa;
-            for(; f6 < -180F; f6 += 360F);
-            for(; f6 >= 180F; f6 -= 360F);
-            if(f6 > 30F)
-                f6 = 30F;
-            if(f6 < -30F)
-                f6 = -30F;
-            aq += f6;
-            if(g && f != null)
+        }
+
+        aL *= 0.4F;
+        boolean flag2 = g_();
+        if(ag.c(au))
+        {
+            a(1);
+            if(!flag2)
             {
-                double d4 = f.ak - ak;
-                double d5 = f.am - am;
-                float f8 = aq;
-                aq = (float)((java.lang.Math.atan2(d5, d4) * 180D) / 3.1415927410125732D) - 90F;
-                float f7 = (((f8 - aq) + 90F) * 3.141593F) / 180F;
-                V = -eo.a(f7) * W * 1.0F;
-                W = eo.b(f7) * W * 1.0F;
+                fire++;
+                if(fire == 0)
+                    fire = 300;
             }
-            if(d3 > 0.0D)
-                Y = true;
+        } else
+        if(fire <= 0)
+            fire = -aS;
+        if(flag2 && fire > 0)
+        {
+            ag.a(this, "random.fizz", 0.7F, 1.6F + (rnd.nextFloat() - rnd.nextFloat()) * 0.4F);
+            fire = -aS;
         }
-        if(f != null)
-            b(f, 30F);
-        if(aw)
-            Y = true;
-        if(aQ.nextFloat() < 0.8F && (flag1 || flag2))
-            Y = true;
     }
 
-    protected void a(kh kh1, float f1)
+    public boolean o()
     {
+        return false;
     }
 
-    protected float a(int j, int k, int l)
+    public cf f_()
+    {
+        return null;
+    }
+
+    protected void a(int i)
+    {
+        a(((Entity) (null)), i);
+    }
+
+    protected void c(float f1)
+    {
+    }
+
+    public boolean g_()
+    {
+        return ag.a(au.b(0.0D, -0.40000000596046448D, 0.0D), gb.f, this);
+    }
+
+    public boolean a(gb gb1)
+    {
+        double d1 = posY + (double)s();
+        int i = MathLib.castIgnoringSign(posX);
+        int j = MathLib.castIgnoringSign(MathLib.castIgnoringSign(d1));
+        int k = MathLib.castIgnoringSign(posZ);
+        int l = ag.a(i, j, k);
+        if(l != 0 && ly.n[l].bn == gb1)
+        {
+            float f1 = jp.b(ag.e(i, j, k)) - 0.1111111F;
+            float f2 = (float)(j + 1) - f1;
+            return d1 < (double)f2;
+        } else
+        {
+            return false;
+        }
+    }
+
+    protected float s()
     {
         return 0.0F;
     }
 
-    protected kh i()
+    public boolean G()
+    {
+        return ag.a(au.b(0.0D, -0.40000000596046448D, 0.0D), gb.g);
+    }
+
+    public void a(float f1, float f2, float f3)
+    {
+        float f4 = MathLib.sqrt(f1 * f1 + f2 * f2);
+        if(f4 < 0.01F)
+            return;
+        if(f4 < 1.0F)
+            f4 = 1.0F;
+        f4 = f3 / f4;
+        f1 *= f4;
+        f2 *= f4;
+        float f5 = MathLib.sin((yaw * 3.141593F) / 180F);
+        float f6 = MathLib.cos((yaw * 3.141593F) / 180F);
+        motionX += f1 * f6 - f2 * f5;
+        motionZ += f2 * f6 + f1 * f5;
+    }
+
+    public float a(float f1)
+    {
+        int i = MathLib.castIgnoringSign(posX);
+        double d1 = (au.e - au.b) * 0.66000000000000003D;
+        int j = MathLib.castIgnoringSign((posY - (double)aB) + d1);
+        int k = MathLib.castIgnoringSign(posZ);
+        return ag.c(i, j, k);
+    }
+
+    public void a(World world1)
+    {
+        ag = world1;
+    }
+
+    public void b(double posX, double posY, double posZ, float yaw,
+            float pitch)
+    {
+        prevPosX = this.posX = posX;
+        prevPosY = this.posY = posY;
+        prevPosZ = this.posZ = posZ;
+        this.yaw = yaw;
+        this.pitch = pitch;
+        aL = 0.0F;
+        double d4 = prevYaw - yaw;
+        if(d4 < -180D)
+            prevYaw += 360F;
+        if(d4 >= 180D)
+            prevYaw -= 360F;
+        setPosition(this.posX, this.posY, this.posZ);
+    }
+
+    public void c(double posX, double posY, double posZ, float yaw,
+            float pitch)
+    {
+        prevPosX = this.posX = posX;
+        prevPosY = this.posY = posY + (double)aB;
+        prevPosZ = this.posZ = posZ;
+        this.yaw = yaw;
+        this.pitch = pitch;
+        setPosition(this.posX, this.posY, this.posZ);
+    }
+
+    public float squareDistance(Entity entity1)
+    {
+        float f1 = (float)(posX - entity1.posX);
+        float f2 = (float)(posY - entity1.posY);
+        float f3 = (float)(posZ - entity1.posZ);
+        return MathLib.sqrt(f1 * f1 + f2 * f2 + f3 * f3);
+    }
+
+    public double distance(double posX, double posY, double posZ)
+    {
+        double d4 = this.posX - posX;
+        double d5 = this.posY - posY;
+        double d6 = this.posZ - posZ;
+        return d4 * d4 + d5 * d5 + d6 * d6;
+    }
+
+    public double squareDistance(double posX, double posY, double posZ)
+    {
+        double d4 = this.posX - posX;
+        double d5 = this.posY - posY;
+        double d6 = this.posZ - posZ;
+        return (double) MathLib.sqrt(d4 * d4 + d5 * d5 + d6 * d6);
+    }
+
+    public double distance(Entity entity1)
+    {
+        double d1 = posX - entity1.posX;
+        double d2 = posY - entity1.posY;
+        double d3 = posZ - entity1.posZ;
+        return d1 * d1 + d2 * d2 + d3 * d3;
+    }
+
+    public void onCollideWithPlayer(EntityPlayer entityPlayer)
+    {
+    }
+
+    public void applyEntityCollision(Entity entity1)
+    {
+        if(entity1.ae == this || entity1.af == this)
+            return;
+        double d1 = entity1.posX - posX;
+        double d2 = entity1.posZ - posZ;
+        double d3 = MathLib.maxAbs(d1, d2);
+        if(d3 >= 0.0099999997764825821D)
+        {
+            d3 = MathLib.sqrt(d3);
+            d1 /= d3;
+            d2 /= d3;
+            double d4 = 1.0D / d3;
+            if(d4 > 1.0D)
+                d4 = 1.0D;
+            d1 *= d4;
+            d2 *= d4;
+            d1 *= 0.05000000074505806D;
+            d2 *= 0.05000000074505806D;
+            d1 *= 1.0F - aO;
+            d2 *= 1.0F - aO;
+            addVelocity(-d1, 0.0D, -d2);
+            entity1.addVelocity(d1, 0.0D, d2);
+        }
+    }
+
+    public void addVelocity(double x, double y, double z)
+    {
+        motionX += x;
+        motionY += y;
+        motionZ += z;
+    }
+
+    public boolean a(Entity entity1, int i)
+    {
+        return false;
+    }
+
+    public boolean c_()
+    {
+        return false;
+    }
+
+    public boolean d_()
+    {
+        return false;
+    }
+
+    public void b(Entity entity1, int i)
+    {
+    }
+
+    public boolean a(Vec3 vec)
+    {
+        double d1 = posX - vec.x;
+        double d2 = posY - vec.y;
+        double d3 = posZ - vec.z;
+        double d4 = d1 * d1 + d2 * d2 + d3 * d3;
+        return a(d4);
+    }
+
+    public boolean a(double d1)
+    {
+        double d2 = au.b();
+        d2 *= 64D * ac;
+        return d1 < d2 * d2;
+    }
+
+    public String getTexture()
+    {
+        return null;
+    }
+
+    public boolean c(TagCompound tagCompound1)
+    {
+        String s1 = H();
+        if(aA || s1 == null)
+        {
+            return false;
+        } else
+        {
+            tagCompound1.set("id", s1);
+            d(tagCompound1);
+            return true;
+        }
+    }
+
+    public void d(TagCompound tagCompound1)
+    {
+        tagCompound1.set("Pos", ((Tag) (a(new double[] {
+                posX, posY, posZ
+        }))));
+        tagCompound1.set("Motion", ((Tag) (a(new double[] {
+                motionX, motionY, motionZ
+        }))));
+        tagCompound1.set("Rotation", ((Tag) (a(new float[] {
+                yaw, pitch
+        }))));
+        tagCompound1.set("FallDistance", fallDistance);
+        tagCompound1.set("Fire", (short) fire);
+        tagCompound1.set("Air", (short) air);
+        tagCompound1.set("OnGround", onGround);
+        writeToTag(tagCompound1);
+    }
+
+    public void e(TagCompound tagCompound1)
+    {
+        TagList tagList1 = tagCompound1.getList("Pos");
+        TagList tagList2 = tagCompound1.getList("Motion");
+        TagList tagList3 = tagCompound1.getList("Rotation");
+        setPosition(0.0D, 0.0D, 0.0D);
+        motionX = ((TagDouble) tagList2.get(0)).a;
+        motionY = ((TagDouble) tagList2.get(1)).a;
+        motionZ = ((TagDouble) tagList2.get(2)).a;
+        prevPosX = aI = posX = ((TagDouble) tagList1.get(0)).a;
+        prevPosY = aJ = posY = ((TagDouble) tagList1.get(1)).a;
+        prevPosZ = aK = posZ = ((TagDouble) tagList1.get(2)).a;
+        prevYaw = yaw = ((TagFloat) tagList3.get(0)).a;
+        prevPitch = pitch = ((TagFloat) tagList3.get(1)).a;
+        fallDistance = tagCompound1.getFloat("FallDistance");
+        fire = ((int) (tagCompound1.getShort("Fire")));
+        air = ((int) (tagCompound1.getShort("Air")));
+        onGround = tagCompound1.isTrueByte("OnGround");
+        setPosition(posX, posY, posZ);
+        readFromTag(tagCompound1);
+    }
+
+    protected final String H()
+    {
+        return EntityList.b(this);
+    }
+
+    protected abstract void readFromTag(TagCompound tagCompound1);
+
+    protected abstract void writeToTag(TagCompound tagCompound1);
+
+    protected TagList a(double ad1[])
+    {
+        TagList tagList1 = new TagList();
+        double ad2[] = ad1;
+        int i = ad2.length;
+        for(int j = 0; j < i; j++)
+        {
+            double d1 = ad2[j];
+            tagList1.add(((Tag) (new TagDouble(d1))));
+        }
+
+        return tagList1;
+    }
+
+    protected TagList a(float af1[])
+    {
+        TagList tagList1 = new TagList();
+        float af2[] = af1;
+        int i = af2.length;
+        for(int j = 0; j < i; j++)
+        {
+            float f1 = af2[j];
+            tagList1.add(((Tag) (new TagFloat(f1))));
+        }
+
+        return tagList1;
+    }
+
+    public float h_()
+    {
+        return aD / 2.0F;
+    }
+
+    public Item b(int i, int j)
+    {
+        return a(i, j, 0.0F);
+    }
+
+    public Item a(int i, int j, float f1)
+    {
+        Item item1 = new Item(ag, posX, posY + (double)f1, posZ, new ev(i, j));
+        item1.c = 10;
+        ag.a(((Entity) (item1)));
+        return item1;
+    }
+
+    public boolean B()
+    {
+        return !aA;
+    }
+
+    public boolean I()
+    {
+        int i = MathLib.castIgnoringSign(posX);
+        int j = MathLib.castIgnoringSign(posY + (double)s());
+        int k = MathLib.castIgnoringSign(posZ);
+        return ag.g(i, j, k);
+    }
+
+    public boolean a(EntityPlayer entityPlayer)
+    {
+        return false;
+    }
+
+    public cf b_(Entity entity1)
     {
         return null;
     }
 
-    public boolean a()
+    public void p()
+    {
+        if(af.aA)
+        {
+            af = null;
+            return;
+        }
+        motionX = 0.0D;
+        motionY = 0.0D;
+        motionZ = 0.0D;
+        e_();
+        af.i_();
+        e += af.yaw - af.prevYaw;
+        d += af.pitch - af.prevPitch;
+        for(; e >= 180D; e -= 360D);
+        for(; e < -180D; e += 360D);
+        for(; d >= 180D; d -= 360D);
+        for(; d < -180D; d += 360D);
+        double d1 = e * 0.5D;
+        double d2 = d * 0.5D;
+        float f1 = 10F;
+        if(d1 > (double)f1)
+            d1 = f1;
+        if(d1 < (double)(-f1))
+            d1 = -f1;
+        if(d2 > (double)f1)
+            d2 = f1;
+        if(d2 < (double)(-f1))
+            d2 = -f1;
+        e -= d1;
+        d -= d2;
+        yaw += ((float) (d1));
+        pitch += ((float) (d2));
+    }
+
+    protected void i_()
+    {
+        ae.setPosition(posX, posY + h() + ae.v(), posZ);
+    }
+
+    public double v()
+    {
+        return (double)aB;
+    }
+
+    public double h()
     {
-        int j = eo.b(ak);
-        int k = eo.b(au.b);
-        int l = eo.b(am);
-        return super.a() && a(j, k, l) >= 0.0F;
+        return (double)aD * 0.75D;
     }
+
+    public void g(Entity entity1)
+    {
+        d = 0.0D;
+        e = 0.0D;
+        if(af == entity1)
+        {
+            af.ae = null;
+            af = null;
+            c(entity1.posX, entity1.au.b + (double) entity1.aD, entity1.posZ, yaw, pitch);
+            return;
+        }
+        if(af != null)
+            af.ae = null;
+        if(entity1.ae != null)
+            entity1.ae.af = null;
+        af = entity1;
+        entity1.ae = this;
+    }
+
+    public void a(double d1, double d2, double d3, float f1, 
+            float f2, int i)
+    {
+        setPosition(d1, d2, d3);
+        c(f1, f2);
+    }
+
 }
diff --git "a/src\\main\\java/EntityAnimal.java" "b/src\\main\\java/EntityAnimal.java"
new file mode 100644
index 0000000..58de1f8
--- /dev/null
+++ "b/src\\main\\java/EntityAnimal.java"
@@ -0,0 +1,148 @@
+// Jad home page: http://www.kpdus.com/jad.html
+// Decompiler options: fullnames deadcode fieldsfirst safe 
+// Source File Name:   SourceFile
+
+public class EntityAnimal extends EntityMob
+{
+
+    private bl a;
+    protected Entity f;
+    protected boolean g;
+
+    public EntityAnimal(World world1)
+    {
+        super(world1);
+        g = false;
+    }
+
+    protected void b_()
+    {
+        g = false;
+        float f1 = 16F;
+        if(f == null)
+        {
+            f = i();
+            if(f != null)
+                a = ag.a(((Entity) (this)), f, f1);
+        } else
+        if(!f.B())
+        {
+            f = null;
+        } else
+        {
+            float f2 = f.squareDistance(((Entity) (this)));
+            if(c(f))
+                a(f, f2);
+        }
+        if(!g && f != null && (a == null || rnd.nextInt(20) == 0))
+            a = ag.a(((Entity) (this)), f, f1);
+        else
+        if(a == null && rnd.nextInt(80) == 0 || rnd.nextInt(80) == 0)
+        {
+            boolean flag = false;
+            int k = -1;
+            int l = -1;
+            int i1 = -1;
+            float f3 = -99999F;
+            for(int j1 = 0; j1 < 10; j1++)
+            {
+                int k1 = MathLib.castIgnoringSign((posX + (double) rnd.nextInt(13)) - 6D);
+                int l1 = MathLib.castIgnoringSign((posY + (double) rnd.nextInt(7)) - 3D);
+                int i2 = MathLib.castIgnoringSign((posZ + (double) rnd.nextInt(13)) - 6D);
+                float f4 = a(k1, l1, i2);
+                if(f4 > f3)
+                {
+                    f3 = f4;
+                    k = k1;
+                    l = l1;
+                    i1 = i2;
+                    flag = true;
+                }
+            }
+
+            if(flag)
+                a = ag.a(((Entity) (this)), k, l, i1, 10F);
+        }
+        int j = MathLib.castIgnoringSign(au.b);
+        boolean flag1 = g_();
+        boolean flag2 = G();
+        pitch = 0.0F;
+        if(a == null || rnd.nextInt(100) == 0)
+        {
+            super.b_();
+            a = null;
+            return;
+        }
+        Vec3 vec31 = a.a(((Entity) (this)));
+        for(double d = aC * 2.0F; vec31 != null && vec31.distance(posX, vec31.y, posZ) < d * d;)
+        {
+            a.a();
+            if(a.b())
+            {
+                vec31 = null;
+                a = null;
+            } else
+            {
+                vec31 = a.a(((Entity) (this)));
+            }
+        }
+
+        Y = false;
+        if(vec31 != null)
+        {
+            double d1 = vec31.x - posX;
+            double d2 = vec31.z - posZ;
+            double d3 = vec31.y - (double)j;
+            float f5 = (float)((java.lang.Math.atan2(d2, d1) * 180D) / 3.1415927410125732D) - 90F;
+            float f6 = f5 - yaw;
+            W = aa;
+            for(; f6 < -180F; f6 += 360F);
+            for(; f6 >= 180F; f6 -= 360F);
+            if(f6 > 30F)
+                f6 = 30F;
+            if(f6 < -30F)
+                f6 = -30F;
+            yaw += f6;
+            if(g && f != null)
+            {
+                double d4 = f.posX - posX;
+                double d5 = f.posZ - posZ;
+                float f8 = yaw;
+                yaw = (float)((java.lang.Math.atan2(d5, d4) * 180D) / 3.1415927410125732D) - 90F;
+                float f7 = (((f8 - yaw) + 90F) * 3.141593F) / 180F;
+                V = -MathLib.sin(f7) * W * 1.0F;
+                W = MathLib.cos(f7) * W * 1.0F;
+            }
+            if(d3 > 0.0D)
+                Y = true;
+        }
+        if(f != null)
+            b(f, 30F);
+        if(aw)
+            Y = true;
+        if(rnd.nextFloat() < 0.8F && (flag1 || flag2))
+            Y = true;
+    }
+
+    protected void a(Entity entity1, float f1)
+    {
+    }
+
+    protected float a(int j, int k, int l)
+    {
+        return 0.0F;
+    }
+
+    protected Entity i()
+    {
+        return null;
+    }
+
+    public boolean a()
+    {
+        int j = MathLib.castIgnoringSign(posX);
+        int k = MathLib.castIgnoringSign(au.b);
+        int l = MathLib.castIgnoringSign(posZ);
+        return super.a() && a(j, k, l) >= 0.0F;
+    }
+}
diff --git "a/temp\\src\\java/Chicken.java" "b/src\\main\\java/EntityChicken.java"
similarity index 63%
rename from "temp\\src\\java/Chicken.java"
rename to "src\\main\\java/EntityChicken.java"
index 7168be5..7992c42 100644
--- "a/temp\\src\\java/Chicken.java"
+++ "b/src\\main\\java/EntityChicken.java"
@@ -2,7 +2,7 @@
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-public class Chicken extends Passive
+public class EntityChicken extends EntityPassive
 {
 
     public boolean a;
@@ -13,7 +13,7 @@ public class Chicken extends Passive
     public float h;
     public int i;
 
-    public Chicken(World world1)
+    public EntityChicken(World world1)
     {
         super(world1);
         a = false;
@@ -23,7 +23,7 @@ public class Chicken extends Passive
         texture = "/mob/chicken.png";
         a(0.3F, 0.4F);
         health = 4;
-        i = aQ.nextInt(6000) + 6000;
+        i = rnd.nextInt(6000) + 6000;
     }
 
     public void j()
@@ -31,22 +31,22 @@ public class Chicken extends Passive
         super.j();
         e = b;
         d = c;
-        c += ((float) ((double)(av ? -1 : 4) * 0.29999999999999999D));
+        c += ((float) ((double)(onGround ? -1 : 4) * 0.29999999999999999D));
         if(c < 0.0F)
             c = 0.0F;
         if(c > 1.0F)
             c = 1.0F;
-        if(!av && h < 1.0F)
+        if(!onGround && h < 1.0F)
             h = 1.0F;
         h *= 0.90000000000000002D;
-        if(!av && ao < 0.0D)
-            ao *= 0.59999999999999998D;
+        if(!onGround && motionY < 0.0D)
+            motionY *= 0.59999999999999998D;
         b += h * 2.0F;
         if(!ag.y && --i <= 0)
         {
-            ag.a(((kh) (this)), "mob.chickenplop", 1.0F, (aQ.nextFloat() - aQ.nextFloat()) * 0.2F + 1.0F);
+            ag.a(((Entity) (this)), "mob.chickenplop", 1.0F, (rnd.nextFloat() - rnd.nextFloat()) * 0.2F + 1.0F);
             b(di.aN.aS, 1);
-            i = aQ.nextInt(6000) + 6000;
+            i = rnd.nextInt(6000) + 6000;
         }
     }
 
@@ -54,14 +54,14 @@ public class Chicken extends Passive
     {
     }
 
-    public void a(TagCompound tagCompound)
+    public void writeToTag(TagCompound tagCompound)
     {
-        super.a(tagCompound);
+        super.writeToTag(tagCompound);
     }
 
-    public void b(TagCompound tagCompound)
+    public void readFromTag(TagCompound tagCompound)
     {
-        super.b(tagCompound);
+        super.readFromTag(tagCompound);
     }
 
     protected String c()
diff --git "a/temp\\src\\java/Cow.java" "b/src\\main\\java/EntityCow.java"
similarity index 65%
rename from "temp\\src\\java/Cow.java"
rename to "src\\main\\java/EntityCow.java"
index abe1784..e03f539 100644
--- "a/temp\\src\\java/Cow.java"
+++ "b/src\\main\\java/EntityCow.java"
@@ -3,12 +3,12 @@
 // Source File Name:   SourceFile
 
 
-public class Cow extends Passive
+public class EntityCow extends EntityPassive
 {
 
     public boolean a;
 
-    public Cow(World world)
+    public EntityCow(World world)
     {
         super(world);
         a = false;
@@ -16,14 +16,14 @@ public class Cow extends Passive
         a(0.9F, 1.3F);
     }
 
-    public void a(TagCompound tagCompound)
+    public void writeToTag(TagCompound tagCompound)
     {
-        super.a(tagCompound);
+        super.writeToTag(tagCompound);
     }
 
-    public void b(TagCompound tagCompound)
+    public void readFromTag(TagCompound tagCompound)
     {
-        super.b(tagCompound);
+        super.readFromTag(tagCompound);
     }
 
     protected String c()
@@ -51,12 +51,12 @@ public class Cow extends Passive
         return di.aD.aS;
     }
 
-    public boolean a(Player player1)
+    public boolean a(EntityPlayer entityPlayer1)
     {
-        ev ev1 = player1.b.a();
+        ev ev1 = entityPlayer1.b.a();
         if(ev1 != null && ev1.id == di.au.aS)
         {
-            player1.b.a(player1.b.d, new ev(di.aE));
+            entityPlayer1.b.a(entityPlayer1.b.d, new ev(di.aE));
             return true;
         } else
         {
diff --git "a/temp\\src\\java/Creeper.java" "b/src\\main\\java/EntityCreeper.java"
similarity index 64%
rename from "temp\\src\\java/Creeper.java"
rename to "src\\main\\java/EntityCreeper.java"
index 7457073..91d7878 100644
--- "a/temp\\src\\java/Creeper.java"
+++ "b/src\\main\\java/EntityCreeper.java"
@@ -2,7 +2,7 @@
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-public class Creeper extends Monster
+public class EntityCreeper extends EntityMonster
 {
 
     int a;
@@ -10,7 +10,7 @@ public class Creeper extends Monster
     int c;
     int d;
 
-    public Creeper(World world1)
+    public EntityCreeper(World world1)
     {
         super(world1);
         c = 30;
@@ -18,14 +18,14 @@ public class Creeper extends Monster
         texture = "/mob/creeper.png";
     }
 
-    public void a(TagCompound tagCompound)
+    public void writeToTag(TagCompound tagCompound)
     {
-        super.a(tagCompound);
+        super.writeToTag(tagCompound);
     }
 
-    public void b(TagCompound tagCompound)
+    public void readFromTag(TagCompound tagCompound)
     {
-        super.b(tagCompound);
+        super.readFromTag(tagCompound);
     }
 
     protected void b_()
@@ -50,24 +50,24 @@ public class Creeper extends Monster
         return "mob.creeperdeath";
     }
 
-    public void b(kh kh)
+    public void b(Entity entity)
     {
-        super.b(kh);
-        if(kh instanceof Skeleton)
-            b(di.aQ.aS + aQ.nextInt(2), 1);
+        super.b(entity);
+        if(entity instanceof EntitySkeleton)
+            b(di.aQ.aS + rnd.nextInt(2), 1);
     }
 
-    protected void a(kh kh, float f)
+    protected void a(Entity entity, float f)
     {
         if(d <= 0 && f < 3F || d > 0 && f < 7F)
         {
             if(a == 0)
-                ag.a(((kh) (this)), "random.fuse", 1.0F, 0.5F);
+                ag.a(((Entity) (this)), "random.fuse", 1.0F, 0.5F);
             d = 1;
             a++;
             if(a == c)
             {
-                ag.a(((kh) (this)), ak, al, am, 3F);
+                ag.a(((Entity) (this)), posX, posY, posZ, 3F);
                 F();
             }
             g = true;
diff --git "a/temp\\src\\java/Giant.java" "b/src\\main\\java/EntityGiantZombie.java"
similarity index 81%
rename from "temp\\src\\java/Giant.java"
rename to "src\\main\\java/EntityGiantZombie.java"
index 1caf532..b586d33 100644
--- "a/temp\\src\\java/Giant.java"
+++ "b/src\\main\\java/EntityGiantZombie.java"
@@ -3,10 +3,10 @@
 // Source File Name:   SourceFile
 
 
-public class Giant extends Monster
+public class EntityGiantZombie extends EntityMonster
 {
 
-    public Giant(World world1)
+    public EntityGiantZombie(World world1)
     {
         super(world1);
         texture = "/mob/zombie.png";
diff --git "a/src\\main\\java/EntityList.java" "b/src\\main\\java/EntityList.java"
new file mode 100644
index 0000000..384eee0
--- /dev/null
+++ "b/src\\main\\java/EntityList.java"
@@ -0,0 +1,126 @@
+// Jad home page: http://www.kpdus.com/jad.html
+// Decompiler options: fullnames deadcode fieldsfirst safe 
+// Source File Name:   SourceFile
+
+import java.util.HashMap;
+
+public class EntityList
+{
+
+    private static java.util.Map a = new HashMap();
+    private static java.util.Map b = new HashMap();
+    private static java.util.Map c = new HashMap();
+    private static java.util.Map d = new HashMap();
+
+    public EntityList()
+    {
+    }
+
+    private static void addMapping(java.lang.Class class1, String s, int i)
+    {
+        a.put(((Object) (s)), ((Object) (class1)));
+        b.put(((Object) (class1)), ((Object) (s)));
+        c.put(((Object) (java.lang.Integer.valueOf(i))), ((Object) (class1)));
+        d.put(((Object) (class1)), ((Object) (java.lang.Integer.valueOf(i))));
+    }
+
+    public static Entity a(String s, World world1)
+    {
+        Entity entity1 = null;
+        try
+        {
+            java.lang.Class class1 = (java.lang.Class)a.get(((Object) (s)));
+            if(class1 != null)
+                entity1 = (Entity)class1.getConstructor(new java.lang.Class[] {
+                    World.class
+                }).newInstance(new Object[] {
+                        world1
+                });
+        }
+        catch(java.lang.Exception exception)
+        {
+            exception.printStackTrace();
+        }
+        return entity1;
+    }
+
+    public static Entity a(TagCompound tagCompound1, World world1)
+    {
+        Entity entity1 = null;
+        try
+        {
+            java.lang.Class class1 = (java.lang.Class)a.get(((Object) (tagCompound1.getString("id"))));
+            if(class1 != null)
+                entity1 = (Entity)class1.getConstructor(new java.lang.Class[] {
+                    World.class
+                }).newInstance(new Object[] {
+                        world1
+                });
+        }
+        catch(java.lang.Exception exception)
+        {
+            exception.printStackTrace();
+        }
+        if(entity1 != null)
+            entity1.e(tagCompound1);
+        else
+            java.lang.System.out.println((new StringBuilder()).append("Skipping Entity with id ").append(tagCompound1.getString("id")).toString());
+        return entity1;
+    }
+
+    public static Entity a(int i, World world1)
+    {
+        Entity entity1 = null;
+        try
+        {
+            java.lang.Class class1 = (java.lang.Class)c.get(((Object) (java.lang.Integer.valueOf(i))));
+            if(class1 != null)
+                entity1 = (Entity)class1.getConstructor(new java.lang.Class[] {
+                    World.class
+                }).newInstance(new Object[] {
+                        world1
+                });
+        }
+        catch(java.lang.Exception exception)
+        {
+            exception.printStackTrace();
+        }
+        if(entity1 == null)
+            java.lang.System.out.println((new StringBuilder()).append("Skipping Entity with id ").append(i).toString());
+        return entity1;
+    }
+
+    public static int a(Entity entity1)
+    {
+        return ((java.lang.Integer)d.get(((Object) (((Object) (entity1)).getClass())))).intValue();
+    }
+
+    public static String b(Entity entity1)
+    {
+        return (String)b.get(((Object) (((Object) (entity1)).getClass())));
+    }
+
+    static 
+    {
+        EntityList.addMapping(Arrow.class, "Arrow", 10);
+        EntityList.addMapping(Snowball.class, "Snowball", 11);
+        EntityList.addMapping(Item.class, "Item", 1);
+        EntityList.addMapping(Painting.class, "Painting", 9);
+        EntityList.addMapping(EntityMob.class, "Mob", 48);
+        EntityList.addMapping(EntityMonster.class, "Monster", 49);
+        EntityList.addMapping(EntityCreeper.class, "Creeper", 50);
+        EntityList.addMapping(EntitySkeleton.class, "Skeleton", 51);
+        EntityList.addMapping(EntitySpider.class, "Spider", 52);
+        EntityList.addMapping(EntityGiantZombie.class, "Giant", 53);
+        EntityList.addMapping(EntityZombie.class, "Zombie", 54);
+        EntityList.addMapping(Slime.class, "Slime", 55);
+        EntityList.addMapping(EntityPig.class, "Pig", 90);
+        EntityList.addMapping(EntitySheep.class, "Sheep", 91);
+        EntityList.addMapping(EntityCow.class, "Cow", 91);
+        EntityList.addMapping(EntityChicken.class, "Chicken", 91);
+        EntityList.addMapping(PrimedTnt.class, "PrimedTnt", 20);
+        EntityList.addMapping(FallingSand.class, "FallingSand", 21);
+        EntityList.addMapping(Minecart.class, "Minecart", 40);
+        EntityList.addMapping(Boat.class, "Boat", 41);
+    }
+}
diff --git "a/temp\\src\\java/Mob.java" "b/src\\main\\java/EntityMob.java"
similarity index 51%
rename from "temp\\src\\java/Mob.java"
rename to "src\\main\\java/EntityMob.java"
index e760f32..21d8674 100644
--- "a/temp\\src\\java/Mob.java"
+++ "b/src\\main\\java/EntityMob.java"
@@ -2,7 +2,7 @@
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-public class Mob extends kh
+public class EntityMob extends Entity
 {
 
     public int j;
@@ -19,9 +19,9 @@ public class Mob extends kh
     protected String texture;
     protected boolean v;
     protected float w;
-    protected String x;
-    protected float y;
-    protected int z;
+    protected String xx;
+    protected float yy;
+    protected int zz;
     protected float A;
     public boolean B;
     public float C;
@@ -56,10 +56,10 @@ public class Mob extends kh
     protected boolean Y;
     protected float Z;
     protected float aa;
-    private kh h;
+    private Entity h;
     private int i;
 
-    public Mob(World world1)
+    public EntityMob(World world1)
     {
         super(world1);
         j = 20;
@@ -69,9 +69,9 @@ public class Mob extends kh
         texture = "/char.png";
         v = true;
         w = 0.0F;
-        x = null;
-        y = 1.0F;
-        z = 0;
+        xx = null;
+        yy = 1.0F;
+        zz = 0;
         A = 0.0F;
         B = false;
         I = 0.0F;
@@ -89,19 +89,19 @@ public class Mob extends kh
         health = 10;
         ad = true;
         m = (float)(java.lang.Math.random() + 1.0D) * 0.01F;
-        a(ak, al, am);
+        setPosition(posX, posY, posZ);
         k = (float)java.lang.Math.random() * 12398F;
-        aq = (float)(java.lang.Math.random() * 3.1415927410125732D * 2D);
+        yaw = (float)(java.lang.Math.random() * 3.1415927410125732D * 2D);
         l = 1.0F;
         aM = 0.5F;
     }
 
-    protected boolean c(kh kh1)
+    protected boolean c(Entity entity1)
     {
-        return ag.a(((aj)null).b(ak, al + (double)s(), am), ((aj)null).b(kh1.ak, kh1.al + (double)kh1.s(), kh1.am)) == null;
+        return ag.a(((Vec3)null).recycle(posX, posY + (double)s(), posZ), ((Vec3)null).recycle(entity1.posX, entity1.posY + (double) entity1.s(), entity1.posZ)) == null;
     }
 
-    public String x()
+    public String getTexture()
     {
         return texture;
     }
@@ -130,35 +130,35 @@ public class Mob extends kh
     {
         C = D;
         super.y();
-        if(aQ.nextInt(1000) < a++)
+        if(rnd.nextInt(1000) < a++)
         {
             a = -b();
             String s1 = c();
             if(s1 != null)
-                ag.a(((kh) (this)), s1, f(), (aQ.nextFloat() - aQ.nextFloat()) * 0.2F + 1.0F);
+                ag.a(((Entity) (this)), s1, f(), (rnd.nextFloat() - rnd.nextFloat()) * 0.2F + 1.0F);
         }
         if(B() && I())
-            a(((kh) (null)), 1);
+            a(((Entity) (null)), 1);
         if(B() && a(gb.f))
         {
-            aX--;
-            if(aX == -20)
+            air--;
+            if(air == -20)
             {
-                aX = 0;
+                air = 0;
                 for(int i1 = 0; i1 < 8; i1++)
                 {
-                    float f1 = aQ.nextFloat() - aQ.nextFloat();
-                    float f2 = aQ.nextFloat() - aQ.nextFloat();
-                    float f3 = aQ.nextFloat() - aQ.nextFloat();
-                    ag.a("bubble", ak + (double)f1, al + (double)f2, am + (double)f3, an, ao, ap);
+                    float f1 = rnd.nextFloat() - rnd.nextFloat();
+                    float f2 = rnd.nextFloat() - rnd.nextFloat();
+                    float f3 = rnd.nextFloat() - rnd.nextFloat();
+                    ag.a("bubble", posX + (double)f1, posY + (double)f2, posZ + (double)f3, motionX, motionY, motionZ);
                 }
 
-                a(((kh) (null)), 2);
+                a(((Entity) (null)), 2);
             }
-            aT = 0;
+            fire = 0;
         } else
         {
-            aX = aU;
+            air = aU;
         }
         L = M;
         if(attackTime > 0)
@@ -176,29 +176,29 @@ public class Mob extends kh
                 F();
                 for(int j1 = 0; j1 < 20; j1++)
                 {
-                    double d1 = aQ.nextGaussian() * 0.02D;
-                    double d2 = aQ.nextGaussian() * 0.02D;
-                    double d3 = aQ.nextGaussian() * 0.02D;
-                    ag.a("explode", (ak + (double)(aQ.nextFloat() * aC * 2.0F)) - (double)aC, al + (double)(aQ.nextFloat() * aD), (am + (double)(aQ.nextFloat() * aC * 2.0F)) - (double)aC, d1, d2, d3);
+                    double d1 = rnd.nextGaussian() * 0.02D;
+                    double d2 = rnd.nextGaussian() * 0.02D;
+                    double d3 = rnd.nextGaussian() * 0.02D;
+                    ag.a("explode", (posX + (double)(rnd.nextFloat() * aC * 2.0F)) - (double)aC, posY + (double)(rnd.nextFloat() * aD), (posZ + (double)(rnd.nextFloat() * aC * 2.0F)) - (double)aC, d1, d2, d3);
                 }
 
             }
         }
         s = r;
         o = n;
-        as = aq;
-        at = ar;
+        prevYaw = yaw;
+        prevPitch = pitch;
     }
 
     public void z()
     {
         for(int i1 = 0; i1 < 20; i1++)
         {
-            double d1 = aQ.nextGaussian() * 0.02D;
-            double d2 = aQ.nextGaussian() * 0.02D;
-            double d3 = aQ.nextGaussian() * 0.02D;
+            double d1 = rnd.nextGaussian() * 0.02D;
+            double d2 = rnd.nextGaussian() * 0.02D;
+            double d3 = rnd.nextGaussian() * 0.02D;
             double d4 = 10D;
-            ag.a("explode", (ak + (double)(aQ.nextFloat() * aC * 2.0F)) - (double)aC - d1 * d4, (al + (double)(aQ.nextFloat() * aD)) - d2 * d4, (am + (double)(aQ.nextFloat() * aC * 2.0F)) - (double)aC - d3 * d4, d1, d2, d3);
+            ag.a("explode", (posX + (double)(rnd.nextFloat() * aC * 2.0F)) - (double)aC - d1 * d4, (posY + (double)(rnd.nextFloat() * aD)) - d2 * d4, (posZ + (double)(rnd.nextFloat() * aC * 2.0F)) - (double)aC - d3 * d4, d1, d2, d3);
         }
 
     }
@@ -226,9 +226,9 @@ public class Mob extends kh
     {
         super.e_();
         j();
-        double d1 = ak - ah;
-        double d2 = am - aj;
-        float f1 = eo.a(d1 * d1 + d2 * d2);
+        double d1 = posX - prevPosX;
+        double d2 = posZ - prevPosZ;
+        float f1 = MathLib.sqrt(d1 * d1 + d2 * d2);
         float f2 = n;
         float f3 = 0.0F;
         p = q;
@@ -240,8 +240,8 @@ public class Mob extends kh
             f2 = ((float)java.lang.Math.atan2(d2, d1) * 180F) / 3.141593F - 90F;
         }
         if(D > 0.0F)
-            f2 = aq;
-        if(!av)
+            f2 = yaw;
+        if(!onGround)
             f4 = 0.0F;
         q = q + (f4 - q) * 0.3F;
         float f5;
@@ -249,24 +249,24 @@ public class Mob extends kh
         for(; f5 >= 180F; f5 -= 360F);
         n += f5 * 0.3F;
         float f6;
-        for(f6 = aq - n; f6 < -180F; f6 += 360F);
+        for(f6 = yaw - n; f6 < -180F; f6 += 360F);
         for(; f6 >= 180F; f6 -= 360F);
         boolean flag = f6 < -90F || f6 >= 90F;
         if(f6 < -75F)
             f6 = -75F;
         if(f6 >= 75F)
             f6 = 75F;
-        n = aq - f6;
+        n = yaw - f6;
         if(f6 * f6 > 2500F)
             n += f6 * 0.2F;
         if(flag)
             f3 *= -1F;
-        for(; aq - as < -180F; as -= 360F);
-        for(; aq - as >= 180F; as += 360F);
+        for(; yaw - prevYaw < -180F; prevYaw -= 360F);
+        for(; yaw - prevYaw >= 180F; prevYaw += 360F);
         for(; n - o < -180F; o -= 360F);
         for(; n - o >= 180F; o += 360F);
-        for(; ar - at < -180F; at -= 360F);
-        for(; ar - at >= 180F; at += 360F);
+        for(; pitch - prevPitch < -180F; prevPitch -= 360F);
+        for(; pitch - prevPitch >= 180F; prevPitch += 360F);
         r += f3;
     }
 
@@ -285,7 +285,7 @@ public class Mob extends kh
         aW = j / 2;
     }
 
-    public boolean a(kh kh1, int i1)
+    public boolean a(Entity entity1, int i1)
     {
         if(ag.y)
             i1 = 0;
@@ -306,26 +306,26 @@ public class Mob extends kh
             hurtTime = H = 10;
         }
         I = 0.0F;
-        if(kh1 != null)
+        if(entity1 != null)
         {
-            double d1 = kh1.ak - ak;
+            double d1 = entity1.posX - posX;
             double d2;
-            for(d2 = kh1.am - am; d1 * d1 + d2 * d2 < 0.0001D; d2 = (java.lang.Math.random() - java.lang.Math.random()) * 0.01D)
+            for(d2 = entity1.posZ - posZ; d1 * d1 + d2 * d2 < 0.0001D; d2 = (java.lang.Math.random() - java.lang.Math.random()) * 0.01D)
                 d1 = (java.lang.Math.random() - java.lang.Math.random()) * 0.01D;
 
-            I = (float)((java.lang.Math.atan2(d2, d1) * 180D) / 3.1415927410125732D) - aq;
-            a(kh1, i1, d1, d2);
+            I = (float)((java.lang.Math.atan2(d2, d1) * 180D) / 3.1415927410125732D) - yaw;
+            a(entity1, i1, d1, d2);
         } else
         {
             I = (int)(java.lang.Math.random() * 2D) * 180;
         }
         if(health <= 0)
         {
-            ag.a(((kh) (this)), e(), f(), (aQ.nextFloat() - aQ.nextFloat()) * 0.2F + 1.0F);
-            b(kh1);
+            ag.a(((Entity) (this)), e(), f(), (rnd.nextFloat() - rnd.nextFloat()) * 0.2F + 1.0F);
+            b(entity1);
         } else
         {
-            ag.a(((kh) (this)), d(), f(), (aQ.nextFloat() - aQ.nextFloat()) * 0.2F + 1.0F);
+            ag.a(((Entity) (this)), d(), f(), (rnd.nextFloat() - rnd.nextFloat()) * 0.2F + 1.0F);
         }
         return true;
     }
@@ -350,29 +350,29 @@ public class Mob extends kh
         return "random.hurt";
     }
 
-    public void a(kh kh1, int i1, double d1, double d2)
+    public void a(Entity entity1, int i1, double d1, double d2)
     {
-        float f1 = eo.a(d1 * d1 + d2 * d2);
+        float f1 = MathLib.sqrt(d1 * d1 + d2 * d2);
         float f2 = 0.4F;
-        an /= 2D;
-        ao /= 2D;
-        ap /= 2D;
-        an -= (d1 / (double)f1) * (double)f2;
-        ao += 0.40000000596046448D;
-        ap -= (d2 / (double)f1) * (double)f2;
-        if(ao > 0.40000000596046448D)
-            ao = 0.40000000596046448D;
+        motionX /= 2D;
+        motionY /= 2D;
+        motionZ /= 2D;
+        motionX -= (d1 / (double)f1) * (double)f2;
+        motionY += 0.40000000596046448D;
+        motionZ -= (d2 / (double)f1) * (double)f2;
+        if(motionY > 0.40000000596046448D)
+            motionY = 0.40000000596046448D;
     }
 
-    public void b(kh kh1)
+    public void b(Entity entity1)
     {
-        if(z > 0 && kh1 != null)
-            kh1.b(((kh) (this)), z);
+        if(zz > 0 && entity1 != null)
+            entity1.b(((Entity) (this)), zz);
         N = true;
         int i1 = g();
         if(i1 > 0)
         {
-            int j1 = aQ.nextInt(3);
+            int j1 = rnd.nextInt(3);
             for(int k1 = 0; k1 < j1; k1++)
                 b(i1, 1);
 
@@ -389,12 +389,12 @@ public class Mob extends kh
         int i1 = (int)java.lang.Math.ceil(f1 - 3F);
         if(i1 > 0)
         {
-            a(((kh) (null)), i1);
-            int j1 = ag.a(eo.b(ak), eo.b(al - 0.20000000298023224D - (double)aB), eo.b(am));
+            a(((Entity) (null)), i1);
+            int j1 = ag.a(MathLib.castIgnoringSign(posX), MathLib.castIgnoringSign(posY - 0.20000000298023224D - (double)aB), MathLib.castIgnoringSign(posZ));
             if(j1 > 0)
             {
                 bb bb1 = ly.n[j1].bl;
-                ag.a(((kh) (this)), bb1.d(), bb1.b() * 0.5F, bb1.c() * 0.75F);
+                ag.a(((Entity) (this)), bb1.d(), bb1.b() * 0.5F, bb1.c() * 0.75F);
             }
         }
     }
@@ -403,65 +403,65 @@ public class Mob extends kh
     {
         if(g_())
         {
-            double d1 = al;
+            double d1 = posY;
             a(f1, f2, 0.02F);
-            c(an, ao, ap);
-            an *= 0.80000001192092896D;
-            ao *= 0.80000001192092896D;
-            ap *= 0.80000001192092896D;
-            ao -= 0.02D;
-            if(aw && b(an, ((ao + 0.60000002384185791D) - al) + d1, ap))
-                ao = 0.30000001192092896D;
+            c(motionX, motionY, motionZ);
+            motionX *= 0.80000001192092896D;
+            motionY *= 0.80000001192092896D;
+            motionZ *= 0.80000001192092896D;
+            motionY -= 0.02D;
+            if(aw && b(motionX, ((motionY + 0.60000002384185791D) - posY) + d1, motionZ))
+                motionY = 0.30000001192092896D;
         } else
         if(G())
         {
-            double d2 = al;
+            double d2 = posY;
             a(f1, f2, 0.02F);
-            c(an, ao, ap);
-            an *= 0.5D;
-            ao *= 0.5D;
-            ap *= 0.5D;
-            ao -= 0.02D;
-            if(aw && b(an, ((ao + 0.60000002384185791D) - al) + d2, ap))
-                ao = 0.30000001192092896D;
+            c(motionX, motionY, motionZ);
+            motionX *= 0.5D;
+            motionY *= 0.5D;
+            motionZ *= 0.5D;
+            motionY -= 0.02D;
+            if(aw && b(motionX, ((motionY + 0.60000002384185791D) - posY) + d2, motionZ))
+                motionY = 0.30000001192092896D;
         } else
         {
             float f3 = 0.91F;
-            if(av)
+            if(onGround)
             {
                 f3 = 0.5460001F;
-                int i1 = ag.a(eo.b(ak), eo.b(au.b) - 1, eo.b(am));
+                int i1 = ag.a(MathLib.castIgnoringSign(posX), MathLib.castIgnoringSign(au.b) - 1, MathLib.castIgnoringSign(posZ));
                 if(i1 > 0)
                     f3 = ly.n[i1].bo * 0.91F;
             }
             float f4 = 0.1627714F / (f3 * f3 * f3);
-            a(f1, f2, av ? 0.1F * f4 : 0.02F);
+            a(f1, f2, onGround ? 0.1F * f4 : 0.02F);
             f3 = 0.91F;
-            if(av)
+            if(onGround)
             {
                 f3 = 0.5460001F;
-                int j1 = ag.a(eo.b(ak), eo.b(au.b) - 1, eo.b(am));
+                int j1 = ag.a(MathLib.castIgnoringSign(posX), MathLib.castIgnoringSign(au.b) - 1, MathLib.castIgnoringSign(posZ));
                 if(j1 > 0)
                     f3 = ly.n[j1].bo * 0.91F;
             }
             if(A())
             {
-                aH = 0.0F;
-                if(ao < -0.14999999999999999D)
-                    ao = -0.14999999999999999D;
+                fallDistance = 0.0F;
+                if(motionY < -0.14999999999999999D)
+                    motionY = -0.14999999999999999D;
             }
-            c(an, ao, ap);
+            c(motionX, motionY, motionZ);
             if(aw && A())
-                ao = 0.20000000000000001D;
-            ao -= 0.080000000000000002D;
-            ao *= 0.98000001907348633D;
-            an *= f3;
-            ap *= f3;
+                motionY = 0.20000000000000001D;
+            motionY -= 0.080000000000000002D;
+            motionY *= 0.98000001907348633D;
+            motionX *= f3;
+            motionZ *= f3;
         }
         Q = R;
-        double d3 = ak - ah;
-        double d4 = am - aj;
-        float f5 = eo.a(d3 * d3 + d4 * d4) * 4F;
+        double d3 = posX - prevPosX;
+        double d4 = posZ - prevPosZ;
+        float f5 = MathLib.sqrt(d3 * d3 + d4 * d4) * 4F;
         if(f5 > 1.0F)
             f5 = 1.0F;
         R += (f5 - R) * 0.4F;
@@ -470,13 +470,13 @@ public class Mob extends kh
 
     public boolean A()
     {
-        int i1 = eo.b(ak);
-        int j1 = eo.b(au.b);
-        int k1 = eo.b(am);
+        int i1 = MathLib.castIgnoringSign(posX);
+        int j1 = MathLib.castIgnoringSign(au.b);
+        int k1 = MathLib.castIgnoringSign(posZ);
         return ag.a(i1, j1, k1) == ly.aG.bc || ag.a(i1, j1 + 1, k1) == ly.aG.bc;
     }
 
-    public void a(TagCompound tagCompound1)
+    public void writeToTag(TagCompound tagCompound1)
     {
         tagCompound1.set("Health", (short) health);
         tagCompound1.set("HurtTime", (short) hurtTime);
@@ -484,7 +484,7 @@ public class Mob extends kh
         tagCompound1.set("AttackTime", (short) attackTime);
     }
 
-    public void b(TagCompound tagCompound1)
+    public void readFromTag(TagCompound tagCompound1)
     {
         health = ((int) (tagCompound1.getShort("Health")));
         if(!tagCompound1.b("Health"))
@@ -503,17 +503,17 @@ public class Mob extends kh
     {
         if(b > 0)
         {
-            double d1 = ak + (c - ak) / (double)b;
-            double d2 = al + (d - al) / (double)b;
-            double d3 = am + (e - am) / (double)b;
+            double d1 = posX + (c - posX) / (double)b;
+            double d2 = posY + (d - posY) / (double)b;
+            double d3 = posZ + (e - posZ) / (double)b;
             double d4;
-            for(d4 = f - (double)aq; d4 < -180D; d4 += 360D);
+            for(d4 = f - (double) yaw; d4 < -180D; d4 += 360D);
             for(; d4 >= 180D; d4 -= 360D);
-            aq += ((float) (d4 / (double)b));
-            ar += ((float) ((g - (double)ar) / (double)b));
+            yaw += ((float) (d4 / (double)b));
+            pitch += ((float) ((g - (double) pitch) / (double)b));
             b--;
-            a(d1, d2, d3);
-            c(aq, ar);
+            setPosition(d1, d2, d3);
+            c(yaw, pitch);
         }
         if(health <= 0)
         {
@@ -528,25 +528,25 @@ public class Mob extends kh
         boolean flag1 = G();
         if(Y)
             if(flag)
-                ao += 0.039999999105930328D;
+                motionY += 0.039999999105930328D;
             else
             if(flag1)
-                ao += 0.039999999105930328D;
+                motionY += 0.039999999105930328D;
             else
-            if(av)
+            if(onGround)
                 C();
         V *= 0.98F;
         W *= 0.98F;
         X *= 0.9F;
         b(V, W);
-        java.util.List list = ag.b(((kh) (this)), au.b(0.20000000298023224D, 0.0D, 0.20000000298023224D));
+        java.util.List list = ag.b(((Entity) (this)), au.b(0.20000000298023224D, 0.0D, 0.20000000298023224D));
         if(list != null && list.size() > 0)
         {
             for(int i1 = 0; i1 < list.size(); i1++)
             {
-                kh kh1 = (kh)list.get(i1);
-                if(kh1.d_())
-                    kh1.f(((kh) (this)));
+                Entity entity1 = (Entity)list.get(i1);
+                if(entity1.d_())
+                    entity1.applyEntityCollision(((Entity) (this)));
             }
 
         }
@@ -554,22 +554,22 @@ public class Mob extends kh
 
     protected void C()
     {
-        ao = 0.41999998688697815D;
+        motionY = 0.41999998688697815D;
     }
 
     protected void b_()
     {
         U++;
-        Player player = ag.a(((kh) (this)), -1D);
-        if(player != null)
+        EntityPlayer entityPlayer = ag.a(((Entity) (this)), -1D);
+        if(entityPlayer != null)
         {
-            double d1 = ((kh) (player)).ak - ak;
-            double d2 = ((kh) (player)).al - al;
-            double d3 = ((kh) (player)).am - am;
+            double d1 = ((Entity) (entityPlayer)).posX - posX;
+            double d2 = ((Entity) (entityPlayer)).posY - posY;
+            double d3 = ((Entity) (entityPlayer)).posZ - posZ;
             double d4 = d1 * d1 + d2 * d2 + d3 * d3;
             if(d4 > 16384D)
                 F();
-            if(U > 600 && aQ.nextInt(800) == 0)
+            if(U > 600 && rnd.nextInt(800) == 0)
                 if(d4 < 1024D)
                     U = 0;
                 else
@@ -578,54 +578,54 @@ public class Mob extends kh
         V = 0.0F;
         W = 0.0F;
         float f1 = 8F;
-        if(aQ.nextFloat() < 0.02F)
+        if(rnd.nextFloat() < 0.02F)
         {
-            Player player1 = ag.a(((kh) (this)), f1);
-            if(player1 != null)
+            EntityPlayer entityPlayer1 = ag.a(((Entity) (this)), f1);
+            if(entityPlayer1 != null)
             {
-                h = ((kh) (player1));
-                i = 10 + aQ.nextInt(20);
+                h = ((Entity) (entityPlayer1));
+                i = 10 + rnd.nextInt(20);
             } else
             {
-                X = (aQ.nextFloat() - 0.5F) * 20F;
+                X = (rnd.nextFloat() - 0.5F) * 20F;
             }
         }
         if(h != null)
         {
             b(h, 10F);
-            if(i-- <= 0 || h.aA || h.e(((kh) (this))) > (double)(f1 * f1))
+            if(i-- <= 0 || h.aA || h.distance(((Entity) (this))) > (double)(f1 * f1))
                 h = null;
         } else
         {
-            if(aQ.nextFloat() < 0.05F)
-                X = (aQ.nextFloat() - 0.5F) * 20F;
-            aq += X;
-            ar = Z;
+            if(rnd.nextFloat() < 0.05F)
+                X = (rnd.nextFloat() - 0.5F) * 20F;
+            yaw += X;
+            pitch = Z;
         }
         boolean flag = g_();
         boolean flag1 = G();
         if(flag || flag1)
-            Y = aQ.nextFloat() < 0.8F;
+            Y = rnd.nextFloat() < 0.8F;
     }
 
-    public void b(kh kh1, float f1)
+    public void b(Entity entity1, float f1)
     {
-        double d1 = kh1.ak - ak;
-        double d3 = kh1.am - am;
+        double d1 = entity1.posX - posX;
+        double d3 = entity1.posZ - posZ;
         double d2;
-        if(kh1 instanceof Mob)
+        if(entity1 instanceof EntityMob)
         {
-            Mob mob1 = (Mob)kh1;
-            d2 = (mob1.al + (double) mob1.s()) - (al + (double)s());
+            EntityMob entityMob1 = (EntityMob) entity1;
+            d2 = (entityMob1.posY + (double) entityMob1.s()) - (posY + (double)s());
         } else
         {
-            d2 = (kh1.au.b + kh1.au.e) / 2D - (al + (double)s());
+            d2 = (entity1.au.b + entity1.au.e) / 2D - (posY + (double)s());
         }
-        double d4 = eo.a(d1 * d1 + d3 * d3);
+        double d4 = MathLib.sqrt(d1 * d1 + d3 * d3);
         float f2 = (float)((java.lang.Math.atan2(d3, d1) * 180D) / 3.1415927410125732D) - 90F;
         float f3 = (float)((java.lang.Math.atan2(d2, d4) * 180D) / 3.1415927410125732D);
-        ar = b(ar, f3, f1);
-        aq = b(aq, f2, f1);
+        pitch = b(pitch, f3, f1);
+        yaw = b(yaw, f2, f1);
     }
 
     private float b(float f1, float f2, float f3)
@@ -646,12 +646,12 @@ public class Mob extends kh
 
     public boolean a()
     {
-        return ag.a(au) && ag.a(((kh) (this)), au).size() == 0 && !ag.b(au);
+        return ag.a(au) && ag.a(((Entity) (this)), au).size() == 0 && !ag.b(au);
     }
 
     protected void E()
     {
-        a(((kh) (null)), 4);
+        a(((Entity) (null)), 4);
     }
 
     public float d(float f1)
@@ -662,46 +662,46 @@ public class Mob extends kh
         return C + f2 * f1;
     }
 
-    public aj e(float f1)
+    public Vec3 e(float f1)
     {
         if(f1 == 1.0F)
         {
-            return ((aj)null).b(ak, al, am);
+            return ((Vec3)null).recycle(posX, posY, posZ);
         } else
         {
-            double d1 = ah + (ak - ah) * (double)f1;
-            double d2 = ai + (al - ai) * (double)f1;
-            double d3 = aj + (am - aj) * (double)f1;
-            return ((aj)null).b(d1, d2, d3);
+            double d1 = prevPosX + (posX - prevPosX) * (double)f1;
+            double d2 = prevPosY + (posY - prevPosY) * (double)f1;
+            double d3 = prevPosZ + (posZ - prevPosZ) * (double)f1;
+            return ((Vec3)null).recycle(d1, d2, d3);
         }
     }
 
-    public aj f(float f1)
+    public Vec3 f(float f1)
     {
         if(f1 == 1.0F)
         {
-            float f2 = eo.b(-aq * 0.01745329F - 3.141593F);
-            float f4 = eo.a(-aq * 0.01745329F - 3.141593F);
-            float f6 = -eo.b(-ar * 0.01745329F);
-            float f8 = eo.a(-ar * 0.01745329F);
-            return ((aj)null).b(f4 * f6, f8, f2 * f6);
+            float f2 = MathLib.cos(-yaw * 0.01745329F - 3.141593F);
+            float f4 = MathLib.sin(-yaw * 0.01745329F - 3.141593F);
+            float f6 = -MathLib.cos(-pitch * 0.01745329F);
+            float f8 = MathLib.sin(-pitch * 0.01745329F);
+            return ((Vec3)null).recycle(f4 * f6, f8, f2 * f6);
         } else
         {
-            float f3 = at + (ar - at) * f1;
-            float f5 = as + (aq - as) * f1;
-            float f7 = eo.b(-f5 * 0.01745329F - 3.141593F);
-            float f9 = eo.a(-f5 * 0.01745329F - 3.141593F);
-            float f10 = -eo.b(-f3 * 0.01745329F);
-            float f11 = eo.a(-f3 * 0.01745329F);
-            return ((aj)null).b(f9 * f10, f11, f7 * f10);
+            float f3 = prevPitch + (pitch - prevPitch) * f1;
+            float f5 = prevYaw + (yaw - prevYaw) * f1;
+            float f7 = MathLib.cos(-f5 * 0.01745329F - 3.141593F);
+            float f9 = MathLib.sin(-f5 * 0.01745329F - 3.141593F);
+            float f10 = -MathLib.cos(-f3 * 0.01745329F);
+            float f11 = MathLib.sin(-f3 * 0.01745329F);
+            return ((Vec3)null).recycle(f9 * f10, f11, f7 * f10);
         }
     }
 
     public mf a(double d1, float f1)
     {
-        aj aj1 = e(f1);
-        aj aj2 = f(f1);
-        aj aj3 = aj1.c(aj2.a * d1, aj2.b * d1, aj2.c * d1);
-        return ag.a(aj1, aj3);
+        Vec3 vec31 = e(f1);
+        Vec3 vec32 = f(f1);
+        Vec3 vec33 = vec31.add(vec32.x * d1, vec32.y * d1, vec32.z * d1);
+        return ag.a(vec31, vec33);
     }
 }
diff --git "a/src\\main\\java/EntityMonster.java" "b/src\\main\\java/EntityMonster.java"
new file mode 100644
index 0000000..8983349
--- /dev/null
+++ "b/src\\main\\java/EntityMonster.java"
@@ -0,0 +1,95 @@
+// Jad home page: http://www.kpdus.com/jad.html
+// Decompiler options: fullnames deadcode fieldsfirst safe 
+// Source File Name:   SourceFile
+
+public class EntityMonster extends EntityAnimal
+    implements co
+{
+
+    protected int e;
+
+    public EntityMonster(World world1)
+    {
+        super(world1);
+        e = 2;
+        health = 20;
+    }
+
+    public void j()
+    {
+        float f = a(1.0F);
+        if(f > 0.5F)
+            U += 2;
+        super.j();
+    }
+
+    public void e_()
+    {
+        super.e_();
+        if(ag.l == 0)
+            F();
+    }
+
+    protected Entity i()
+    {
+        EntityPlayer entityPlayer = ag.a(((Entity) (this)), 16D);
+        if(entityPlayer != null && c(((Entity) (entityPlayer))))
+            return ((Entity) (entityPlayer));
+        else
+            return null;
+    }
+
+    public boolean a(Entity entity1, int k)
+    {
+        if(super.a(entity1, k))
+        {
+            if(ae == entity1 || af == entity1)
+                return true;
+            if(entity1 != this)
+                f = entity1;
+            return true;
+        } else
+        {
+            return false;
+        }
+    }
+
+    protected void a(Entity entity1, float f)
+    {
+        if((double)f < 2.5D && entity1.au.e > au.b && entity1.au.b < au.e)
+        {
+            attackTime = 20;
+            entity1.a(((Entity) (this)), e);
+        }
+    }
+
+    protected float a(int k, int l, int i1)
+    {
+        return 0.5F - ag.c(k, l, i1);
+    }
+
+    public void writeToTag(TagCompound tagCompound)
+    {
+        super.writeToTag(tagCompound);
+    }
+
+    public void readFromTag(TagCompound tagCompound)
+    {
+        super.readFromTag(tagCompound);
+    }
+
+    public boolean a()
+    {
+        int k = MathLib.castIgnoringSign(posX);
+        int l = MathLib.castIgnoringSign(au.b);
+        int i1 = MathLib.castIgnoringSign(posZ);
+        if(ag.a(by.a, k, l, i1) > rnd.nextInt(32))
+        {
+            return false;
+        } else
+        {
+            int j1 = ag.j(k, l, i1);
+            return j1 <= rnd.nextInt(8) && super.a();
+        }
+    }
+}
diff --git "a/temp\\src\\java/Passive.java" "b/src\\main\\java/EntityPassive.java"
similarity index 56%
rename from "temp\\src\\java/Passive.java"
rename to "src\\main\\java/EntityPassive.java"
index d208a49..cb01247 100644
--- "a/temp\\src\\java/Passive.java"
+++ "b/src\\main\\java/EntityPassive.java"
@@ -3,10 +3,10 @@
 // Source File Name:   SourceFile
 
 
-public abstract class Passive extends Entity
+public abstract class EntityPassive extends EntityAnimal
 {
 
-    public Passive(World world1)
+    public EntityPassive(World world1)
     {
         super(world1);
     }
@@ -19,21 +19,21 @@ public abstract class Passive extends Entity
             return ag.c(i, j, k) - 0.5F;
     }
 
-    public void a(TagCompound tagCompound)
+    public void writeToTag(TagCompound tagCompound)
     {
-        super.a(tagCompound);
+        super.writeToTag(tagCompound);
     }
 
-    public void b(TagCompound tagCompound)
+    public void readFromTag(TagCompound tagCompound)
     {
-        super.b(tagCompound);
+        super.readFromTag(tagCompound);
     }
 
     public boolean a()
     {
-        int i = eo.b(ak);
-        int j = eo.b(au.b);
-        int k = eo.b(am);
+        int i = MathLib.castIgnoringSign(posX);
+        int j = MathLib.castIgnoringSign(au.b);
+        int k = MathLib.castIgnoringSign(posZ);
         return ag.a(i, j - 1, k) == ly.v.bc && ag.j(i, j, k) > 8 && super.a();
     }
 
diff --git "a/temp\\src\\java/Pig.java" "b/src\\main\\java/EntityPig.java"
similarity index 69%
rename from "temp\\src\\java/Pig.java"
rename to "src\\main\\java/EntityPig.java"
index f5ef39b..7e2d41b 100644
--- "a/temp\\src\\java/Pig.java"
+++ "b/src\\main\\java/EntityPig.java"
@@ -3,12 +3,12 @@
 // Source File Name:   SourceFile
 
 
-public class Pig extends Passive
+public class EntityPig extends EntityPassive
 {
 
     public boolean saddle;
 
-    public Pig(World world)
+    public EntityPig(World world)
     {
         super(world);
         saddle = false;
@@ -17,15 +17,15 @@ public class Pig extends Passive
         saddle = false;
     }
 
-    public void a(TagCompound tagCompound1)
+    public void writeToTag(TagCompound tagCompound1)
     {
-        super.a(tagCompound1);
+        super.writeToTag(tagCompound1);
         tagCompound1.set("Saddle", saddle);
     }
 
-    public void b(TagCompound tagCompound1)
+    public void readFromTag(TagCompound tagCompound1)
     {
-        super.b(tagCompound1);
+        super.readFromTag(tagCompound1);
         saddle = tagCompound1.isTrueByte("Saddle");
     }
 
@@ -44,11 +44,11 @@ public class Pig extends Passive
         return "mob.pigdeath";
     }
 
-    public boolean a(Player player1)
+    public boolean a(EntityPlayer entityPlayer1)
     {
         if(saddle)
         {
-            player1.g(((kh) (this)));
+            entityPlayer1.g(((Entity) (this)));
             return true;
         } else
         {
diff --git "a/temp\\src\\java/Player.java" "b/src\\main\\java/EntityPlayer.java"
similarity index 60%
rename from "temp\\src\\java/Player.java"
rename to "src\\main\\java/EntityPlayer.java"
index 20d7213..3bb5f88 100644
--- "a/temp\\src\\java/Player.java"
+++ "b/src\\main\\java/EntityPlayer.java"
@@ -2,7 +2,7 @@
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-public class Player extends Mob
+public class EntityPlayer extends EntityMob
 {
 
     public eu b;
@@ -15,7 +15,7 @@ public class Player extends Mob
     public String i;
     private int a;
 
-    public Player(World world1)
+    public EntityPlayer(World world1)
     {
         super(world1);
         b = new eu(this);
@@ -28,7 +28,7 @@ public class Player extends Mob
         System.out.println("new Player: " + (world1.spawnX + 0.5D) + ", " + (world1.spawnY + 1) + ", " + ((double) world1.spawnZ + 0.5D));
         c((double) world1.spawnX + 0.5D, world1.spawnY + 1, (double) world1.spawnZ + 0.5D, 0.0F, 0.0F);
         health = 20;
-        x = "humanoid";
+        xx = "humanoid";
         w = 180F;
         aS = 20;
         texture = "/char.png";
@@ -74,31 +74,31 @@ public class Player extends Mob
         b.b();
         e = f;
         super.j();
-        float f1 = eo.a(an * an + ap * ap);
-        float f2 = (float)java.lang.Math.atan(-ao * 0.20000000298023224D) * 15F;
+        float f1 = MathLib.sqrt(motionX * motionX + motionZ * motionZ);
+        float f2 = (float)java.lang.Math.atan(-motionY * 0.20000000298023224D) * 15F;
         if(f1 > 0.1F)
             f1 = 0.1F;
-        if(!av || health <= 0)
+        if(!onGround || health <= 0)
             f1 = 0.0F;
-        if(av || health <= 0)
+        if(onGround || health <= 0)
             f2 = 0.0F;
         f += (f1 - f) * 0.4F;
         M += (f2 - M) * 0.8F;
         if(health > 0)
         {
-            java.util.List list = ag.b(((kh) (this)), au.b(1.0D, 0.0D, 1.0D));
+            java.util.List list = ag.b(((Entity) (this)), au.b(1.0D, 0.0D, 1.0D));
             if(list != null)
             {
                 for(int k = 0; k < list.size(); k++)
-                    h((kh)list.get(k));
+                    h((Entity)list.get(k));
 
             }
         }
     }
 
-    private void h(kh kh1)
+    private void h(Entity entity1)
     {
-        kh1.b(this);
+        entity1.onCollideWithPlayer(this);
     }
 
     public int r()
@@ -106,26 +106,26 @@ public class Player extends Mob
         return score;
     }
 
-    public void b(kh kh1)
+    public void b(Entity entity1)
     {
         a(0.2F, 0.2F);
-        a(ak, al, am);
-        ao = 0.10000000149011612D;
+        setPosition(posX, posY, posZ);
+        motionY = 0.10000000149011612D;
         if(i.equals("Notch"))
             a(new ev(di.h, 1), true);
         b.g();
-        if(kh1 != null)
+        if(entity1 != null)
         {
-            an = -eo.b(((I + aq) * 3.141593F) / 180F) * 0.1F;
-            ap = -eo.a(((I + aq) * 3.141593F) / 180F) * 0.1F;
+            motionX = -MathLib.cos(((I + yaw) * 3.141593F) / 180F) * 0.1F;
+            motionZ = -MathLib.sin(((I + yaw) * 3.141593F) / 180F) * 0.1F;
         } else
         {
-            an = ap = 0.0D;
+            motionX = motionZ = 0.0D;
         }
         aB = 0.1F;
     }
 
-    public void b(kh kh1, int k)
+    public void b(Entity entity1, int k)
     {
         score += k;
     }
@@ -139,35 +139,35 @@ public class Player extends Mob
     {
         if(ev1 == null)
             return;
-        Item item1 = new Item(ag, ak, (al - 0.30000001192092896D) + (double)s(), am, ev1);
+        Item item1 = new Item(ag, posX, (posY - 0.30000001192092896D) + (double)s(), posZ, ev1);
         item1.c = 40;
         float f1 = 0.1F;
         if(flag)
         {
-            float f3 = aQ.nextFloat() * 0.5F;
-            float f5 = aQ.nextFloat() * 3.141593F * 2.0F;
-            item1.an = -eo.a(f5) * f3;
-            item1.ap = eo.b(f5) * f3;
-            item1.ao = 0.20000000298023224D;
+            float f3 = rnd.nextFloat() * 0.5F;
+            float f5 = rnd.nextFloat() * 3.141593F * 2.0F;
+            item1.motionX = -MathLib.sin(f5) * f3;
+            item1.motionZ = MathLib.cos(f5) * f3;
+            item1.motionY = 0.20000000298023224D;
         } else
         {
             float f2 = 0.3F;
-            item1.an = -eo.a((aq / 180F) * 3.141593F) * eo.b((ar / 180F) * 3.141593F) * f2;
-            item1.ap = eo.b((aq / 180F) * 3.141593F) * eo.b((ar / 180F) * 3.141593F) * f2;
-            item1.ao = -eo.a((ar / 180F) * 3.141593F) * f2 + 0.1F;
+            item1.motionX = -MathLib.sin((yaw / 180F) * 3.141593F) * MathLib.cos((pitch / 180F) * 3.141593F) * f2;
+            item1.motionZ = MathLib.cos((yaw / 180F) * 3.141593F) * MathLib.cos((pitch / 180F) * 3.141593F) * f2;
+            item1.motionY = -MathLib.sin((pitch / 180F) * 3.141593F) * f2 + 0.1F;
             f2 = 0.02F;
-            float f4 = aQ.nextFloat() * 3.141593F * 2.0F;
-            f2 *= aQ.nextFloat();
-            item1.an += java.lang.Math.cos(f4) * (double)f2;
-            item1.ao += (aQ.nextFloat() - aQ.nextFloat()) * 0.1F;
-            item1.ap += java.lang.Math.sin(f4) * (double)f2;
+            float f4 = rnd.nextFloat() * 3.141593F * 2.0F;
+            f2 *= rnd.nextFloat();
+            item1.motionX += java.lang.Math.cos(f4) * (double)f2;
+            item1.motionY += (rnd.nextFloat() - rnd.nextFloat()) * 0.1F;
+            item1.motionZ += java.lang.Math.sin(f4) * (double)f2;
         }
         a(item1);
     }
 
     protected void a(Item item1)
     {
-        ag.a(((kh) (item1)));
+        ag.a(((Entity) (item1)));
     }
 
     public float a(ly ly)
@@ -175,7 +175,7 @@ public class Player extends Mob
         float f1 = b.a(ly);
         if(a(gb.f))
             f1 /= 5F;
-        if(!av)
+        if(!onGround)
             f1 /= 5F;
         return f1;
     }
@@ -185,16 +185,16 @@ public class Player extends Mob
         return b.b(ly);
     }
 
-    public void b(TagCompound tagCompound1)
+    public void readFromTag(TagCompound tagCompound1)
     {
-        super.b(tagCompound1);
-        TagList tagList1 = tagCompound1.l("Inventory");
+        super.readFromTag(tagCompound1);
+        TagList tagList1 = tagCompound1.getList("Inventory");
         b.b(tagList1);
     }
 
-    public void a(TagCompound tagCompound1)
+    public void writeToTag(TagCompound tagCompound1)
     {
-        super.a(tagCompound1);
+        super.writeToTag(tagCompound1);
         tagCompound1.set("Inventory", ((Tag) (b.a(new TagList()))));
     }
 
@@ -206,7 +206,7 @@ public class Player extends Mob
     {
     }
 
-    public void a_(kh kh1, int k)
+    public void a_(Entity entity1, int k)
     {
     }
 
@@ -215,14 +215,14 @@ public class Player extends Mob
         return 0.12F;
     }
 
-    public boolean a(kh kh1, int k)
+    public boolean a(Entity entity1, int k)
     {
         U = 0;
         if(health <= 0)
             return false;
         if((float)aW > (float)j / 2.0F)
             return false;
-        if((kh1 instanceof Monster) || (kh1 instanceof Arrow))
+        if((entity1 instanceof EntityMonster) || (entity1 instanceof Arrow))
         {
             if(ag.l == 0)
                 k = 0;
@@ -239,7 +239,7 @@ public class Player extends Mob
         if(k == 0)
             return false;
         else
-            return super.a(kh1, k);
+            return super.a(entity1, k);
     }
 
     public void a(Furnace furnace)
@@ -250,7 +250,7 @@ public class Player extends Mob
     {
     }
 
-    public void a_(kh kh1)
+    public void a_(Entity entity1)
     {
     }
 
diff --git "a/temp\\src\\java/Sheep.java" "b/src\\main\\java/EntitySheep.java"
similarity index 54%
rename from "temp\\src\\java/Sheep.java"
rename to "src\\main\\java/EntitySheep.java"
index c1296dc..32f0dea 100644
--- "a/temp\\src\\java/Sheep.java"
+++ "b/src\\main\\java/EntitySheep.java"
@@ -2,12 +2,12 @@
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-public class Sheep extends Passive
+public class EntitySheep extends EntityPassive
 {
 
     public boolean sheared;
 
-    public Sheep(World world)
+    public EntitySheep(World world)
     {
         super(world);
         sheared = false;
@@ -15,33 +15,33 @@ public class Sheep extends Passive
         a(0.9F, 1.3F);
     }
 
-    public boolean a(kh kh, int i)
+    public boolean a(Entity entity, int i)
     {
-        if(!sheared && (kh instanceof Mob))
+        if(!sheared && (entity instanceof EntityMob))
         {
             sheared = true;
-            int j = 1 + aQ.nextInt(3);
+            int j = 1 + rnd.nextInt(3);
             for(int k = 0; k < j; k++)
             {
                 Item item1 = a(ly.ac.bc, 1, 1.0F);
-                item1.ao += aQ.nextFloat() * 0.05F;
-                item1.an += (aQ.nextFloat() - aQ.nextFloat()) * 0.1F;
-                item1.ap += (aQ.nextFloat() - aQ.nextFloat()) * 0.1F;
+                item1.motionY += rnd.nextFloat() * 0.05F;
+                item1.motionX += (rnd.nextFloat() - rnd.nextFloat()) * 0.1F;
+                item1.motionZ += (rnd.nextFloat() - rnd.nextFloat()) * 0.1F;
             }
 
         }
-        return super.a(kh, i);
+        return super.a(entity, i);
     }
 
-    public void a(TagCompound tagCompound1)
+    public void writeToTag(TagCompound tagCompound1)
     {
-        super.a(tagCompound1);
+        super.writeToTag(tagCompound1);
         tagCompound1.set("Sheared", sheared);
     }
 
-    public void b(TagCompound tagCompound1)
+    public void readFromTag(TagCompound tagCompound1)
     {
-        super.b(tagCompound1);
+        super.readFromTag(tagCompound1);
         sheared = tagCompound1.isTrueByte("Sheared");
     }
 
diff --git "a/src\\main\\java/EntitySkeleton.java" "b/src\\main\\java/EntitySkeleton.java"
new file mode 100644
index 0000000..399a1f6
--- /dev/null
+++ "b/src\\main\\java/EntitySkeleton.java"
@@ -0,0 +1,76 @@
+// Jad home page: http://www.kpdus.com/jad.html
+// Decompiler options: fullnames deadcode fieldsfirst safe 
+// Source File Name:   SourceFile
+
+public class EntitySkeleton extends EntityMonster
+{
+
+    public EntitySkeleton(World world1)
+    {
+        super(world1);
+        texture = "/mob/skeleton.png";
+    }
+
+    protected String c()
+    {
+        return "mob.skeleton";
+    }
+
+    protected String d()
+    {
+        return "mob.skeletonhurt";
+    }
+
+    protected String e()
+    {
+        return "mob.skeletonhurt";
+    }
+
+    public void j()
+    {
+        if(ag.b())
+        {
+            float f = a(1.0F);
+            if(f > 0.5F && ag.i(MathLib.castIgnoringSign(posX), MathLib.castIgnoringSign(posY), MathLib.castIgnoringSign(posZ)) && rnd.nextFloat() * 30F < (f - 0.4F) * 2.0F)
+                fire = 300;
+        }
+        super.j();
+    }
+
+    protected void a(Entity entity1, float f)
+    {
+        if(f < 10F)
+        {
+            double d1 = entity1.posX - posX;
+            double d2 = entity1.posZ - posZ;
+            if(attackTime == 0)
+            {
+                Arrow arrow1 = new Arrow(ag, ((EntityMob) (this)));
+                arrow1.posY += 1.3999999761581421D;
+                double d3 = entity1.posY - 0.20000000298023224D - arrow1.posY;
+                float f1 = MathLib.sqrt(d1 * d1 + d2 * d2) * 0.2F;
+                ag.a(((Entity) (this)), "random.bow", 1.0F, 1.0F / (rnd.nextFloat() * 0.4F + 0.8F));
+                ag.a(((Entity) (arrow1)));
+                arrow1.a(d1, d3 + (double)f1, d2, 0.6F, 12F);
+                attackTime = 30;
+            }
+            yaw = (float)((java.lang.Math.atan2(d2, d1) * 180D) / 3.1415927410125732D) - 90F;
+            g = true;
+        }
+    }
+
+    public void writeToTag(TagCompound tagCompound)
+    {
+        super.writeToTag(tagCompound);
+    }
+
+    public void readFromTag(TagCompound tagCompound)
+    {
+        super.readFromTag(tagCompound);
+    }
+
+    protected int g()
+    {
+        return di.j.aS;
+    }
+}
diff --git "a/src\\main\\java/EntitySpider.java" "b/src\\main\\java/EntitySpider.java"
new file mode 100644
index 0000000..5005ba4
--- /dev/null
+++ "b/src\\main\\java/EntitySpider.java"
@@ -0,0 +1,88 @@
+// Jad home page: http://www.kpdus.com/jad.html
+// Decompiler options: fullnames deadcode fieldsfirst safe 
+// Source File Name:   SourceFile
+
+public class EntitySpider extends EntityMonster
+{
+
+    public EntitySpider(World world1)
+    {
+        super(world1);
+        texture = "/mob/spider.png";
+        a(1.4F, 0.9F);
+        aa = 0.8F;
+    }
+
+    public double h()
+    {
+        return (double)aD * 0.75D - 0.5D;
+    }
+
+    protected Entity i()
+    {
+        float f = a(1.0F);
+        if(f < 0.5F)
+        {
+            double d1 = 16D;
+            return ((Entity) (ag.a(((Entity) (this)), d1)));
+        } else
+        {
+            return null;
+        }
+    }
+
+    protected String c()
+    {
+        return "mob.spider";
+    }
+
+    protected String d()
+    {
+        return "mob.spider";
+    }
+
+    protected String e()
+    {
+        return "mob.spiderdeath";
+    }
+
+    protected void a(Entity entity1, float f)
+    {
+        float f1 = a(1.0F);
+        if(f1 > 0.5F && rnd.nextInt(100) == 0)
+        {
+            this.f = null;
+            return;
+        }
+        if(f > 2.0F && f < 6F && rnd.nextInt(10) == 0)
+        {
+            if(onGround)
+            {
+                double d1 = entity1.posX - posX;
+                double d2 = entity1.posZ - posZ;
+                float f2 = MathLib.sqrt(d1 * d1 + d2 * d2);
+                motionX = (d1 / (double)f2) * 0.5D * 0.80000001192092896D + motionX * 0.20000000298023224D;
+                motionZ = (d2 / (double)f2) * 0.5D * 0.80000001192092896D + motionZ * 0.20000000298023224D;
+                motionY = 0.40000000596046448D;
+            }
+        } else
+        {
+            super.a(entity1, f);
+        }
+    }
+
+    public void writeToTag(TagCompound tagCompound)
+    {
+        super.writeToTag(tagCompound);
+    }
+
+    public void readFromTag(TagCompound tagCompound)
+    {
+        super.readFromTag(tagCompound);
+    }
+
+    protected int g()
+    {
+        return di.I.aS;
+    }
+}
diff --git "a/temp\\src\\java/Zombie.java" "b/src\\main\\java/EntityZombie.java"
similarity index 69%
rename from "temp\\src\\java/Zombie.java"
rename to "src\\main\\java/EntityZombie.java"
index 6f880e8..b6d2020 100644
--- "a/temp\\src\\java/Zombie.java"
+++ "b/src\\main\\java/EntityZombie.java"
@@ -2,10 +2,10 @@
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-public class Zombie extends Monster
+public class EntityZombie extends EntityMonster
 {
 
-    public Zombie(World world1)
+    public EntityZombie(World world1)
     {
         super(world1);
         texture = "/mob/zombie.png";
@@ -18,8 +18,8 @@ public class Zombie extends Monster
         if(ag.b())
         {
             float f = a(1.0F);
-            if(f > 0.5F && ag.i(eo.b(ak), eo.b(al), eo.b(am)) && aQ.nextFloat() * 30F < (f - 0.4F) * 2.0F)
-                aT = 300;
+            if(f > 0.5F && ag.i(MathLib.castIgnoringSign(posX), MathLib.castIgnoringSign(posY), MathLib.castIgnoringSign(posZ)) && rnd.nextFloat() * 30F < (f - 0.4F) * 2.0F)
+                fire = 300;
         }
         super.j();
     }
diff --git "a/temp\\src\\java/FallingSand.java" "b/src\\main\\java/FallingSand.java"
index 87e9b09..5296163 100644
--- "a/temp\\src\\java/FallingSand.java"
+++ "b/src\\main\\java/FallingSand.java"
@@ -3,7 +3,7 @@
 // Source File Name:   SourceFile
 
 
-public class FallingSand extends kh
+public class FallingSand extends Entity
 {
 
     public int tile;
@@ -23,14 +23,14 @@ public class FallingSand extends kh
         ad = true;
         a(0.98F, 0.98F);
         aB = aD / 2.0F;
-        a((double)f, (double)f1, (double)f2);
-        an = 0.0D;
-        ao = 0.0D;
-        ap = 0.0D;
+        setPosition((double)f, (double)f1, (double)f2);
+        motionX = 0.0D;
+        motionY = 0.0D;
+        motionZ = 0.0D;
         aG = false;
-        ah = f;
-        ai = f1;
-        aj = f2;
+        prevPosX = f;
+        prevPosY = f1;
+        prevPosZ = f2;
     }
 
     public boolean c_()
@@ -45,25 +45,25 @@ public class FallingSand extends kh
             F();
             return;
         }
-        ah = ak;
-        ai = al;
-        aj = am;
+        prevPosX = posX;
+        prevPosY = posY;
+        prevPosZ = posZ;
         b++;
-        ao -= 0.039999999105930328D;
-        c(an, ao, ap);
-        an *= 0.98000001907348633D;
-        ao *= 0.98000001907348633D;
-        ap *= 0.98000001907348633D;
-        int j = eo.b(ak);
-        int k = eo.b(al);
-        int l = eo.b(am);
+        motionY -= 0.039999999105930328D;
+        c(motionX, motionY, motionZ);
+        motionX *= 0.98000001907348633D;
+        motionY *= 0.98000001907348633D;
+        motionZ *= 0.98000001907348633D;
+        int j = MathLib.castIgnoringSign(posX);
+        int k = MathLib.castIgnoringSign(posY);
+        int l = MathLib.castIgnoringSign(posZ);
         if(ag.a(j, k, l) == tile)
             ag.d(j, k, l, 0);
-        if(av)
+        if(onGround)
         {
-            an *= 0.69999998807907104D;
-            ap *= 0.69999998807907104D;
-            ao *= -0.5D;
+            motionX *= 0.69999998807907104D;
+            motionZ *= 0.69999998807907104D;
+            motionY *= -0.5D;
             F();
             if(!ag.a(tile, j, k, l, true) || !ag.d(j, k, l, tile))
                 b(tile, 1);
@@ -75,12 +75,12 @@ public class FallingSand extends kh
         }
     }
 
-    protected void a(TagCompound tagCompound1)
+    protected void writeToTag(TagCompound tagCompound1)
     {
         tagCompound1.set("Tile", (byte) tile);
     }
 
-    protected void b(TagCompound tagCompound1)
+    protected void readFromTag(TagCompound tagCompound1)
     {
         tile = tagCompound1.getByte("Tile") & 0xff;
     }
diff --git "a/temp\\src\\java/Furnace.java" "b/src\\main\\java/Furnace.java"
index e2a2ff3..ce0b768 100644
--- "a/temp\\src\\java/Furnace.java"
+++ "b/src\\main\\java/Furnace.java"
@@ -65,11 +65,11 @@ public class Furnace extends ic
     public void a(TagCompound tagCompound1)
     {
         super.a(tagCompound1);
-        TagList tagList1 = tagCompound1.l("Items");
+        TagList tagList1 = tagCompound1.getList("Items");
         a = new ev[c()];
-        for(int k = 0; k < tagList1.c(); k++)
+        for(int k = 0; k < tagList1.size(); k++)
         {
-            TagCompound tagCompound2 = (TagCompound) tagList1.a(k);
+            TagCompound tagCompound2 = (TagCompound) tagList1.get(k);
             byte slot = tagCompound2.getByte("Slot");
             if(slot >= 0 && slot < a.length)
                 a[slot] = new ev(tagCompound2);
@@ -92,7 +92,7 @@ public class Furnace extends ic
                 TagCompound tagCompound2 = new TagCompound();
                 tagCompound2.set("Slot", (byte)slot);
                 a[slot].writeCompound(tagCompound2);
-                tagList1.a(((Tag) (tagCompound2)));
+                tagList1.add(((Tag) (tagCompound2)));
             }
 
         tagCompound1.set("Items", ((Tag) (tagList1)));
diff --git "a/temp\\src\\java/Item.java" "b/src\\main\\java/Item.java"
index cb97043..2d0a688 100644
--- "a/temp\\src\\java/Item.java"
+++ "b/src\\main\\java/Item.java"
@@ -2,7 +2,7 @@
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-public class Item extends kh
+public class Item extends Entity
 {
 
     public ev a;
@@ -21,12 +21,12 @@ public class Item extends kh
         d = (float)(java.lang.Math.random() * 3.1415926535897931D * 2D);
         a(0.25F, 0.25F);
         aB = aD / 2.0F;
-        a(d1, d2, d3);
+        setPosition(d1, d2, d3);
         a = ev1;
-        aq = (float)(java.lang.Math.random() * 360D);
-        an = (float)(java.lang.Math.random() * 0.20000000298023224D - 0.10000000149011612D);
-        ao = 0.20000000298023224D;
-        ap = (float)(java.lang.Math.random() * 0.20000000298023224D - 0.10000000149011612D);
+        yaw = (float)(java.lang.Math.random() * 360D);
+        motionX = (float)(java.lang.Math.random() * 0.20000000298023224D - 0.10000000149011612D);
+        motionY = 0.20000000298023224D;
+        motionZ = (float)(java.lang.Math.random() * 0.20000000298023224D - 0.10000000149011612D);
         aG = false;
     }
 
@@ -45,33 +45,33 @@ public class Item extends kh
         super.e_();
         if(c > 0)
             c--;
-        ah = ak;
-        ai = al;
-        aj = am;
-        ao -= 0.039999999105930328D;
-        if(ag.f(eo.b(ak), eo.b(al), eo.b(am)) == gb.g)
+        prevPosX = posX;
+        prevPosY = posY;
+        prevPosZ = posZ;
+        motionY -= 0.039999999105930328D;
+        if(ag.f(MathLib.castIgnoringSign(posX), MathLib.castIgnoringSign(posY), MathLib.castIgnoringSign(posZ)) == gb.g)
         {
-            ao = 0.20000000298023224D;
-            an = (aQ.nextFloat() - aQ.nextFloat()) * 0.2F;
-            ap = (aQ.nextFloat() - aQ.nextFloat()) * 0.2F;
-            ag.a(((kh) (this)), "random.fizz", 0.4F, 2.0F + aQ.nextFloat() * 0.4F);
+            motionY = 0.20000000298023224D;
+            motionX = (rnd.nextFloat() - rnd.nextFloat()) * 0.2F;
+            motionZ = (rnd.nextFloat() - rnd.nextFloat()) * 0.2F;
+            ag.a(((Entity) (this)), "random.fizz", 0.4F, 2.0F + rnd.nextFloat() * 0.4F);
         }
-        g(ak, al, am);
+        g(posX, posY, posZ);
         g_();
-        c(an, ao, ap);
+        c(motionX, motionY, motionZ);
         float f1 = 0.98F;
-        if(av)
+        if(onGround)
         {
             f1 = 0.5880001F;
-            int i = ag.a(eo.b(ak), eo.b(au.b) - 1, eo.b(am));
+            int i = ag.a(MathLib.castIgnoringSign(posX), MathLib.castIgnoringSign(au.b) - 1, MathLib.castIgnoringSign(posZ));
             if(i > 0)
                 f1 = ly.n[i].bo * 0.98F;
         }
-        an *= f1;
-        ao *= 0.98000001907348633D;
-        ap *= f1;
-        if(av)
-            ao *= -0.5D;
+        motionX *= f1;
+        motionY *= 0.98000001907348633D;
+        motionZ *= f1;
+        if(onGround)
+            motionY *= -0.5D;
         e++;
         age++;
         if(age >= 6000)
@@ -80,14 +80,14 @@ public class Item extends kh
 
     public boolean g_()
     {
-        return ag.a(au, gb.f, ((kh) (this)));
+        return ag.a(au, gb.f, ((Entity) (this)));
     }
 
     private boolean g(double d1, double d2, double d3)
     {
-        int i = eo.b(d1);
-        int j = eo.b(d2);
-        int k = eo.b(d3);
+        int i = MathLib.castIgnoringSign(d1);
+        int j = MathLib.castIgnoringSign(d2);
+        int k = MathLib.castIgnoringSign(d3);
         double d4 = d1 - (double)i;
         double d5 = d2 - (double)j;
         double d6 = d3 - (double)k;
@@ -131,29 +131,29 @@ public class Item extends kh
                 double d8 = 1.0D - d6;
                 byte0 = 5;
             }
-            float f1 = aQ.nextFloat() * 0.2F + 0.1F;
+            float f1 = rnd.nextFloat() * 0.2F + 0.1F;
             if(byte0 == 0)
-                an = -f1;
+                motionX = -f1;
             if(byte0 == 1)
-                an = f1;
+                motionX = f1;
             if(byte0 == 2)
-                ao = -f1;
+                motionY = -f1;
             if(byte0 == 3)
-                ao = f1;
+                motionY = f1;
             if(byte0 == 4)
-                ap = -f1;
+                motionZ = -f1;
             if(byte0 == 5)
-                ap = f1;
+                motionZ = f1;
         }
         return false;
     }
 
     protected void a(int i)
     {
-        a(((kh) (null)), i);
+        a(((Entity) (null)), i);
     }
 
-    public boolean a(kh kh1, int i)
+    public boolean a(Entity entity1, int i)
     {
         health -= i;
         if(health <= 0)
@@ -161,30 +161,30 @@ public class Item extends kh
         return false;
     }
 
-    public void a(TagCompound tagCompound1)
+    public void writeToTag(TagCompound tagCompound1)
     {
         tagCompound1.set("Health", (short) health);
         tagCompound1.set("Age", (short) age);
         tagCompound1.set("Item", a.writeCompound(new TagCompound()));
     }
 
-    public void b(TagCompound tagCompound1)
+    public void readFromTag(TagCompound tagCompound1)
     {
         health = tagCompound1.getShort("Health") & 0xff;
         age = ((int) (tagCompound1.getShort("Age")));
-        TagCompound tagCompound2 = tagCompound1.k("Item");
+        TagCompound tagCompound2 = tagCompound1.getCompound("Item");
         a = new ev(tagCompound2);
     }
 
-    public void b(Player player1)
+    public void onCollideWithPlayer(EntityPlayer entityPlayer1)
     {
         if(ag.y)
             return;
         int i = a.count;
-        if(c == 0 && player1.b.a(a))
+        if(c == 0 && entityPlayer1.b.a(a))
         {
-            ag.a(((kh) (this)), "random.pop", 0.2F, ((aQ.nextFloat() - aQ.nextFloat()) * 0.7F + 1.0F) * 2.0F);
-            player1.a_(((kh) (this)), i);
+            ag.a(((Entity) (this)), "random.pop", 0.2F, ((rnd.nextFloat() - rnd.nextFloat()) * 0.7F + 1.0F) * 2.0F);
+            entityPlayer1.a_(((Entity) (this)), i);
             F();
         }
     }
diff --git "a/temp\\src\\java/eo.java" "b/src\\main\\java/MathLib.java"
similarity index 52%
rename from "temp\\src\\java/eo.java"
rename to "src\\main\\java/MathLib.java"
index 709bb23..c12ce1e 100644
--- "a/temp\\src\\java/eo.java"
+++ "b/src\\main\\java/MathLib.java"
@@ -3,53 +3,53 @@
 // Source File Name:   SourceFile
 
 
-public class eo
+public class MathLib
 {
 
-    private static float a[];
+    private static float memoisedSins[];
 
-    public eo()
+    public MathLib()
     {
     }
 
-    public static final float a(float f)
+    public static final float sin(float f)
     {
-        return a[(int)(f * 10430.38F) & 0xffff];
+        return memoisedSins[(int)(f * 10430.38F) & 0xffff];
     }
 
-    public static final float b(float f)
+    public static final float cos(float f)
     {
-        return a[(int)(f * 10430.38F + 16384F) & 0xffff];
+        return memoisedSins[(int)(f * 10430.38F + 16384F) & 0xffff];
     }
 
-    public static final float c(float f)
+    public static final float sqrt(float f)
     {
         return (float)java.lang.Math.sqrt(f);
     }
 
-    public static final float a(double d1)
+    public static final float sqrt(double d1)
     {
         return (float)java.lang.Math.sqrt(d1);
     }
 
-    public static int d(float f)
+    public static int castIgnoringSign(float f)
     {
         int i = (int)f;
         return f >= (float)i ? i : i - 1;
     }
 
-    public static int b(double d1)
+    public static int castIgnoringSign(double d1)
     {
         int i = (int)d1;
         return d1 >= (double)i ? i : i - 1;
     }
 
-    public static float e(float f)
+    public static float abs(float f)
     {
         return f < 0.0F ? -f : f;
     }
 
-    public static double a(double d1, double d2)
+    public static double maxAbs(double d1, double d2)
     {
         if(d1 < 0.0D)
             d1 = -d1;
@@ -58,7 +58,7 @@ public class eo
         return d1 <= d2 ? d2 : d1;
     }
 
-    public static int a(int i, int j)
+    public static int divMinor(int i, int j)
     {
         if(i < 0)
             return -((-i - 1) / j) - 1;
@@ -68,9 +68,9 @@ public class eo
 
     static 
     {
-        a = new float[0x10000];
+        memoisedSins = new float[0x10000];
         for(int i = 0; i < 0x10000; i++)
-            a[i] = (float)java.lang.Math.sin(((double)i * 3.1415926535897931D * 2D) / 65536D);
+            memoisedSins[i] = (float)Math.sin(((double)i * 3.1415926535897931D * 2D) / 65536D);
 
     }
 }
diff --git "a/temp\\src\\java/Minecart.java" "b/src\\main\\java/Minecart.java"
index e8deab1..ce125c7 100644
--- "a/temp\\src\\java/Minecart.java"
+++ "b/src\\main\\java/Minecart.java"
@@ -2,7 +2,7 @@
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-public class Minecart extends kh
+public class Minecart extends Entity
     implements gh
 {
 
@@ -99,9 +99,9 @@ public class Minecart extends kh
         aG = false;
     }
 
-    public cf b_(kh kh1)
+    public cf b_(Entity entity1)
     {
-        return kh1.au;
+        return entity1.au;
     }
 
     public cf f_()
@@ -118,13 +118,13 @@ public class Minecart extends kh
                     int i1)
     {
         this(world1);
-        a(d1, d2 + (double)aB, d3);
-        an = 0.0D;
-        ao = 0.0D;
-        ap = 0.0D;
-        ah = d1;
-        ai = d2;
-        aj = d3;
+        setPosition(d1, d2 + (double)aB, d3);
+        motionX = 0.0D;
+        motionY = 0.0D;
+        motionZ = 0.0D;
+        prevPosX = d1;
+        prevPosY = d2;
+        prevPosZ = d3;
         type = i1;
     }
 
@@ -133,7 +133,7 @@ public class Minecart extends kh
         return (double)aD * 0.0D - 0.30000001192092896D;
     }
 
-    public boolean a(kh kh1, int i1)
+    public boolean a(Entity entity1, int i1)
     {
         c = -c;
         b = 10;
@@ -164,23 +164,23 @@ label0:
             ev ev1 = c(i1);
             if(ev1 == null)
                 continue;
-            float f1 = aQ.nextFloat() * 0.8F + 0.1F;
-            float f2 = aQ.nextFloat() * 0.8F + 0.1F;
-            float f3 = aQ.nextFloat() * 0.8F + 0.1F;
+            float f1 = rnd.nextFloat() * 0.8F + 0.1F;
+            float f2 = rnd.nextFloat() * 0.8F + 0.1F;
+            float f3 = rnd.nextFloat() * 0.8F + 0.1F;
             do
             {
                 if(ev1.count <= 0)
                     continue label0;
-                int j1 = aQ.nextInt(21) + 10;
+                int j1 = rnd.nextInt(21) + 10;
                 if(j1 > ev1.count)
                     j1 = ev1.count;
                 ev1.count -= j1;
-                Item item1 = new Item(ag, ak + (double)f1, al + (double)f2, am + (double)f3, new ev(ev1.id, j1, ev1.damage));
+                Item item1 = new Item(ag, posX + (double)f1, posY + (double)f2, posZ + (double)f3, new ev(ev1.id, j1, ev1.damage));
                 float f4 = 0.05F;
-                item1.an = (float)aQ.nextGaussian() * f4;
-                item1.ao = (float)aQ.nextGaussian() * f4 + 0.2F;
-                item1.ap = (float)aQ.nextGaussian() * f4;
-                ag.a(((kh) (item1)));
+                item1.motionX = (float) rnd.nextGaussian() * f4;
+                item1.motionY = (float) rnd.nextGaussian() * f4 + 0.2F;
+                item1.motionZ = (float) rnd.nextGaussian() * f4;
+                ag.a(((Entity) (item1)));
             } while(true);
         }
 
@@ -193,21 +193,21 @@ label0:
         {
             if(k > 0)
             {
-                double d1 = ak + (l - ak) / (double)k;
-                double d2 = al + (m - al) / (double)k;
-                double d4 = am + (n - am) / (double)k;
+                double d1 = posX + (l - posX) / (double)k;
+                double d2 = posY + (m - posY) / (double)k;
+                double d4 = posZ + (n - posZ) / (double)k;
                 double d5;
-                for(d5 = o - (double)aq; d5 < -180D; d5 += 360D);
+                for(d5 = o - (double) yaw; d5 < -180D; d5 += 360D);
                 for(; d5 >= 180D; d5 -= 360D);
-                aq += ((float) (d5 / (double)k));
-                ar += ((float) ((p - (double)ar) / (double)k));
+                yaw += ((float) (d5 / (double)k));
+                pitch += ((float) ((p - (double) pitch) / (double)k));
                 k--;
-                a(d1, d2, d4);
-                c(aq, ar);
+                setPosition(d1, d2, d4);
+                c(yaw, pitch);
             } else
             {
-                a(ak, al, am);
-                c(aq, ar);
+                setPosition(posX, posY, posZ);
+                c(yaw, pitch);
             }
             return;
         }
@@ -215,13 +215,13 @@ label0:
             b--;
         if(a > 0)
             a--;
-        ah = ak;
-        this.ai = al;
-        aj = am;
-        ao -= 0.039999999105930328D;
-        int i1 = eo.b(ak);
-        int j1 = eo.b(al);
-        int k1 = eo.b(am);
+        prevPosX = posX;
+        this.prevPosY = posY;
+        prevPosZ = posZ;
+        motionY -= 0.039999999105930328D;
+        int i1 = MathLib.castIgnoringSign(posX);
+        int j1 = MathLib.castIgnoringSign(posY);
+        int k1 = MathLib.castIgnoringSign(posZ);
         if(ag.a(i1, j1 - 1, k1) == ly.aH.bc)
             j1--;
         double d3 = 0.40000000000000002D;
@@ -229,32 +229,32 @@ label0:
         double d6 = 0.0078125D;
         if(ag.a(i1, j1, k1) == ly.aH.bc)
         {
-            aj aj1 = g(ak, al, am);
+            Vec3 vec31 = g(posX, posY, posZ);
             int l1 = ag.e(i1, j1, k1);
-            al = j1;
+            posY = j1;
             if(l1 >= 2 && l1 <= 5)
-                al = j1 + 1;
+                posY = j1 + 1;
             if(l1 == 2)
-                an -= d6;
+                motionX -= d6;
             if(l1 == 3)
-                an += d6;
+                motionX += d6;
             if(l1 == 4)
-                ap += d6;
+                motionZ += d6;
             if(l1 == 5)
-                ap -= d6;
+                motionZ -= d6;
             int ai[][] = j[l1];
             double d9 = ai[1][0] - ai[0][0];
             double d11 = ai[1][2] - ai[0][2];
             double d12 = java.lang.Math.sqrt(d9 * d9 + d11 * d11);
-            double d13 = an * d9 + ap * d11;
+            double d13 = motionX * d9 + motionZ * d11;
             if(d13 < 0.0D)
             {
                 d9 = -d9;
                 d11 = -d11;
             }
-            double d14 = java.lang.Math.sqrt(an * an + ap * ap);
-            an = (d14 * d9) / d12;
-            ap = (d14 * d11) / d12;
+            double d14 = java.lang.Math.sqrt(motionX * motionX + motionZ * motionZ);
+            motionX = (d14 * d9) / d12;
+            motionZ = (d14 * d11) / d12;
             double d17 = 0.0D;
             double d18 = (double)i1 + 0.5D + (double)ai[0][0] * 0.5D;
             double d19 = (double)k1 + 0.5D + (double)ai[0][2] * 0.5D;
@@ -264,25 +264,25 @@ label0:
             d11 = d21 - d19;
             if(d9 == 0.0D)
             {
-                ak = (double)i1 + 0.5D;
-                d17 = am - (double)k1;
+                posX = (double)i1 + 0.5D;
+                d17 = posZ - (double)k1;
             } else
             if(d11 == 0.0D)
             {
-                am = (double)k1 + 0.5D;
-                d17 = ak - (double)i1;
+                posZ = (double)k1 + 0.5D;
+                d17 = posX - (double)i1;
             } else
             {
-                double d22 = ak - d18;
-                double d24 = am - d19;
+                double d22 = posX - d18;
+                double d24 = posZ - d19;
                 double d26 = (d22 * d9 + d24 * d11) * 2D;
                 d17 = d26;
             }
-            ak = d18 + d9 * d17;
-            am = d19 + d11 * d17;
-            a(ak, al + (double)aB, am);
-            double d23 = an;
-            double d25 = ap;
+            posX = d18 + d9 * d17;
+            posZ = d19 + d11 * d17;
+            setPosition(posX, posY + (double)aB, posZ);
+            double d23 = motionX;
+            double d25 = motionZ;
             if(ae != null)
             {
                 d23 *= 0.75D;
@@ -297,150 +297,150 @@ label0:
             if(d25 > d3)
                 d25 = d3;
             c(d23, 0.0D, d25);
-            if(ai[0][1] != 0 && eo.b(ak) - i1 == ai[0][0] && eo.b(am) - k1 == ai[0][2])
-                a(ak, al + (double)ai[0][1], am);
+            if(ai[0][1] != 0 && MathLib.castIgnoringSign(posX) - i1 == ai[0][0] && MathLib.castIgnoringSign(posZ) - k1 == ai[0][2])
+                setPosition(posX, posY + (double)ai[0][1], posZ);
             else
-            if(ai[1][1] != 0 && eo.b(ak) - i1 == ai[1][0] && eo.b(am) - k1 == ai[1][2])
-                a(ak, al + (double)ai[1][1], am);
+            if(ai[1][1] != 0 && MathLib.castIgnoringSign(posX) - i1 == ai[1][0] && MathLib.castIgnoringSign(posZ) - k1 == ai[1][2])
+                setPosition(posX, posY + (double)ai[1][1], posZ);
             if(ae != null)
             {
-                an *= 0.99699997901916504D;
-                ao *= 0.0D;
-                ap *= 0.99699997901916504D;
+                motionX *= 0.99699997901916504D;
+                motionY *= 0.0D;
+                motionZ *= 0.99699997901916504D;
             } else
             {
                 if(type == 2)
                 {
-                    double d27 = eo.a(pushX * pushX + pushZ * pushZ);
+                    double d27 = MathLib.sqrt(pushX * pushX + pushZ * pushZ);
                     if(d27 > 0.01D)
                     {
                         flag = true;
                         pushX /= d27;
                         pushZ /= d27;
                         double d29 = 0.040000000000000001D;
-                        an *= 0.80000001192092896D;
-                        ao *= 0.0D;
-                        ap *= 0.80000001192092896D;
-                        an += pushX * d29;
-                        ap += pushZ * d29;
+                        motionX *= 0.80000001192092896D;
+                        motionY *= 0.0D;
+                        motionZ *= 0.80000001192092896D;
+                        motionX += pushX * d29;
+                        motionZ += pushZ * d29;
                     } else
                     {
-                        an *= 0.89999997615814209D;
-                        ao *= 0.0D;
-                        ap *= 0.89999997615814209D;
+                        motionX *= 0.89999997615814209D;
+                        motionY *= 0.0D;
+                        motionZ *= 0.89999997615814209D;
                     }
                 }
-                an *= 0.95999997854232788D;
-                ao *= 0.0D;
-                ap *= 0.95999997854232788D;
+                motionX *= 0.95999997854232788D;
+                motionY *= 0.0D;
+                motionZ *= 0.95999997854232788D;
             }
-            aj aj2 = g(ak, al, am);
-            if(aj2 != null && aj1 != null)
+            Vec3 vec32 = g(posX, posY, posZ);
+            if(vec32 != null && vec31 != null)
             {
-                double d28 = (aj1.b - aj2.b) * 0.050000000000000003D;
-                double d15 = java.lang.Math.sqrt(an * an + ap * ap);
+                double d28 = (vec31.y - vec32.y) * 0.050000000000000003D;
+                double d15 = java.lang.Math.sqrt(motionX * motionX + motionZ * motionZ);
                 if(d15 > 0.0D)
                 {
-                    an = (an / d15) * (d15 + d28);
-                    ap = (ap / d15) * (d15 + d28);
+                    motionX = (motionX / d15) * (d15 + d28);
+                    motionZ = (motionZ / d15) * (d15 + d28);
                 }
-                a(ak, aj2.b, am);
+                setPosition(posX, vec32.y, posZ);
             }
-            int j2 = eo.b(ak);
-            int k2 = eo.b(am);
+            int j2 = MathLib.castIgnoringSign(posX);
+            int k2 = MathLib.castIgnoringSign(posZ);
             if(j2 != i1 || k2 != k1)
             {
-                double d16 = java.lang.Math.sqrt(an * an + ap * ap);
-                an = d16 * (double)(j2 - i1);
-                ap = d16 * (double)(k2 - k1);
+                double d16 = java.lang.Math.sqrt(motionX * motionX + motionZ * motionZ);
+                motionX = d16 * (double)(j2 - i1);
+                motionZ = d16 * (double)(k2 - k1);
             }
             if(type == 2)
             {
-                double d30 = eo.a(pushX * pushX + pushZ * pushZ);
-                if(d30 > 0.01D && an * an + ap * ap > 0.001D)
+                double d30 = MathLib.sqrt(pushX * pushX + pushZ * pushZ);
+                if(d30 > 0.01D && motionX * motionX + motionZ * motionZ > 0.001D)
                 {
                     pushX /= d30;
                     pushZ /= d30;
-                    if(pushX * an + pushZ * ap < 0.0D)
+                    if(pushX * motionX + pushZ * motionZ < 0.0D)
                     {
                         pushX = 0.0D;
                         pushZ = 0.0D;
                     } else
                     {
-                        pushX = an;
-                        pushZ = ap;
+                        pushX = motionX;
+                        pushZ = motionZ;
                     }
                 }
             }
         } else
         {
-            if(an < -d3)
-                an = -d3;
-            if(an > d3)
-                an = d3;
-            if(ap < -d3)
-                ap = -d3;
-            if(ap > d3)
-                ap = d3;
-            if(av)
-            {
-                an *= 0.5D;
-                ao *= 0.5D;
-                ap *= 0.5D;
+            if(motionX < -d3)
+                motionX = -d3;
+            if(motionX > d3)
+                motionX = d3;
+            if(motionZ < -d3)
+                motionZ = -d3;
+            if(motionZ > d3)
+                motionZ = d3;
+            if(onGround)
+            {
+                motionX *= 0.5D;
+                motionY *= 0.5D;
+                motionZ *= 0.5D;
             }
-            c(an, ao, ap);
-            if(!av)
+            c(motionX, motionY, motionZ);
+            if(!onGround)
             {
-                an *= 0.94999998807907104D;
-                ao *= 0.94999998807907104D;
-                ap *= 0.94999998807907104D;
+                motionX *= 0.94999998807907104D;
+                motionY *= 0.94999998807907104D;
+                motionZ *= 0.94999998807907104D;
             }
         }
-        ar = 0.0F;
-        double d7 = ah - ak;
-        double d8 = aj - am;
+        pitch = 0.0F;
+        double d7 = prevPosX - posX;
+        double d8 = prevPosZ - posZ;
         if(d7 * d7 + d8 * d8 > 0.001D)
         {
-            aq = (float)((java.lang.Math.atan2(d8, d7) * 180D) / 3.1415926535897931D);
+            yaw = (float)((java.lang.Math.atan2(d8, d7) * 180D) / 3.1415926535897931D);
             if(i)
-                aq += 180F;
+                yaw += 180F;
         }
         double d10;
-        for(d10 = aq - as; d10 >= 180D; d10 -= 360D);
+        for(d10 = yaw - prevYaw; d10 >= 180D; d10 -= 360D);
         for(; d10 < -180D; d10 += 360D);
         if(d10 < -170D || d10 >= 170D)
         {
-            aq += 180F;
+            yaw += 180F;
             i = !i;
         }
-        c(aq, ar);
-        java.util.List list = ag.b(((kh) (this)), au.b(0.20000000298023224D, 0.0D, 0.20000000298023224D));
+        c(yaw, pitch);
+        java.util.List list = ag.b(((Entity) (this)), au.b(0.20000000298023224D, 0.0D, 0.20000000298023224D));
         if(list != null && list.size() > 0)
         {
             for(int i2 = 0; i2 < list.size(); i2++)
             {
-                kh kh1 = (kh)list.get(i2);
-                if(kh1 != ae && kh1.d_() && (kh1 instanceof Minecart))
-                    kh1.f(((kh) (this)));
+                Entity entity1 = (Entity)list.get(i2);
+                if(entity1 != ae && entity1.d_() && (entity1 instanceof Minecart))
+                    entity1.applyEntityCollision(((Entity) (this)));
             }
 
         }
         if(ae != null && ae.aA)
             ae = null;
-        if(flag && aQ.nextInt(4) == 0)
+        if(flag && rnd.nextInt(4) == 0)
         {
             fuel--;
             if(fuel < 0)
                 pushX = pushZ = 0.0D;
-            ag.a("largesmoke", ak, al + 0.80000000000000004D, am, 0.0D, 0.0D, 0.0D);
+            ag.a("largesmoke", posX, posY + 0.80000000000000004D, posZ, 0.0D, 0.0D, 0.0D);
         }
     }
 
-    public aj a(double d1, double d2, double d3, double d4)
+    public Vec3 a(double d1, double d2, double d3, double d4)
     {
-        int i1 = eo.b(d1);
-        int j1 = eo.b(d2);
-        int k1 = eo.b(d3);
+        int i1 = MathLib.castIgnoringSign(d1);
+        int j1 = MathLib.castIgnoringSign(d2);
+        int k1 = MathLib.castIgnoringSign(d3);
         if(ag.a(i1, j1 - 1, k1) == ly.aH.bc)
             j1--;
         if(ag.a(i1, j1, k1) == ly.aH.bc)
@@ -457,10 +457,10 @@ label0:
             d6 /= d7;
             d1 += d5 * d4;
             d3 += d6 * d4;
-            if(ai[0][1] != 0 && eo.b(d1) - i1 == ai[0][0] && eo.b(d3) - k1 == ai[0][2])
+            if(ai[0][1] != 0 && MathLib.castIgnoringSign(d1) - i1 == ai[0][0] && MathLib.castIgnoringSign(d3) - k1 == ai[0][2])
                 d2 += ai[0][1];
             else
-            if(ai[1][1] != 0 && eo.b(d1) - i1 == ai[1][0] && eo.b(d3) - k1 == ai[1][2])
+            if(ai[1][1] != 0 && MathLib.castIgnoringSign(d1) - i1 == ai[1][0] && MathLib.castIgnoringSign(d3) - k1 == ai[1][2])
                 d2 += ai[1][1];
             return g(d1, d2, d3);
         } else
@@ -469,11 +469,11 @@ label0:
         }
     }
 
-    public aj g(double d1, double d2, double d3)
+    public Vec3 g(double d1, double d2, double d3)
     {
-        int i1 = eo.b(d1);
-        int j1 = eo.b(d2);
-        int k1 = eo.b(d3);
+        int i1 = MathLib.castIgnoringSign(d1);
+        int j1 = MathLib.castIgnoringSign(d2);
+        int k1 = MathLib.castIgnoringSign(d3);
         if(ag.a(i1, j1 - 1, k1) == ly.aH.bc)
             j1--;
         if(ag.a(i1, j1, k1) == ly.aH.bc)
@@ -516,14 +516,14 @@ label0:
                 d2++;
             if(d12 > 0.0D)
                 d2 += 0.5D;
-            return ((aj)null).b(d1, d2, d3);
+            return ((Vec3)null).recycle(d1, d2, d3);
         } else
         {
             return null;
         }
     }
 
-    protected void a(TagCompound tagCompound1)
+    protected void writeToTag(TagCompound tagCompound1)
     {
         tagCompound1.set("Type", type);
         if(type == 2)
@@ -541,14 +541,14 @@ label0:
                     TagCompound tagCompound2 = new TagCompound();
                     tagCompound2.set("Slot", (byte)slot);
                     h[slot].writeCompound(tagCompound2);
-                    items.a(((Tag) (tagCompound2)));
+                    items.add(((Tag) (tagCompound2)));
                 }
 
             tagCompound1.set("Items", ((Tag) (items)));
         }
     }
 
-    protected void b(TagCompound tagCompound1)
+    protected void readFromTag(TagCompound tagCompound1)
     {
         type = tagCompound1.getInt("Type");
         if(type == 2)
@@ -559,11 +559,11 @@ label0:
         } else
         if(type == 1)
         {
-            TagList tagList1 = tagCompound1.l("Items");
+            TagList tagList1 = tagCompound1.getList("Items");
             h = new ev[c()];
-            for(int i1 = 0; i1 < tagList1.c(); i1++)
+            for(int i1 = 0; i1 < tagList1.size(); i1++)
             {
-                TagCompound tagCompound2 = (TagCompound) tagList1.a(i1);
+                TagCompound tagCompound2 = (TagCompound) tagList1.get(i1);
                 int j1 = tagCompound2.getByte("Slot") & 0xff;
                 if(j1 >= 0 && j1 < h.length)
                     h[j1] = new ev(tagCompound2);
@@ -577,18 +577,18 @@ label0:
         return 0.0F;
     }
 
-    public void f(kh kh1)
+    public void applyEntityCollision(Entity entity1)
     {
-        if(kh1 == ae)
+        if(entity1 == ae)
             return;
-        if((kh1 instanceof Mob) && !(kh1 instanceof Player) && type == 0 && an * an + ap * ap > 0.01D && ae == null && kh1.af == null)
-            kh1.g(((kh) (this)));
-        double d1 = kh1.ak - ak;
-        double d2 = kh1.am - am;
+        if((entity1 instanceof EntityMob) && !(entity1 instanceof EntityPlayer) && type == 0 && motionX * motionX + motionZ * motionZ > 0.01D && ae == null && entity1.af == null)
+            entity1.g(((Entity) (this)));
+        double d1 = entity1.posX - posX;
+        double d2 = entity1.posZ - posZ;
         double d3 = d1 * d1 + d2 * d2;
         if(d3 >= 9.9999997473787516E-005D)
         {
-            d3 = eo.a(d3);
+            d3 = MathLib.sqrt(d3);
             d1 /= d3;
             d2 /= d3;
             double d4 = 1.0D / d3;
@@ -602,40 +602,40 @@ label0:
             d2 *= 1.0F - aO;
             d1 *= 0.5D;
             d2 *= 0.5D;
-            if(kh1 instanceof Minecart)
+            if(entity1 instanceof Minecart)
             {
-                double d5 = kh1.an + an;
-                double d6 = kh1.ap + ap;
-                if(((Minecart)kh1).type == 2 && type != 2)
+                double d5 = entity1.motionX + motionX;
+                double d6 = entity1.motionZ + motionZ;
+                if(((Minecart) entity1).type == 2 && type != 2)
                 {
-                    an *= 0.20000000298023224D;
-                    ap *= 0.20000000298023224D;
-                    f(kh1.an - d1, 0.0D, kh1.ap - d2);
-                    kh1.an *= 0.69999998807907104D;
-                    kh1.ap *= 0.69999998807907104D;
+                    motionX *= 0.20000000298023224D;
+                    motionZ *= 0.20000000298023224D;
+                    addVelocity(entity1.motionX - d1, 0.0D, entity1.motionZ - d2);
+                    entity1.motionX *= 0.69999998807907104D;
+                    entity1.motionZ *= 0.69999998807907104D;
                 } else
-                if(((Minecart)kh1).type != 2 && type == 2)
+                if(((Minecart) entity1).type != 2 && type == 2)
                 {
-                    kh1.an *= 0.20000000298023224D;
-                    kh1.ap *= 0.20000000298023224D;
-                    kh1.f(an + d1, 0.0D, ap + d2);
-                    an *= 0.69999998807907104D;
-                    ap *= 0.69999998807907104D;
+                    entity1.motionX *= 0.20000000298023224D;
+                    entity1.motionZ *= 0.20000000298023224D;
+                    entity1.addVelocity(motionX + d1, 0.0D, motionZ + d2);
+                    motionX *= 0.69999998807907104D;
+                    motionZ *= 0.69999998807907104D;
                 } else
                 {
                     d5 /= 2D;
                     d6 /= 2D;
-                    an *= 0.20000000298023224D;
-                    ap *= 0.20000000298023224D;
-                    f(d5 - d1, 0.0D, d6 - d2);
-                    kh1.an *= 0.20000000298023224D;
-                    kh1.ap *= 0.20000000298023224D;
-                    kh1.f(d5 + d1, 0.0D, d6 + d2);
+                    motionX *= 0.20000000298023224D;
+                    motionZ *= 0.20000000298023224D;
+                    addVelocity(d5 - d1, 0.0D, d6 - d2);
+                    entity1.motionX *= 0.20000000298023224D;
+                    entity1.motionZ *= 0.20000000298023224D;
+                    entity1.addVelocity(d5 + d1, 0.0D, d6 + d2);
                 }
             } else
             {
-                f(-d1, 0.0D, -d2);
-                kh1.f(d1 / 4D, 0.0D, d2 / 4D);
+                addVelocity(-d1, 0.0D, -d2);
+                entity1.addVelocity(d1 / 4D, 0.0D, d2 / 4D);
             }
         }
     }
@@ -691,25 +691,25 @@ label0:
     {
     }
 
-    public boolean a(Player player1)
+    public boolean a(EntityPlayer entityPlayer1)
     {
         if(type == 0)
-            player1.g(((kh) (this)));
+            entityPlayer1.g(((Entity) (this)));
         else
         if(type == 1)
-            player1.a(((gh) (this)));
+            entityPlayer1.a(((gh) (this)));
         else
         if(type == 2)
         {
-            ev ev1 = player1.b.a();
+            ev ev1 = entityPlayer1.b.a();
             if(ev1 != null && ev1.id == di.k.aS)
             {
                 if(--ev1.count == 0)
-                    player1.b.a(player1.b.d, ((ev) (null)));
+                    entityPlayer1.b.a(entityPlayer1.b.d, ((ev) (null)));
                 fuel += 1200;
             }
-            pushX = ak - player1.ak;
-            pushZ = am - player1.am;
+            pushX = posX - entityPlayer1.posX;
+            pushZ = posZ - entityPlayer1.posZ;
         }
         return true;
     }
diff --git "a/temp\\src\\java/Minecraft.java" "b/src\\main\\java/Minecraft.java"
index 11175c8..3951d3d 100644
--- "a/temp\\src\\java/Minecraft.java"
+++ "b/src\\main\\java/Minecraft.java"
@@ -472,7 +472,7 @@ public abstract class Minecraft
             while(F && (z == null || z.isActive())) 
             {
                 cf.a();
-                aj.a();
+                Vec3.a();
                 if(k == null && org.lwjgl.opengl.Display.isCloseRequested())
                     d();
                 if(m && world != null)
@@ -501,7 +501,7 @@ public abstract class Minecraft
                 }
 
                 c("Pre render");
-                A.a(((Mob) (g)), M.c);
+                A.a(((EntityMob) (g)), M.c);
                 org.lwjgl.opengl.GL11.glEnable(3553);
                 if(world != null)
                     while(world.e()) ;
@@ -710,7 +710,7 @@ public abstract class Minecraft
             {
                 ev ev3 = g.b.a();
                 int k2 = ev3 == null ? 0 : ev3.count;
-                if(b.a(((Player) (g)), world, ev3, j1, k1, i2, j2))
+                if(b.a(((EntityPlayer) (g)), world, ev3, j1, k1, i2, j2))
                     g.w();
                 if(ev3 == null)
                     return;
@@ -727,7 +727,7 @@ public abstract class Minecraft
             if(ev1 != null)
             {
                 int l1 = ev1.count;
-                ev ev2 = ev1.a(world, ((Player) (g)));
+                ev ev2 = ev1.a(world, ((EntityPlayer) (g)));
                 if(ev2 != ev1 || ev2 != null && ev2.count != l1)
                 {
                     g.b.slots1[g.b.d] = ev2;
@@ -942,7 +942,7 @@ public abstract class Minecraft
                 if(Y == 30)
                 {
                     Y = 0;
-                    world.f(((kh) (g)));
+                    world.f(((Entity) (g)));
                 }
             }
             world.l = y.w;
@@ -955,7 +955,7 @@ public abstract class Minecraft
             if(!m || j())
                 world.g();
             if(!m && world != null)
-                world.m(eo.b(g.ak), eo.b(g.al), eo.b(g.am));
+                world.m(MathLib.castIgnoringSign(g.posX), MathLib.castIgnoringSign(g.posY), MathLib.castIgnoringSign(g.posZ));
             if(!m)
                 h.a();
         }
@@ -1008,7 +1008,7 @@ public abstract class Minecraft
             {
                 g.q();
                 if(world1 != null)
-                    world1.a(((kh) (g)));
+                    world1.a(((Entity) (g)));
             }
             if(!world1.y)
                 d(s1);
@@ -1016,15 +1016,15 @@ public abstract class Minecraft
             {
                 g = (bi)b.b(world1);
                 g.q();
-                b.a(((Player) (g)));
+                b.a(((EntityPlayer) (g)));
             }
             g.a = ((lv) (new gd(y)));
             if(f != null)
                 f.a(world1);
             if(h != null)
                 h.a(world1);
-            b.b(((Player) (g)));
-            world1.a(((Player) (g)));
+            b.b(((EntityPlayer) (g)));
+            world1.a(((EntityPlayer) (g)));
             if(world1.r)
                 world1.a(((IProgressUpdate) (q)));
         } else
@@ -1049,8 +1049,8 @@ public abstract class Minecraft
             int i2 = world.spawnZ;
             if(g != null)
             {
-                l1 = (int)g.ak;
-                i2 = (int)g.am;
+                l1 = (int)g.posX;
+                i2 = (int)g.posZ;
             }
             for(int j2 = -c1; j2 <= c1; j2 += 16)
             {
@@ -1111,13 +1111,13 @@ public abstract class Minecraft
     {
         world.a();
         if(g != null)
-            world.d(((kh) (g)));
+            world.d(((Entity) (g)));
         g = (bi)b.b(world);
         g.q();
-        b.a(((Player) (g)));
-        world.a(((Player) (g)));
+        b.a(((EntityPlayer) (g)));
+        world.a(((EntityPlayer) (g)));
         g.a = ((lv) (new gd(y)));
-        b.b(((Player) (g)));
+        b.b(((EntityPlayer) (g)));
         d("Respawning");
     }
 
diff --git "a/temp\\src\\java/MobSpawner.java" "b/src\\main\\java/MobSpawner.java"
index a395fa8..dca88c7 100644
--- "a/temp\\src\\java/MobSpawner.java"
+++ "b/src\\main\\java/MobSpawner.java"
@@ -49,24 +49,24 @@ public class MobSpawner extends ic
         byte byte0 = 4;
         for(int i = 0; i < byte0; i++)
         {
-            Mob mob1 = (Mob)(Mob)ew.a(entityId, e);
-            if(mob1 == null)
+            EntityMob entityMob1 = (EntityMob)(EntityMob) EntityList.a(entityId, e);
+            if(entityMob1 == null)
                 return;
-            int j = e.a(((Object) (mob1)).getClass(), cf.b(x, y, z, x + 1, y + 1, z + 1).b(8D, 4D, 8D)).size();
+            int j = e.a(((Object) (entityMob1)).getClass(), cf.b(x, y, z, x + 1, y + 1, z + 1).b(8D, 4D, 8D)).size();
             if(j >= 6)
             {
                 c();
                 return;
             }
-            if(mob1 == null)
+            if(entityMob1 == null)
                 continue;
             double d7 = (double) x + (e.n.nextDouble() - e.n.nextDouble()) * 4D;
             double d8 = (y + e.n.nextInt(3)) - 1;
             double d9 = (double) z + (e.n.nextDouble() - e.n.nextDouble()) * 4D;
-            mob1.c(d7, d8, d9, e.n.nextFloat() * 360F, 0.0F);
-            if(!mob1.a())
+            entityMob1.c(d7, d8, d9, e.n.nextFloat() * 360F, 0.0F);
+            if(!entityMob1.a())
                 continue;
-            e.a(((kh) (mob1)));
+            e.a(((Entity) (entityMob1)));
             for(int k = 0; k < 20; k++)
             {
                 double d2 = (double) x + 0.5D + ((double)e.n.nextFloat() - 0.5D) * 2D;
@@ -76,7 +76,7 @@ public class MobSpawner extends ic
                 e.a("flame", d2, d4, d6, 0.0D, 0.0D, 0.0D);
             }
 
-            mob1.z();
+            entityMob1.z();
             c();
         }
 
diff --git "a/temp\\src\\java/Monster.java" "b/temp\\src\\java/Monster.java"
deleted file mode 100644
index 900ce60..0000000
--- "a/temp\\src\\java/Monster.java"
+++ /dev/null
@@ -1,95 +0,0 @@
-// Jad home page: http://www.kpdus.com/jad.html
-// Decompiler options: fullnames deadcode fieldsfirst safe 
-// Source File Name:   SourceFile
-
-public class Monster extends Entity
-    implements co
-{
-
-    protected int e;
-
-    public Monster(World world1)
-    {
-        super(world1);
-        e = 2;
-        health = 20;
-    }
-
-    public void j()
-    {
-        float f = a(1.0F);
-        if(f > 0.5F)
-            U += 2;
-        super.j();
-    }
-
-    public void e_()
-    {
-        super.e_();
-        if(ag.l == 0)
-            F();
-    }
-
-    protected kh i()
-    {
-        Player player = ag.a(((kh) (this)), 16D);
-        if(player != null && c(((kh) (player))))
-            return ((kh) (player));
-        else
-            return null;
-    }
-
-    public boolean a(kh kh1, int k)
-    {
-        if(super.a(kh1, k))
-        {
-            if(ae == kh1 || af == kh1)
-                return true;
-            if(kh1 != this)
-                f = kh1;
-            return true;
-        } else
-        {
-            return false;
-        }
-    }
-
-    protected void a(kh kh1, float f)
-    {
-        if((double)f < 2.5D && kh1.au.e > au.b && kh1.au.b < au.e)
-        {
-            attackTime = 20;
-            kh1.a(((kh) (this)), e);
-        }
-    }
-
-    protected float a(int k, int l, int i1)
-    {
-        return 0.5F - ag.c(k, l, i1);
-    }
-
-    public void a(TagCompound tagCompound)
-    {
-        super.a(tagCompound);
-    }
-
-    public void b(TagCompound tagCompound)
-    {
-        super.b(tagCompound);
-    }
-
-    public boolean a()
-    {
-        int k = eo.b(ak);
-        int l = eo.b(au.b);
-        int i1 = eo.b(am);
-        if(ag.a(by.a, k, l, i1) > aQ.nextInt(32))
-        {
-            return false;
-        } else
-        {
-            int j1 = ag.j(k, l, i1);
-            return j1 <= aQ.nextInt(8) && super.a();
-        }
-    }
-}
diff --git "a/temp\\src\\java/Painting.java" "b/src\\main\\java/Painting.java"
index af669a5..bcbd588 100644
--- "a/temp\\src\\java/Painting.java"
+++ "b/src\\main\\java/Painting.java"
@@ -4,7 +4,7 @@
 
 import java.util.ArrayList;
 
-public class Painting extends kh
+public class Painting extends Entity
 {
 
     private int c;
@@ -23,12 +23,12 @@ public class Painting extends kh
         a(0.5F, 0.5F);
     }
 
-    public Painting(World world1, int j, int k, int l, int i1)
+    public Painting(World world1, int tileX, int tileY, int tileZ, int i1)
     {
         this(world1);
-        tileX = j;
-        tileY = k;
-        tileZ = l;
+        this.tileX = tileX;
+        this.tileY = tileY;
+        this.tileZ = tileZ;
         java.util.ArrayList arraylist = new ArrayList();
         er aer[] = er.values();
         int j1 = aer.length;
@@ -42,14 +42,14 @@ public class Painting extends kh
         }
 
         if(((java.util.List) (arraylist)).size() > 0)
-            b = (er)((java.util.List) (arraylist)).get(aQ.nextInt(((java.util.List) (arraylist)).size()));
+            b = (er)((java.util.List) (arraylist)).get(rnd.nextInt(((java.util.List) (arraylist)).size()));
         b(i1);
     }
 
     public void b(int j)
     {
         dir = j;
-        as = aq = j * 90;
+        prevYaw = yaw = j * 90;
         float f1 = b.z;
         float f2 = b.A;
         float f3 = b.z;
@@ -81,7 +81,7 @@ public class Painting extends kh
         if(j == 3)
             f6 -= c(b.z);
         f5 += c(b.A);
-        a((double)f4, (double)f5, (double)f6);
+        setPosition((double)f4, (double)f5, (double)f6);
         float f8 = -0.00625F;
         au.c(f4 - f1 - f8, f5 - f2 - f8, f6 - f3 - f8, f4 + f1 + f8, f5 + f2 + f8, f6 + f3 + f8);
     }
@@ -99,13 +99,13 @@ public class Painting extends kh
         {
             c = 0;
             F();
-            ag.a(((kh) (new Item(ag, ak, al, am, new ev(di.aq)))));
+            ag.a(((Entity) (new Item(ag, posX, posY, posZ, new ev(di.aq)))));
         }
     }
 
     public boolean i()
     {
-        if(ag.a(((kh) (this)), au).size() > 0)
+        if(ag.a(((Entity) (this)), au).size() > 0)
             return false;
         int j = b.z / 16;
         int k = b.A / 16;
@@ -113,14 +113,14 @@ public class Painting extends kh
         int i1 = tileY;
         int j1 = tileZ;
         if(dir == 0)
-            l = eo.b(ak - (double)((float)b.z / 32F));
+            l = MathLib.castIgnoringSign(posX - (double)((float)b.z / 32F));
         if(dir == 1)
-            j1 = eo.b(am - (double)((float)b.z / 32F));
+            j1 = MathLib.castIgnoringSign(posZ - (double)((float)b.z / 32F));
         if(dir == 2)
-            l = eo.b(ak - (double)((float)b.z / 32F));
+            l = MathLib.castIgnoringSign(posX - (double)((float)b.z / 32F));
         if(dir == 3)
-            j1 = eo.b(am - (double)((float)b.z / 32F));
-        i1 = eo.b(al - (double)((float)b.A / 32F));
+            j1 = MathLib.castIgnoringSign(posZ - (double)((float)b.z / 32F));
+        i1 = MathLib.castIgnoringSign(posY - (double)((float)b.A / 32F));
         for(int k1 = 0; k1 < j; k1++)
         {
             for(int l1 = 0; l1 < k; l1++)
@@ -136,7 +136,7 @@ public class Painting extends kh
 
         }
 
-        java.util.List list = ag.b(((kh) (this)), au);
+        java.util.List list = ag.b(((Entity) (this)), au);
         for(int i2 = 0; i2 < list.size(); i2++)
             if(list.get(i2) instanceof Painting)
                 return false;
@@ -149,14 +149,14 @@ public class Painting extends kh
         return true;
     }
 
-    public boolean a(kh kh1, int j)
+    public boolean a(Entity entity1, int j)
     {
         F();
-        ag.a(((kh) (new Item(ag, ak, al, am, new ev(di.aq)))));
+        ag.a(((Entity) (new Item(ag, posX, posY, posZ, new ev(di.aq)))));
         return true;
     }
 
-    public void a(TagCompound tagCompound1)
+    public void writeToTag(TagCompound tagCompound1)
     {
         tagCompound1.set("Dir", (byte) dir);
         tagCompound1.set("Motive", b.motive);
@@ -165,7 +165,7 @@ public class Painting extends kh
         tagCompound1.set("TileZ", tileZ);
     }
 
-    public void b(TagCompound tagCompound1)
+    public void readFromTag(TagCompound tagCompound1)
     {
         dir = ((int) (tagCompound1.getByte("Dir")));
         tileX = tagCompound1.getInt("TileX");
diff --git "a/temp\\src\\java/PrimedTnt.java" "b/src\\main\\java/PrimedTnt.java"
index ed285b9..2d44160 100644
--- "a/temp\\src\\java/PrimedTnt.java"
+++ "b/src\\main\\java/PrimedTnt.java"
@@ -3,7 +3,7 @@
 // Source File Name:   SourceFile
 
 
-public class PrimedTnt extends kh
+public class PrimedTnt extends Entity
 {
 
     public int a;
@@ -20,16 +20,16 @@ public class PrimedTnt extends kh
     public PrimedTnt(World world1, float f, float f1, float f2)
     {
         this(world1);
-        a((double)f, (double)f1, (double)f2);
+        setPosition((double)f, (double)f1, (double)f2);
         float f3 = (float)(java.lang.Math.random() * 3.1415927410125732D * 2D);
-        an = -eo.a((f3 * 3.141593F) / 180F) * 0.02F;
-        ao = 0.20000000298023224D;
-        ap = -eo.b((f3 * 3.141593F) / 180F) * 0.02F;
+        motionX = -MathLib.sin((f3 * 3.141593F) / 180F) * 0.02F;
+        motionY = 0.20000000298023224D;
+        motionZ = -MathLib.cos((f3 * 3.141593F) / 180F) * 0.02F;
         aG = false;
         a = 80;
-        ah = f;
-        ai = f1;
-        aj = f2;
+        prevPosX = f;
+        prevPosY = f1;
+        prevPosZ = f2;
     }
 
     public boolean c_()
@@ -39,19 +39,19 @@ public class PrimedTnt extends kh
 
     public void e_()
     {
-        ah = ak;
-        ai = al;
-        aj = am;
-        ao -= 0.039999999105930328D;
-        c(an, ao, ap);
-        an *= 0.98000001907348633D;
-        ao *= 0.98000001907348633D;
-        ap *= 0.98000001907348633D;
-        if(av)
+        prevPosX = posX;
+        prevPosY = posY;
+        prevPosZ = posZ;
+        motionY -= 0.039999999105930328D;
+        c(motionX, motionY, motionZ);
+        motionX *= 0.98000001907348633D;
+        motionY *= 0.98000001907348633D;
+        motionZ *= 0.98000001907348633D;
+        if(onGround)
         {
-            an *= 0.69999998807907104D;
-            ap *= 0.69999998807907104D;
-            ao *= -0.5D;
+            motionX *= 0.69999998807907104D;
+            motionZ *= 0.69999998807907104D;
+            motionY *= -0.5D;
         }
         if(a-- <= 0)
         {
@@ -59,22 +59,22 @@ public class PrimedTnt extends kh
             i();
         } else
         {
-            ag.a("smoke", ak, al + 0.5D, am, 0.0D, 0.0D, 0.0D);
+            ag.a("smoke", posX, posY + 0.5D, posZ, 0.0D, 0.0D, 0.0D);
         }
     }
 
     private void i()
     {
         float f = 4F;
-        ag.a(((kh) (null)), ak, al, am, f);
+        ag.a(((Entity) (null)), posX, posY, posZ, f);
     }
 
-    protected void a(TagCompound tagCompound1)
+    protected void writeToTag(TagCompound tagCompound1)
     {
         tagCompound1.set("Fuse", (byte)a);
     }
 
-    protected void b(TagCompound tagCompound1)
+    protected void readFromTag(TagCompound tagCompound1)
     {
         a = ((int) (tagCompound1.getByte("Fuse")));
     }
diff --git "a/temp\\src\\java/Skeleton.java" "b/temp\\src\\java/Skeleton.java"
deleted file mode 100644
index 74d1f2e..0000000
--- "a/temp\\src\\java/Skeleton.java"
+++ /dev/null
@@ -1,76 +0,0 @@
-// Jad home page: http://www.kpdus.com/jad.html
-// Decompiler options: fullnames deadcode fieldsfirst safe 
-// Source File Name:   SourceFile
-
-public class Skeleton extends Monster
-{
-
-    public Skeleton(World world1)
-    {
-        super(world1);
-        texture = "/mob/skeleton.png";
-    }
-
-    protected String c()
-    {
-        return "mob.skeleton";
-    }
-
-    protected String d()
-    {
-        return "mob.skeletonhurt";
-    }
-
-    protected String e()
-    {
-        return "mob.skeletonhurt";
-    }
-
-    public void j()
-    {
-        if(ag.b())
-        {
-            float f = a(1.0F);
-            if(f > 0.5F && ag.i(eo.b(ak), eo.b(al), eo.b(am)) && aQ.nextFloat() * 30F < (f - 0.4F) * 2.0F)
-                aT = 300;
-        }
-        super.j();
-    }
-
-    protected void a(kh kh1, float f)
-    {
-        if(f < 10F)
-        {
-            double d1 = kh1.ak - ak;
-            double d2 = kh1.am - am;
-            if(attackTime == 0)
-            {
-                Arrow arrow1 = new Arrow(ag, ((Mob) (this)));
-                arrow1.al += 1.3999999761581421D;
-                double d3 = kh1.al - 0.20000000298023224D - arrow1.al;
-                float f1 = eo.a(d1 * d1 + d2 * d2) * 0.2F;
-                ag.a(((kh) (this)), "random.bow", 1.0F, 1.0F / (aQ.nextFloat() * 0.4F + 0.8F));
-                ag.a(((kh) (arrow1)));
-                arrow1.a(d1, d3 + (double)f1, d2, 0.6F, 12F);
-                attackTime = 30;
-            }
-            aq = (float)((java.lang.Math.atan2(d2, d1) * 180D) / 3.1415927410125732D) - 90F;
-            g = true;
-        }
-    }
-
-    public void a(TagCompound tagCompound)
-    {
-        super.a(tagCompound);
-    }
-
-    public void b(TagCompound tagCompound)
-    {
-        super.b(tagCompound);
-    }
-
-    protected int g()
-    {
-        return di.j.aS;
-    }
-}
diff --git "a/temp\\src\\java/Slime.java" "b/src\\main\\java/Slime.java"
index 9344c02..ede6b8c 100644
--- "a/temp\\src\\java/Slime.java"
+++ "b/src\\main\\java/Slime.java"
@@ -2,7 +2,7 @@
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-public class Slime extends Mob
+public class Slime extends EntityMob
     implements co
 {
 
@@ -17,9 +17,9 @@ public class Slime extends Mob
         d = 0;
         c = 1;
         texture = "/mob/slime.png";
-        c = 1 << aQ.nextInt(3);
+        c = 1 << rnd.nextInt(3);
         aB = 0.0F;
-        d = aQ.nextInt(20) + 10;
+        d = rnd.nextInt(20) + 10;
         c(c);
     }
 
@@ -28,39 +28,39 @@ public class Slime extends Mob
         c = i;
         a(0.6F * (float)i, 0.6F * (float)i);
         health = i * i;
-        a(ak, al, am);
+        setPosition(posX, posY, posZ);
     }
 
-    public void a(TagCompound tagCompound1)
+    public void writeToTag(TagCompound tagCompound1)
     {
-        super.a(tagCompound1);
+        super.writeToTag(tagCompound1);
         tagCompound1.set("Size", c - 1);
     }
 
-    public void b(TagCompound tagCompound1)
+    public void readFromTag(TagCompound tagCompound1)
     {
-        super.b(tagCompound1);
+        super.readFromTag(tagCompound1);
         c = tagCompound1.getInt("Size") + 1;
     }
 
     public void e_()
     {
         b = a;
-        boolean flag = av;
+        boolean flag = onGround;
         super.e_();
-        if(av && !flag)
+        if(onGround && !flag)
         {
             for(int i = 0; i < c * 8; i++)
             {
-                float f1 = aQ.nextFloat() * 3.141593F * 2.0F;
-                float f2 = aQ.nextFloat() * 0.5F + 0.5F;
-                float f3 = eo.a(f1) * (float)c * 0.5F * f2;
-                float f4 = eo.b(f1) * (float)c * 0.5F * f2;
-                ag.a("slime", ak + (double)f3, au.b, am + (double)f4, 0.0D, 0.0D, 0.0D);
+                float f1 = rnd.nextFloat() * 3.141593F * 2.0F;
+                float f2 = rnd.nextFloat() * 0.5F + 0.5F;
+                float f3 = MathLib.sin(f1) * (float)c * 0.5F * f2;
+                float f4 = MathLib.cos(f1) * (float)c * 0.5F * f2;
+                ag.a("slime", posX + (double)f3, au.b, posZ + (double)f4, 0.0D, 0.0D, 0.0D);
             }
 
             if(c > 2)
-                ag.a(((kh) (this)), "mob.slime", f(), ((aQ.nextFloat() - aQ.nextFloat()) * 0.2F + 1.0F) / 0.8F);
+                ag.a(((Entity) (this)), "mob.slime", f(), ((rnd.nextFloat() - rnd.nextFloat()) * 0.2F + 1.0F) / 0.8F);
             a = -0.5F;
         }
         a = a * 0.6F;
@@ -68,24 +68,24 @@ public class Slime extends Mob
 
     protected void b_()
     {
-        Player player1 = ag.a(((kh) (this)), 16D);
-        if(player1 != null)
-            b(((kh) (player1)), 10F);
-        if(av && d-- <= 0)
+        EntityPlayer entityPlayer1 = ag.a(((Entity) (this)), 16D);
+        if(entityPlayer1 != null)
+            b(((Entity) (entityPlayer1)), 10F);
+        if(onGround && d-- <= 0)
         {
-            d = aQ.nextInt(20) + 10;
-            if(player1 != null)
+            d = rnd.nextInt(20) + 10;
+            if(entityPlayer1 != null)
                 d /= 3;
             Y = true;
             if(c > 1)
-                ag.a(((kh) (this)), "mob.slime", f(), ((aQ.nextFloat() - aQ.nextFloat()) * 0.2F + 1.0F) * 0.8F);
+                ag.a(((Entity) (this)), "mob.slime", f(), ((rnd.nextFloat() - rnd.nextFloat()) * 0.2F + 1.0F) * 0.8F);
             a = 1.0F;
-            V = 1.0F - aQ.nextFloat() * 2.0F;
+            V = 1.0F - rnd.nextFloat() * 2.0F;
             W = 1 * c;
         } else
         {
             Y = false;
-            if(av)
+            if(onGround)
                 V = W = 0.0F;
         }
     }
@@ -100,18 +100,18 @@ public class Slime extends Mob
                 float f2 = (((float)(i / 2) - 0.5F) * (float)c) / 4F;
                 Slime slime1 = new Slime(ag);
                 slime1.c(c / 2);
-                slime1.c(ak + (double)f1, al + 0.5D, am + (double)f2, aQ.nextFloat() * 360F, 0.0F);
-                ag.a(((kh) (slime1)));
+                slime1.c(posX + (double)f1, posY + 0.5D, posZ + (double)f2, rnd.nextFloat() * 360F, 0.0F);
+                ag.a(((Entity) (slime1)));
             }
 
         }
         super.F();
     }
 
-    public void b(Player player1)
+    public void onCollideWithPlayer(EntityPlayer entityPlayer1)
     {
-        if(c > 1 && c(((kh) (player1))) && (double)d(((kh) (player1))) < 0.59999999999999998D * (double)c && player1.a(((kh) (this)), c))
-            ag.a(((kh) (this)), "mob.slimeattack", 1.0F, (aQ.nextFloat() - aQ.nextFloat()) * 0.2F + 1.0F);
+        if(c > 1 && c(((Entity) (entityPlayer1))) && (double) squareDistance(((Entity) (entityPlayer1))) < 0.59999999999999998D * (double)c && entityPlayer1.a(((Entity) (this)), c))
+            ag.a(((Entity) (this)), "mob.slimeattack", 1.0F, (rnd.nextFloat() - rnd.nextFloat()) * 0.2F + 1.0F);
     }
 
     protected String d()
@@ -134,8 +134,8 @@ public class Slime extends Mob
 
     public boolean a()
     {
-        Chunk chunk1 = ag.a(eo.b(ak), eo.b(al));
-        return (c == 1 || ag.l > 0) && aQ.nextInt(10) == 0 && chunk1.a(0x3ad8025fL).nextInt(10) == 0 && al < 16D;
+        Chunk chunk1 = ag.a(MathLib.castIgnoringSign(posX), MathLib.castIgnoringSign(posY));
+        return (c == 1 || ag.l > 0) && rnd.nextInt(10) == 0 && chunk1.a(0x3ad8025fL).nextInt(10) == 0 && posY < 16D;
     }
 
     protected float f()
diff --git "a/temp\\src\\java/Snowball.java" "b/src\\main\\java/Snowball.java"
index 2dcdd5b..7a6e734 100644
--- "a/temp\\src\\java/Snowball.java"
+++ "b/src\\main\\java/Snowball.java"
@@ -2,7 +2,7 @@
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-public class Snowball extends kh
+public class Snowball extends Entity
 {
 
     private int xTile;
@@ -11,7 +11,7 @@ public class Snowball extends kh
     private int inTile;
     private boolean inGround;
     public int shake;
-    private Mob g;
+    private EntityMob g;
     private int h;
     private int i;
 
@@ -35,7 +35,7 @@ public class Snowball extends kh
         return d1 < d2 * d2;
     }
 
-    public Snowball(World world1, Mob mob1)
+    public Snowball(World world1, EntityMob entityMob1)
     {
         super(world1);
         xTile = -1;
@@ -45,40 +45,40 @@ public class Snowball extends kh
         inGround = false;
         shake = 0;
         i = 0;
-        g = mob1;
+        g = entityMob1;
         a(0.25F, 0.25F);
-        c(mob1.ak, mob1.al, mob1.am, mob1.aq, mob1.ar);
-        ak -= eo.b((aq / 180F) * 3.141593F) * 0.16F;
-        al -= 0.10000000149011612D;
-        am -= eo.a((aq / 180F) * 3.141593F) * 0.16F;
-        a(ak, al, am);
+        c(entityMob1.posX, entityMob1.posY, entityMob1.posZ, entityMob1.yaw, entityMob1.pitch);
+        posX -= MathLib.cos((yaw / 180F) * 3.141593F) * 0.16F;
+        posY -= 0.10000000149011612D;
+        posZ -= MathLib.sin((yaw / 180F) * 3.141593F) * 0.16F;
+        setPosition(posX, posY, posZ);
         aB = 0.0F;
         float f1 = 0.4F;
-        an = -eo.a((aq / 180F) * 3.141593F) * eo.b((ar / 180F) * 3.141593F) * f1;
-        ap = eo.b((aq / 180F) * 3.141593F) * eo.b((ar / 180F) * 3.141593F) * f1;
-        ao = -eo.a((ar / 180F) * 3.141593F) * f1;
-        a(an, ao, ap, 1.5F, 1.0F);
+        motionX = -MathLib.sin((yaw / 180F) * 3.141593F) * MathLib.cos((pitch / 180F) * 3.141593F) * f1;
+        motionZ = MathLib.cos((yaw / 180F) * 3.141593F) * MathLib.cos((pitch / 180F) * 3.141593F) * f1;
+        motionY = -MathLib.sin((pitch / 180F) * 3.141593F) * f1;
+        a(motionX, motionY, motionZ, 1.5F, 1.0F);
     }
 
     public void a(double d1, double d2, double d3, float f1, 
             float f2)
     {
-        float f3 = eo.a(d1 * d1 + d2 * d2 + d3 * d3);
+        float f3 = MathLib.sqrt(d1 * d1 + d2 * d2 + d3 * d3);
         d1 /= f3;
         d2 /= f3;
         d3 /= f3;
-        d1 += aQ.nextGaussian() * 0.0074999998323619366D * (double)f2;
-        d2 += aQ.nextGaussian() * 0.0074999998323619366D * (double)f2;
-        d3 += aQ.nextGaussian() * 0.0074999998323619366D * (double)f2;
+        d1 += rnd.nextGaussian() * 0.0074999998323619366D * (double)f2;
+        d2 += rnd.nextGaussian() * 0.0074999998323619366D * (double)f2;
+        d3 += rnd.nextGaussian() * 0.0074999998323619366D * (double)f2;
         d1 *= f1;
         d2 *= f1;
         d3 *= f1;
-        an = d1;
-        ao = d2;
-        ap = d3;
-        float f4 = eo.a(d1 * d1 + d3 * d3);
-        as = aq = (float)((java.lang.Math.atan2(d1, d3) * 180D) / 3.1415927410125732D);
-        at = ar = (float)((java.lang.Math.atan2(d2, f4) * 180D) / 3.1415927410125732D);
+        motionX = d1;
+        motionY = d2;
+        motionZ = d3;
+        float f4 = MathLib.sqrt(d1 * d1 + d3 * d3);
+        prevYaw = yaw = (float)((java.lang.Math.atan2(d1, d3) * 180D) / 3.1415927410125732D);
+        prevPitch = pitch = (float)((java.lang.Math.atan2(d2, f4) * 180D) / 3.1415927410125732D);
         h = 0;
     }
 
@@ -93,9 +93,9 @@ public class Snowball extends kh
             if(j != inTile)
             {
                 inGround = false;
-                an *= aQ.nextFloat() * 0.2F;
-                ao *= aQ.nextFloat() * 0.2F;
-                ap *= aQ.nextFloat() * 0.2F;
+                motionX *= rnd.nextFloat() * 0.2F;
+                motionY *= rnd.nextFloat() * 0.2F;
+                motionZ *= rnd.nextFloat() * 0.2F;
                 h = 0;
                 i = 0;
             } else
@@ -109,56 +109,56 @@ public class Snowball extends kh
         {
             i++;
         }
-        aj aj1 = ((aj)null).b(ak, al, am);
-        aj aj2 = ((aj)null).b(ak + an, al + ao, am + ap);
-        mf mf1 = ag.a(aj1, aj2);
-        aj1 = ((aj)null).b(ak, al, am);
-        aj2 = ((aj)null).b(ak + an, al + ao, am + ap);
+        Vec3 vec31 = ((Vec3)null).recycle(posX, posY, posZ);
+        Vec3 vec32 = ((Vec3)null).recycle(posX + motionX, posY + motionY, posZ + motionZ);
+        mf mf1 = ag.a(vec31, vec32);
+        vec31 = ((Vec3)null).recycle(posX, posY, posZ);
+        vec32 = ((Vec3)null).recycle(posX + motionX, posY + motionY, posZ + motionZ);
         if(mf1 != null)
-            aj2 = ((aj)null).b(mf1.f.a, mf1.f.b, mf1.f.c);
-        kh kh1 = null;
-        java.util.List list = ag.b(((kh) (this)), au.a(an, ao, ap).b(1.0D, 1.0D, 1.0D));
+            vec32 = ((Vec3)null).recycle(mf1.f.x, mf1.f.y, mf1.f.z);
+        Entity entity1 = null;
+        java.util.List list = ag.b(((Entity) (this)), au.a(motionX, motionY, motionZ).b(1.0D, 1.0D, 1.0D));
         double d1 = 0.0D;
         for(int k = 0; k < list.size(); k++)
         {
-            kh kh2 = (kh)list.get(k);
-            if(!kh2.c_() || kh2 == g && i < 5)
+            Entity entity2 = (Entity)list.get(k);
+            if(!entity2.c_() || entity2 == g && i < 5)
                 continue;
             float f3 = 0.3F;
-            cf cf1 = kh2.au.b(f3, f3, f3);
-            mf mf2 = cf1.a(aj1, aj2);
+            cf cf1 = entity2.au.b(f3, f3, f3);
+            mf mf2 = cf1.a(vec31, vec32);
             if(mf2 == null)
                 continue;
-            double d2 = aj1.c(mf2.f);
+            double d2 = vec31.squareDistance(mf2.f);
             if(d2 < d1 || d1 == 0.0D)
             {
-                kh1 = kh2;
+                entity1 = entity2;
                 d1 = d2;
             }
         }
 
-        if(kh1 != null)
-            mf1 = new mf(kh1);
+        if(entity1 != null)
+            mf1 = new mf(entity1);
         if(mf1 != null)
         {
             if(mf1.g != null)
-                if(!mf1.g.a(((kh) (g)), 0));
+                if(!mf1.g.a(((Entity) (g)), 0));
             for(int l = 0; l < 8; l++)
-                ag.a("snowballpoof", ak, al, am, 0.0D, 0.0D, 0.0D);
+                ag.a("snowballpoof", posX, posY, posZ, 0.0D, 0.0D, 0.0D);
 
             F();
         }
-        ak += an;
-        al += ao;
-        am += ap;
-        float f1 = eo.a(an * an + ap * ap);
-        aq = (float)((java.lang.Math.atan2(an, ap) * 180D) / 3.1415927410125732D);
-        for(ar = (float)((java.lang.Math.atan2(ao, f1) * 180D) / 3.1415927410125732D); ar - at < -180F; at -= 360F);
-        for(; ar - at >= 180F; at += 360F);
-        for(; aq - as < -180F; as -= 360F);
-        for(; aq - as >= 180F; as += 360F);
-        ar = at + (ar - at) * 0.2F;
-        aq = as + (aq - as) * 0.2F;
+        posX += motionX;
+        posY += motionY;
+        posZ += motionZ;
+        float f1 = MathLib.sqrt(motionX * motionX + motionZ * motionZ);
+        yaw = (float)((java.lang.Math.atan2(motionX, motionZ) * 180D) / 3.1415927410125732D);
+        for(pitch = (float)((java.lang.Math.atan2(motionY, f1) * 180D) / 3.1415927410125732D); pitch - prevPitch < -180F; prevPitch -= 360F);
+        for(; pitch - prevPitch >= 180F; prevPitch += 360F);
+        for(; yaw - prevYaw < -180F; prevYaw -= 360F);
+        for(; yaw - prevYaw >= 180F; prevYaw += 360F);
+        pitch = prevPitch + (pitch - prevPitch) * 0.2F;
+        yaw = prevYaw + (yaw - prevYaw) * 0.2F;
         float f2 = 0.99F;
         float f4 = 0.03F;
         if(g_())
@@ -166,19 +166,19 @@ public class Snowball extends kh
             for(int i1 = 0; i1 < 4; i1++)
             {
                 float f5 = 0.25F;
-                ag.a("bubble", ak - an * (double)f5, al - ao * (double)f5, am - ap * (double)f5, an, ao, ap);
+                ag.a("bubble", posX - motionX * (double)f5, posY - motionY * (double)f5, posZ - motionZ * (double)f5, motionX, motionY, motionZ);
             }
 
             f2 = 0.8F;
         }
-        an *= f2;
-        ao *= f2;
-        ap *= f2;
-        ao -= f4;
-        a(ak, al, am);
+        motionX *= f2;
+        motionY *= f2;
+        motionZ *= f2;
+        motionY -= f4;
+        setPosition(posX, posY, posZ);
     }
 
-    public void a(TagCompound tagCompound1)
+    public void writeToTag(TagCompound tagCompound1)
     {
         tagCompound1.set("xTile", (short) xTile);
         tagCompound1.set("yTile", (short) yTile);
@@ -188,7 +188,7 @@ public class Snowball extends kh
         tagCompound1.set("inGround", (byte)(inGround ? 1 : 0));
     }
 
-    public void b(TagCompound tagCompound1)
+    public void readFromTag(TagCompound tagCompound1)
     {
         xTile = ((int) (tagCompound1.getShort("xTile")));
         yTile = ((int) (tagCompound1.getShort("yTile")));
@@ -198,12 +198,12 @@ public class Snowball extends kh
         inGround = tagCompound1.getByte("inGround") == 1;
     }
 
-    public void b(Player player1)
+    public void onCollideWithPlayer(EntityPlayer entityPlayer1)
     {
-        if(inGround && g == player1 && shake <= 0 && player1.b.a(new ev(di.j.aS, 1)))
+        if(inGround && g == entityPlayer1 && shake <= 0 && entityPlayer1.b.a(new ev(di.j.aS, 1)))
         {
-            ag.a(((kh) (this)), "random.pop", 0.2F, ((aQ.nextFloat() - aQ.nextFloat()) * 0.7F + 1.0F) * 2.0F);
-            player1.a_(((kh) (this)), 1);
+            ag.a(((Entity) (this)), "random.pop", 0.2F, ((rnd.nextFloat() - rnd.nextFloat()) * 0.7F + 1.0F) * 2.0F);
+            entityPlayer1.a_(((Entity) (this)), 1);
             F();
         }
     }
diff --git "a/temp\\src\\java/Spider.java" "b/temp\\src\\java/Spider.java"
deleted file mode 100644
index 47a40ab..0000000
--- "a/temp\\src\\java/Spider.java"
+++ /dev/null
@@ -1,88 +0,0 @@
-// Jad home page: http://www.kpdus.com/jad.html
-// Decompiler options: fullnames deadcode fieldsfirst safe 
-// Source File Name:   SourceFile
-
-public class Spider extends Monster
-{
-
-    public Spider(World world1)
-    {
-        super(world1);
-        texture = "/mob/spider.png";
-        a(1.4F, 0.9F);
-        aa = 0.8F;
-    }
-
-    public double h()
-    {
-        return (double)aD * 0.75D - 0.5D;
-    }
-
-    protected kh i()
-    {
-        float f = a(1.0F);
-        if(f < 0.5F)
-        {
-            double d1 = 16D;
-            return ((kh) (ag.a(((kh) (this)), d1)));
-        } else
-        {
-            return null;
-        }
-    }
-
-    protected String c()
-    {
-        return "mob.spider";
-    }
-
-    protected String d()
-    {
-        return "mob.spider";
-    }
-
-    protected String e()
-    {
-        return "mob.spiderdeath";
-    }
-
-    protected void a(kh kh1, float f)
-    {
-        float f1 = a(1.0F);
-        if(f1 > 0.5F && aQ.nextInt(100) == 0)
-        {
-            this.f = null;
-            return;
-        }
-        if(f > 2.0F && f < 6F && aQ.nextInt(10) == 0)
-        {
-            if(av)
-            {
-                double d1 = kh1.ak - ak;
-                double d2 = kh1.am - am;
-                float f2 = eo.a(d1 * d1 + d2 * d2);
-                an = (d1 / (double)f2) * 0.5D * 0.80000001192092896D + an * 0.20000000298023224D;
-                ap = (d2 / (double)f2) * 0.5D * 0.80000001192092896D + ap * 0.20000000298023224D;
-                ao = 0.40000000596046448D;
-            }
-        } else
-        {
-            super.a(kh1, f);
-        }
-    }
-
-    public void a(TagCompound tagCompound)
-    {
-        super.a(tagCompound);
-    }
-
-    public void b(TagCompound tagCompound)
-    {
-        super.b(tagCompound);
-    }
-
-    protected int g()
-    {
-        return di.I.aS;
-    }
-}
diff --git "a/temp\\src\\java/Tag.java" "b/src\\main\\java/Tag.java"
index 958e801..962a791 100644
--- "a/temp\\src\\java/Tag.java"
+++ "b/src\\main\\java/Tag.java"
@@ -7,34 +7,34 @@ import java.io.IOException;
 public abstract class Tag
 {
 
-    private String a;
+    private String name;
 
     public Tag()
     {
-        a = null;
+        name = null;
     }
 
-    abstract void a(java.io.DataOutput dataoutput) throws IOException;
+    abstract void serializeTo(java.io.DataOutput dataoutput) throws IOException;
 
-    abstract void a(java.io.DataInput datainput) throws IOException;
+    abstract void deserializeFrom(java.io.DataInput datainput) throws IOException;
 
-    public abstract byte a();
+    public abstract byte type();
 
-    public String b()
+    public String getName()
     {
-        if(a == null)
+        if(name == null)
             return "";
         else
-            return a;
+            return name;
     }
 
-    public Tag a(String s)
+    public Tag setName(String name)
     {
-        a = s;
+        this.name = name;
         return this;
     }
 
-    public static Tag b(java.io.DataInput datainput) throws IOException
+    public static Tag deserialize(java.io.DataInput datainput) throws IOException
     {
         byte byte0 = datainput.readByte();
         if(byte0 == 0)
@@ -42,23 +42,23 @@ public abstract class Tag
             return ((Tag) (new TagEnd()));
         } else
         {
-            Tag el1 = Tag.getTagByCode(byte0);
-            el1.a = datainput.readUTF();
-            el1.a(datainput);
-            return el1;
+            Tag tag = Tag.getTagByCode(byte0);
+            tag.name = datainput.readUTF();
+            tag.deserializeFrom(datainput);
+            return tag;
         }
     }
 
-    public static void a(Tag el1, java.io.DataOutput dataoutput) throws IOException
+    public static void serialize(Tag tag, java.io.DataOutput dataoutput) throws IOException
     {
-        dataoutput.writeByte(((int) (el1.a())));
-        if(el1.a() == 0)
+        dataoutput.writeByte(((int) (tag.type())));
+        if(tag.type() == 0)
         {
             return;
         } else
         {
-            dataoutput.writeUTF(el1.b());
-            el1.a(dataoutput);
+            dataoutput.writeUTF(tag.getName());
+            tag.serializeTo(dataoutput);
             return;
         }
     }
diff --git "a/temp\\src\\java/TagByte.java" "b/src\\main\\java/TagByte.java"
index d4bf451..54e2d96 100644
--- "a/temp\\src\\java/TagByte.java"
+++ "b/src\\main\\java/TagByte.java"
@@ -18,17 +18,17 @@ public class TagByte extends Tag
         a = byte0;
     }
 
-    void a(java.io.DataOutput dataoutput) throws IOException
+    void serializeTo(java.io.DataOutput dataoutput) throws IOException
     {
         dataoutput.writeByte(((int) (a)));
     }
 
-    void a(java.io.DataInput datainput) throws IOException
+    void deserializeFrom(java.io.DataInput datainput) throws IOException
     {
         a = datainput.readByte();
     }
 
-    public byte a()
+    public byte type()
     {
         return 1;
     }
diff --git "a/temp\\src\\java/TagByteArray.java" "b/src\\main\\java/TagByteArray.java"
index 4f4d532..48f68e4 100644
--- "a/temp\\src\\java/TagByteArray.java"
+++ "b/src\\main\\java/TagByteArray.java"
@@ -18,20 +18,20 @@ public class TagByteArray extends Tag
         a = abyte0;
     }
 
-    void a(java.io.DataOutput dataoutput) throws IOException
+    void serializeTo(java.io.DataOutput dataoutput) throws IOException
     {
         dataoutput.writeInt(a.length);
         dataoutput.write(a);
     }
 
-    void a(java.io.DataInput datainput) throws IOException
+    void deserializeFrom(java.io.DataInput datainput) throws IOException
     {
         int i = datainput.readInt();
         a = new byte[i];
         datainput.readFully(a);
     }
 
-    public byte a()
+    public byte type()
     {
         return 7;
     }
diff --git "a/temp\\src\\java/TagCompound.java" "b/src\\main\\java/TagCompound.java"
index cbb6377..a779bd8 100644
--- "a/temp\\src\\java/TagCompound.java"
+++ "b/src\\main\\java/TagCompound.java"
@@ -15,75 +15,75 @@ public class TagCompound extends Tag
         keyvalue = ((java.util.Map) (new HashMap()));
     }
 
-    void a(java.io.DataOutput dataoutput) throws IOException
+    void serializeTo(java.io.DataOutput dataoutput) throws IOException
     {
         Tag el1;
-        for(java.util.Iterator iterator = keyvalue.values().iterator(); iterator.hasNext(); Tag.a(el1, dataoutput))
+        for(java.util.Iterator iterator = keyvalue.values().iterator(); iterator.hasNext(); Tag.serialize(el1, dataoutput))
             el1 = (Tag)iterator.next();
 
         dataoutput.writeByte(0);
     }
 
-    void a(java.io.DataInput datainput) throws IOException
+    void deserializeFrom(java.io.DataInput datainput) throws IOException
     {
         keyvalue.clear();
         Tag el1;
-        for(; (el1 = Tag.b(datainput)).a() != 0; keyvalue.put(((Object) (el1.b())), ((Object) (el1))));
+        for(; (el1 = Tag.deserialize(datainput)).type() != 0; keyvalue.put(((Object) (el1.getName())), ((Object) (el1))));
     }
 
-    public byte a()
+    public byte type()
     {
         return 10;
     }
 
     public void set(String s, Tag el1)
     {
-        keyvalue.put(((Object) (s)), ((Object) (el1.a(s))));
+        keyvalue.put(((Object) (s)), ((Object) (el1.setName(s))));
     }
 
     public void set(String s, byte byte0)
     {
-        keyvalue.put(((Object) (s)), ((Object) ((new TagByte(byte0)).a(s))));
+        keyvalue.put(((Object) (s)), ((Object) ((new TagByte(byte0)).setName(s))));
     }
 
     public void set(String s, short word0)
     {
-        keyvalue.put(((Object) (s)), ((Object) ((new TagShort(word0)).a(s))));
+        keyvalue.put(((Object) (s)), ((Object) ((new TagShort(word0)).setName(s))));
     }
 
     public void set(String s, int i1)
     {
-        keyvalue.put(((Object) (s)), ((Object) ((new TagInt(i1)).a(s))));
+        keyvalue.put(((Object) (s)), ((Object) ((new TagInt(i1)).setName(s))));
     }
 
     public void set(String s, long l1)
     {
-        keyvalue.put(((Object) (s)), ((Object) ((new TagLong(l1)).a(s))));
+        keyvalue.put(((Object) (s)), ((Object) ((new TagLong(l1)).setName(s))));
     }
 
     public void set(String s, float f1)
     {
-        keyvalue.put(((Object) (s)), ((Object) ((new TagFloat(f1)).a(s))));
+        keyvalue.put(((Object) (s)), ((Object) ((new TagFloat(f1)).setName(s))));
     }
 
     public void set(String s, double d1)
     {
-        keyvalue.put(((Object) (s)), ((Object) ((new TagDouble(d1)).a(s))));
+        keyvalue.put(((Object) (s)), ((Object) ((new TagDouble(d1)).setName(s))));
     }
 
     public void set(String s, String s1)
     {
-        keyvalue.put(((Object) (s)), ((Object) ((new TagString(s1)).a(s))));
+        keyvalue.put(((Object) (s)), ((Object) ((new TagString(s1)).setName(s))));
     }
 
     public void set(String s, byte abyte0[])
     {
-        keyvalue.put(((Object) (s)), ((Object) ((new TagByteArray(abyte0)).a(s))));
+        keyvalue.put(((Object) (s)), ((Object) ((new TagByteArray(abyte0)).setName(s))));
     }
 
     public void set(String s, TagCompound tagCompound1)
     {
-        keyvalue.put(((Object) (s)), ((Object) (tagCompound1.a(s))));
+        keyvalue.put(((Object) (s)), ((Object) (tagCompound1.setName(s))));
     }
 
     public void set(String s, boolean flag)
@@ -160,7 +160,7 @@ public class TagCompound extends Tag
             return ((TagByteArray) keyvalue.get(((Object) (s)))).a;
     }
 
-    public TagCompound k(String s)
+    public TagCompound getCompound(String s)
     {
         if(!keyvalue.containsKey(((Object) (s))))
             return new TagCompound();
@@ -168,7 +168,7 @@ public class TagCompound extends Tag
             return (TagCompound) keyvalue.get(((Object) (s)));
     }
 
-    public TagList l(String s)
+    public TagList getList(String s)
     {
         if(!keyvalue.containsKey(((Object) (s))))
             return new TagList();
diff --git "a/temp\\src\\java/TagDouble.java" "b/src\\main\\java/TagDouble.java"
index 15cb5cf..4847628 100644
--- "a/temp\\src\\java/TagDouble.java"
+++ "b/src\\main\\java/TagDouble.java"
@@ -18,17 +18,17 @@ public class TagDouble extends Tag
         a = d;
     }
 
-    void a(java.io.DataOutput dataoutput) throws IOException
+    void serializeTo(java.io.DataOutput dataoutput) throws IOException
     {
         dataoutput.writeDouble(a);
     }
 
-    void a(java.io.DataInput datainput) throws IOException
+    void deserializeFrom(java.io.DataInput datainput) throws IOException
     {
         a = datainput.readDouble();
     }
 
-    public byte a()
+    public byte type()
     {
         return 6;
     }
diff --git "a/temp\\src\\java/TagEnd.java" "b/src\\main\\java/TagEnd.java"
index 909349c..81f8f6d 100644
--- "a/temp\\src\\java/TagEnd.java"
+++ "b/src\\main\\java/TagEnd.java"
@@ -9,15 +9,15 @@ public class TagEnd extends Tag
     {
     }
 
-    void a(java.io.DataInput datainput)
+    void deserializeFrom(java.io.DataInput datainput)
     {
     }
 
-    void a(java.io.DataOutput dataoutput)
+    void serializeTo(java.io.DataOutput dataoutput)
     {
     }
 
-    public byte a()
+    public byte type()
     {
         return 0;
     }
diff --git "a/temp\\src\\java/TagFloat.java" "b/src\\main\\java/TagFloat.java"
index 8c0a098..44f4a71 100644
--- "a/temp\\src\\java/TagFloat.java"
+++ "b/src\\main\\java/TagFloat.java"
@@ -18,17 +18,17 @@ public class TagFloat extends Tag
         a = f1;
     }
 
-    void a(java.io.DataOutput dataoutput) throws IOException
+    void serializeTo(java.io.DataOutput dataoutput) throws IOException
     {
         dataoutput.writeFloat(a);
     }
 
-    void a(java.io.DataInput datainput) throws IOException
+    void deserializeFrom(java.io.DataInput datainput) throws IOException
     {
         a = datainput.readFloat();
     }
 
-    public byte a()
+    public byte type()
     {
         return 5;
     }
diff --git "a/temp\\src\\java/TagInt.java" "b/src\\main\\java/TagInt.java"
index 1979bee..39e2408 100644
--- "a/temp\\src\\java/TagInt.java"
+++ "b/src\\main\\java/TagInt.java"
@@ -18,17 +18,17 @@ public class TagInt extends Tag
         a = i;
     }
 
-    void a(java.io.DataOutput dataoutput) throws IOException
+    void serializeTo(java.io.DataOutput dataoutput) throws IOException
     {
         dataoutput.writeInt(a);
     }
 
-    void a(java.io.DataInput datainput) throws IOException
+    void deserializeFrom(java.io.DataInput datainput) throws IOException
     {
         a = datainput.readInt();
     }
 
-    public byte a()
+    public byte type()
     {
         return 3;
     }
diff --git "a/temp\\src\\java/TagList.java" "b/src\\main\\java/TagList.java"
index 2c16708..e8ca9ff 100644
--- "a/temp\\src\\java/TagList.java"
+++ "b/src\\main\\java/TagList.java"
@@ -2,70 +2,73 @@
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
+import java.io.DataInput;
+import java.io.DataOutput;
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.List;
 
 public class TagList extends Tag
 {
 
-    private java.util.List a;
-    private byte b;
+    private List list;
+    private byte type;
 
     public TagList()
     {
-        a = ((java.util.List) (new ArrayList()));
+        list = ((List) (new ArrayList()));
     }
 
-    void a(java.io.DataOutput dataoutput) throws IOException
+    void serializeTo(DataOutput dataoutput) throws IOException
     {
-        if(a.size() > 0)
-            b = ((Tag)a.get(0)).a();
+        if(list.size() > 0)
+            type = ((Tag) list.get(0)).type();
         else
-            b = 1;
-        dataoutput.writeByte(((int) (b)));
-        dataoutput.writeInt(a.size());
-        for(int i = 0; i < a.size(); i++)
-            ((Tag)a.get(i)).a(dataoutput);
+            type = 1;
+        dataoutput.writeByte(((int) (type)));
+        dataoutput.writeInt(list.size());
+        for(int i = 0; i < list.size(); i++)
+            ((Tag) list.get(i)).serializeTo(dataoutput);
 
     }
 
-    void a(java.io.DataInput datainput) throws IOException
+    void deserializeFrom(DataInput datainput) throws IOException
     {
-        b = datainput.readByte();
+        type = datainput.readByte();
         int i = datainput.readInt();
-        a = ((java.util.List) (new ArrayList()));
+        list = ((List) (new ArrayList()));
         for(int j = 0; j < i; j++)
         {
-            Tag el1 = Tag.getTagByCode(b);
-            el1.a(datainput);
-            a.add(((Object) (el1)));
+            Tag el1 = Tag.getTagByCode(type);
+            el1.deserializeFrom(datainput);
+            list.add(((Object) (el1)));
         }
 
     }
 
-    public byte a()
+    public byte type()
     {
         return 9;
     }
 
     public String toString()
     {
-        return (new StringBuilder()).append("").append(a.size()).append(" entries of type ").append(Tag.getTagNameByCode(b)).toString();
+        return (new StringBuilder()).append("").append(list.size()).append(" entries of type ").append(Tag.getTagNameByCode(type)).toString();
     }
 
-    public void a(Tag el1)
+    public void add(Tag tag)
     {
-        b = el1.a();
-        a.add(((Object) (el1)));
+        type = tag.type();
+        list.add(((Object) (tag)));
     }
 
-    public Tag a(int i)
+    public Tag get(int i)
     {
-        return (Tag)a.get(i);
+        return (Tag) list.get(i);
     }
 
-    public int c()
+    public int size()
     {
-        return a.size();
+        return list.size();
     }
 }
diff --git "a/temp\\src\\java/TagLong.java" "b/src\\main\\java/TagLong.java"
index c1f9402..041059d 100644
--- "a/temp\\src\\java/TagLong.java"
+++ "b/src\\main\\java/TagLong.java"
@@ -18,17 +18,17 @@ public class TagLong extends Tag
         a = l;
     }
 
-    void a(java.io.DataOutput dataoutput) throws IOException
+    void serializeTo(java.io.DataOutput dataoutput) throws IOException
     {
         dataoutput.writeLong(a);
     }
 
-    void a(java.io.DataInput datainput) throws IOException
+    void deserializeFrom(java.io.DataInput datainput) throws IOException
     {
         a = datainput.readLong();
     }
 
-    public byte a()
+    public byte type()
     {
         return 4;
     }
diff --git "a/temp\\src\\java/TagShort.java" "b/src\\main\\java/TagShort.java"
index b0a0096..44979aa 100644
--- "a/temp\\src\\java/TagShort.java"
+++ "b/src\\main\\java/TagShort.java"
@@ -18,17 +18,17 @@ public class TagShort extends Tag
         a = word0;
     }
 
-    void a(java.io.DataOutput dataoutput) throws IOException
+    void serializeTo(java.io.DataOutput dataoutput) throws IOException
     {
         dataoutput.writeShort(((int) (a)));
     }
 
-    void a(java.io.DataInput datainput) throws IOException
+    void deserializeFrom(java.io.DataInput datainput) throws IOException
     {
         a = datainput.readShort();
     }
 
-    public byte a()
+    public byte type()
     {
         return 2;
     }
diff --git "a/temp\\src\\java/TagString.java" "b/src\\main\\java/TagString.java"
index e39a0f4..9dace51 100644
--- "a/temp\\src\\java/TagString.java"
+++ "b/src\\main\\java/TagString.java"
@@ -22,17 +22,17 @@ public class TagString extends Tag
             return;
     }
 
-    void a(java.io.DataOutput dataoutput) throws IOException
+    void serializeTo(java.io.DataOutput dataoutput) throws IOException
     {
         dataoutput.writeUTF(a);
     }
 
-    void a(java.io.DataInput datainput) throws IOException
+    void deserializeFrom(java.io.DataInput datainput) throws IOException
     {
         a = datainput.readUTF();
     }
 
-    public byte a()
+    public byte type()
     {
         return 8;
     }
diff --git "a/src\\main\\java/Vec3.java" "b/src\\main\\java/Vec3.java"
new file mode 100644
index 0000000..67121a4
--- /dev/null
+++ "b/src\\main\\java/Vec3.java"
@@ -0,0 +1,178 @@
+// Jad home page: http://www.kpdus.com/jad.html
+// Decompiler options: fullnames deadcode fieldsfirst safe 
+// Source File Name:   SourceFile
+
+import java.util.ArrayList;
+
+public class Vec3
+{
+
+    private static java.util.List vecs = new ArrayList();
+    private static int i = 0;
+    public double x;
+    public double y;
+    public double z;
+
+    public static Vec3 create(double x, double y, double z)
+    {
+        return new Vec3(x, y, z);
+    }
+
+    public static void a()
+    {
+        i = 0;
+    }
+
+    public static Vec3 recycle(double x, double y, double z)
+    {
+        if(i >= vecs.size())
+            vecs.add(((Object) (Vec3.create(0.0D, 0.0D, 0.0D))));
+        return ((Vec3) vecs.get(i++)).set(x, y, z);
+    }
+
+    private Vec3(double x, double y, double z)
+    {
+        if(x == -0D)
+            x = 0.0D;
+        if(y == -0D)
+            y = 0.0D;
+        if(z == -0D)
+            z = 0.0D;
+        this.x = x;
+        this.y = y;
+        this.z = z;
+    }
+
+    private Vec3 set(double x, double y, double z)
+    {
+        this.x = x;
+        this.y = y;
+        this.z = z;
+        return this;
+    }
+
+    public Vec3 subtract(Vec3 vec31)
+    {
+        return Vec3.recycle(vec31.x - x, vec31.y - y, vec31.z - z);
+    }
+
+    public Vec3 normalize()
+    {
+        double dist = MathLib.sqrt(x * x + y * y + z * z);
+        if(dist < 0.0001D)
+            return Vec3.recycle(0.0D, 0.0D, 0.0D);
+        else
+            return Vec3.recycle(x / dist, y / dist, z / dist);
+    }
+
+    public Vec3 crossProduct(Vec3 vec)
+    {
+        return Vec3.recycle(y * vec.z - z * vec.y, z * vec.x - x * vec.z, x * vec.y - y * vec.x);
+    }
+
+    public Vec3 add(double x, double y, double z)
+    {
+        return Vec3.recycle(this.x + x, this.y + y, this.z + z);
+    }
+
+    public double squareDistance(Vec3 vec)
+    {
+        double d1 = vec.x - x;
+        double d2 = vec.y - y;
+        double d3 = vec.z - z;
+        return (double) MathLib.sqrt(d1 * d1 + d2 * d2 + d3 * d3);
+    }
+
+    public double distance(Vec3 vec)
+    {
+        double d1 = vec.x - x;
+        double d2 = vec.y - y;
+        double d3 = vec.z - z;
+        return d1 * d1 + d2 * d2 + d3 * d3;
+    }
+
+    public double distance(double x, double y, double z)
+    {
+        double d4 = x - this.x;
+        double d5 = y - this.y;
+        double d6 = z - this.z;
+        return d4 * d4 + d5 * d5 + d6 * d6;
+    }
+
+    public double magnitude()
+    {
+        return (double) MathLib.sqrt(x * x + y * y + z * z);
+    }
+
+    public Vec3 getIntermediateWithXValue(Vec3 vec, double x)
+    {
+        double d2 = vec.x - this.x;
+        double d3 = vec.y - y;
+        double d4 = vec.z - z;
+        if(d2 * d2 < 1.0000000116860974E-007D)
+            return null;
+        double d5 = (x - this.x) / d2;
+        if(d5 < 0.0D || d5 > 1.0D)
+            return null;
+        else
+            return Vec3.recycle(this.x + d2 * d5, y + d3 * d5, z + d4 * d5);
+    }
+
+    public Vec3 getIntermediateWithYValue(Vec3 vec, double y)
+    {
+        double d2 = vec.x - x;
+        double d3 = vec.y - this.y;
+        double d4 = vec.z - z;
+        if(d3 * d3 < 1.0000000116860974E-007D)
+            return null;
+        double d5 = (y - this.y) / d3;
+        if(d5 < 0.0D || d5 > 1.0D)
+            return null;
+        else
+            return Vec3.recycle(x + d2 * d5, this.y + d3 * d5, z + d4 * d5);
+    }
+
+    public Vec3 getIntermediateWithZValue(Vec3 vec, double z)
+    {
+        double d2 = vec.x - x;
+        double d3 = vec.y - y;
+        double d4 = vec.z - this.z;
+        if(d4 * d4 < 1.0000000116860974E-007D)
+            return null;
+        double d5 = (z - this.z) / d4;
+        if(d5 < 0.0D || d5 > 1.0D)
+            return null;
+        else
+            return Vec3.recycle(x + d2 * d5, y + d3 * d5, this.z + d4 * d5);
+    }
+
+    public String toString()
+    {
+        return (new StringBuilder()).append("(").append(x).append(", ").append(y).append(", ").append(z).append(")").toString();
+    }
+
+    public void rotatePitch(float pitch)
+    {
+        float f1 = MathLib.cos(pitch);
+        float f2 = MathLib.sin(pitch);
+        double d1 = x;
+        double d2 = y * (double)f1 + z * (double)f2;
+        double d3 = z * (double)f1 - y * (double)f2;
+        x = d1;
+        y = d2;
+        z = d3;
+    }
+
+    public void rotateYaw(float yaw)
+    {
+        float f1 = MathLib.cos(yaw);
+        float f2 = MathLib.sin(yaw);
+        double d1 = x * (double)f1 + z * (double)f2;
+        double d2 = y;
+        double d3 = z * (double)f1 - x * (double)f2;
+        x = d1;
+        y = d2;
+        z = d3;
+    }
+
+}
diff --git "a/temp\\src\\java/World.java" "b/src\\main\\java/World.java"
index f697a54..4028f93 100644
--- "a/temp\\src\\java/World.java"
+++ "b/src\\main\\java/World.java"
@@ -2,26 +2,19 @@
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-import java.util.ArrayList;
-import java.util.HashSet;
-import java.util.Random;
-import java.util.TreeSet;
+import java.io.*;
+import java.util.*;
 
 public class World
     implements nm
 {
 
-    private java.util.List z;
-    public java.util.List a;
-    private java.util.List A;
-    private java.util.TreeSet B;
-    private java.util.Set C;
-    public java.util.List b;
+    private List z;
+    public List a;
+    private List A;
+    private TreeSet B;
+    private Set C;
+    public List b;
     public long time;
     public boolean snowCovered;
     private long D;
@@ -34,53 +27,53 @@ public class World
     public static float i[];
     private final long G;
     protected int j;
-    public java.util.List k;
+    public List k;
     public int l;
     public Object m;
-    public java.util.Random n;
+    public Random n;
     public int spawnX;
     public int spawnY;
     public int spawnZ;
     public boolean r;
-    protected java.util.List s;
-    private IChunkProvider H;
-    public java.io.File t;
+    protected List s;
+    private IChunkProvider chunkProvider;
+    public File t;
     public long randomSeed;
     private TagCompound I;
     public long sizeOnDisk;
-    public final String w;
+    public final String worldName;
     public boolean x;
-    private java.util.ArrayList J;
-    private java.util.Set K;
+    private ArrayList J;
+    private Set K;
     private int L;
-    private java.util.List M;
+    private List M;
     public boolean y;
 
-    public static TagCompound a(java.io.File file, String s1)
+    public static TagCompound a(File file, String s1)
     {
-        java.io.File file1 = new File(file, "saves");
-        java.io.File file2 = new File(file1, s1);
+        File file1 = new File(file, "saves");
+        File file2 = new File(file1, s1);
         if(!file2.exists())
             return null;
-        java.io.File file3 = new File(file2, "level.dat");
+        File file3 = new File(file2, "level.dat");
         if(file3.exists())
             try
             {
-                TagCompound tagCompound1 = ((x)null).a(((java.io.InputStream) (new FileInputStream(file3))));
-                TagCompound tagCompound2 = tagCompound1.k("Data");
+                TagCompound tagCompound1 = ((x)null).a(((InputStream) (new FileInputStream(file3))));
+                TagCompound tagCompound2 = tagCompound1.getCompound("Data");
                 return tagCompound2;
             }
-            catch(java.lang.Exception exception)
+            catch(Exception exception)
             {
                 exception.printStackTrace();
             }
         return null;
     }
 
-    public static void b(java.io.File file, String s1)
+    public static void b(File file, String s1)
     {
-        java.io.File file1 = new File(file, "saves");
-        java.io.File file2 = new File(file1, s1);
+        File file1 = new File(file, "saves");
+        File file2 = new File(file1, s1);
         if(!file2.exists())
         {
             return;
@@ -92,7 +85,7 @@ public class World
         }
     }
 
-    private static void a(java.io.File afile[])
+    private static void a(File afile[])
     {
         for(int i1 = 0; i1 < afile.length; i1++)
         {
@@ -103,19 +96,19 @@ public class World
 
     }
 
-    public World(java.io.File file, String s1)
+    public World(File file, String worldName)
     {
-        this(file, s1, (new Random()).nextLong());
+        this(file, worldName, (new Random()).nextLong());
     }
 
-    public World(String s1)
+    public World(String worldName)
     {
-        z = ((java.util.List) (new ArrayList()));
-        a = ((java.util.List) (new ArrayList()));
-        A = ((java.util.List) (new ArrayList()));
+        z = ((List) (new ArrayList()));
+        a = ((List) (new ArrayList()));
+        A = ((List) (new ArrayList()));
         B = new TreeSet();
-        C = ((java.util.Set) (new HashSet()));
-        b = ((java.util.List) (new ArrayList()));
+        C = ((Set) (new HashSet()));
+        b = ((List) (new ArrayList()));
         time = 0L;
         snowCovered = false;
         D = 0x88bbffL;
@@ -125,33 +118,33 @@ public class World
         f = (new Random()).nextInt();
         g = 0x3c6ef35f;
         h = false;
-        G = java.lang.System.currentTimeMillis();
+        G = System.currentTimeMillis();
         j = 40;
-        k = ((java.util.List) (new ArrayList()));
+        k = ((List) (new ArrayList()));
         n = new Random();
         r = false;
-        s = ((java.util.List) (new ArrayList()));
+        s = ((List) (new ArrayList()));
         randomSeed = 0L;
         sizeOnDisk = 0L;
         J = new ArrayList();
-        K = ((java.util.Set) (new HashSet()));
+        K = ((Set) (new HashSet()));
         L = n.nextInt(12000);
-        M = ((java.util.List) (new ArrayList()));
+        M = ((List) (new ArrayList()));
         y = false;
-        w = s1;
-        H = a(t);
+        this.worldName = worldName;
+        chunkProvider = a(t);
         f();
     }
 
-    public World(java.io.File file, String s1, long randomSeed)
+    public World(File file, String worldName, long randomSeed)
     {
         randomSeed = 1L; // HARDCODE SEED
-        z = ((java.util.List) (new ArrayList()));
-        a = ((java.util.List) (new ArrayList()));
-        A = ((java.util.List) (new ArrayList()));
+        z = ((List) (new ArrayList()));
+        a = ((List) (new ArrayList()));
+        A = ((List) (new ArrayList()));
         B = new TreeSet();
-        C = ((java.util.Set) (new HashSet()));
-        b = ((java.util.List) (new ArrayList()));
+        C = ((Set) (new HashSet()));
+        b = ((List) (new ArrayList()));
         time = 0L;
         snowCovered = false;
         D = 0x88bbffL;
@@ -161,28 +154,28 @@ public class World
         f = (new Random()).nextInt();
         g = 0x3c6ef35f;
         h = false;
-        G = java.lang.System.currentTimeMillis();
+        G = System.currentTimeMillis();
         j = 40;
-        k = ((java.util.List) (new ArrayList()));
+        k = ((List) (new ArrayList()));
         n = new Random();
         r = false;
-        s = ((java.util.List) (new ArrayList()));
+        s = ((List) (new ArrayList()));
         this.randomSeed = 0L;
         sizeOnDisk = 0L;
         J = new ArrayList();
-        K = ((java.util.Set) (new HashSet()));
+        K = ((Set) (new HashSet()));
         L = n.nextInt(12000);
-        M = ((java.util.List) (new ArrayList()));
+        M = ((List) (new ArrayList()));
         y = false;
-        w = s1;
+        this.worldName = worldName;
         file.mkdirs();
-        t = new File(file, s1);
+        t = new File(file, worldName);
         t.mkdirs();
-        java.io.DataOutputStream dataoutputstream;
+        DataOutputStream dataoutputstream;
         try
         {
-        java.io.File file1 = new File(t, "session.lock");
-        dataoutputstream = new DataOutputStream(((java.io.OutputStream) (new FileOutputStream(file1))));
+        File file1 = new File(t, "session.lock");
+        dataoutputstream = new DataOutputStream(((OutputStream) (new FileOutputStream(file1))));
         	try
             {
         dataoutputstream.writeLong(G);
@@ -192,17 +185,17 @@ public class World
         dataoutputstream.close();
         	}
         }
-        catch (java.io.IOException ioexception)
+        catch (IOException ioexception)
         {
         throw new RuntimeException("Failed to check session lock, aborting");
         }
-        java.io.File file2 = new File(t, "level.dat");
+        File file2 = new File(t, "level.dat");
         r = !file2.exists();
         if(file2.exists())
             try
             {
-                TagCompound tagCompound1 = ((x)null).a(((java.io.InputStream) (new FileInputStream(file2))));
-                TagCompound tagCompound2 = tagCompound1.k("Data");
+                TagCompound tagCompound1 = ((x)null).a(((InputStream) (new FileInputStream(file2))));
+                TagCompound tagCompound2 = tagCompound1.getCompound("Data");
                 this.randomSeed = tagCompound2.getLong("RandomSeed");
                 System.out.println("Readed world file randomSeed: " + this.randomSeed);
                 spawnX = tagCompound2.getInt("SpawnX");
@@ -212,9 +205,9 @@ public class World
                 sizeOnDisk = tagCompound2.getLong("SizeOnDisk");
                 snowCovered = tagCompound2.isTrueByte("SnowCovered");
                 if(tagCompound2.b("Player"))
-                    I = tagCompound2.k("Player");
+                    I = tagCompound2.getCompound("Player");
             }
-            catch(java.lang.Exception exception)
+            catch(Exception exception)
             {
                 exception.printStackTrace();
             }
@@ -226,7 +219,7 @@ public class World
             this.randomSeed = randomSeed;
             flag = true;
         }
-        H = a(t);
+        chunkProvider = a(t);
         if(flag)
         {
             x = true;
@@ -244,7 +237,7 @@ public class World
         return;
     }
 
-    protected IChunkProvider a(java.io.File file)
+    protected IChunkProvider a(File file)
     {
         return ((IChunkProvider) (new ft(this, ((af) (new le(file, true))), ((IChunkProvider) (new nw(this, randomSeed))))));
     }
@@ -271,18 +264,18 @@ public class World
         return a(i1, k1, j1);
     }
 
-    public void a(Player player1)
+    public void a(EntityPlayer entityPlayer1)
     {
         try
         {
             if(I != null)
             {
-                player1.e(I);
+                entityPlayer1.e(I);
                 I = null;
             }
-            a(((kh) (player1)));
+            a(((Entity) (entityPlayer1)));
         }
-        catch(java.lang.Exception exception)
+        catch(Exception exception)
         {
             exception.printStackTrace();
         }
@@ -290,14 +283,14 @@ public class World
 
     public void a(boolean flag, IProgressUpdate iProgressUpdate)
     {
-        if(!H.canSave())
+        if(!chunkProvider.canSave())
             return;
         if(iProgressUpdate != null)
             iProgressUpdate.setState1("Saving level");
         m();
         if(iProgressUpdate != null)
             iProgressUpdate.setState2("Saving chunks");
-        H.saveChunks(flag, iProgressUpdate);
+        chunkProvider.saveChunks(flag, iProgressUpdate);
     }
 
     private void m()
@@ -311,24 +304,24 @@ public class World
         tagCompound1.set("Time", time);
         tagCompound1.set("SizeOnDisk", sizeOnDisk);
         tagCompound1.set("SnowCovered", snowCovered);
-        tagCompound1.set("LastPlayed", java.lang.System.currentTimeMillis());
-        Player player1 = null;
+        tagCompound1.set("LastPlayed", System.currentTimeMillis());
+        EntityPlayer entityPlayer1 = null;
         if(k.size() > 0)
-            player1 = (Player)k.get(0);
-        if(player1 != null)
+            entityPlayer1 = (EntityPlayer)k.get(0);
+        if(entityPlayer1 != null)
         {
             TagCompound tagCompound2 = new TagCompound();
-            player1.d(tagCompound2);
+            entityPlayer1.d(tagCompound2);
             tagCompound1.set("Player", tagCompound2);
         }
         TagCompound tagCompound3 = new TagCompound();
         tagCompound3.set("Data", ((Tag) (tagCompound1)));
         try
         {
-            java.io.File file = new File(t, "level.dat_new");
-            java.io.File file1 = new File(t, "level.dat_old");
-            java.io.File file2 = new File(t, "level.dat");
-            ((x)null).a(tagCompound3, ((java.io.OutputStream) (new FileOutputStream(file))));
+            File file = new File(t, "level.dat_new");
+            File file1 = new File(t, "level.dat_old");
+            File file2 = new File(t, "level.dat");
+            ((x)null).a(tagCompound3, ((OutputStream) (new FileOutputStream(file))));
             if(file1.exists())
                 file1.delete();
             file2.renameTo(file1);
@@ -338,7 +331,7 @@ public class World
             if(file.exists())
                 file.delete();
         }
-        catch(java.lang.Exception exception)
+        catch(Exception exception)
         {
             exception.printStackTrace();
         }
@@ -346,11 +339,11 @@ public class World
 
     public boolean a(int i1)
     {
-        if(!H.canSave())
+        if(!chunkProvider.canSave())
             return true;
         if(i1 == 0)
             m();
-        return H.saveChunks(false, ((IProgressUpdate) (null)));
+        return chunkProvider.saveChunks(false, ((IProgressUpdate) (null)));
     }
 
     public int a(int i1, int j1, int k1)
@@ -396,7 +389,7 @@ public class World
 
     private boolean h(int i1, int j1)
     {
-        return H.chunkExists(i1, j1);
+        return chunkProvider.chunkExists(i1, j1);
     }
 
     public Chunk a(int i1, int j1)
@@ -406,7 +399,7 @@ public class World
 
     public Chunk b(int i1, int j1)
     {
-        return H.provideChunk(i1, j1);
+        return chunkProvider.provideChunk(i1, j1);
     }
 
     public boolean a(int i1, int j1, int k1, int l1, int i2)
@@ -714,26 +707,26 @@ public class World
         return e < 4;
     }
 
-    public mf a(aj aj1, aj aj2)
+    public mf a(Vec3 vec31, Vec3 vec32)
     {
-        return a(aj1, aj2, false);
+        return a(vec31, vec32, false);
     }
 
-    public mf a(aj aj1, aj aj2, boolean flag)
+    public mf a(Vec3 vec31, Vec3 vec32, boolean flag)
     {
-        if(java.lang.Double.isNaN(aj1.a) || java.lang.Double.isNaN(aj1.b) || java.lang.Double.isNaN(aj1.c))
+        if(Double.isNaN(vec31.x) || Double.isNaN(vec31.y) || Double.isNaN(vec31.z))
             return null;
-        if(java.lang.Double.isNaN(aj2.a) || java.lang.Double.isNaN(aj2.b) || java.lang.Double.isNaN(aj2.c))
+        if(Double.isNaN(vec32.x) || Double.isNaN(vec32.y) || Double.isNaN(vec32.z))
             return null;
-        int i1 = eo.b(aj2.a);
-        int j1 = eo.b(aj2.b);
-        int k1 = eo.b(aj2.c);
-        int l1 = eo.b(aj1.a);
-        int i2 = eo.b(aj1.b);
-        int j2 = eo.b(aj1.c);
+        int i1 = MathLib.castIgnoringSign(vec32.x);
+        int j1 = MathLib.castIgnoringSign(vec32.y);
+        int k1 = MathLib.castIgnoringSign(vec32.z);
+        int l1 = MathLib.castIgnoringSign(vec31.x);
+        int i2 = MathLib.castIgnoringSign(vec31.y);
+        int j2 = MathLib.castIgnoringSign(vec31.z);
         for(int k2 = 20; k2-- >= 0;)
         {
-            if(java.lang.Double.isNaN(aj1.a) || java.lang.Double.isNaN(aj1.b) || java.lang.Double.isNaN(aj1.c))
+            if(Double.isNaN(vec31.x) || Double.isNaN(vec31.y) || Double.isNaN(vec31.z))
                 return null;
             if(l1 == i1 && i2 == j1 && j2 == k1)
                 return null;
@@ -755,15 +748,15 @@ public class World
             double d4 = 999D;
             double d5 = 999D;
             double d6 = 999D;
-            double d7 = aj2.a - aj1.a;
-            double d8 = aj2.b - aj1.b;
-            double d9 = aj2.c - aj1.c;
+            double d7 = vec32.x - vec31.x;
+            double d8 = vec32.y - vec31.y;
+            double d9 = vec32.z - vec31.z;
             if(d1 != 999D)
-                d4 = (d1 - aj1.a) / d7;
+                d4 = (d1 - vec31.x) / d7;
             if(d2 != 999D)
-                d5 = (d2 - aj1.b) / d8;
+                d5 = (d2 - vec31.y) / d8;
             if(d3 != 999D)
-                d6 = (d3 - aj1.c) / d9;
+                d6 = (d3 - vec31.z) / d9;
             byte byte0 = 0;
             if(d4 < d5 && d4 < d6)
             {
@@ -771,9 +764,9 @@ public class World
                     byte0 = 4;
                 else
                     byte0 = 5;
-                aj1.a = d1;
-                aj1.b += d8 * d4;
-                aj1.c += d9 * d4;
+                vec31.x = d1;
+                vec31.y += d8 * d4;
+                vec31.z += d9 * d4;
             } else
             if(d5 < d6)
             {
@@ -781,44 +774,44 @@ public class World
                     byte0 = 0;
                 else
                     byte0 = 1;
-                aj1.a += d7 * d5;
-                aj1.b = d2;
-                aj1.c += d9 * d5;
+                vec31.x += d7 * d5;
+                vec31.y = d2;
+                vec31.z += d9 * d5;
             } else
             {
                 if(k1 > j2)
                     byte0 = 2;
                 else
                     byte0 = 3;
-                aj1.a += d7 * d6;
-                aj1.b += d8 * d6;
-                aj1.c = d3;
+                vec31.x += d7 * d6;
+                vec31.y += d8 * d6;
+                vec31.z = d3;
             }
-            aj aj3 = aj.b(aj1.a, aj1.b, aj1.c);
-            l1 = (int)(aj3.a = eo.b(aj1.a));
+            Vec3 vec33 = Vec3.recycle(vec31.x, vec31.y, vec31.z);
+            l1 = (int)(vec33.x = MathLib.castIgnoringSign(vec31.x));
             if(byte0 == 5)
             {
                 l1--;
-                aj3.a++;
+                vec33.x++;
             }
-            i2 = (int)(aj3.b = eo.b(aj1.b));
+            i2 = (int)(vec33.y = MathLib.castIgnoringSign(vec31.y));
             if(byte0 == 1)
             {
                 i2--;
-                aj3.b++;
+                vec33.y++;
             }
-            j2 = (int)(aj3.c = eo.b(aj1.c));
+            j2 = (int)(vec33.z = MathLib.castIgnoringSign(vec31.z));
             if(byte0 == 3)
             {
                 j2--;
-                aj3.c++;
+                vec33.z++;
             }
             int l2 = a(l1, i2, j2);
             int i3 = e(l1, i2, j2);
             ly ly1 = ly.n[l2];
             if(l2 > 0 && ly1.a(i3, flag))
             {
-                mf mf = ly1.a(this, l1, i2, j2, aj1, aj2);
+                mf mf = ly1.a(this, l1, i2, j2, vec31, vec32);
                 if(mf != null)
                     return mf;
             }
@@ -827,10 +820,10 @@ public class World
         return null;
     }
 
-    public void a(kh kh1, String s1, float f1, float f2)
+    public void a(Entity entity1, String s1, float f1, float f2)
     {
         for(int i1 = 0; i1 < s.size(); i1++)
-            ((im)s.get(i1)).a(s1, kh1.ak, kh1.al - (double)kh1.aB, kh1.am, f1, f2);
+            ((im)s.get(i1)).a(s1, entity1.posX, entity1.posY - (double) entity1.aB, entity1.posZ, f1, f2);
 
     }
 
@@ -857,23 +850,23 @@ public class World
 
     }
 
-    public boolean a(kh kh1)
+    public boolean a(Entity entity1)
     {
-        int i1 = eo.b(kh1.ak / 16D);
-        int j1 = eo.b(kh1.am / 16D);
+        int i1 = MathLib.castIgnoringSign(entity1.posX / 16D);
+        int j1 = MathLib.castIgnoringSign(entity1.posZ / 16D);
         boolean flag = false;
-        if(kh1 instanceof Player)
+        if(entity1 instanceof EntityPlayer)
             flag = true;
         if(flag || h(i1, j1))
         {
-            if(kh1 instanceof Player)
+            if(entity1 instanceof EntityPlayer)
             {
-                k.add(((Object) ((Player)kh1)));
-                java.lang.System.out.println((new StringBuilder()).append("Player count: ").append(k.size()).toString());
+                k.add(((Object) ((EntityPlayer) entity1)));
+                System.out.println((new StringBuilder()).append("Player count: ").append(k.size()).toString());
             }
-            b(i1, j1).a(kh1);
-            a.add(((Object) (kh1)));
-            b(kh1);
+            b(i1, j1).a(entity1);
+            a.add(((Object) (entity1)));
+            b(entity1);
             return true;
         } else
         {
@@ -881,27 +874,27 @@ public class World
         }
     }
 
-    protected void b(kh kh1)
+    protected void b(Entity entity1)
     {
         for(int i1 = 0; i1 < s.size(); i1++)
-            ((im)s.get(i1)).a(kh1);
+            ((im)s.get(i1)).a(entity1);
 
     }
 
-    protected void c(kh kh1)
+    protected void c(Entity entity1)
     {
         for(int i1 = 0; i1 < s.size(); i1++)
-            ((im)s.get(i1)).b(kh1);
+            ((im)s.get(i1)).b(entity1);
 
     }
 
-    public void d(kh kh1)
+    public void d(Entity entity1)
     {
-        kh1.F();
-        if(kh1 instanceof Player)
+        entity1.F();
+        if(entity1 instanceof EntityPlayer)
         {
-            k.remove(((Object) ((Player)kh1)));
-            java.lang.System.out.println((new StringBuilder()).append("Player count: ").append(k.size()).toString());
+            k.remove(((Object) ((EntityPlayer) entity1)));
+            System.out.println((new StringBuilder()).append("Player count: ").append(k.size()).toString());
         }
     }
 
@@ -915,15 +908,15 @@ public class World
         s.remove(((Object) (im1)));
     }
 
-    public java.util.List a(kh kh1, cf cf1)
+    public List a(Entity entity1, cf cf1)
     {
         J.clear();
-        int i1 = eo.b(cf1.a);
-        int j1 = eo.b(cf1.d + 1.0D);
-        int k1 = eo.b(cf1.b);
-        int l1 = eo.b(cf1.e + 1.0D);
-        int i2 = eo.b(cf1.c);
-        int j2 = eo.b(cf1.f + 1.0D);
+        int i1 = MathLib.castIgnoringSign(cf1.a);
+        int j1 = MathLib.castIgnoringSign(cf1.d + 1.0D);
+        int k1 = MathLib.castIgnoringSign(cf1.b);
+        int l1 = MathLib.castIgnoringSign(cf1.e + 1.0D);
+        int i2 = MathLib.castIgnoringSign(cf1.c);
+        int j2 = MathLib.castIgnoringSign(cf1.f + 1.0D);
         for(int k2 = i1; k2 < j1; k2++)
         {
             for(int l2 = i2; l2 < j2; l2++)
@@ -942,24 +935,24 @@ public class World
         }
 
         double d1 = 0.25D;
-        java.util.List list = b(kh1, cf1.b(d1, d1, d1));
+        List list = b(entity1, cf1.b(d1, d1, d1));
         for(int j3 = 0; j3 < list.size(); j3++)
         {
-            cf cf2 = ((kh)list.get(j3)).f_();
+            cf cf2 = ((Entity)list.get(j3)).f_();
             if(cf2 != null && cf2.a(cf1))
                 J.add(((Object) (cf2)));
-            cf2 = kh1.b_((kh)list.get(j3));
+            cf2 = entity1.b_((Entity)list.get(j3));
             if(cf2 != null && cf2.a(cf1))
                 J.add(((Object) (cf2)));
         }
 
-        return ((java.util.List) (J));
+        return ((List) (J));
     }
 
     public int a(float f1)
     {
-        float f2 = c(f1);
-        float f3 = 1.0F - (eo.b(f2 * 3.141593F * 2.0F) * 2.0F + 0.5F);
+        float f2 = sunAngle(f1);
+        float f3 = 1.0F - (MathLib.cos(f2 * 3.141593F * 2.0F) * 2.0F + 0.5F);
         if(f3 < 0.0F)
             f3 = 0.0F;
         if(f3 > 1.0F)
@@ -967,10 +960,10 @@ public class World
         return (int)(f3 * 11F);
     }
 
-    public aj b(float f1)
+    public Vec3 b(float f1)
     {
-        float f2 = c(f1);
-        float f3 = eo.b(f2 * 3.141593F * 2.0F) * 2.0F + 0.5F;
+        float f2 = sunAngle(f1);
+        float f3 = MathLib.cos(f2 * 3.141593F * 2.0F) * 2.0F + 0.5F;
         if(f3 < 0.0F)
             f3 = 0.0F;
         if(f3 > 1.0F)
@@ -981,27 +974,27 @@ public class World
         f4 *= f3;
         f5 *= f3;
         f6 *= f3;
-        return aj.b(f4, f5, f6);
+        return Vec3.recycle(f4, f5, f6);
     }
 
-    public float c(float f1)
+    public float sunAngle(float offset)
     {
         int i1 = (int)(time % 24000L);
-        float f2 = ((float)i1 + f1) / 24000F - 0.25F;
+        float f2 = ((float)i1 + offset) / 24000F - 0.25F;
         if(f2 < 0.0F)
             f2++;
         if(f2 > 1.0F)
             f2--;
         float f3 = f2;
-        f2 = 1.0F - (float)((java.lang.Math.cos((double)f2 * 3.1415926535897931D) + 1.0D) / 2D);
+        f2 = 1.0F - (float)((Math.cos((double)f2 * 3.1415926535897931D) + 1.0D) / 2D);
         f2 = f3 + (f2 - f3) / 3F;
         return f2;
     }
 
-    public aj d(float f1)
+    public Vec3 d(float f1)
     {
-        float f2 = c(f1);
-        float f3 = eo.b(f2 * 3.141593F * 2.0F) * 2.0F + 0.5F;
+        float f2 = sunAngle(f1);
+        float f3 = MathLib.cos(f2 * 3.141593F * 2.0F) * 2.0F + 0.5F;
         if(f3 < 0.0F)
             f3 = 0.0F;
         if(f3 > 1.0F)
@@ -1012,13 +1005,13 @@ public class World
         f4 *= f3 * 0.9F + 0.1F;
         f5 *= f3 * 0.9F + 0.1F;
         f6 *= f3 * 0.85F + 0.15F;
-        return aj.b(f4, f5, f6);
+        return Vec3.recycle(f4, f5, f6);
     }
 
-    public aj e(float f1)
+    public Vec3 e(float f1)
     {
-        float f2 = c(f1);
-        float f3 = eo.b(f2 * 3.141593F * 2.0F) * 2.0F + 0.5F;
+        float f2 = sunAngle(f1);
+        float f3 = MathLib.cos(f2 * 3.141593F * 2.0F) * 2.0F + 0.5F;
         if(f3 < 0.0F)
             f3 = 0.0F;
         if(f3 > 1.0F)
@@ -1029,7 +1022,7 @@ public class World
         f4 *= f3 * 0.94F + 0.06F;
         f5 *= f3 * 0.94F + 0.06F;
         f6 *= f3 * 0.91F + 0.09F;
-        return aj.b(f4, f5, f6);
+        return Vec3.recycle(f4, f5, f6);
     }
 
     public int d(int i1, int j1)
@@ -1056,8 +1049,8 @@ public class World
 
     public float f(float f1)
     {
-        float f2 = c(f1);
-        float f3 = 1.0F - (eo.b(f2 * 3.141593F * 2.0F) * 2.0F + 0.75F);
+        float f2 = sunAngle(f1);
+        float f3 = 1.0F - (MathLib.cos(f2 * 3.141593F * 2.0F) * 2.0F + 0.75F);
         if(f3 < 0.0F)
             f3 = 0.0F;
         if(f3 > 1.0F)
@@ -1083,40 +1076,40 @@ public class World
 
     public void c()
     {
-        a.removeAll(((java.util.Collection) (A)));
+        a.removeAll(((Collection) (A)));
         for(int i1 = 0; i1 < A.size(); i1++)
         {
-            kh kh1 = (kh)A.get(i1);
-            int i2 = kh1.ba;
-            int k2 = kh1.bc;
-            if(kh1.aZ && h(i2, k2))
-                b(i2, k2).b(kh1);
+            Entity entity1 = (Entity)A.get(i1);
+            int i2 = entity1.ba;
+            int k2 = entity1.bc;
+            if(entity1.aZ && h(i2, k2))
+                b(i2, k2).b(entity1);
         }
 
         for(int j1 = 0; j1 < A.size(); j1++)
-            c((kh)A.get(j1));
+            c((Entity)A.get(j1));
 
         A.clear();
         for(int k1 = 0; k1 < a.size(); k1++)
         {
-            kh kh2 = (kh)a.get(k1);
-            if(kh2.af != null)
+            Entity entity2 = (Entity)a.get(k1);
+            if(entity2.af != null)
             {
-                if(!kh2.af.aA && kh2.af.ae == kh2)
+                if(!entity2.af.aA && entity2.af.ae == entity2)
                     continue;
-                kh2.af.ae = null;
-                kh2.af = null;
+                entity2.af.ae = null;
+                entity2.af = null;
             }
-            if(!kh2.aA)
-                e(kh2);
-            if(!kh2.aA)
+            if(!entity2.aA)
+                e(entity2);
+            if(!entity2.aA)
                 continue;
-            int j2 = kh2.ba;
-            int l2 = kh2.bc;
-            if(kh2.aZ && h(j2, l2))
-                b(j2, l2).b(kh2);
+            int j2 = entity2.ba;
+            int l2 = entity2.bc;
+            if(entity2.aZ && h(j2, l2))
+                b(j2, l2).b(entity2);
             a.remove(k1--);
-            c(kh2);
+            c(entity2);
         }
 
         for(int l1 = 0; l1 < b.size(); l1++)
@@ -1127,67 +1120,67 @@ public class World
 
     }
 
-    protected void e(kh kh1)
+    protected void e(Entity entity1)
     {
-        int i1 = eo.b(kh1.ak);
-        int j1 = eo.b(kh1.am);
+        int i1 = MathLib.castIgnoringSign(entity1.posX);
+        int j1 = MathLib.castIgnoringSign(entity1.posZ);
         byte byte0 = 16;
         if(!a(i1 - byte0, 0, j1 - byte0, i1 + byte0, 128, j1 + byte0))
             return;
-        kh1.aI = kh1.ak;
-        kh1.aJ = kh1.al;
-        kh1.aK = kh1.am;
-        kh1.as = kh1.aq;
-        kh1.at = kh1.ar;
-        if(kh1.af != null)
-            kh1.p();
+        entity1.aI = entity1.posX;
+        entity1.aJ = entity1.posY;
+        entity1.aK = entity1.posZ;
+        entity1.prevYaw = entity1.yaw;
+        entity1.prevPitch = entity1.pitch;
+        if(entity1.af != null)
+            entity1.p();
         else
-            kh1.e_();
-        int k1 = eo.b(kh1.ak / 16D);
-        int l1 = eo.b(kh1.al / 16D);
-        int i2 = eo.b(kh1.am / 16D);
-        if(!kh1.aZ || kh1.ba != k1 || kh1.bb != l1 || kh1.bc != i2)
-        {
-            if(kh1.aZ && h(kh1.ba, kh1.bc))
-                b(kh1.ba, kh1.bc).a(kh1, kh1.bb);
+            entity1.e_();
+        int k1 = MathLib.castIgnoringSign(entity1.posX / 16D);
+        int l1 = MathLib.castIgnoringSign(entity1.posY / 16D);
+        int i2 = MathLib.castIgnoringSign(entity1.posZ / 16D);
+        if(!entity1.aZ || entity1.ba != k1 || entity1.bb != l1 || entity1.bc != i2)
+        {
+            if(entity1.aZ && h(entity1.ba, entity1.bc))
+                b(entity1.ba, entity1.bc).a(entity1, entity1.bb);
             if(h(k1, i2))
             {
-                b(k1, i2).a(kh1);
+                b(k1, i2).a(entity1);
             } else
             {
-                kh1.aZ = false;
-                java.lang.System.out.println("Removing entity because it's not in a chunk!!");
-                kh1.F();
+                entity1.aZ = false;
+                System.out.println("Removing entity because it's not in a chunk!!");
+                entity1.F();
             }
         }
-        if(kh1.ae != null)
-            if(kh1.ae.aA || kh1.ae.af != kh1)
+        if(entity1.ae != null)
+            if(entity1.ae.aA || entity1.ae.af != entity1)
             {
-                kh1.ae.af = null;
-                kh1.ae = null;
+                entity1.ae.af = null;
+                entity1.ae = null;
             } else
             {
-                e(kh1.ae);
+                e(entity1.ae);
             }
-        if(java.lang.Double.isNaN(kh1.ak) || java.lang.Double.isInfinite(kh1.ak))
-            kh1.ak = kh1.aI;
-        if(java.lang.Double.isNaN(kh1.al) || java.lang.Double.isInfinite(kh1.al))
-            kh1.al = kh1.aJ;
-        if(java.lang.Double.isNaN(kh1.am) || java.lang.Double.isInfinite(kh1.am))
-            kh1.am = kh1.aK;
-        if(java.lang.Double.isNaN(kh1.ar) || java.lang.Double.isInfinite(kh1.ar))
-            kh1.ar = kh1.at;
-        if(java.lang.Double.isNaN(kh1.aq) || java.lang.Double.isInfinite(kh1.aq))
-            kh1.aq = kh1.as;
+        if(Double.isNaN(entity1.posX) || Double.isInfinite(entity1.posX))
+            entity1.posX = entity1.aI;
+        if(Double.isNaN(entity1.posY) || Double.isInfinite(entity1.posY))
+            entity1.posY = entity1.aJ;
+        if(Double.isNaN(entity1.posZ) || Double.isInfinite(entity1.posZ))
+            entity1.posZ = entity1.aK;
+        if(Double.isNaN(entity1.pitch) || Double.isInfinite(entity1.pitch))
+            entity1.pitch = entity1.prevPitch;
+        if(Double.isNaN(entity1.yaw) || Double.isInfinite(entity1.yaw))
+            entity1.yaw = entity1.prevYaw;
     }
 
     public boolean a(cf cf1)
     {
-        java.util.List list = b(((kh) (null)), cf1);
+        List list = b(((Entity) (null)), cf1);
         for(int i1 = 0; i1 < list.size(); i1++)
         {
-            kh kh1 = (kh)list.get(i1);
-            if(!kh1.aA && kh1.ad)
+            Entity entity1 = (Entity)list.get(i1);
+            if(!entity1.aA && entity1.ad)
                 return false;
         }
 
@@ -1196,12 +1189,12 @@ public class World
 
     public boolean b(cf cf1)
     {
-        int i1 = eo.b(cf1.a);
-        int j1 = eo.b(cf1.d + 1.0D);
-        int k1 = eo.b(cf1.b);
-        int l1 = eo.b(cf1.e + 1.0D);
-        int i2 = eo.b(cf1.c);
-        int j2 = eo.b(cf1.f + 1.0D);
+        int i1 = MathLib.castIgnoringSign(cf1.a);
+        int j1 = MathLib.castIgnoringSign(cf1.d + 1.0D);
+        int k1 = MathLib.castIgnoringSign(cf1.b);
+        int l1 = MathLib.castIgnoringSign(cf1.e + 1.0D);
+        int i2 = MathLib.castIgnoringSign(cf1.c);
+        int j2 = MathLib.castIgnoringSign(cf1.f + 1.0D);
         if(cf1.a < 0.0D)
             i1--;
         if(cf1.b < 0.0D)
@@ -1228,12 +1221,12 @@ public class World
 
     public boolean c(cf cf1)
     {
-        int i1 = eo.b(cf1.a);
-        int j1 = eo.b(cf1.d + 1.0D);
-        int k1 = eo.b(cf1.b);
-        int l1 = eo.b(cf1.e + 1.0D);
-        int i2 = eo.b(cf1.c);
-        int j2 = eo.b(cf1.f + 1.0D);
+        int i1 = MathLib.castIgnoringSign(cf1.a);
+        int j1 = MathLib.castIgnoringSign(cf1.d + 1.0D);
+        int k1 = MathLib.castIgnoringSign(cf1.b);
+        int l1 = MathLib.castIgnoringSign(cf1.e + 1.0D);
+        int i2 = MathLib.castIgnoringSign(cf1.c);
+        int j2 = MathLib.castIgnoringSign(cf1.f + 1.0D);
         for(int k2 = i1; k2 < j1; k2++)
         {
             for(int l2 = k1; l2 < l1; l2++)
@@ -1252,16 +1245,16 @@ public class World
         return false;
     }
 
-    public boolean a(cf cf1, gb gb1, kh kh1)
+    public boolean a(cf cf1, gb gb1, Entity entity1)
     {
-        int i1 = eo.b(cf1.a);
-        int j1 = eo.b(cf1.d + 1.0D);
-        int k1 = eo.b(cf1.b);
-        int l1 = eo.b(cf1.e + 1.0D);
-        int i2 = eo.b(cf1.c);
-        int j2 = eo.b(cf1.f + 1.0D);
+        int i1 = MathLib.castIgnoringSign(cf1.a);
+        int j1 = MathLib.castIgnoringSign(cf1.d + 1.0D);
+        int k1 = MathLib.castIgnoringSign(cf1.b);
+        int l1 = MathLib.castIgnoringSign(cf1.e + 1.0D);
+        int i2 = MathLib.castIgnoringSign(cf1.c);
+        int j2 = MathLib.castIgnoringSign(cf1.f + 1.0D);
         boolean flag = false;
-        aj aj1 = aj.b(0.0D, 0.0D, 0.0D);
+        Vec3 vec31 = Vec3.recycle(0.0D, 0.0D, 0.0D);
         for(int k2 = i1; k2 < j1; k2++)
         {
             for(int l2 = k1; l2 < l1; l2++)
@@ -1275,7 +1268,7 @@ public class World
                     if((double)l1 >= d2)
                     {
                         flag = true;
-                        ly1.a(this, k2, l2, i3, kh1, aj1);
+                        ly1.a(this, k2, l2, i3, entity1, vec31);
                     }
                 }
 
@@ -1283,25 +1276,25 @@ public class World
 
         }
 
-        if(aj1.c() > 0.0D)
+        if(vec31.magnitude() > 0.0D)
         {
-            aj1 = aj1.b();
+            vec31 = vec31.normalize();
             double d1 = 0.0040000000000000001D;
-            kh1.an += aj1.a * d1;
-            kh1.ao += aj1.b * d1;
-            kh1.ap += aj1.c * d1;
+            entity1.motionX += vec31.x * d1;
+            entity1.motionY += vec31.y * d1;
+            entity1.motionZ += vec31.z * d1;
         }
         return flag;
     }
 
     public boolean a(cf cf1, gb gb1)
     {
-        int i1 = eo.b(cf1.a);
-        int j1 = eo.b(cf1.d + 1.0D);
-        int k1 = eo.b(cf1.b);
-        int l1 = eo.b(cf1.e + 1.0D);
-        int i2 = eo.b(cf1.c);
-        int j2 = eo.b(cf1.f + 1.0D);
+        int i1 = MathLib.castIgnoringSign(cf1.a);
+        int j1 = MathLib.castIgnoringSign(cf1.d + 1.0D);
+        int k1 = MathLib.castIgnoringSign(cf1.b);
+        int l1 = MathLib.castIgnoringSign(cf1.e + 1.0D);
+        int i2 = MathLib.castIgnoringSign(cf1.c);
+        int j2 = MathLib.castIgnoringSign(cf1.f + 1.0D);
         for(int k2 = i1; k2 < j1; k2++)
         {
             for(int l2 = k1; l2 < l1; l2++)
@@ -1322,12 +1315,12 @@ public class World
 
     public boolean b(cf cf1, gb gb1)
     {
-        int i1 = eo.b(cf1.a);
-        int j1 = eo.b(cf1.d + 1.0D);
-        int k1 = eo.b(cf1.b);
-        int l1 = eo.b(cf1.e + 1.0D);
-        int i2 = eo.b(cf1.c);
-        int j2 = eo.b(cf1.f + 1.0D);
+        int i1 = MathLib.castIgnoringSign(cf1.a);
+        int j1 = MathLib.castIgnoringSign(cf1.d + 1.0D);
+        int k1 = MathLib.castIgnoringSign(cf1.b);
+        int l1 = MathLib.castIgnoringSign(cf1.e + 1.0D);
+        int i2 = MathLib.castIgnoringSign(cf1.c);
+        int j2 = MathLib.castIgnoringSign(cf1.f + 1.0D);
         for(int k2 = i1; k2 < j1; k2++)
         {
             for(int l2 = k1; l2 < l1; l2++)
@@ -1352,13 +1345,13 @@ public class World
         return false;
     }
 
-    public void a(kh kh1, double d1, double d2, double d3, 
-            float f1)
+    public void a(Entity entity1, double d1, double d2, double d3,
+                  float f1)
     {
-        (new je()).a(this, kh1, d1, d2, d3, f1);
+        (new je()).a(this, entity1, d1, d2, d3, f1);
     }
 
-    public float a(aj aj1, cf cf1)
+    public float a(Vec3 vec31, cf cf1)
     {
         double d1 = 1.0D / ((cf1.d - cf1.a) * 2D + 1.0D);
         double d2 = 1.0D / ((cf1.e - cf1.b) * 2D + 1.0D);
@@ -1374,7 +1367,7 @@ public class World
                     double d4 = cf1.a + (cf1.d - cf1.a) * (double)f1;
                     double d5 = cf1.b + (cf1.e - cf1.b) * (double)f2;
                     double d6 = cf1.c + (cf1.f - cf1.c) * (double)f3;
-                    if(a(aj.b(d4, d5, d6), aj1) == null)
+                    if(a(Vec3.recycle(d4, d5, d6), vec31) == null)
                         i1++;
                     j1++;
                 }
@@ -1407,7 +1400,7 @@ public class World
         }
     }
 
-    public kh a(java.lang.Class class1)
+    public Entity a(Class class1)
     {
         return null;
     }
@@ -1504,7 +1497,7 @@ public class World
 
     public void g()
     {
-        H.unloadQueuedChunks();
+        chunkProvider.unloadQueuedChunks();
         int i1 = a(1.0F);
         if(i1 != e)
         {
@@ -1525,9 +1518,9 @@ public class World
         K.clear();
         for(int i1 = 0; i1 < k.size(); i1++)
         {
-            Player player1 = (Player)k.get(i1);
-            int j1 = eo.b(player1.ak / 16D);
-            int l1 = eo.b(player1.am / 16D);
+            EntityPlayer entityPlayer1 = (EntityPlayer)k.get(i1);
+            int j1 = MathLib.castIgnoringSign(entityPlayer1.posX / 16D);
+            int l1 = MathLib.castIgnoringSign(entityPlayer1.posZ / 16D);
             byte byte0 = 9;
             for(int j2 = -byte0; j2 <= byte0; j2++)
             {
@@ -1540,7 +1533,7 @@ public class World
 
         if(L > 0)
             L--;
-        for(java.util.Iterator iterator = K.iterator(); iterator.hasNext();)
+        for(Iterator iterator = K.iterator(); iterator.hasNext();)
         {
             ol ol1 = (ol)iterator.next();
             int k1 = ol1.a * 16;
@@ -1558,8 +1551,8 @@ public class World
                 j4 += i2;
                 if(l5 == 0 && j(k3, i5, j4) <= n.nextInt(8) && a(by.a, k3, i5, j4) <= 0)
                 {
-                    Player player2 = a((double)k3 + 0.5D, (double)i5 + 0.5D, (double)j4 + 0.5D, 8D);
-                    if(player2 != null && player2.d((double)k3 + 0.5D, (double)i5 + 0.5D, (double)j4 + 0.5D) > 4D)
+                    EntityPlayer entityPlayer2 = a((double)k3 + 0.5D, (double)i5 + 0.5D, (double)j4 + 0.5D, 8D);
+                    if(entityPlayer2 != null && entityPlayer2.distance((double)k3 + 0.5D, (double)i5 + 0.5D, (double)j4 + 0.5D) > 4D)
                     {
                         a((double)k3 + 0.5D, (double)i5 + 0.5D, (double)j4 + 0.5D, "ambient.cave.cave", 0.7F, 0.8F + n.nextFloat() * 0.2F);
                         L = n.nextInt(12000) + 6000;
@@ -1627,7 +1620,7 @@ public class World
     public void m(int i1, int j1, int k1)
     {
         byte byte0 = 16;
-        java.util.Random random = new Random();
+        Random random = new Random();
         for(int l1 = 0; l1 < 1000; l1++)
         {
             int i2 = (i1 + n.nextInt(((int) (byte0)))) - n.nextInt(((int) (byte0)));
@@ -1640,43 +1633,43 @@ public class World
 
     }
 
-    public java.util.List b(kh kh1, cf cf1)
+    public List b(Entity entity1, cf cf1)
     {
         M.clear();
-        int i1 = eo.b((cf1.a - 2D) / 16D);
-        int j1 = eo.b((cf1.d + 2D) / 16D);
-        int k1 = eo.b((cf1.c - 2D) / 16D);
-        int l1 = eo.b((cf1.f + 2D) / 16D);
+        int i1 = MathLib.castIgnoringSign((cf1.a - 2D) / 16D);
+        int j1 = MathLib.castIgnoringSign((cf1.d + 2D) / 16D);
+        int k1 = MathLib.castIgnoringSign((cf1.c - 2D) / 16D);
+        int l1 = MathLib.castIgnoringSign((cf1.f + 2D) / 16D);
         for(int i2 = i1; i2 <= j1; i2++)
         {
             for(int j2 = k1; j2 <= l1; j2++)
                 if(h(i2, j2))
-                    b(i2, j2).a(kh1, cf1, M);
+                    b(i2, j2).a(entity1, cf1, M);
 
         }
 
         return M;
     }
 
-    public java.util.List a(java.lang.Class class1, cf cf1)
+    public List a(Class class1, cf cf1)
     {
-        int i1 = eo.b((cf1.a - 2D) / 16D);
-        int j1 = eo.b((cf1.d + 2D) / 16D);
-        int k1 = eo.b((cf1.c - 2D) / 16D);
-        int l1 = eo.b((cf1.f + 2D) / 16D);
-        java.util.ArrayList arraylist = new ArrayList();
+        int i1 = MathLib.castIgnoringSign((cf1.a - 2D) / 16D);
+        int j1 = MathLib.castIgnoringSign((cf1.d + 2D) / 16D);
+        int k1 = MathLib.castIgnoringSign((cf1.c - 2D) / 16D);
+        int l1 = MathLib.castIgnoringSign((cf1.f + 2D) / 16D);
+        ArrayList arraylist = new ArrayList();
         for(int i2 = i1; i2 <= j1; i2++)
         {
             for(int j2 = k1; j2 <= l1; j2++)
                 if(h(i2, j2))
-                    b(i2, j2).a(class1, cf1, ((java.util.List) (arraylist)));
+                    b(i2, j2).a(class1, cf1, ((List) (arraylist)));
 
         }
 
-        return ((java.util.List) (arraylist));
+        return ((List) (arraylist));
     }
 
-    public java.util.List i()
+    public List i()
     {
         return a;
     }
@@ -1690,35 +1683,35 @@ public class World
 
     }
 
-    public int b(java.lang.Class class1)
+    public int b(Class class1)
     {
         int i1 = 0;
         for(int j1 = 0; j1 < a.size(); j1++)
         {
-            kh kh1 = (kh)a.get(j1);
-            if(class1.isAssignableFrom(((Object) (kh1)).getClass()))
+            Entity entity1 = (Entity)a.get(j1);
+            if(class1.isAssignableFrom(((Object) (entity1)).getClass()))
                 i1++;
         }
 
         return i1;
     }
 
-    public void a(java.util.List list)
+    public void a(List list)
     {
-        a.addAll(((java.util.Collection) (list)));
+        a.addAll(((Collection) (list)));
         for(int i1 = 0; i1 < list.size(); i1++)
-            b((kh)list.get(i1));
+            b((Entity)list.get(i1));
 
     }
 
-    public void b(java.util.List list)
+    public void b(List list)
     {
-        A.addAll(((java.util.Collection) (list)));
+        A.addAll(((Collection) (list)));
     }
 
     public void j()
     {
-        while(H.unloadQueuedChunks()) ;
+        while(chunkProvider.unloadQueuedChunks()) ;
     }
 
     public boolean a(int i1, int j1, int k1, int l1, boolean flag)
@@ -1736,11 +1729,11 @@ public class World
         return i1 > 0 && ly1 == null && ly2.a(this, j1, k1, l1);
     }
 
-    public bl a(kh kh1, kh kh2, float f1)
+    public bl a(Entity entity1, Entity entity2, float f1)
     {
-        int i1 = eo.b(kh1.ak);
-        int j1 = eo.b(kh1.al);
-        int k1 = eo.b(kh1.am);
+        int i1 = MathLib.castIgnoringSign(entity1.posX);
+        int j1 = MathLib.castIgnoringSign(entity1.posY);
+        int k1 = MathLib.castIgnoringSign(entity1.posZ);
         int l1 = (int)(f1 + 16F);
         int i2 = i1 - l1;
         int j2 = j1 - l1;
@@ -1749,14 +1742,14 @@ public class World
         int i3 = j1 + l1;
         int j3 = k1 + l1;
         ci ci1 = new ci(this, i2, j2, k2, l2, i3, j3);
-        return (new cz(((nm) (ci1)))).a(kh1, kh2, f1);
+        return (new cz(((nm) (ci1)))).a(entity1, entity2, f1);
     }
 
-    public bl a(kh kh1, int i1, int j1, int k1, float f1)
+    public bl a(Entity entity1, int i1, int j1, int k1, float f1)
     {
-        int l1 = eo.b(kh1.ak);
-        int i2 = eo.b(kh1.al);
-        int j2 = eo.b(kh1.am);
+        int l1 = MathLib.castIgnoringSign(entity1.posX);
+        int i2 = MathLib.castIgnoringSign(entity1.posY);
+        int j2 = MathLib.castIgnoringSign(entity1.posZ);
         int k2 = (int)(f1 + 8F);
         int l2 = l1 - k2;
         int i3 = i2 - k2;
@@ -1765,7 +1758,7 @@ public class World
         int l3 = i2 + k2;
         int i4 = j2 + k2;
         ci ci1 = new ci(this, l2, i3, j3, k3, l3, i4);
-        return (new cz(((nm) (ci1)))).a(kh1, i1, j1, k1, f1);
+        return (new cz(((nm) (ci1)))).a(entity1, i1, j1, k1, f1);
     }
 
     public boolean j(int i1, int j1, int k1, int l1)
@@ -1818,27 +1811,27 @@ public class World
         return k(i1 + 1, j1, k1, 5);
     }
 
-    public Player a(kh kh1, double d1)
+    public EntityPlayer a(Entity entity1, double d1)
     {
-        return a(kh1.ak, kh1.al, kh1.am, d1);
+        return a(entity1.posX, entity1.posY, entity1.posZ, d1);
     }
 
-    public Player a(double d1, double d2, double d3, double d4)
+    public EntityPlayer a(double d1, double d2, double d3, double d4)
     {
         double d5 = -1D;
-        Player player1 = null;
+        EntityPlayer entityPlayer1 = null;
         for(int i1 = 0; i1 < k.size(); i1++)
         {
-            Player player2 = (Player)k.get(i1);
-            double d6 = player2.d(d1, d2, d3);
+            EntityPlayer entityPlayer2 = (EntityPlayer)k.get(i1);
+            double d6 = entityPlayer2.distance(d1, d2, d3);
             if((d4 < 0.0D || d6 < d4 * d4) && (d5 == -1D || d6 < d5))
             {
                 d5 = d6;
-                player1 = player2;
+                entityPlayer1 = entityPlayer2;
             }
         }
 
-        return player1;
+        return entityPlayer1;
     }
 
     public void a(int i1, int j1, int k1, int l1, int i2, int j2, byte abyte0[])
@@ -1885,9 +1878,9 @@ public class World
     public void l()
     {
         try {
-        java.io.DataInputStream datainputstream;
-        java.io.File file = new File(t, "session.lock");
-        datainputstream = new DataInputStream(((java.io.InputStream) (new FileInputStream(file))));
+        DataInputStream datainputstream;
+        File file = new File(t, "session.lock");
+        datainputstream = new DataInputStream(((InputStream) (new FileInputStream(file))));
             try
             {
         if(datainputstream.readLong() != G)
@@ -1898,7 +1891,7 @@ public class World
         datainputstream.close();
             }
         }
-        catch (java.io.IOException ioexception)
+        catch (IOException ioexception)
         {
         throw new lx("Failed to check session lock, aborting");
         }
@@ -1909,10 +1902,10 @@ public class World
         time = l1;
     }
 
-    public void f(kh kh1)
+    public void f(Entity entity1)
     {
-        int i1 = eo.b(kh1.ak / 16D);
-        int j1 = eo.b(kh1.am / 16D);
+        int i1 = MathLib.castIgnoringSign(entity1.posX / 16D);
+        int j1 = MathLib.castIgnoringSign(entity1.posZ / 16D);
         byte byte0 = 2;
         for(int k1 = i1 - byte0; k1 <= i1 + byte0; k1++)
         {
@@ -1921,10 +1914,10 @@ public class World
 
         }
 
-        if(!a.contains(((Object) (kh1))))
+        if(!a.contains(((Object) (entity1))))
         {
-            java.lang.System.out.println("REINSERTING PLAYER!");
-            a.add(((Object) (kh1)));
+            System.out.println("REINSERTING PLAYER!");
+            a.add(((Object) (entity1)));
         }
     }
 
diff --git "a/temp\\src\\java/a.java" "b/src\\main\\java/a.java"
index c0e4e9d..851e7a6 100644
--- "a/temp\\src\\java/a.java"
+++ "b/src\\main\\java/a.java"
@@ -32,7 +32,7 @@ public class a
         float f1 = a1.a - a;
         float f2 = a1.b - b;
         float f3 = a1.c - c;
-        return eo.c(f1 * f1 + f2 * f2 + f3 * f3);
+        return MathLib.sqrt(f1 * f1 + f2 * f2 + f3 * f3);
     }
 
     public boolean equals(Object obj)
diff --git "a/temp\\src\\java/aa.java" "b/src\\main\\java/aa.java"
index 675b12c..846eb93 100644
--- "a/temp\\src\\java/aa.java"
+++ "b/src\\main\\java/aa.java"
@@ -61,9 +61,9 @@ public class aa extends z
         double d = 0.0D;
         if(i.world != null && i.g != null)
         {
-            double d1 = (double)i.world.spawnX - i.g.ak;
-            double d3 = (double)i.world.spawnZ - i.g.am;
-            d = ((double)(i.g.aq - 90F) * 3.1415926535897931D) / 180D - java.lang.Math.atan2(d3, d1);
+            double d1 = (double)i.world.spawnX - i.g.posX;
+            double d3 = (double)i.world.spawnZ - i.g.posZ;
+            d = ((double)(i.g.yaw - 90F) * 3.1415926535897931D) / 180D - java.lang.Math.atan2(d3, d1);
         }
         double d2;
         for(d2 = d - k; d2 < -3.1415926535897931D; d2 += 6.2831853071795862D);
diff --git "a/temp\\src\\java/ab.java" "b/src\\main\\java/ab.java"
index 8e9bfb6..bbdd51a 100644
--- "a/temp\\src\\java/ab.java"
+++ "b/src\\main\\java/ab.java"
@@ -24,7 +24,7 @@ public class ab extends ak
         e.setSeed(187L);
         ev ev1 = item1.a;
         org.lwjgl.opengl.GL11.glPushMatrix();
-        float f2 = eo.a(((float) item1.age + f1) / 10F + item1.d) * 0.1F + 0.1F;
+        float f2 = MathLib.sin(((float) item1.age + f1) / 10F + item1.d) * 0.1F + 0.1F;
         float f3 = (((float) item1.age + f1) / 20F + item1.d) * 57.29578F;
         byte byte0 = 1;
         if(item1.a.count > 1)
@@ -190,8 +190,8 @@ public class ab extends ak
         ho1.a();
     }
 
-    public void a(kh kh, double d1, double d2, double d3, float f, float f1)
+    public void a(Entity entity, double d1, double d2, double d3, float f, float f1)
     {
-        a((Item)kh, d1, d2, d3, f, f1);
+        a((Item) entity, d1, d2, d3, f, f1);
     }
 }
diff --git "a/temp\\src\\java/ac.java" "b/src\\main\\java/ac.java"
index bab6a4f..443e836 100644
--- "a/temp\\src\\java/ac.java"
+++ "b/src\\main\\java/ac.java"
@@ -16,25 +16,25 @@ public class ac extends di
         a = j;
     }
 
-    public ev a(ev ev1, World world1, Player player1)
+    public ev a(ev ev1, World world1, EntityPlayer entityPlayer1)
     {
         float f = 1.0F;
-        float f1 = player1.at + (player1.ar - player1.at) * f;
-        float f2 = player1.as + (player1.aq - player1.as) * f;
-        double d = player1.ah + (player1.ak - player1.ah) * (double)f;
-        double d1 = player1.ai + (player1.al - player1.ai) * (double)f;
-        double d2 = player1.aj + (player1.am - player1.aj) * (double)f;
-        aj aj1 = ((aj)null).b(d, d1, d2);
-        float f3 = eo.b(-f2 * 0.01745329F - 3.141593F);
-        float f4 = eo.a(-f2 * 0.01745329F - 3.141593F);
-        float f5 = -eo.b(-f1 * 0.01745329F);
-        float f6 = eo.a(-f1 * 0.01745329F);
+        float f1 = entityPlayer1.prevPitch + (entityPlayer1.pitch - entityPlayer1.prevPitch) * f;
+        float f2 = entityPlayer1.prevYaw + (entityPlayer1.yaw - entityPlayer1.prevYaw) * f;
+        double d = entityPlayer1.prevPosX + (entityPlayer1.posX - entityPlayer1.prevPosX) * (double)f;
+        double d1 = entityPlayer1.prevPosY + (entityPlayer1.posY - entityPlayer1.prevPosY) * (double)f;
+        double d2 = entityPlayer1.prevPosZ + (entityPlayer1.posZ - entityPlayer1.prevPosZ) * (double)f;
+        Vec3 vec31 = ((Vec3)null).recycle(d, d1, d2);
+        float f3 = MathLib.cos(-f2 * 0.01745329F - 3.141593F);
+        float f4 = MathLib.sin(-f2 * 0.01745329F - 3.141593F);
+        float f5 = -MathLib.cos(-f1 * 0.01745329F);
+        float f6 = MathLib.sin(-f1 * 0.01745329F);
         float f7 = f4 * f5;
         float f8 = f6;
         float f9 = f3 * f5;
         double d3 = 5D;
-        aj aj2 = aj1.c((double)f7 * d3, (double)f8 * d3, (double)f9 * d3);
-        mf mf1 = world1.a(aj1, aj2, a == 0);
+        Vec3 vec32 = vec31.add((double)f7 * d3, (double)f8 * d3, (double)f9 * d3);
+        mf mf1 = world1.a(vec31, vec32, a == 0);
         if(mf1 == null)
             return ev1;
         if(mf1.a == 0)
@@ -77,7 +77,7 @@ public class ac extends di
                 }
             }
         } else
-        if(a == 0 && (mf1.g instanceof Cow))
+        if(a == 0 && (mf1.g instanceof EntityCow))
             return new ev(di.aE);
         return ev1;
     }
diff --git "a/temp\\src\\java/ai.java" "b/src\\main\\java/ai.java"
index ae693e3..8dca878 100644
--- "a/temp\\src\\java/ai.java"
+++ "b/src\\main\\java/ai.java"
@@ -20,22 +20,22 @@ public class ai extends ly
         return 30;
     }
 
-    public void b(World world1, int j, int k, int l, Player player)
+    public void b(World world1, int j, int k, int l, EntityPlayer entityPlayer)
     {
         h(world1, j, k, l);
-        super.b(world1, j, k, l, player);
+        super.b(world1, j, k, l, entityPlayer);
     }
 
-    public void a(World world1, int j, int k, int l, kh kh)
+    public void a(World world1, int j, int k, int l, Entity entity)
     {
         h(world1, j, k, l);
-        super.a(world1, j, k, l, kh);
+        super.a(world1, j, k, l, entity);
     }
 
-    public boolean a(World world1, int j, int k, int l, Player player)
+    public boolean a(World world1, int j, int k, int l, EntityPlayer entityPlayer)
     {
         h(world1, j, k, l);
-        return super.a(world1, j, k, l, player);
+        return super.a(world1, j, k, l, entityPlayer);
     }
 
     private void h(World world1, int j, int k, int l)
diff --git "a/temp\\src\\java/aj.java" "b/temp\\src\\java/aj.java"
deleted file mode 100644
index 500a0cf..0000000
--- "a/temp\\src\\java/aj.java"
+++ /dev/null
@@ -1,178 +0,0 @@
-// Jad home page: http://www.kpdus.com/jad.html
-// Decompiler options: fullnames deadcode fieldsfirst safe 
-// Source File Name:   SourceFile
-
-import java.util.ArrayList;
-
-public class aj
-{
-
-    private static java.util.List d = new ArrayList();
-    private static int e = 0;
-    public double a;
-    public double b;
-    public double c;
-
-    public static aj a(double d1, double d2, double d3)
-    {
-        return new aj(d1, d2, d3);
-    }
-
-    public static void a()
-    {
-        e = 0;
-    }
-
-    public static aj b(double d1, double d2, double d3)
-    {
-        if(e >= d.size())
-            d.add(((Object) (aj.a(0.0D, 0.0D, 0.0D))));
-        return ((aj)d.get(e++)).e(d1, d2, d3);
-    }
-
-    private aj(double d1, double d2, double d3)
-    {
-        if(d1 == -0D)
-            d1 = 0.0D;
-        if(d2 == -0D)
-            d2 = 0.0D;
-        if(d3 == -0D)
-            d3 = 0.0D;
-        a = d1;
-        b = d2;
-        c = d3;
-    }
-
-    private aj e(double d1, double d2, double d3)
-    {
-        a = d1;
-        b = d2;
-        c = d3;
-        return this;
-    }
-
-    public aj a(aj aj1)
-    {
-        return aj.b(aj1.a - a, aj1.b - b, aj1.c - c);
-    }
-
-    public aj b()
-    {
-        double d1 = eo.a(a * a + b * b + c * c);
-        if(d1 < 0.0001D)
-            return aj.b(0.0D, 0.0D, 0.0D);
-        else
-            return aj.b(a / d1, b / d1, c / d1);
-    }
-
-    public aj b(aj aj1)
-    {
-        return aj.b(b * aj1.c - c * aj1.b, c * aj1.a - a * aj1.c, a * aj1.b - b * aj1.a);
-    }
-
-    public aj c(double d1, double d2, double d3)
-    {
-        return aj.b(a + d1, b + d2, c + d3);
-    }
-
-    public double c(aj aj1)
-    {
-        double d1 = aj1.a - a;
-        double d2 = aj1.b - b;
-        double d3 = aj1.c - c;
-        return (double)eo.a(d1 * d1 + d2 * d2 + d3 * d3);
-    }
-
-    public double d(aj aj1)
-    {
-        double d1 = aj1.a - a;
-        double d2 = aj1.b - b;
-        double d3 = aj1.c - c;
-        return d1 * d1 + d2 * d2 + d3 * d3;
-    }
-
-    public double d(double d1, double d2, double d3)
-    {
-        double d4 = d1 - a;
-        double d5 = d2 - b;
-        double d6 = d3 - c;
-        return d4 * d4 + d5 * d5 + d6 * d6;
-    }
-
-    public double c()
-    {
-        return (double)eo.a(a * a + b * b + c * c);
-    }
-
-    public aj a(aj aj1, double d1)
-    {
-        double d2 = aj1.a - a;
-        double d3 = aj1.b - b;
-        double d4 = aj1.c - c;
-        if(d2 * d2 < 1.0000000116860974E-007D)
-            return null;
-        double d5 = (d1 - a) / d2;
-        if(d5 < 0.0D || d5 > 1.0D)
-            return null;
-        else
-            return aj.b(a + d2 * d5, b + d3 * d5, c + d4 * d5);
-    }
-
-    public aj b(aj aj1, double d1)
-    {
-        double d2 = aj1.a - a;
-        double d3 = aj1.b - b;
-        double d4 = aj1.c - c;
-        if(d3 * d3 < 1.0000000116860974E-007D)
-            return null;
-        double d5 = (d1 - b) / d3;
-        if(d5 < 0.0D || d5 > 1.0D)
-            return null;
-        else
-            return aj.b(a + d2 * d5, b + d3 * d5, c + d4 * d5);
-    }
-
-    public aj c(aj aj1, double d1)
-    {
-        double d2 = aj1.a - a;
-        double d3 = aj1.b - b;
-        double d4 = aj1.c - c;
-        if(d4 * d4 < 1.0000000116860974E-007D)
-            return null;
-        double d5 = (d1 - c) / d4;
-        if(d5 < 0.0D || d5 > 1.0D)
-            return null;
-        else
-            return aj.b(a + d2 * d5, b + d3 * d5, c + d4 * d5);
-    }
-
-    public String toString()
-    {
-        return (new StringBuilder()).append("(").append(a).append(", ").append(b).append(", ").append(c).append(")").toString();
-    }
-
-    public void a(float f)
-    {
-        float f1 = eo.b(f);
-        float f2 = eo.a(f);
-        double d1 = a;
-        double d2 = b * (double)f1 + c * (double)f2;
-        double d3 = c * (double)f1 - b * (double)f2;
-        a = d1;
-        b = d2;
-        c = d3;
-    }
-
-    public void b(float f)
-    {
-        float f1 = eo.b(f);
-        float f2 = eo.a(f);
-        double d1 = a * (double)f1 + c * (double)f2;
-        double d2 = b;
-        double d3 = c * (double)f1 - a * (double)f2;
-        a = d1;
-        b = d2;
-        c = d3;
-    }
-
-}
diff --git "a/temp\\src\\java/ak.java" "b/src\\main\\java/ak.java"
index 572a7c8..dceaf2c 100644
--- "a/temp\\src\\java/ak.java"
+++ "b/src\\main\\java/ak.java"
@@ -19,8 +19,8 @@ public abstract class ak
         c = 1.0F;
     }
 
-    public abstract void a(kh kh1, double d1, double d2, double d3, 
-            float f, float f1);
+    public abstract void a(Entity entity1, double d1, double d2, double d3,
+                           float f, float f1);
 
     protected void a(String s)
     {
@@ -34,8 +34,8 @@ public abstract class ak
         ey1.b(ey1.a(s, s1));
     }
 
-    private void a(kh kh1, double d1, double d2, double d3, 
-            float f)
+    private void a(Entity entity1, double d1, double d2, double d3,
+                   float f)
     {
         org.lwjgl.opengl.GL11.glDisable(2896);
         int i = ly.as.bb;
@@ -47,14 +47,14 @@ public abstract class ak
         float f4 = ((float)k + 15.99F) / 256F;
         org.lwjgl.opengl.GL11.glPushMatrix();
         org.lwjgl.opengl.GL11.glTranslatef((float)d1, (float)d2, (float)d3);
-        float f5 = kh1.aC * 1.4F;
+        float f5 = entity1.aC * 1.4F;
         org.lwjgl.opengl.GL11.glScalef(f5, f5, f5);
         a("/terrain.png");
         ho ho1 = ho.a;
         float f6 = 1.0F;
         float f7 = 0.5F;
         float f8 = 0.0F;
-        float f9 = kh1.aD / kh1.aC;
+        float f9 = entity1.aD / entity1.aC;
         org.lwjgl.opengl.GL11.glRotatef(-a.i, 0.0F, 1.0F, 0.0F);
         org.lwjgl.opengl.GL11.glTranslatef(0.0F, 0.0F, 0.4F + (float)(int)f9 * 0.02F);
         org.lwjgl.opengl.GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
@@ -75,8 +75,8 @@ public abstract class ak
         org.lwjgl.opengl.GL11.glEnable(2896);
     }
 
-    private void c(kh kh1, double d1, double d2, double d3, 
-            float f, float f1)
+    private void c(Entity entity1, double d1, double d2, double d3,
+                   float f, float f1)
     {
         org.lwjgl.opengl.GL11.glEnable(3042);
         org.lwjgl.opengl.GL11.glBlendFunc(770, 771);
@@ -85,15 +85,15 @@ public abstract class ak
         World world1 = b();
         org.lwjgl.opengl.GL11.glDepthMask(false);
         float f2 = b;
-        double d4 = kh1.aI + (kh1.ak - kh1.aI) * (double)f1;
-        double d5 = kh1.aJ + (kh1.al - kh1.aJ) * (double)f1 + (double)kh1.h_();
-        double d6 = kh1.aK + (kh1.am - kh1.aK) * (double)f1;
-        int i = eo.b(d4 - (double)f2);
-        int j = eo.b(d4 + (double)f2);
-        int k = eo.b(d5 - (double)f2);
-        int l = eo.b(d5);
-        int i1 = eo.b(d6 - (double)f2);
-        int j1 = eo.b(d6 + (double)f2);
+        double d4 = entity1.aI + (entity1.posX - entity1.aI) * (double)f1;
+        double d5 = entity1.aJ + (entity1.posY - entity1.aJ) * (double)f1 + (double) entity1.h_();
+        double d6 = entity1.aK + (entity1.posZ - entity1.aK) * (double)f1;
+        int i = MathLib.castIgnoringSign(d4 - (double)f2);
+        int j = MathLib.castIgnoringSign(d4 + (double)f2);
+        int k = MathLib.castIgnoringSign(d5 - (double)f2);
+        int l = MathLib.castIgnoringSign(d5);
+        int i1 = MathLib.castIgnoringSign(d6 - (double)f2);
+        int j1 = MathLib.castIgnoringSign(d6 + (double)f2);
         double d7 = d1 - d4;
         double d8 = d2 - d5;
         double d9 = d3 - d6;
@@ -107,7 +107,7 @@ public abstract class ak
                 {
                     int j2 = world1.a(k1, l1 - 1, i2);
                     if(j2 > 0 && world1.j(k1, l1, i2) > 3)
-                        a(ly.n[j2], d1, d2 + (double)kh1.h_(), d3, k1, l1, i2, f, f2, d7, d8 + (double)kh1.h_(), d9);
+                        a(ly.n[j2], d1, d2 + (double) entity1.h_(), d3, k1, l1, i2, f, f2, d7, d8 + (double) entity1.h_(), d9);
                 }
 
             }
@@ -231,18 +231,18 @@ public abstract class ak
         a = kx1;
     }
 
-    public void b(kh kh1, double d1, double d2, double d3, 
-            float f, float f1)
+    public void b(Entity entity1, double d1, double d2, double d3,
+                  float f, float f1)
     {
         if(a.k.i && b > 0.0F)
         {
-            double d4 = a.a(kh1.ak, kh1.al, kh1.am);
+            double d4 = a.a(entity1.posX, entity1.posY, entity1.posZ);
             float f2 = (float)((1.0D - d4 / 256D) * (double)c);
             if(f2 > 0.0F)
-                c(kh1, d1, d2, d3, f2, f1);
+                c(entity1, d1, d2, d3, f2, f1);
         }
-        if(kh1.aT > 0)
-            a(kh1, d1, d2, d3, f1);
+        if(entity1.fire > 0)
+            a(entity1, d1, d2, d3, f1);
     }
 
     public kd a()
diff --git "a/temp\\src\\java/al.java" "b/src\\main\\java/al.java"
index ee46022..0290c57 100644
--- "a/temp\\src\\java/al.java"
+++ "b/src\\main\\java/al.java"
@@ -69,7 +69,7 @@ public class al extends ly
         }
     }
 
-    public void b(World world1, int i, int j, int k, kh kh)
+    public void b(World world1, int i, int j, int k, Entity entity)
     {
         if(world1.e(i, j, k) == 1)
         {
@@ -88,11 +88,11 @@ public class al extends ly
         float f = 0.125F;
         java.util.List list = null;
         if(a == js.a)
-            list = world1.b(((kh) (null)), cf.b((float)i + f, j, (float)k + f, (float)(i + 1) - f, (double)j + 0.25D, (float)(k + 1) - f));
+            list = world1.b(((Entity) (null)), cf.b((float)i + f, j, (float)k + f, (float)(i + 1) - f, (double)j + 0.25D, (float)(k + 1) - f));
         if(a == js.b)
-            list = world1.a(Mob.class, cf.b((float)i + f, j, (float)k + f, (float)(i + 1) - f, (double)j + 0.25D, (float)(k + 1) - f));
+            list = world1.a(EntityMob.class, cf.b((float)i + f, j, (float)k + f, (float)(i + 1) - f, (double)j + 0.25D, (float)(k + 1) - f));
         if(a == js.c)
-            list = world1.a(Player.class, cf.b((float)i + f, j, (float)k + f, (float)(i + 1) - f, (double)j + 0.25D, (float)(k + 1) - f));
+            list = world1.a(EntityPlayer.class, cf.b((float)i + f, j, (float)k + f, (float)(i + 1) - f, (double)j + 0.25D, (float)(k + 1) - f));
         if(list.size() > 0)
             flag1 = true;
         if(flag1 && !flag)
diff --git "a/temp\\src\\java/ap.java" "b/src\\main\\java/ap.java"
index f419155..4b5199e 100644
--- "a/temp\\src\\java/ap.java"
+++ "b/src\\main\\java/ap.java"
@@ -11,9 +11,9 @@ public class ap extends oj
         super(i, j);
     }
 
-    public ev a(ev ev1, World world, Player player)
+    public ev a(ev ev1, World world, EntityPlayer entityPlayer)
     {
-        super.a(ev1, world, player);
+        super.a(ev1, world, entityPlayer);
         return new ev(di.C);
     }
 }
diff --git "a/temp\\src\\java/ar.java" "b/src\\main\\java/ar.java"
index 9267fb9..f00a28d 100644
--- "a/temp\\src\\java/ar.java"
+++ "b/src\\main\\java/ar.java"
@@ -14,11 +14,11 @@ public class ar
         c = ((java.util.List) (new ArrayList()));
     }
 
-    public void a(Player player1)
+    public void a(EntityPlayer entityPlayer1)
     {
-        eu eu1 = player1.b;
+        eu eu1 = entityPlayer1.b;
         if(eu1.e != null)
-            player1.a(eu1.e);
+            entityPlayer1.a(eu1.e);
     }
 
     public void a(gh gh)
diff --git "a/temp\\src\\java/at.java" "b/src\\main\\java/at.java"
index 7bc3e5c..d691447 100644
--- "a/temp\\src\\java/at.java"
+++ "b/src\\main\\java/at.java"
@@ -27,8 +27,8 @@ public class at extends z
             for(int l = 0; l < 16; l++)
             {
                 float f = 0.0F;
-                int j1 = (int)(eo.a(((float)l * 3.141593F * 2.0F) / 16F) * 1.2F);
-                int k1 = (int)(eo.a(((float)k * 3.141593F * 2.0F) / 16F) * 1.2F);
+                int j1 = (int)(MathLib.sin(((float)l * 3.141593F * 2.0F) / 16F) * 1.2F);
+                int k1 = (int)(MathLib.sin(((float)k * 3.141593F * 2.0F) / 16F) * 1.2F);
                 for(int i2 = k - 1; i2 <= k + 1; i2++)
                 {
                     for(int k2 = l - 1; k2 <= l + 1; k2++)
diff --git "a/temp\\src\\java/av.java" "b/src\\main\\java/av.java"
index b88a0f7..3ff455a 100644
--- "a/temp\\src\\java/av.java"
+++ "b/src\\main\\java/av.java"
@@ -15,7 +15,7 @@ public class av extends di
         a(ly.n[i + 256].a(2));
     }
 
-    public boolean a(ev ev1, Player player, World world1, int i, int j, int k, int l)
+    public boolean a(ev ev1, EntityPlayer entityPlayer, World world1, int i, int j, int k, int l)
     {
         if(world1.a(i, j, k) == ly.aT.bc)
         {
diff --git "a/temp\\src\\java/az.java" "b/src\\main\\java/az.java"
index e10e536..50768d9 100644
--- "a/temp\\src\\java/az.java"
+++ "b/src\\main\\java/az.java"
@@ -44,9 +44,9 @@ public class az
         d.clear();
         for(int j = 0; j < world1.k.size(); j++)
         {
-            Player player1 = (Player) world1.k.get(j);
-            int l = eo.b(player1.ak / 16D);
-            int i1 = eo.b(player1.am / 16D);
+            EntityPlayer entityPlayer1 = (EntityPlayer) world1.k.get(j);
+            int l = MathLib.castIgnoringSign(entityPlayer1.posX / 16D);
+            int i1 = MathLib.castIgnoringSign(entityPlayer1.posZ / 16D);
             byte byte0 = 4;
             for(int k1 = -byte0; k1 <= byte0; k1++)
             {
@@ -100,10 +100,10 @@ public class az
                         float f6 = f3 * f3 + f4 * f4 + f5 * f5;
                         if(f6 < 576F)
                             continue;
-                        Mob mob1;
+                        EntityMob entityMob1;
                         try
                         {
-                            mob1 = (Mob)c[j1].getConstructor(new java.lang.Class[] {
+                            entityMob1 = (EntityMob)c[j1].getConstructor(new java.lang.Class[] {
                                 World.class
                             }).newInstance(new Object[] {
                                     world1
@@ -114,17 +114,17 @@ public class az
                             exception.printStackTrace();
                             return k;
                         }
-                        mob1.c(f, f1, f2, world1.n.nextFloat() * 360F, 0.0F);
-                        if(!mob1.a())
+                        entityMob1.c(f, f1, f2, world1.n.nextFloat() * 360F, 0.0F);
+                        if(!entityMob1.a())
                             continue;
                         k++;
-                        world1.a(((kh) (mob1)));
-                        if((mob1 instanceof Spider) && world1.n.nextInt(100) == 0)
+                        world1.a(((Entity) (entityMob1)));
+                        if((entityMob1 instanceof EntitySpider) && world1.n.nextInt(100) == 0)
                         {
-                            Skeleton skeleton1 = new Skeleton(world1);
-                            skeleton1.c(f, f1, f2, mob1.aq, 0.0F);
-                            world1.a(((kh) (skeleton1)));
-                            skeleton1.g(((kh) (mob1)));
+                            EntitySkeleton entitySkeleton1 = new EntitySkeleton(world1);
+                            entitySkeleton1.c(f, f1, f2, entityMob1.yaw, 0.0F);
+                            world1.a(((Entity) (entitySkeleton1)));
+                            entitySkeleton1.g(((Entity) (entityMob1)));
                         }
                     }
 
diff --git "a/temp\\src\\java/b.java" "b/src\\main\\java/b.java"
index 1161a45..60ae2a3 100644
--- "a/temp\\src\\java/b.java"
+++ "b/src\\main\\java/b.java"
@@ -143,17 +143,17 @@ label0:
                 ev1.count -= i1;
                 Item item1 = new Item(world1, (float)i + f, (float)j + f1, (float)k + f2, new ev(ev1.id, i1, ev1.damage));
                 float f3 = 0.05F;
-                item1.an = (float)a.nextGaussian() * f3;
-                item1.ao = (float)a.nextGaussian() * f3 + 0.2F;
-                item1.ap = (float)a.nextGaussian() * f3;
-                world1.a(((kh) (item1)));
+                item1.motionX = (float)a.nextGaussian() * f3;
+                item1.motionY = (float)a.nextGaussian() * f3 + 0.2F;
+                item1.motionZ = (float)a.nextGaussian() * f3;
+                world1.a(((Entity) (item1)));
             } while(true);
         }
 
         super.b(world1, i, j, k);
     }
 
-    public boolean a(World world1, int i, int j, int k, Player player1)
+    public boolean a(World world1, int i, int j, int k, EntityPlayer entityPlayer1)
     {
         Object obj = ((Object) ((Chest) world1.b(i, j, k)));
         if(world1.g(i, j + 1, k))
@@ -174,7 +174,7 @@ label0:
             obj = ((Object) (new hs("Large chest", ((gh) ((Chest) world1.b(i, j, k - 1))), ((gh) (obj)))));
         if(world1.a(i, j, k + 1) == bc)
             obj = ((Object) (new hs("Large chest", ((gh) (obj)), ((gh) ((Chest) world1.b(i, j, k + 1))))));
-        player1.a(((gh) (obj)));
+        entityPlayer1.a(((gh) (obj)));
         return true;
     }
 
diff --git "a/temp\\src\\java/ba.java" "b/src\\main\\java/ba.java"
index c9d9439..0003f61 100644
--- "a/temp\\src\\java/ba.java"
+++ "b/src\\main\\java/ba.java"
@@ -14,24 +14,24 @@ public class ba extends nq
         k = 1.0F;
         b = 32;
         a(0.02F, 0.02F);
-        g = g * (aQ.nextFloat() * 0.6F + 0.2F);
-        an = d3 * 0.20000000298023224D + (double)((float)(java.lang.Math.random() * 2D - 1.0D) * 0.02F);
-        ao = d4 * 0.20000000298023224D + (double)((float)(java.lang.Math.random() * 2D - 1.0D) * 0.02F);
-        ap = d5 * 0.20000000298023224D + (double)((float)(java.lang.Math.random() * 2D - 1.0D) * 0.02F);
+        g = g * (rnd.nextFloat() * 0.6F + 0.2F);
+        motionX = d3 * 0.20000000298023224D + (double)((float)(java.lang.Math.random() * 2D - 1.0D) * 0.02F);
+        motionY = d4 * 0.20000000298023224D + (double)((float)(java.lang.Math.random() * 2D - 1.0D) * 0.02F);
+        motionZ = d5 * 0.20000000298023224D + (double)((float)(java.lang.Math.random() * 2D - 1.0D) * 0.02F);
         f = (int)(8D / (java.lang.Math.random() * 0.80000000000000004D + 0.20000000000000001D));
     }
 
     public void e_()
     {
-        ah = ak;
-        ai = al;
-        aj = am;
-        ao += 0.002D;
-        c(an, ao, ap);
-        an *= 0.85000002384185791D;
-        ao *= 0.85000002384185791D;
-        ap *= 0.85000002384185791D;
-        if(ag.f(eo.b(ak), eo.b(al), eo.b(am)) != gb.f)
+        prevPosX = posX;
+        prevPosY = posY;
+        prevPosZ = posZ;
+        motionY += 0.002D;
+        c(motionX, motionY, motionZ);
+        motionX *= 0.85000002384185791D;
+        motionY *= 0.85000002384185791D;
+        motionZ *= 0.85000002384185791D;
+        if(ag.f(MathLib.castIgnoringSign(posX), MathLib.castIgnoringSign(posY), MathLib.castIgnoringSign(posZ)) != gb.f)
             F();
         if(f-- <= 0)
             F();
diff --git "a/temp\\src\\java/bc.java" "b/src\\main\\java/bc.java"
index e25bfee..3f12bad 100644
--- "a/temp\\src\\java/bc.java"
+++ "b/src\\main\\java/bc.java"
@@ -140,58 +140,58 @@ public class bc
         float f6 = ((float)k2 + 15.99F) / 256F;
         float f7 = (float)l2 / 256F;
         float f8 = ((float)l2 + 15.99F) / 256F;
-        aj aaj[] = new aj[8];
+        Vec3 aaj[] = new Vec3[8];
         float f9 = 0.0625F;
         float f10 = 0.0625F;
         float f11 = 0.625F;
-        aaj[0] = aj.b(-f9, 0.0D, -f10);
-        aaj[1] = aj.b(f9, 0.0D, -f10);
-        aaj[2] = aj.b(f9, 0.0D, f10);
-        aaj[3] = aj.b(-f9, 0.0D, f10);
-        aaj[4] = aj.b(-f9, f11, -f10);
-        aaj[5] = aj.b(f9, f11, -f10);
-        aaj[6] = aj.b(f9, f11, f10);
-        aaj[7] = aj.b(-f9, f11, f10);
+        aaj[0] = Vec3.recycle(-f9, 0.0D, -f10);
+        aaj[1] = Vec3.recycle(f9, 0.0D, -f10);
+        aaj[2] = Vec3.recycle(f9, 0.0D, f10);
+        aaj[3] = Vec3.recycle(-f9, 0.0D, f10);
+        aaj[4] = Vec3.recycle(-f9, f11, -f10);
+        aaj[5] = Vec3.recycle(f9, f11, -f10);
+        aaj[6] = Vec3.recycle(f9, f11, f10);
+        aaj[7] = Vec3.recycle(-f9, f11, f10);
         for(int i3 = 0; i3 < 8; i3++)
         {
             if(flag)
             {
-                aaj[i3].c -= 0.0625D;
-                aaj[i3].a(0.6981317F);
+                aaj[i3].z -= 0.0625D;
+                aaj[i3].rotatePitch(0.6981317F);
             } else
             {
-                aaj[i3].c += 0.0625D;
-                aaj[i3].a(-0.6981317F);
+                aaj[i3].z += 0.0625D;
+                aaj[i3].rotatePitch(-0.6981317F);
             }
             if(i2 == 6)
-                aaj[i3].b(1.570796F);
+                aaj[i3].rotateYaw(1.570796F);
             if(i2 < 5)
             {
-                aaj[i3].b -= 0.375D;
-                aaj[i3].a(1.570796F);
+                aaj[i3].y -= 0.375D;
+                aaj[i3].rotatePitch(1.570796F);
                 if(i2 == 4)
-                    aaj[i3].b(0.0F);
+                    aaj[i3].rotateYaw(0.0F);
                 if(i2 == 3)
-                    aaj[i3].b(3.141593F);
+                    aaj[i3].rotateYaw(3.141593F);
                 if(i2 == 2)
-                    aaj[i3].b(1.570796F);
+                    aaj[i3].rotateYaw(1.570796F);
                 if(i2 == 1)
-                    aaj[i3].b(-1.570796F);
-                aaj[i3].a += (double)i1 + 0.5D;
-                aaj[i3].b += (float)j1 + 0.5F;
-                aaj[i3].c += (double)k1 + 0.5D;
+                    aaj[i3].rotateYaw(-1.570796F);
+                aaj[i3].x += (double)i1 + 0.5D;
+                aaj[i3].y += (float)j1 + 0.5F;
+                aaj[i3].z += (double)k1 + 0.5D;
             } else
             {
-                aaj[i3].a += (double)i1 + 0.5D;
-                aaj[i3].b += (float)j1 + 0.125F;
-                aaj[i3].c += (double)k1 + 0.5D;
+                aaj[i3].x += (double)i1 + 0.5D;
+                aaj[i3].y += (float)j1 + 0.125F;
+                aaj[i3].z += (double)k1 + 0.5D;
             }
         }
 
-        aj aj1 = null;
-        aj aj2 = null;
-        aj aj3 = null;
-        aj aj4 = null;
+        Vec3 vec31 = null;
+        Vec3 vec32 = null;
+        Vec3 vec33 = null;
+        Vec3 vec34 = null;
         for(int j3 = 0; j3 < 6; j3++)
         {
             if(j3 == 0)
@@ -210,50 +210,50 @@ public class bc
             }
             if(j3 == 0)
             {
-                aj1 = aaj[0];
-                aj2 = aaj[1];
-                aj3 = aaj[2];
-                aj4 = aaj[3];
+                vec31 = aaj[0];
+                vec32 = aaj[1];
+                vec33 = aaj[2];
+                vec34 = aaj[3];
             } else
             if(j3 == 1)
             {
-                aj1 = aaj[7];
-                aj2 = aaj[6];
-                aj3 = aaj[5];
-                aj4 = aaj[4];
+                vec31 = aaj[7];
+                vec32 = aaj[6];
+                vec33 = aaj[5];
+                vec34 = aaj[4];
             } else
             if(j3 == 2)
             {
-                aj1 = aaj[1];
-                aj2 = aaj[0];
-                aj3 = aaj[4];
-                aj4 = aaj[5];
+                vec31 = aaj[1];
+                vec32 = aaj[0];
+                vec33 = aaj[4];
+                vec34 = aaj[5];
             } else
             if(j3 == 3)
             {
-                aj1 = aaj[2];
-                aj2 = aaj[1];
-                aj3 = aaj[5];
-                aj4 = aaj[6];
+                vec31 = aaj[2];
+                vec32 = aaj[1];
+                vec33 = aaj[5];
+                vec34 = aaj[6];
             } else
             if(j3 == 4)
             {
-                aj1 = aaj[3];
-                aj2 = aaj[2];
-                aj3 = aaj[6];
-                aj4 = aaj[7];
+                vec31 = aaj[3];
+                vec32 = aaj[2];
+                vec33 = aaj[6];
+                vec34 = aaj[7];
             } else
             if(j3 == 5)
             {
-                aj1 = aaj[0];
-                aj2 = aaj[3];
-                aj3 = aaj[7];
-                aj4 = aaj[4];
+                vec31 = aaj[0];
+                vec32 = aaj[3];
+                vec33 = aaj[7];
+                vec34 = aaj[4];
             }
-            ho1.a(aj1.a, aj1.b, aj1.c, f5, f8);
-            ho1.a(aj2.a, aj2.b, aj2.c, f6, f8);
-            ho1.a(aj3.a, aj3.b, aj3.c, f6, f7);
-            ho1.a(aj4.a, aj4.b, aj4.c, f5, f7);
+            ho1.a(vec31.x, vec31.y, vec31.z, f5, f8);
+            ho1.a(vec32.x, vec32.y, vec32.z, f6, f8);
+            ho1.a(vec33.x, vec33.y, vec33.z, f6, f7);
+            ho1.a(vec34.x, vec34.y, vec34.z, f5, f7);
         }
 
         return true;
@@ -884,8 +884,8 @@ public class bc
                 d3 = (float)(l2 + 16) / 256F;
                 d4 = (float)(j3 + 16) / 256F;
             }
-            float f12 = (eo.a(f10) * 8F) / 256F;
-            float f14 = (eo.b(f10) * 8F) / 256F;
+            float f12 = (MathLib.sin(f10) * 8F) / 256F;
+            float f14 = (MathLib.cos(f10) * 8F) / 256F;
             float f16 = ly1.c(a, i1, j1, k1);
             ho1.a(f2 * f16, f2 * f16, f2 * f16);
             ho1.a(i1 + 0, (float)j1 + f5, k1 + 0, d3 - (double)f14 - (double)f12, (d4 - (double)f14) + (double)f12);
diff --git "a/temp\\src\\java/bi.java" "b/src\\main\\java/bi.java"
index ec718e3..1d4dc99 100644
--- "a/temp\\src\\java/bi.java"
+++ "b/src\\main\\java/bi.java"
@@ -4,7 +4,7 @@
 
 //import Minecraft;
 
-public class bi extends Player
+public class bi extends EntityPlayer
 {
 
     public lv a;
@@ -32,7 +32,7 @@ public class bi extends Player
 
     public void j()
     {
-        a.a(((Player) (this)));
+        a.a(((EntityPlayer) (this)));
         if(a.e && aL < 0.2F)
             aL = 0.2F;
         super.j();
@@ -48,15 +48,15 @@ public class bi extends Player
         a.a(i, flag);
     }
 
-    public void a(TagCompound tagCompound1)
+    public void writeToTag(TagCompound tagCompound1)
     {
-        super.a(tagCompound1);
+        super.writeToTag(tagCompound1);
         tagCompound1.set("Score", score);
     }
 
-    public void b(TagCompound tagCompound1)
+    public void readFromTag(TagCompound tagCompound1)
     {
-        super.b(tagCompound1);
+        super.readFromTag(tagCompound1);
         score = tagCompound1.getInt("Score");
     }
 
@@ -80,28 +80,28 @@ public class bi extends Player
         bg.a(((bh) (new id(b, furnace))));
     }
 
-    public void a(kh kh1)
+    public void a(Entity entity1)
     {
-        int i = b.a(kh1);
+        int i = b.a(entity1);
         if(i > 0)
         {
-            kh1.a(((kh) (this)), i);
+            entity1.a(((Entity) (this)), i);
             ev ev1 = t();
-            if(ev1 != null && (kh1 instanceof Mob))
+            if(ev1 != null && (entity1 instanceof EntityMob))
             {
-                ev1.a((Mob)kh1);
+                ev1.a((EntityMob) entity1);
                 if(ev1.count <= 0)
                 {
-                    ev1.a(((Player) (this)));
+                    ev1.a(((EntityPlayer) (this)));
                     u();
                 }
             }
         }
     }
 
-    public void a_(kh kh1, int i)
+    public void a_(Entity entity1, int i)
     {
-        bg.h.a(((nq) (new cd(bg.world, kh1, ((kh) (this)), -0.5F))));
+        bg.h.a(((nq) (new cd(bg.world, entity1, ((Entity) (this)), -0.5F))));
     }
 
     public int m()
@@ -109,17 +109,17 @@ public class bi extends Player
         return b.f();
     }
 
-    public void a_(kh kh1)
+    public void a_(Entity entity1)
     {
-        if(kh1.a(((Player) (this))))
+        if(entity1.a(((EntityPlayer) (this))))
             return;
         ev ev1 = t();
-        if(ev1 != null && (kh1 instanceof Mob))
+        if(ev1 != null && (entity1 instanceof EntityMob))
         {
-            ev1.b((Mob)kh1);
+            ev1.b((EntityMob) entity1);
             if(ev1.count <= 0)
             {
-                ev1.a(((Player) (this)));
+                ev1.a(((EntityPlayer) (this)));
                 u();
             }
         }
diff --git "a/temp\\src\\java/bl.java" "b/src\\main\\java/bl.java"
index 0b85820..848d1e0 100644
--- "a/temp\\src\\java/bl.java"
+++ "b/src\\main\\java/bl.java"
@@ -26,11 +26,11 @@ public class bl
         return c >= b.length;
     }
 
-    public aj a(kh kh1)
+    public Vec3 a(Entity entity1)
     {
-        double d = (double)b[c].a + (double)(int)(kh1.aC + 1.0F) * 0.5D;
+        double d = (double)b[c].a + (double)(int)(entity1.aC + 1.0F) * 0.5D;
         double d1 = b[c].b;
-        double d2 = (double)b[c].c + (double)(int)(kh1.aC + 1.0F) * 0.5D;
-        return aj.b(d, d1, d2);
+        double d2 = (double)b[c].c + (double)(int)(entity1.aC + 1.0F) * 0.5D;
+        return Vec3.recycle(d, d1, d2);
     }
 }
diff --git "a/temp\\src\\java/bn.java" "b/src\\main\\java/bn.java"
index 9f58c6b..97aef91 100644
--- "a/temp\\src\\java/bn.java"
+++ "b/src\\main\\java/bn.java"
@@ -52,7 +52,7 @@ public class bn
         a = world;
         F = list;
         f = g = h = l1;
-        t = eo.c(f * f + g * g + h * h) / 2.0F;
+        t = MathLib.sqrt(f * f + g * g + h * h) / 2.0F;
         C = i2;
         c = -999;
         a(i1, j1, k1);
@@ -192,11 +192,11 @@ public class bn
         E = true;
     }
 
-    public float a(kh kh1)
+    public float a(Entity entity1)
     {
-        float f1 = (float)(kh1.ak - (double)q);
-        float f2 = (float)(kh1.al - (double)r);
-        float f3 = (float)(kh1.am - (double)s);
+        float f1 = (float)(entity1.posX - (double)q);
+        float f2 = (float)(entity1.posY - (double)r);
+        float f3 = (float)(entity1.posZ - (double)s);
         return f1 * f1 + f2 * f2 + f3 * f3;
     }
 
diff --git "a/temp\\src\\java/bp.java" "b/src\\main\\java/bp.java"
index 505d6b1..ab2fc61 100644
--- "a/temp\\src\\java/bp.java"
+++ "b/src\\main\\java/bp.java"
@@ -11,11 +11,11 @@ public class bp extends di
         aT = 16;
     }
 
-    public ev a(ev ev1, World world1, Player player)
+    public ev a(ev ev1, World world1, EntityPlayer entityPlayer)
     {
         ev1.count--;
-        world1.a(((kh) (player)), "random.bow", 0.5F, 0.4F / (b.nextFloat() * 0.4F + 0.8F));
-        world1.a(((kh) (new Snowball(world1, ((Mob) (player))))));
+        world1.a(((Entity) (entityPlayer)), "random.bow", 0.5F, 0.4F / (b.nextFloat() * 0.4F + 0.8F));
+        world1.a(((Entity) (new Snowball(world1, ((EntityMob) (entityPlayer))))));
         return ev1;
     }
 }
diff --git "a/temp\\src\\java/bq.java" "b/src\\main\\java/bq.java"
index 923d233..dd57666 100644
--- "a/temp\\src\\java/bq.java"
+++ "b/src\\main\\java/bq.java"
@@ -47,16 +47,16 @@ public class bq
 
     }
 
-    public void a(kh kh1, float f)
+    public void a(Entity entity1, float f)
     {
-        float f1 = eo.b((kh1.aq * 3.141593F) / 180F);
-        float f2 = eo.a((kh1.aq * 3.141593F) / 180F);
-        float f3 = -f2 * eo.a((kh1.ar * 3.141593F) / 180F);
-        float f4 = f1 * eo.a((kh1.ar * 3.141593F) / 180F);
-        float f5 = eo.b((kh1.ar * 3.141593F) / 180F);
-        nq.l = kh1.aI + (kh1.ak - kh1.aI) * (double)f;
-        nq.m = kh1.aJ + (kh1.al - kh1.aJ) * (double)f;
-        nq.n = kh1.aK + (kh1.am - kh1.aK) * (double)f;
+        float f1 = MathLib.cos((entity1.yaw * 3.141593F) / 180F);
+        float f2 = MathLib.sin((entity1.yaw * 3.141593F) / 180F);
+        float f3 = -f2 * MathLib.sin((entity1.pitch * 3.141593F) / 180F);
+        float f4 = f1 * MathLib.sin((entity1.pitch * 3.141593F) / 180F);
+        float f5 = MathLib.cos((entity1.pitch * 3.141593F) / 180F);
+        nq.l = entity1.aI + (entity1.posX - entity1.aI) * (double)f;
+        nq.m = entity1.aJ + (entity1.posY - entity1.aJ) * (double)f;
+        nq.n = entity1.aK + (entity1.posZ - entity1.aK) * (double)f;
         for(int i = 0; i < 3; i++)
         {
             if(b[i].size() == 0)
@@ -82,7 +82,7 @@ public class bq
 
     }
 
-    public void b(kh kh1, float f)
+    public void b(Entity entity1, float f)
     {
         byte byte0 = 3;
         if(b[byte0].size() == 0)
diff --git "a/temp\\src\\java/bs.java" "b/src\\main\\java/bs.java"
index 663f002..59b7985 100644
--- "a/temp\\src\\java/bs.java"
+++ "b/src\\main\\java/bs.java"
@@ -34,7 +34,7 @@ public class bs extends di
         return 1.0F;
     }
 
-    public void a(ev ev1, Mob mob)
+    public void a(ev ev1, EntityMob entityMob)
     {
         ev1.b(2);
     }
@@ -44,7 +44,7 @@ public class bs extends di
         ev1.b(1);
     }
 
-    public int a(kh kh)
+    public int a(Entity entity)
     {
         return aZ;
     }
diff --git "a/temp\\src\\java/bu.java" "b/src\\main\\java/bu.java"
index 0d38743..c68f0ca 100644
--- "a/temp\\src\\java/bu.java"
+++ "b/src\\main\\java/bu.java"
@@ -20,9 +20,9 @@ public class bu extends dn
         h = new cr(0.5F);
     }
 
-    protected boolean a(Player player1, int j)
+    protected boolean a(EntityPlayer entityPlayer1, int j)
     {
-        ev ev1 = player1.b.d(3 - j);
+        ev ev1 = entityPlayer1.b.d(3 - j);
         if(ev1 != null)
         {
             di di1 = ev1.a();
@@ -45,13 +45,13 @@ public class bu extends dn
         return false;
     }
 
-    public void a(Player player1, double d, double d1, double d2,
+    public void a(EntityPlayer entityPlayer1, double d, double d1, double d2,
                   float f1, float f2)
     {
-        ev ev1 = player1.b.a();
+        ev ev1 = entityPlayer1.b.a();
         g.i = h.i = f.i = ev1 != null;
-        g.j = h.j = f.j = player1.o();
-        super.a(((Mob) (player1)), d, d1 - (double) player1.aB, d2, f1, f2);
+        g.j = h.j = f.j = entityPlayer1.o();
+        super.a(((EntityMob) (entityPlayer1)), d, d1 - (double) entityPlayer1.aB, d2, f1, f2);
         g.j = h.j = f.j = false;
         g.i = h.i = f.i = false;
         kd kd1 = a();
@@ -62,10 +62,10 @@ public class bu extends dn
         org.lwjgl.opengl.GL11.glNormal3f(0.0F, 1.0F, 0.0F);
         org.lwjgl.opengl.GL11.glRotatef(-a.i, 0.0F, 1.0F, 0.0F);
         org.lwjgl.opengl.GL11.glRotatef(a.j, 1.0F, 0.0F, 0.0F);
-        float f5 = player1.d(((kh) (a.h)));
+        float f5 = entityPlayer1.squareDistance(((Entity) (a.h)));
         f4 = (float)((double)f4 * (java.lang.Math.sqrt(f5) / 2D));
         org.lwjgl.opengl.GL11.glScalef(-f4, -f4, f4);
-        String s = player1.i;
+        String s = entityPlayer1.i;
         org.lwjgl.opengl.GL11.glDisable(2896);
         org.lwjgl.opengl.GL11.glDepthMask(false);
         org.lwjgl.opengl.GL11.glDisable(2929);
@@ -92,9 +92,9 @@ public class bu extends dn
         org.lwjgl.opengl.GL11.glPopMatrix();
     }
 
-    protected void a(Player player1, float f1)
+    protected void a(EntityPlayer entityPlayer1, float f1)
     {
-        ev ev1 = player1.b.a();
+        ev ev1 = entityPlayer1.b.a();
         if(ev1 != null)
         {
             org.lwjgl.opengl.GL11.glPushMatrix();
@@ -130,7 +130,7 @@ public class bu extends dn
         }
     }
 
-    protected void b(Player player1, float f1)
+    protected void b(EntityPlayer entityPlayer1, float f1)
     {
         float f2 = 0.9375F;
         org.lwjgl.opengl.GL11.glScalef(f2, f2, f2);
@@ -143,29 +143,29 @@ public class bu extends dn
         f.d.a(0.0625F);
     }
 
-    protected void a(Mob mob, float f1)
+    protected void a(EntityMob entityMob, float f1)
     {
-        b((Player) mob, f1);
+        b((EntityPlayer) entityMob, f1);
     }
 
-    protected boolean a(Mob mob, int j)
+    protected boolean a(EntityMob entityMob, int j)
     {
-        return a((Player) mob, j);
+        return a((EntityPlayer) entityMob, j);
     }
 
-    protected void b(Mob mob, float f1)
+    protected void b(EntityMob entityMob, float f1)
     {
-        a((Player) mob, f1);
+        a((EntityPlayer) entityMob, f1);
     }
 
-    public void a(Mob mob, double d, double d1, double d2, float f1, float f2)
+    public void a(EntityMob entityMob, double d, double d1, double d2, float f1, float f2)
     {
-        a((Player) mob, d, d1, d2, f1, f2);
+        a((EntityPlayer) entityMob, d, d1, d2, f1, f2);
     }
 
-    public void a(kh kh, double d, double d1, double d2, float f1, float f2)
+    public void a(Entity entity, double d, double d1, double d2, float f1, float f2)
     {
-        a((Player)kh, d, d1, d2, f1, f2);
+        a((EntityPlayer) entity, d, d1, d2, f1, f2);
     }
 
 }
diff --git "a/temp\\src\\java/bw.java" "b/src\\main\\java/bw.java"
index 77a096e..8caabba 100644
--- "a/temp\\src\\java/bw.java"
+++ "b/src\\main\\java/bw.java"
@@ -103,23 +103,23 @@ public class bw extends ak
 
     private void a(Painting painting1, float f, float f1)
     {
-        int i = eo.b(painting1.ak);
-        int j = eo.b(painting1.al + (double)(f1 / 16F));
-        int k = eo.b(painting1.am);
+        int i = MathLib.castIgnoringSign(painting1.posX);
+        int j = MathLib.castIgnoringSign(painting1.posY + (double)(f1 / 16F));
+        int k = MathLib.castIgnoringSign(painting1.posZ);
         if(painting1.dir == 0)
-            i = eo.b(painting1.ak + (double)(f / 16F));
+            i = MathLib.castIgnoringSign(painting1.posX + (double)(f / 16F));
         if(painting1.dir == 1)
-            k = eo.b(painting1.am - (double)(f / 16F));
+            k = MathLib.castIgnoringSign(painting1.posZ - (double)(f / 16F));
         if(painting1.dir == 2)
-            i = eo.b(painting1.ak - (double)(f / 16F));
+            i = MathLib.castIgnoringSign(painting1.posX - (double)(f / 16F));
         if(painting1.dir == 3)
-            k = eo.b(painting1.am + (double)(f / 16F));
+            k = MathLib.castIgnoringSign(painting1.posZ + (double)(f / 16F));
         float f2 = a.g.c(i, j, k);
         org.lwjgl.opengl.GL11.glColor3f(f2, f2, f2);
     }
 
-    public void a(kh kh, double d1, double d2, double d3, float f, float f1)
+    public void a(Entity entity, double d1, double d2, double d3, float f, float f1)
     {
-        a((Painting)kh, d1, d2, d3, f, f1);
+        a((Painting) entity, d1, d2, d3, f, f1);
     }
 }
diff --git "a/temp\\src\\java/cb.java" "b/src\\main\\java/cb.java"
index 24bf458..da48cce 100644
--- "a/temp\\src\\java/cb.java"
+++ "b/src\\main\\java/cb.java"
@@ -13,8 +13,8 @@ public class cb extends cr
     public void a(float f, float f1, float f2, float f3, float f4, float f5)
     {
         super.a(f, f1, f2, f3, f4, f5);
-        float f6 = eo.a(k * 3.141593F);
-        float f7 = eo.a((1.0F - (1.0F - k) * (1.0F - k)) * 3.141593F);
+        float f6 = MathLib.sin(k * 3.141593F);
+        float f7 = MathLib.sin((1.0F - (1.0F - k) * (1.0F - k)) * 3.141593F);
         d.f = 0.0F;
         e.f = 0.0F;
         d.e = -(0.1F - f6 * 0.6F);
@@ -23,9 +23,9 @@ public class cb extends cr
         e.d = -1.570796F;
         d.d -= f6 * 1.2F - f7 * 0.4F;
         e.d -= f6 * 1.2F - f7 * 0.4F;
-        d.f += eo.b(f2 * 0.09F) * 0.05F + 0.05F;
-        e.f -= eo.b(f2 * 0.09F) * 0.05F + 0.05F;
-        d.d += eo.a(f2 * 0.067F) * 0.05F;
-        e.d -= eo.a(f2 * 0.067F) * 0.05F;
+        d.f += MathLib.cos(f2 * 0.09F) * 0.05F + 0.05F;
+        e.f -= MathLib.cos(f2 * 0.09F) * 0.05F + 0.05F;
+        d.d += MathLib.sin(f2 * 0.067F) * 0.05F;
+        e.d -= MathLib.sin(f2 * 0.067F) * 0.05F;
     }
 }
diff --git "a/temp\\src\\java/cd.java" "b/src\\main\\java/cd.java"
index 844b84e..53fa389 100644
--- "a/temp\\src\\java/cd.java"
+++ "b/src\\main\\java/cd.java"
@@ -5,19 +5,19 @@
 public class cd extends nq
 {
 
-    private kh a;
-    private kh o;
+    private Entity a;
+    private Entity o;
     private int p;
     private int q;
     private float r;
 
-    public cd(World world1, kh kh1, kh kh2, float f)
+    public cd(World world1, Entity entity1, Entity entity2, float f)
     {
-        super(world1, kh1.ak, kh1.al, kh1.am, kh1.an, kh1.ao, kh1.ap);
+        super(world1, entity1.posX, entity1.posY, entity1.posZ, entity1.motionX, entity1.motionY, entity1.motionZ);
         p = 0;
         q = 0;
-        a = kh1;
-        o = kh2;
+        a = entity1;
+        o = entity2;
         q = 3;
         r = f;
     }
@@ -26,24 +26,24 @@ public class cd extends nq
     {
         float f6 = ((float)p + f) / (float)q;
         f6 *= f6;
-        double d = a.ak;
-        double d1 = a.al;
-        double d2 = a.am;
-        double d3 = o.aI + (o.ak - o.aI) * (double)f;
-        double d4 = o.aJ + (o.al - o.aJ) * (double)f + (double)r;
-        double d5 = o.aK + (o.am - o.aK) * (double)f;
+        double d = a.posX;
+        double d1 = a.posY;
+        double d2 = a.posZ;
+        double d3 = o.aI + (o.posX - o.aI) * (double)f;
+        double d4 = o.aJ + (o.posY - o.aJ) * (double)f + (double)r;
+        double d5 = o.aK + (o.posZ - o.aK) * (double)f;
         double d6 = d + (d3 - d) * (double)f6;
         double d7 = d1 + (d4 - d1) * (double)f6;
         double d8 = d2 + (d5 - d2) * (double)f6;
-        int i = eo.b(d6);
-        int j = eo.b(d7 + (double)(aB / 2.0F));
-        int k = eo.b(d8);
+        int i = MathLib.castIgnoringSign(d6);
+        int j = MathLib.castIgnoringSign(d7 + (double)(aB / 2.0F));
+        int k = MathLib.castIgnoringSign(d8);
         float f7 = ag.c(i, j, k);
         d6 -= l;
         d7 -= m;
         d8 -= n;
         org.lwjgl.opengl.GL11.glColor4f(f7, f7, f7, 1.0F);
-        kx.a.a(a, (float)d6, (float)d7, (float)d8, a.aq, f);
+        kx.a.a(a, (float)d6, (float)d7, (float)d8, a.yaw, f);
     }
 
     public void e_()
diff --git "a/temp\\src\\java/cf.java" "b/src\\main\\java/cf.java"
index 7b46ebb..4187e0b 100644
--- "a/temp\\src\\java/cf.java"
+++ "b/src\\main\\java/cf.java"
@@ -191,79 +191,79 @@ public class cf
         return cf.b(a, b, c, d, e, f);
     }
 
-    public mf a(aj aj1, aj aj2)
+    public mf a(Vec3 vec31, Vec3 vec32)
     {
-        aj aj3 = aj1.a(aj2, a);
-        aj aj4 = aj1.a(aj2, d);
-        aj aj5 = aj1.b(aj2, b);
-        aj aj6 = aj1.b(aj2, e);
-        aj aj7 = aj1.c(aj2, c);
-        aj aj8 = aj1.c(aj2, f);
-        if(!a(aj3))
-            aj3 = null;
-        if(!a(aj4))
-            aj4 = null;
-        if(!b(aj5))
-            aj5 = null;
-        if(!b(aj6))
-            aj6 = null;
-        if(!c(aj7))
-            aj7 = null;
-        if(!c(aj8))
-            aj8 = null;
-        aj aj9 = null;
-        if(aj3 != null && (aj9 == null || aj1.d(aj3) < aj1.d(aj9)))
-            aj9 = aj3;
-        if(aj4 != null && (aj9 == null || aj1.d(aj4) < aj1.d(aj9)))
-            aj9 = aj4;
-        if(aj5 != null && (aj9 == null || aj1.d(aj5) < aj1.d(aj9)))
-            aj9 = aj5;
-        if(aj6 != null && (aj9 == null || aj1.d(aj6) < aj1.d(aj9)))
-            aj9 = aj6;
-        if(aj7 != null && (aj9 == null || aj1.d(aj7) < aj1.d(aj9)))
-            aj9 = aj7;
-        if(aj8 != null && (aj9 == null || aj1.d(aj8) < aj1.d(aj9)))
-            aj9 = aj8;
-        if(aj9 == null)
+        Vec3 vec33 = vec31.getIntermediateWithXValue(vec32, a);
+        Vec3 vec34 = vec31.getIntermediateWithXValue(vec32, d);
+        Vec3 vec35 = vec31.getIntermediateWithYValue(vec32, b);
+        Vec3 vec36 = vec31.getIntermediateWithYValue(vec32, e);
+        Vec3 vec37 = vec31.getIntermediateWithZValue(vec32, c);
+        Vec3 vec38 = vec31.getIntermediateWithZValue(vec32, f);
+        if(!a(vec33))
+            vec33 = null;
+        if(!a(vec34))
+            vec34 = null;
+        if(!b(vec35))
+            vec35 = null;
+        if(!b(vec36))
+            vec36 = null;
+        if(!c(vec37))
+            vec37 = null;
+        if(!c(vec38))
+            vec38 = null;
+        Vec3 vec39 = null;
+        if(vec33 != null && (vec39 == null || vec31.distance(vec33) < vec31.distance(vec39)))
+            vec39 = vec33;
+        if(vec34 != null && (vec39 == null || vec31.distance(vec34) < vec31.distance(vec39)))
+            vec39 = vec34;
+        if(vec35 != null && (vec39 == null || vec31.distance(vec35) < vec31.distance(vec39)))
+            vec39 = vec35;
+        if(vec36 != null && (vec39 == null || vec31.distance(vec36) < vec31.distance(vec39)))
+            vec39 = vec36;
+        if(vec37 != null && (vec39 == null || vec31.distance(vec37) < vec31.distance(vec39)))
+            vec39 = vec37;
+        if(vec38 != null && (vec39 == null || vec31.distance(vec38) < vec31.distance(vec39)))
+            vec39 = vec38;
+        if(vec39 == null)
             return null;
         byte byte0 = -1;
-        if(aj9 == aj3)
+        if(vec39 == vec33)
             byte0 = 4;
-        if(aj9 == aj4)
+        if(vec39 == vec34)
             byte0 = 5;
-        if(aj9 == aj5)
+        if(vec39 == vec35)
             byte0 = 0;
-        if(aj9 == aj6)
+        if(vec39 == vec36)
             byte0 = 1;
-        if(aj9 == aj7)
+        if(vec39 == vec37)
             byte0 = 2;
-        if(aj9 == aj8)
+        if(vec39 == vec38)
             byte0 = 3;
-        return new mf(0, 0, 0, ((int) (byte0)), aj9);
+        return new mf(0, 0, 0, ((int) (byte0)), vec39);
     }
 
-    private boolean a(aj aj1)
+    private boolean a(Vec3 vec31)
     {
-        if(aj1 == null)
+        if(vec31 == null)
             return false;
         else
-            return aj1.b >= b && aj1.b <= e && aj1.c >= c && aj1.c <= f;
+            return vec31.y >= b && vec31.y <= e && vec31.z >= c && vec31.z <= f;
     }
 
-    private boolean b(aj aj1)
+    private boolean b(Vec3 vec31)
     {
-        if(aj1 == null)
+        if(vec31 == null)
             return false;
         else
-            return aj1.a >= a && aj1.a <= d && aj1.c >= c && aj1.c <= f;
+            return vec31.x >= a && vec31.x <= d && vec31.z >= c && vec31.z <= f;
     }
 
-    private boolean c(aj aj1)
+    private boolean c(Vec3 vec31)
     {
-        if(aj1 == null)
+        if(vec31 == null)
             return false;
         else
-            return aj1.a >= a && aj1.a <= d && aj1.b >= b && aj1.b <= e;
+            return vec31.x >= a && vec31.x <= d && vec31.y >= b && vec31.y <= e;
     }
 
     public void b(cf cf1)
diff --git "a/temp\\src\\java/cp.java" "b/src\\main\\java/cp.java"
index 4bb12db..bd6f508 100644
--- "a/temp\\src\\java/cp.java"
+++ "b/src\\main\\java/cp.java"
@@ -24,7 +24,7 @@ public class cp extends ak
         if(f3 < 0.0F)
             f3 = 0.0F;
         if(f2 > 0.0F)
-            org.lwjgl.opengl.GL11.glRotatef(((eo.a(f2) * f2 * f3) / 10F) * (float) boat1.c, 1.0F, 0.0F, 0.0F);
+            org.lwjgl.opengl.GL11.glRotatef(((MathLib.sin(f2) * f2 * f3) / 10F) * (float) boat1.c, 1.0F, 0.0F, 0.0F);
         a("/terrain.png");
         float f4 = 0.75F;
         org.lwjgl.opengl.GL11.glScalef(f4, f4, f4);
@@ -35,8 +35,8 @@ public class cp extends ak
         org.lwjgl.opengl.GL11.glPopMatrix();
     }
 
-    public void a(kh kh, double d1, double d2, double d3, float f, float f1)
+    public void a(Entity entity, double d1, double d2, double d3, float f, float f1)
     {
-        a((Boat)kh, d1, d2, d3, f, f1);
+        a((Boat) entity, d1, d2, d3, f, f1);
     }
 }
diff --git "a/temp\\src\\java/cq.java" "b/src\\main\\java/cq.java"
index c9304f1..44049a8 100644
--- "a/temp\\src\\java/cq.java"
+++ "b/src\\main\\java/cq.java"
@@ -10,12 +10,12 @@ public class cq extends nq
     public cq(World world1, double d, double d1, double d2)
     {
         super(world1, d, d1, d2, 0.0D, 0.0D, 0.0D);
-        an *= 0.80000001192092896D;
-        ao *= 0.80000001192092896D;
-        ap *= 0.80000001192092896D;
-        ao = aQ.nextFloat() * 0.4F + 0.05F;
+        motionX *= 0.80000001192092896D;
+        motionY *= 0.80000001192092896D;
+        motionZ *= 0.80000001192092896D;
+        motionY = rnd.nextFloat() * 0.4F + 0.05F;
         i = j = k = 1.0F;
-        g *= aQ.nextFloat() * 2.0F + 0.2F;
+        g *= rnd.nextFloat() * 2.0F + 0.2F;
         a = g;
         f = (int)(16D / (java.lang.Math.random() * 0.80000000000000004D + 0.20000000000000001D));
         aN = false;
@@ -36,23 +36,23 @@ public class cq extends nq
 
     public void e_()
     {
-        ah = ak;
-        ai = al;
-        aj = am;
+        prevPosX = posX;
+        prevPosY = posY;
+        prevPosZ = posZ;
         if(e++ >= this.f)
             F();
         float f = (float)e / (float)this.f;
-        if(aQ.nextFloat() > f)
-            ag.a("smoke", ak, al, am, an, ao, ap);
-        ao -= 0.029999999999999999D;
-        c(an, ao, ap);
-        an *= 0.99900001287460327D;
-        ao *= 0.99900001287460327D;
-        ap *= 0.99900001287460327D;
-        if(av)
+        if(rnd.nextFloat() > f)
+            ag.a("smoke", posX, posY, posZ, motionX, motionY, motionZ);
+        motionY -= 0.029999999999999999D;
+        c(motionX, motionY, motionZ);
+        motionX *= 0.99900001287460327D;
+        motionY *= 0.99900001287460327D;
+        motionZ *= 0.99900001287460327D;
+        if(onGround)
         {
-            an *= 0.69999998807907104D;
-            ap *= 0.69999998807907104D;
+            motionX *= 0.69999998807907104D;
+            motionZ *= 0.69999998807907104D;
         }
     }
 }
diff --git "a/temp\\src\\java/cr.java" "b/src\\main\\java/cr.java"
index 0062020..15fd2aa 100644
--- "a/temp\\src\\java/cr.java"
+++ "b/src\\main\\java/cr.java"
@@ -75,12 +75,12 @@ public class cr extends fo
         a.d = f5 / 57.29578F;
         b.e = a.e;
         b.d = a.d;
-        d.d = eo.b(f1 * 0.6662F + 3.141593F) * 2.0F * f2 * 0.5F;
-        e.d = eo.b(f1 * 0.6662F) * 2.0F * f2 * 0.5F;
+        d.d = MathLib.cos(f1 * 0.6662F + 3.141593F) * 2.0F * f2 * 0.5F;
+        e.d = MathLib.cos(f1 * 0.6662F) * 2.0F * f2 * 0.5F;
         d.f = 0.0F;
         e.f = 0.0F;
-        f.d = eo.b(f1 * 0.6662F) * 1.4F * f2;
-        g.d = eo.b(f1 * 0.6662F + 3.141593F) * 1.4F * f2;
+        f.d = MathLib.cos(f1 * 0.6662F) * 1.4F * f2;
+        g.d = MathLib.cos(f1 * 0.6662F + 3.141593F) * 1.4F * f2;
         f.e = 0.0F;
         g.e = 0.0F;
         if(l)
@@ -101,11 +101,11 @@ public class cr extends fo
         if(k > -9990F)
         {
             float f7 = k;
-            c.e = eo.a(eo.c(f7) * 3.141593F * 2.0F) * 0.2F;
-            d.c = eo.a(c.e) * 5F;
-            d.a = -eo.b(c.e) * 5F;
-            e.c = -eo.a(c.e) * 5F;
-            e.a = eo.b(c.e) * 5F;
+            c.e = MathLib.sin(MathLib.sqrt(f7) * 3.141593F * 2.0F) * 0.2F;
+            d.c = MathLib.sin(c.e) * 5F;
+            d.a = -MathLib.cos(c.e) * 5F;
+            e.c = -MathLib.sin(c.e) * 5F;
+            e.a = MathLib.cos(c.e) * 5F;
             d.e += c.e;
             e.e += c.e;
             e.d += c.e;
@@ -113,11 +113,11 @@ public class cr extends fo
             f7 *= f7;
             f7 *= f7;
             f7 = 1.0F - f7;
-            float f8 = eo.a(f7 * 3.141593F);
-            float f9 = eo.a(k * 3.141593F) * -(a.d - 0.7F) * 0.75F;
+            float f8 = MathLib.sin(f7 * 3.141593F);
+            float f9 = MathLib.sin(k * 3.141593F) * -(a.d - 0.7F) * 0.75F;
             d.d -= ((float) ((double)f8 * 1.2D + (double)f9));
             d.e += c.e * 2.0F;
-            d.f = eo.a(k * 3.141593F) * -0.4F;
+            d.f = MathLib.sin(k * 3.141593F) * -0.4F;
         }
         if(j)
         {
@@ -140,9 +140,9 @@ public class cr extends fo
             g.b = 12F;
             a.b = 0.0F;
         }
-        d.f += eo.b(f3 * 0.09F) * 0.05F + 0.05F;
-        e.f -= eo.b(f3 * 0.09F) * 0.05F + 0.05F;
-        d.d += eo.a(f3 * 0.067F) * 0.05F;
-        e.d -= eo.a(f3 * 0.067F) * 0.05F;
+        d.f += MathLib.cos(f3 * 0.09F) * 0.05F + 0.05F;
+        e.f -= MathLib.cos(f3 * 0.09F) * 0.05F + 0.05F;
+        d.d += MathLib.sin(f3 * 0.067F) * 0.05F;
+        e.d -= MathLib.sin(f3 * 0.067F) * 0.05F;
     }
 }
diff --git "a/temp\\src\\java/cs.java" "b/src\\main\\java/cs.java"
index 558c77d..841d34f 100644
--- "a/temp\\src\\java/cs.java"
+++ "b/src\\main\\java/cs.java"
@@ -24,9 +24,9 @@ public class cs extends ly
             return bb;
     }
 
-    public boolean a(World world, int i, int j, int k, Player player1)
+    public boolean a(World world, int i, int j, int k, EntityPlayer entityPlayer1)
     {
-        player1.l();
+        entityPlayer1.l();
         return true;
     }
 }
diff --git "a/temp\\src\\java/cu.java" "b/src\\main\\java/cu.java"
index 86bd9d7..8ae17ff 100644
--- "a/temp\\src\\java/cu.java"
+++ "b/src\\main\\java/cu.java"
@@ -17,10 +17,10 @@ public class cu extends ik
     public boolean a(World world1, java.util.Random random, int i, int j, int k)
     {
         float f = random.nextFloat() * 3.141593F;
-        double d = (float)(i + 8) + (eo.a(f) * (float)b) / 8F;
-        double d1 = (float)(i + 8) - (eo.a(f) * (float)b) / 8F;
-        double d2 = (float)(k + 8) + (eo.b(f) * (float)b) / 8F;
-        double d3 = (float)(k + 8) - (eo.b(f) * (float)b) / 8F;
+        double d = (float)(i + 8) + (MathLib.sin(f) * (float)b) / 8F;
+        double d1 = (float)(i + 8) - (MathLib.sin(f) * (float)b) / 8F;
+        double d2 = (float)(k + 8) + (MathLib.cos(f) * (float)b) / 8F;
+        double d3 = (float)(k + 8) - (MathLib.cos(f) * (float)b) / 8F;
         double d4 = j + random.nextInt(3) + 2;
         double d5 = j + random.nextInt(3) + 2;
         for(int l = 0; l <= b; l++)
@@ -29,8 +29,8 @@ public class cu extends ik
             double d7 = d4 + ((d5 - d4) * (double)l) / (double)b;
             double d8 = d2 + ((d3 - d2) * (double)l) / (double)b;
             double d9 = (random.nextDouble() * (double)b) / 16D;
-            double d10 = (double)(eo.a(((float)l * 3.141593F) / (float)b) + 1.0F) * d9 + 1.0D;
-            double d11 = (double)(eo.a(((float)l * 3.141593F) / (float)b) + 1.0F) * d9 + 1.0D;
+            double d10 = (double)(MathLib.sin(((float)l * 3.141593F) / (float)b) + 1.0F) * d9 + 1.0D;
+            double d11 = (double)(MathLib.sin(((float)l * 3.141593F) / (float)b) + 1.0F) * d9 + 1.0D;
             for(int i1 = (int)(d6 - d10 / 2D); i1 <= (int)(d6 + d10 / 2D); i1++)
             {
                 for(int j1 = (int)(d7 - d11 / 2D); j1 <= (int)(d7 + d11 / 2D); j1++)
diff --git "a/temp\\src\\java/cv.java" "b/src\\main\\java/cv.java"
index 9cbdd9f..ba1967a 100644
--- "a/temp\\src\\java/cv.java"
+++ "b/src\\main\\java/cv.java"
@@ -15,7 +15,7 @@ public class cv extends ly
         return bb + (i != 1 ? 0 : 1);
     }
 
-    public boolean a(World world1, int i, int j, int k, Player player)
+    public boolean a(World world1, int i, int j, int k, EntityPlayer entityPlayer)
     {
         int l = world1.e(i, j, k);
         if(l > 0)
@@ -39,7 +39,7 @@ public class cv extends ly
         double d2 = (double)(world1.n.nextFloat() * f) + (double)(1.0F - f) * 0.5D;
         Item item1 = new Item(world1, (double)i + d, (double)j + d1, (double)k + d2, new ev(i1));
         item1.c = 10;
-        world1.a(((kh) (item1)));
+        world1.a(((Entity) (item1)));
     }
 
     public void a(World world1, int i, int j, int k, int l, float f)
diff --git "a/temp\\src\\java/cx.java" "b/src\\main\\java/cx.java"
index 0f411c3..231e35a 100644
--- "a/temp\\src\\java/cx.java"
+++ "b/src\\main\\java/cx.java"
@@ -109,7 +109,7 @@ public class cx extends bh
         org.lwjgl.opengl.GL11.glPushMatrix();
         org.lwjgl.opengl.GL11.glTranslatef(c / 2 + 90, 70F, 0.0F);
         org.lwjgl.opengl.GL11.glRotatef(-20F, 0.0F, 0.0F, 1.0F);
-        float f1 = 1.8F - eo.e(eo.a(((float)(java.lang.System.currentTimeMillis() % 1000L) / 1000F) * 3.141593F * 2.0F) * 0.1F);
+        float f1 = 1.8F - MathLib.abs(MathLib.sin(((float)(java.lang.System.currentTimeMillis() % 1000L) / 1000F) * 3.141593F * 2.0F) * 0.1F);
         f1 = (f1 * 100F) / (float)(g.a(l) + 32);
         org.lwjgl.opengl.GL11.glScalef(f1, f1, f1);
         a(g, l, 0, -8, 0xffff00);
diff --git "a/temp\\src\\java/cz.java" "b/src\\main\\java/cz.java"
index 9c362b9..0c641d6 100644
--- "a/temp\\src\\java/cz.java"
+++ "b/src\\main\\java/cz.java"
@@ -19,29 +19,29 @@ public class cz
         a = nm1;
     }
 
-    public bl a(kh kh1, kh kh2, float f)
+    public bl a(Entity entity1, Entity entity2, float f)
     {
-        return a(kh1, kh2.ak, kh2.au.b, kh2.am, f);
+        return a(entity1, entity2.posX, entity2.au.b, entity2.posZ, f);
     }
 
-    public bl a(kh kh1, int i, int j, int k, float f)
+    public bl a(Entity entity1, int i, int j, int k, float f)
     {
-        return a(kh1, (float)i + 0.5F, (float)j + 0.5F, (float)k + 0.5F, f);
+        return a(entity1, (float)i + 0.5F, (float)j + 0.5F, (float)k + 0.5F, f);
     }
 
-    private bl a(kh kh1, double d1, double d2, double d3, 
-            float f)
+    private bl a(Entity entity1, double d1, double d2, double d3,
+                 float f)
     {
         b.a();
         c.a();
-        a a1 = a(eo.b(kh1.au.a), eo.b(kh1.au.b), eo.b(kh1.au.c));
-        a a2 = a(eo.b(d1 - (double)(kh1.aC / 2.0F)), eo.b(d2), eo.b(d3 - (double)(kh1.aC / 2.0F)));
-        a a3 = new a(eo.d(kh1.aC + 1.0F), eo.d(kh1.aD + 1.0F), eo.d(kh1.aC + 1.0F));
-        bl bl1 = a(kh1, a1, a2, a3, f);
+        a a1 = a(MathLib.castIgnoringSign(entity1.au.a), MathLib.castIgnoringSign(entity1.au.b), MathLib.castIgnoringSign(entity1.au.c));
+        a a2 = a(MathLib.castIgnoringSign(d1 - (double)(entity1.aC / 2.0F)), MathLib.castIgnoringSign(d2), MathLib.castIgnoringSign(d3 - (double)(entity1.aC / 2.0F)));
+        a a3 = new a(MathLib.castIgnoringSign(entity1.aC + 1.0F), MathLib.castIgnoringSign(entity1.aD + 1.0F), MathLib.castIgnoringSign(entity1.aC + 1.0F));
+        bl bl1 = a(entity1, a1, a2, a3, f);
         return bl1;
     }
 
-    private bl a(kh kh1, a a1, a a2, a a3, float f)
+    private bl a(Entity entity1, a a1, a a2, a a3, float f)
     {
         a1.f = 0.0F;
         a1.g = a1.a(a2);
@@ -57,7 +57,7 @@ public class cz
             if(a5.a(a2) < a4.a(a2))
                 a4 = a5;
             a5.j = true;
-            int i = b(kh1, a5, a3, a2, f);
+            int i = b(entity1, a5, a3, a2, f);
             int j = 0;
             while(j < i) 
             {
@@ -86,16 +86,16 @@ public class cz
             return a(a1, a4);
     }
 
-    private int b(kh kh1, a a1, a a2, a a3, float f)
+    private int b(Entity entity1, a a1, a a2, a a3, float f)
     {
         int i = 0;
         int j = 0;
-        if(a(kh1, a1.a, a1.b + 1, a1.c, a2) > 0)
+        if(a(entity1, a1.a, a1.b + 1, a1.c, a2) > 0)
             j = 1;
-        a a4 = a(kh1, a1.a, a1.b, a1.c + 1, a2, j);
-        a a5 = a(kh1, a1.a - 1, a1.b, a1.c, a2, j);
-        a a6 = a(kh1, a1.a + 1, a1.b, a1.c, a2, j);
-        a a7 = a(kh1, a1.a, a1.b, a1.c - 1, a2, j);
+        a a4 = a(entity1, a1.a, a1.b, a1.c + 1, a2, j);
+        a a5 = a(entity1, a1.a - 1, a1.b, a1.c, a2, j);
+        a a6 = a(entity1, a1.a + 1, a1.b, a1.c, a2, j);
+        a a7 = a(entity1, a1.a, a1.b, a1.c - 1, a2, j);
         if(a4 != null && !a4.j && a4.a(a3) < f)
             d[i++] = a4;
         if(a5 != null && !a5.j && a5.a(a3) < f)
@@ -107,12 +107,12 @@ public class cz
         return i;
     }
 
-    private a a(kh kh1, int i, int j, int k, a a1, int l)
+    private a a(Entity entity1, int i, int j, int k, a a1, int l)
     {
         a a2 = null;
-        if(a(kh1, i, j, k, a1) > 0)
+        if(a(entity1, i, j, k, a1) > 0)
             a2 = a(i, j, k);
-        if(a2 == null && a(kh1, i, j + l, k, a1) > 0)
+        if(a2 == null && a(entity1, i, j + l, k, a1) > 0)
         {
             a2 = a(i, j + l, k);
             j += l;
@@ -120,7 +120,7 @@ public class cz
         if(a2 != null)
         {
             int i1 = 0;
-            for(int j1 = 0; j > 0 && (j1 = a(kh1, i, j - 1, k, a1)) > 0; j--)
+            for(int j1 = 0; j > 0 && (j1 = a(entity1, i, j - 1, k, a1)) > 0; j--)
             {
                 if(j1 < 0)
                     return null;
@@ -146,7 +146,7 @@ public class cz
         return a1;
     }
 
-    private int a(kh kh1, int i, int j, int k, a a1)
+    private int a(Entity entity1, int i, int j, int k, a a1)
     {
         for(int l = i; l < i + a1.a; l++)
         {
diff --git "a/temp\\src\\java/d.java" "b/src\\main\\java/d.java"
index 9f23277..394167e 100644
--- "a/temp\\src\\java/d.java"
+++ "b/src\\main\\java/d.java"
@@ -10,11 +10,11 @@ public class d extends dn
         super(((fo) (new em())), 0.5F);
     }
 
-    protected void a(Creeper creeper1, float f)
+    protected void a(EntityCreeper entityCreeper1, float f)
     {
-        Creeper creeper2 = creeper1;
-        float f1 = creeper2.b(f);
-        float f2 = 1.0F + eo.a(f1 * 100F) * f1 * 0.01F;
+        EntityCreeper entityCreeper2 = entityCreeper1;
+        float f1 = entityCreeper2.b(f);
+        float f2 = 1.0F + MathLib.sin(f1 * 100F) * f1 * 0.01F;
         if(f1 < 0.0F)
             f1 = 0.0F;
         if(f1 > 1.0F)
@@ -26,10 +26,10 @@ public class d extends dn
         org.lwjgl.opengl.GL11.glScalef(f3, f4, f3);
     }
 
-    protected int a(Creeper creeper1, float f, float f1)
+    protected int a(EntityCreeper entityCreeper1, float f, float f1)
     {
-        Creeper creeper2 = creeper1;
-        float f2 = creeper2.b(f1);
+        EntityCreeper entityCreeper2 = entityCreeper1;
+        float f2 = entityCreeper2.b(f1);
         if((int)(f2 * 10F) % 2 == 0)
             return 0;
         int i = (int)(f2 * 0.2F * 255F);
@@ -43,13 +43,13 @@ public class d extends dn
         return i << 24 | c << 16 | c1 << 8 | c2;
     }
 
-    protected void a(Mob mob, float f)
+    protected void a(EntityMob entityMob, float f)
     {
-        a((Creeper) mob, f);
+        a((EntityCreeper) entityMob, f);
     }
 
-    protected int a(Mob mob, float f, float f1)
+    protected int a(EntityMob entityMob, float f, float f1)
     {
-        return a((Creeper) mob, f, f1);
+        return a((EntityCreeper) entityMob, f, f1);
     }
 }
diff --git "a/temp\\src\\java/dh.java" "b/src\\main\\java/dh.java"
index 63e8760..d6b5033 100644
--- "a/temp\\src\\java/dh.java"
+++ "b/src\\main\\java/dh.java"
@@ -39,7 +39,7 @@ public class dh extends ly
                 while(!fallingSand1.aA)
                     fallingSand1.e_();
             else
-                world1.a(((kh) (fallingSand1)));
+                world1.a(((Entity) (fallingSand1)));
         }
     }
 
diff --git "a/temp\\src\\java/di.java" "b/src\\main\\java/di.java"
index 70de07e..d30c2af 100644
--- "a/temp\\src\\java/di.java"
+++ "b/src\\main\\java/di.java"
@@ -130,7 +130,7 @@ public class di
         return aV;
     }
 
-    public boolean a(ev ev, Player player, World world, int i1, int j1, int k1, int l1)
+    public boolean a(ev ev, EntityPlayer entityPlayer, World world, int i1, int j1, int k1, int l1)
     {
         return false;
     }
@@ -140,7 +140,7 @@ public class di
         return 1.0F;
     }
 
-    public ev a(ev ev, World world, Player player)
+    public ev a(ev ev, World world, EntityPlayer entityPlayer)
     {
         return ev;
     }
@@ -155,7 +155,7 @@ public class di
         return aU;
     }
 
-    public void a(ev ev, Mob mob)
+    public void a(ev ev, EntityMob entityMob)
     {
     }
 
@@ -163,7 +163,7 @@ public class di
     {
     }
 
-    public int a(kh kh)
+    public int a(Entity entity)
     {
         return 1;
     }
@@ -173,7 +173,7 @@ public class di
         return false;
     }
 
-    public void b(ev ev, Mob mob)
+    public void b(ev ev, EntityMob entityMob)
     {
     }
 
diff --git "a/temp\\src\\java/dj.java" "b/src\\main\\java/dj.java"
index 4bdc782..fcd659e 100644
--- "a/temp\\src\\java/dj.java"
+++ "b/src\\main\\java/dj.java"
@@ -22,13 +22,13 @@ public class dj extends ak
         ly ly1 = ly.n[fallingSand1.tile];
         World world = fallingSand1.i();
         org.lwjgl.opengl.GL11.glDisable(2896);
-        d.a(ly1, world, eo.b(fallingSand1.ak), eo.b(fallingSand1.al), eo.b(fallingSand1.am));
+        d.a(ly1, world, MathLib.castIgnoringSign(fallingSand1.posX), MathLib.castIgnoringSign(fallingSand1.posY), MathLib.castIgnoringSign(fallingSand1.posZ));
         org.lwjgl.opengl.GL11.glEnable(2896);
         org.lwjgl.opengl.GL11.glPopMatrix();
     }
 
-    public void a(kh kh, double d1, double d2, double d3, float f, float f1)
+    public void a(Entity entity, double d1, double d2, double d3, float f, float f1)
     {
-        a((FallingSand)kh, d1, d2, d3, f, f1);
+        a((FallingSand) entity, d1, d2, d3, f, f1);
     }
 }
diff --git "a/temp\\src\\java/dn.java" "b/src\\main\\java/dn.java"
index 7f32ccf..50f7be4 100644
--- "a/temp\\src\\java/dn.java"
+++ "b/src\\main\\java/dn.java"
@@ -19,67 +19,67 @@ public class dn extends ak
         e = fo1;
     }
 
-    public void a(Mob mob1, double d1, double d2, double d3,
+    public void a(EntityMob entityMob1, double d1, double d2, double d3,
                   float f, float f1)
     {
         org.lwjgl.opengl.GL11.glPushMatrix();
         org.lwjgl.opengl.GL11.glDisable(2884);
-        d.k = c(mob1, f1);
-        d.l = mob1.af != null;
+        d.k = c(entityMob1, f1);
+        d.l = entityMob1.af != null;
         if(e != null)
             e.l = d.l;
         try
         {
-            float f2 = mob1.o + (mob1.n - mob1.o) * f1;
-            float f3 = mob1.as + (mob1.aq - mob1.as) * f1;
-            float f4 = mob1.at + (mob1.ar - mob1.at) * f1;
+            float f2 = entityMob1.o + (entityMob1.n - entityMob1.o) * f1;
+            float f3 = entityMob1.prevYaw + (entityMob1.yaw - entityMob1.prevYaw) * f1;
+            float f4 = entityMob1.prevPitch + (entityMob1.pitch - entityMob1.prevPitch) * f1;
             org.lwjgl.opengl.GL11.glTranslatef((float)d1, (float)d2, (float)d3);
-            float f5 = d(mob1, f1);
+            float f5 = d(entityMob1, f1);
             org.lwjgl.opengl.GL11.glRotatef(180F - f2, 0.0F, 1.0F, 0.0F);
-            if(mob1.deathTime > 0)
+            if(entityMob1.deathTime > 0)
             {
-                float f6 = ((((float) mob1.deathTime + f1) - 1.0F) / 20F) * 1.6F;
-                f6 = eo.c(f6);
+                float f6 = ((((float) entityMob1.deathTime + f1) - 1.0F) / 20F) * 1.6F;
+                f6 = MathLib.sqrt(f6);
                 if(f6 > 1.0F)
                     f6 = 1.0F;
-                org.lwjgl.opengl.GL11.glRotatef(f6 * a(mob1), 0.0F, 0.0F, 1.0F);
+                org.lwjgl.opengl.GL11.glRotatef(f6 * a(entityMob1), 0.0F, 0.0F, 1.0F);
             }
             float f7 = 0.0625F;
             org.lwjgl.opengl.GL11.glEnable(32826);
             org.lwjgl.opengl.GL11.glScalef(-1F, -1F, 1.0F);
-            a(mob1, f1);
+            a(entityMob1, f1);
             org.lwjgl.opengl.GL11.glTranslatef(0.0F, -24F * f7 - 0.0078125F, 0.0F);
-            float f8 = mob1.Q + (mob1.R - mob1.Q) * f1;
-            float f9 = mob1.S - mob1.R * (1.0F - f1);
+            float f8 = entityMob1.Q + (entityMob1.R - entityMob1.Q) * f1;
+            float f9 = entityMob1.S - entityMob1.R * (1.0F - f1);
             if(f8 > 1.0F)
                 f8 = 1.0F;
-            a(mob1.aY, mob1.x());
+            a(entityMob1.aY, entityMob1.getTexture());
             org.lwjgl.opengl.GL11.glEnable(3008);
             d.b(f9, f8, f5, f3 - f2, f4, f7);
             for(int i = 0; i < 4; i++)
-                if(a(mob1, i))
+                if(a(entityMob1, i))
                 {
                     e.b(f9, f8, f5, f3 - f2, f4, f7);
                     org.lwjgl.opengl.GL11.glDisable(3042);
                     org.lwjgl.opengl.GL11.glEnable(3008);
                 }
 
-            b(mob1, f1);
-            float f10 = mob1.a(f1);
-            int j = a(mob1, f10, f1);
-            if((j >> 24 & 0xff) > 0 || mob1.hurtTime > 0 || mob1.deathTime > 0)
+            b(entityMob1, f1);
+            float f10 = entityMob1.a(f1);
+            int j = a(entityMob1, f10, f1);
+            if((j >> 24 & 0xff) > 0 || entityMob1.hurtTime > 0 || entityMob1.deathTime > 0)
             {
                 org.lwjgl.opengl.GL11.glDisable(3553);
                 org.lwjgl.opengl.GL11.glDisable(3008);
                 org.lwjgl.opengl.GL11.glEnable(3042);
                 org.lwjgl.opengl.GL11.glBlendFunc(770, 771);
                 org.lwjgl.opengl.GL11.glDepthFunc(514);
-                if(mob1.hurtTime > 0 || mob1.deathTime > 0)
+                if(entityMob1.hurtTime > 0 || entityMob1.deathTime > 0)
                 {
                     org.lwjgl.opengl.GL11.glColor4f(f10, 0.0F, 0.0F, 0.4F);
                     d.b(f9, f8, f5, f3 - f2, f4, f7);
                     for(int k = 0; k < 4; k++)
-                        if(a(mob1, k))
+                        if(a(entityMob1, k))
                         {
                             org.lwjgl.opengl.GL11.glColor4f(f10, 0.0F, 0.0F, 0.4F);
                             e.b(f9, f8, f5, f3 - f2, f4, f7);
@@ -95,7 +95,7 @@ public class dn extends ak
                     org.lwjgl.opengl.GL11.glColor4f(f11, f12, f13, f14);
                     d.b(f9, f8, f5, f3 - f2, f4, f7);
                     for(int l = 0; l < 4; l++)
-                        if(a(mob1, l))
+                        if(a(entityMob1, l))
                         {
                             org.lwjgl.opengl.GL11.glColor4f(f11, f12, f13, f14);
                             e.b(f9, f8, f5, f3 - f2, f4, f7);
@@ -117,41 +117,41 @@ public class dn extends ak
         org.lwjgl.opengl.GL11.glPopMatrix();
     }
 
-    protected float c(Mob mob1, float f)
+    protected float c(EntityMob entityMob1, float f)
     {
-        return mob1.d(f);
+        return entityMob1.d(f);
     }
 
-    protected float d(Mob mob1, float f)
+    protected float d(EntityMob entityMob1, float f)
     {
-        return (float) mob1.aR + f;
+        return (float) entityMob1.aR + f;
     }
 
-    protected void b(Mob mob1, float f)
+    protected void b(EntityMob entityMob1, float f)
     {
     }
 
-    protected boolean a(Mob mob1, int i)
+    protected boolean a(EntityMob entityMob1, int i)
     {
         return false;
     }
 
-    protected float a(Mob mob1)
+    protected float a(EntityMob entityMob1)
     {
         return 90F;
     }
 
-    protected int a(Mob mob1, float f, float f1)
+    protected int a(EntityMob entityMob1, float f, float f1)
     {
         return 0;
     }
 
-    protected void a(Mob mob1, float f)
+    protected void a(EntityMob entityMob1, float f)
     {
     }
 
-    public void a(kh kh, double d1, double d2, double d3, float f, float f1)
+    public void a(Entity entity, double d1, double d2, double d3, float f, float f1)
     {
-        a((Mob)kh, d1, d2, d3, f, f1);
+        a((EntityMob) entity, d1, d2, d3, f, f1);
     }
 }
diff --git "a/temp\\src\\java/dp.java" "b/src\\main\\java/dp.java"
index 0835dc0..086aaf2 100644
--- "a/temp\\src\\java/dp.java"
+++ "b/src\\main\\java/dp.java"
@@ -9,12 +9,12 @@ public class dp extends nq
               double d3, double d4, double d5)
     {
         super(world, d, d1, d2, d3, d4, d5);
-        an = d3 + (double)((float)(java.lang.Math.random() * 2D - 1.0D) * 0.05F);
-        ao = d4 + (double)((float)(java.lang.Math.random() * 2D - 1.0D) * 0.05F);
-        ap = d5 + (double)((float)(java.lang.Math.random() * 2D - 1.0D) * 0.05F);
-        i = j = k = aQ.nextFloat() * 0.3F + 0.7F;
-        g = aQ.nextFloat() * aQ.nextFloat() * 6F + 1.0F;
-        f = (int)(16D / ((double)aQ.nextFloat() * 0.80000000000000004D + 0.20000000000000001D)) + 2;
+        motionX = d3 + (double)((float)(java.lang.Math.random() * 2D - 1.0D) * 0.05F);
+        motionY = d4 + (double)((float)(java.lang.Math.random() * 2D - 1.0D) * 0.05F);
+        motionZ = d5 + (double)((float)(java.lang.Math.random() * 2D - 1.0D) * 0.05F);
+        i = j = k = rnd.nextFloat() * 0.3F + 0.7F;
+        g = rnd.nextFloat() * rnd.nextFloat() * 6F + 1.0F;
+        f = (int)(16D / ((double) rnd.nextFloat() * 0.80000000000000004D + 0.20000000000000001D)) + 2;
     }
 
     public void a(ho ho, float f, float f1, float f2, float f3, float f4, float f5)
@@ -24,21 +24,21 @@ public class dp extends nq
 
     public void e_()
     {
-        ah = ak;
-        ai = al;
-        aj = am;
+        prevPosX = posX;
+        prevPosY = posY;
+        prevPosZ = posZ;
         if(e++ >= f)
             F();
         b = 7 - (e * 8) / f;
-        ao += 0.0040000000000000001D;
-        c(an, ao, ap);
-        an *= 0.89999997615814209D;
-        ao *= 0.89999997615814209D;
-        ap *= 0.89999997615814209D;
-        if(av)
+        motionY += 0.0040000000000000001D;
+        c(motionX, motionY, motionZ);
+        motionX *= 0.89999997615814209D;
+        motionY *= 0.89999997615814209D;
+        motionZ *= 0.89999997615814209D;
+        if(onGround)
         {
-            an *= 0.69999998807907104D;
-            ap *= 0.69999998807907104D;
+            motionX *= 0.69999998807907104D;
+            motionZ *= 0.69999998807907104D;
         }
     }
 }
diff --git "a/temp\\src\\java/e.java" "b/src\\main\\java/e.java"
index 8df2078..33f393d 100644
--- "a/temp\\src\\java/e.java"
+++ "b/src\\main\\java/e.java"
@@ -12,7 +12,7 @@ public class e
 {
 
     public java.util.List a;
-    private World k;
+    private World world;
     private ey l;
     private java.util.List m;
     private bn n[];
@@ -191,13 +191,13 @@ public class e
 
     public void a(World world1)
     {
-        if(k != null)
-            k.b(((im) (this)));
+        if(world != null)
+            world.b(((im) (this)));
         f = -9999D;
         g = -9999D;
         h = -9999D;
         kx.a.a(world1);
-        k = world1;
+        world = world1;
         u = new bc(((nm) (world1)));
         if(world1 != null)
         {
@@ -243,7 +243,7 @@ public class e
             {
                 for(int l2 = 0; l2 < r; l2++)
                 {
-                    o[(l2 * q + k2) * p + j2] = new bn(k, a, j2 * 16, k2 * 16, l2 * 16, 16, s + k1);
+                    o[(l2 * q + k2) * p + j2] = new bn(world, a, j2 * 16, k2 * 16, l2 * 16, 16, s + k1);
                     if(w)
                         o[(l2 * q + k2) * p + j2].z = v.get(l1);
                     o[(l2 * q + k2) * p + j2].y = false;
@@ -260,43 +260,43 @@ public class e
 
         }
 
-        if(k != null)
+        if(world != null)
         {
             bi bi1 = t.g;
-            b(eo.b(((kh) (bi1)).ak), eo.b(((kh) (bi1)).al), eo.b(((kh) (bi1)).am));
-            java.util.Arrays.sort(((Object []) (n)), ((java.util.Comparator) (new fb(((kh) (bi1))))));
+            b(MathLib.castIgnoringSign(((Entity) (bi1)).posX), MathLib.castIgnoringSign(((Entity) (bi1)).posY), MathLib.castIgnoringSign(((Entity) (bi1)).posZ));
+            java.util.Arrays.sort(((Object []) (n)), ((java.util.Comparator) (new fb(((Entity) (bi1))))));
         }
         I = 2;
     }
 
-    public void a(aj aj1, oe oe1, float f1)
+    public void a(Vec3 vec31, oe oe1, float f1)
     {
         if(I > 0)
         {
             I--;
             return;
         }
-        fz.a.a(k, l, t.o, ((Player) (t.g)), f1);
-        kx.a.a(k, l, t.o, ((Player) (t.g)), t.y, f1);
+        fz.a.a(world, l, t.o, ((EntityPlayer) (t.g)), f1);
+        kx.a.a(world, l, t.o, ((EntityPlayer) (t.g)), t.y, f1);
         J = 0;
         K = 0;
         L = 0;
         bi bi1 = t.g;
-        kx.b = ((kh) (bi1)).aI + (((kh) (bi1)).ak - ((kh) (bi1)).aI) * (double)f1;
-        kx.c = ((kh) (bi1)).aJ + (((kh) (bi1)).al - ((kh) (bi1)).aJ) * (double)f1;
-        kx.d = ((kh) (bi1)).aK + (((kh) (bi1)).am - ((kh) (bi1)).aK) * (double)f1;
-        fz.b = ((kh) (bi1)).aI + (((kh) (bi1)).ak - ((kh) (bi1)).aI) * (double)f1;
-        fz.c = ((kh) (bi1)).aJ + (((kh) (bi1)).al - ((kh) (bi1)).aJ) * (double)f1;
-        fz.d = ((kh) (bi1)).aK + (((kh) (bi1)).am - ((kh) (bi1)).aK) * (double)f1;
-        java.util.List list = k.i();
+        kx.b = ((Entity) (bi1)).aI + (((Entity) (bi1)).posX - ((Entity) (bi1)).aI) * (double)f1;
+        kx.c = ((Entity) (bi1)).aJ + (((Entity) (bi1)).posY - ((Entity) (bi1)).aJ) * (double)f1;
+        kx.d = ((Entity) (bi1)).aK + (((Entity) (bi1)).posZ - ((Entity) (bi1)).aK) * (double)f1;
+        fz.b = ((Entity) (bi1)).aI + (((Entity) (bi1)).posX - ((Entity) (bi1)).aI) * (double)f1;
+        fz.c = ((Entity) (bi1)).aJ + (((Entity) (bi1)).posY - ((Entity) (bi1)).aJ) * (double)f1;
+        fz.d = ((Entity) (bi1)).aK + (((Entity) (bi1)).posZ - ((Entity) (bi1)).aK) * (double)f1;
+        java.util.List list = world.i();
         J = list.size();
         for(int i1 = 0; i1 < list.size(); i1++)
         {
-            kh kh1 = (kh)list.get(i1);
-            if(kh1.a(aj1) && oe1.a(kh1.au) && (kh1 != t.g || t.y.x))
+            Entity entity1 = (Entity)list.get(i1);
+            if(entity1.a(vec31) && oe1.a(entity1.au) && (entity1 != t.g || t.y.x))
             {
                 K++;
-                kx.a.a(kh1, f1);
+                kx.a.a(entity1, f1);
             }
         }
 
@@ -372,7 +372,7 @@ public class e
 
     }
 
-    public int a(Player player1, int i1, double d1)
+    public int a(EntityPlayer entityPlayer1, int i1, double d1)
     {
         if(t.y.e != H)
             a();
@@ -384,19 +384,19 @@ public class e
             P = 0;
             Q = 0;
         }
-        double d2 = player1.aI + (player1.ak - player1.aI) * d1;
-        double d3 = player1.aJ + (player1.al - player1.aJ) * d1;
-        double d4 = player1.aK + (player1.am - player1.aK) * d1;
-        double d5 = player1.ak - f;
-        double d6 = player1.al - g;
-        double d7 = player1.am - h;
+        double d2 = entityPlayer1.aI + (entityPlayer1.posX - entityPlayer1.aI) * d1;
+        double d3 = entityPlayer1.aJ + (entityPlayer1.posY - entityPlayer1.aJ) * d1;
+        double d4 = entityPlayer1.aK + (entityPlayer1.posZ - entityPlayer1.aK) * d1;
+        double d5 = entityPlayer1.posX - f;
+        double d6 = entityPlayer1.posY - g;
+        double d7 = entityPlayer1.posZ - h;
         if(d5 * d5 + d6 * d6 + d7 * d7 > 16D)
         {
-            f = player1.ak;
-            g = player1.al;
-            h = player1.am;
-            b(eo.b(player1.ak), eo.b(player1.al), eo.b(player1.am));
-            java.util.Arrays.sort(((Object []) (n)), ((java.util.Comparator) (new fb(((kh) (player1))))));
+            f = entityPlayer1.posX;
+            g = entityPlayer1.posY;
+            h = entityPlayer1.posZ;
+            b(MathLib.castIgnoringSign(entityPlayer1.posX), MathLib.castIgnoringSign(entityPlayer1.posY), MathLib.castIgnoringSign(entityPlayer1.posZ));
+            java.util.Arrays.sort(((Object []) (n)), ((java.util.Comparator) (new fb(((Entity) (entityPlayer1))))));
         }
         int j1 = 0;
         if(w && !t.y.g && i1 == 0)
@@ -436,7 +436,7 @@ public class e
                         n[j2].x = true;
                     if(!n[j2].o || n[j2].y)
                         continue;
-                    float f4 = eo.c(n[j2].a(((kh) (player1))));
+                    float f4 = MathLib.sqrt(n[j2].a(((Entity) (entityPlayer1))));
                     int k2 = (int)(1.0F + f4 / 128F);
                     if(x % k2 != j2 % k2)
                         continue;
@@ -525,9 +525,9 @@ public class e
         }
 
         bi bi1 = t.g;
-        double d2 = ((Player) (bi1)).aI + (((Player) (bi1)).ak - ((Player) (bi1)).aI) * d1;
-        double d3 = ((Player) (bi1)).aJ + (((Player) (bi1)).al - ((Player) (bi1)).aJ) * d1;
-        double d4 = ((Player) (bi1)).aK + (((Player) (bi1)).am - ((Player) (bi1)).aK) * d1;
+        double d2 = ((EntityPlayer) (bi1)).aI + (((EntityPlayer) (bi1)).posX - ((EntityPlayer) (bi1)).aI) * d1;
+        double d3 = ((EntityPlayer) (bi1)).aJ + (((EntityPlayer) (bi1)).posY - ((EntityPlayer) (bi1)).aJ) * d1;
+        double d4 = ((EntityPlayer) (bi1)).aK + (((EntityPlayer) (bi1)).posZ - ((EntityPlayer) (bi1)).aK) * d1;
         int k2 = 0;
         for(int l2 = 0; l2 < S.length; l2++)
             S[l2].b();
@@ -567,10 +567,10 @@ public class e
     public void a(float f1)
     {
         org.lwjgl.opengl.GL11.glDisable(3553);
-        aj aj1 = k.b(f1);
-        float f2 = (float)aj1.a;
-        float f3 = (float)aj1.b;
-        float f4 = (float)aj1.c;
+        Vec3 vec31 = world.b(f1);
+        float f2 = (float) vec31.x;
+        float f3 = (float) vec31.y;
+        float f4 = (float) vec31.z;
         if(t.y.g)
         {
             float f5 = (f2 * 30F + f3 * 59F + f4 * 11F) / 100F;
@@ -598,7 +598,7 @@ public class e
         org.lwjgl.opengl.GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
         org.lwjgl.opengl.GL11.glTranslatef(f7, f9, f10);
         org.lwjgl.opengl.GL11.glRotatef(0.0F, 0.0F, 0.0F, 1.0F);
-        org.lwjgl.opengl.GL11.glRotatef(k.c(f1) * 360F, 1.0F, 0.0F, 0.0F);
+        org.lwjgl.opengl.GL11.glRotatef(world.sunAngle(f1) * 360F, 1.0F, 0.0F, 0.0F);
         float f11 = 30F;
         org.lwjgl.opengl.GL11.glBindTexture(3553, l.a("/terrain/sun.png"));
         ho1.b();
@@ -616,7 +616,7 @@ public class e
         ho1.a(-f11, -100D, -f11, 1.0D, 0.0D);
         ho1.a();
         org.lwjgl.opengl.GL11.glDisable(3553);
-        float f12 = k.f(f1);
+        float f12 = world.f(f1);
         if(f12 > 0.0F)
         {
             org.lwjgl.opengl.GL11.glColor4f(f12, f12, f12, f12);
@@ -642,17 +642,17 @@ public class e
             return;
         }
         org.lwjgl.opengl.GL11.glDisable(2884);
-        float f2 = (float)(t.g.aJ + (t.g.al - t.g.aJ) * (double)f1);
+        float f2 = (float)(t.g.aJ + (t.g.posY - t.g.aJ) * (double)f1);
         byte byte0 = 32;
         int i1 = 256 / byte0;
         ho ho1 = ho.a;
         org.lwjgl.opengl.GL11.glBindTexture(3553, l.a("/clouds.png"));
         org.lwjgl.opengl.GL11.glEnable(3042);
         org.lwjgl.opengl.GL11.glBlendFunc(770, 771);
-        aj aj1 = k.d(f1);
-        float f3 = (float)aj1.a;
-        float f4 = (float)aj1.b;
-        float f5 = (float)aj1.c;
+        Vec3 vec31 = world.d(f1);
+        float f3 = (float) vec31.x;
+        float f4 = (float) vec31.y;
+        float f5 = (float) vec31.z;
         if(t.y.g)
         {
             float f6 = (f3 * 30F + f4 * 59F + f5 * 11F) / 100F;
@@ -663,10 +663,10 @@ public class e
             f5 = f9;
         }
         float f7 = 0.0004882813F;
-        double d1 = t.g.ah + (t.g.ak - t.g.ah) * (double)f1 + (double)(((float)x + f1) * 0.03F);
-        double d2 = t.g.aj + (t.g.am - t.g.aj) * (double)f1;
-        int j1 = eo.b(d1 / 2048D);
-        int k1 = eo.b(d2 / 2048D);
+        double d1 = t.g.prevPosX + (t.g.posX - t.g.prevPosX) * (double)f1 + (double)(((float)x + f1) * 0.03F);
+        double d2 = t.g.prevPosZ + (t.g.posZ - t.g.prevPosZ) * (double)f1;
+        int j1 = MathLib.castIgnoringSign(d1 / 2048D);
+        int k1 = MathLib.castIgnoringSign(d2 / 2048D);
         d1 -= j1 * 2048;
         d2 -= k1 * 2048;
         float f10 = (120F - f2) + 0.33F;
@@ -695,24 +695,24 @@ public class e
     public void c(float f1)
     {
         org.lwjgl.opengl.GL11.glDisable(2884);
-        float f2 = (float)(t.g.aJ + (t.g.al - t.g.aJ) * (double)f1);
+        float f2 = (float)(t.g.aJ + (t.g.posY - t.g.aJ) * (double)f1);
         ho ho1 = ho.a;
         float f3 = 12F;
         float f4 = 4F;
-        double d1 = (t.g.ah + (t.g.ak - t.g.ah) * (double)f1 + (double)(((float)x + f1) * 0.03F)) / (double)f3;
-        double d2 = (t.g.aj + (t.g.am - t.g.aj) * (double)f1) / (double)f3 + 0.33000001311302185D;
+        double d1 = (t.g.prevPosX + (t.g.posX - t.g.prevPosX) * (double)f1 + (double)(((float)x + f1) * 0.03F)) / (double)f3;
+        double d2 = (t.g.prevPosZ + (t.g.posZ - t.g.prevPosZ) * (double)f1) / (double)f3 + 0.33000001311302185D;
         float f5 = (108F - f2) + 0.33F;
-        int i1 = eo.b(d1 / 2048D);
-        int j1 = eo.b(d2 / 2048D);
+        int i1 = MathLib.castIgnoringSign(d1 / 2048D);
+        int j1 = MathLib.castIgnoringSign(d2 / 2048D);
         d1 -= i1 * 2048;
         d2 -= j1 * 2048;
         org.lwjgl.opengl.GL11.glBindTexture(3553, l.a("/clouds.png"));
         org.lwjgl.opengl.GL11.glEnable(3042);
         org.lwjgl.opengl.GL11.glBlendFunc(770, 771);
-        aj aj1 = k.d(f1);
-        float f6 = (float)aj1.a;
-        float f7 = (float)aj1.b;
-        float f8 = (float)aj1.c;
+        Vec3 vec31 = world.d(f1);
+        float f6 = (float) vec31.x;
+        float f7 = (float) vec31.y;
+        float f8 = (float) vec31.z;
         if(t.y.g)
         {
             float f9 = (f6 * 30F + f7 * 59F + f8 * 11F) / 100F;
@@ -725,10 +725,10 @@ public class e
         float f10 = (float)(d1 * 0.0D);
         float f12 = (float)(d2 * 0.0D);
         float f14 = 0.00390625F;
-        f10 = (float)eo.b(d1) * f14;
-        f12 = (float)eo.b(d2) * f14;
-        float f15 = (float)(d1 - (double)eo.b(d1));
-        float f16 = (float)(d2 - (double)eo.b(d2));
+        f10 = (float) MathLib.castIgnoringSign(d1) * f14;
+        f12 = (float) MathLib.castIgnoringSign(d2) * f14;
+        float f15 = (float)(d1 - (double) MathLib.castIgnoringSign(d1));
+        float f16 = (float)(d2 - (double) MathLib.castIgnoringSign(d2));
         int k1 = 8;
         byte byte0 = 3;
         float f17 = 0.0009765625F;
@@ -828,9 +828,9 @@ public class e
         org.lwjgl.opengl.GL11.glEnable(2884);
     }
 
-    public boolean a(Player player1, boolean flag)
+    public boolean a(EntityPlayer entityPlayer1, boolean flag)
     {
-        java.util.Collections.sort(m, ((java.util.Comparator) (new gl(player1))));
+        java.util.Collections.sort(m, ((java.util.Comparator) (new gl(entityPlayer1))));
         int i1 = m.size() - 1;
         int j1 = m.size();
         for(int k1 = 0; k1 < j1; k1++)
@@ -838,7 +838,7 @@ public class e
             bn bn1 = (bn)m.get(i1 - k1);
             if(!flag)
             {
-                if(bn1.a(((kh) (player1))) > 1024F)
+                if(bn1.a(((Entity) (entityPlayer1))) > 1024F)
                     if(bn1.o)
                     {
                         if(k1 >= 3)
@@ -857,13 +857,13 @@ public class e
         return m.size() == 0;
     }
 
-    public void a(Player player1, mf mf1, int i1, ev ev, float f1)
+    public void a(EntityPlayer entityPlayer1, mf mf1, int i1, ev ev, float f1)
     {
         ho ho1 = ho.a;
         org.lwjgl.opengl.GL11.glEnable(3042);
         org.lwjgl.opengl.GL11.glEnable(3008);
         org.lwjgl.opengl.GL11.glBlendFunc(770, 1);
-        org.lwjgl.opengl.GL11.glColor4f(1.0F, 1.0F, 1.0F, (eo.a((float)java.lang.System.currentTimeMillis() / 100F) * 0.2F + 0.4F) * 0.5F);
+        org.lwjgl.opengl.GL11.glColor4f(1.0F, 1.0F, 1.0F, (MathLib.sin((float)java.lang.System.currentTimeMillis() / 100F) * 0.2F + 0.4F) * 0.5F);
         if(i1 == 0)
         {
             if(i > 0.0F)
@@ -873,15 +873,15 @@ public class e
                 org.lwjgl.opengl.GL11.glBindTexture(3553, j1);
                 org.lwjgl.opengl.GL11.glColor4f(1.0F, 1.0F, 1.0F, 0.5F);
                 org.lwjgl.opengl.GL11.glPushMatrix();
-                int k1 = k.a(mf1.b, mf1.c, mf1.d);
+                int k1 = world.a(mf1.b, mf1.c, mf1.d);
                 ly ly1 = k1 <= 0 ? null : ly.n[k1];
                 org.lwjgl.opengl.GL11.glDisable(3008);
                 org.lwjgl.opengl.GL11.glPolygonOffset(-3F, -3F);
                 org.lwjgl.opengl.GL11.glEnable(32823);
                 ho1.b();
-                double d1 = player1.aI + (player1.ak - player1.aI) * (double)f1;
-                double d2 = player1.aJ + (player1.al - player1.aJ) * (double)f1;
-                double d3 = player1.aK + (player1.am - player1.aK) * (double)f1;
+                double d1 = entityPlayer1.aI + (entityPlayer1.posX - entityPlayer1.aI) * (double)f1;
+                double d2 = entityPlayer1.aJ + (entityPlayer1.posY - entityPlayer1.aJ) * (double)f1;
+                double d3 = entityPlayer1.aK + (entityPlayer1.posZ - entityPlayer1.aK) * (double)f1;
                 ho1.b(-d1, -d2, -d3);
                 ho1.c();
                 if(ly1 == null)
@@ -899,8 +899,8 @@ public class e
         if(ev != null)
         {
             org.lwjgl.opengl.GL11.glBlendFunc(770, 771);
-            float f2 = eo.a((float)java.lang.System.currentTimeMillis() / 100F) * 0.2F + 0.8F;
-            org.lwjgl.opengl.GL11.glColor4f(f2, f2, f2, eo.a((float)java.lang.System.currentTimeMillis() / 200F) * 0.2F + 0.5F);
+            float f2 = MathLib.sin((float)java.lang.System.currentTimeMillis() / 100F) * 0.2F + 0.8F;
+            org.lwjgl.opengl.GL11.glColor4f(f2, f2, f2, MathLib.sin((float)java.lang.System.currentTimeMillis() / 200F) * 0.2F + 0.5F);
             int l1 = l.a("/terrain.png");
             org.lwjgl.opengl.GL11.glBindTexture(3553, l1);
             int i2 = mf1.b;
@@ -923,7 +923,7 @@ public class e
         org.lwjgl.opengl.GL11.glDisable(3008);
     }
 
-    public void b(Player player1, mf mf1, int i1, ev ev, float f1)
+    public void b(EntityPlayer entityPlayer1, mf mf1, int i1, ev ev, float f1)
     {
         if(i1 == 0 && mf1.a == 0)
         {
@@ -934,14 +934,14 @@ public class e
             org.lwjgl.opengl.GL11.glDisable(3553);
             org.lwjgl.opengl.GL11.glDepthMask(false);
             float f2 = 0.002F;
-            int j1 = k.a(mf1.b, mf1.c, mf1.d);
+            int j1 = world.a(mf1.b, mf1.c, mf1.d);
             if(j1 > 0)
             {
-                ly.n[j1].a(((nm) (k)), mf1.b, mf1.c, mf1.d);
-                double d1 = player1.aI + (player1.ak - player1.aI) * (double)f1;
-                double d2 = player1.aJ + (player1.al - player1.aJ) * (double)f1;
-                double d3 = player1.aK + (player1.am - player1.aK) * (double)f1;
-                a(ly.n[j1].f(k, mf1.b, mf1.c, mf1.d).b(f2, f2, f2).c(-d1, -d2, -d3));
+                ly.n[j1].a(((nm) (world)), mf1.b, mf1.c, mf1.d);
+                double d1 = entityPlayer1.aI + (entityPlayer1.posX - entityPlayer1.aI) * (double)f1;
+                double d2 = entityPlayer1.aJ + (entityPlayer1.posY - entityPlayer1.aJ) * (double)f1;
+                double d3 = entityPlayer1.aK + (entityPlayer1.posZ - entityPlayer1.aK) * (double)f1;
+                a(ly.n[j1].f(world, mf1.b, mf1.c, mf1.d).b(f2, f2, f2).c(-d1, -d2, -d3));
             }
             org.lwjgl.opengl.GL11.glDepthMask(true);
             org.lwjgl.opengl.GL11.glEnable(3553);
@@ -980,12 +980,12 @@ public class e
 
     public void a(int i1, int j1, int k1, int l1, int i2, int j2)
     {
-        int k2 = eo.a(i1, 16);
-        int l2 = eo.a(j1, 16);
-        int i3 = eo.a(k1, 16);
-        int j3 = eo.a(l1, 16);
-        int k3 = eo.a(i2, 16);
-        int l3 = eo.a(j2, 16);
+        int k2 = MathLib.divMinor(i1, 16);
+        int l2 = MathLib.divMinor(j1, 16);
+        int i3 = MathLib.divMinor(k1, 16);
+        int j3 = MathLib.divMinor(l1, 16);
+        int k3 = MathLib.divMinor(i2, 16);
+        int l3 = MathLib.divMinor(j2, 16);
         for(int i4 = k2; i4 <= j3; i4++)
         {
             int j4 = i4 % p;
@@ -1046,59 +1046,59 @@ public class e
         float f3 = 16F;
         if(f1 > 1.0F)
             f3 *= f1;
-        if(t.g.d(d1, d2, d3) < (double)(f3 * f3))
+        if(t.g.distance(d1, d2, d3) < (double)(f3 * f3))
             t.A.b(s1, (float)d1, (float)d2, (float)d3, f1, f2);
     }
 
     public void a(String s1, double d1, double d2, double d3, 
             double d4, double d5, double d6)
     {
-        double d7 = t.g.ak - d1;
-        double d8 = t.g.al - d2;
-        double d9 = t.g.am - d3;
+        double d7 = t.g.posX - d1;
+        double d8 = t.g.posY - d2;
+        double d9 = t.g.posZ - d3;
         if(d7 * d7 + d8 * d8 + d9 * d9 > 256D)
             return;
         if(s1 == "bubble")
-            t.h.a(((nq) (new ba(k, d1, d2, d3, d4, d5, d6))));
+            t.h.a(((nq) (new ba(world, d1, d2, d3, d4, d5, d6))));
         else
         if(s1 == "smoke")
-            t.h.a(((nq) (new nl(k, d1, d2, d3))));
+            t.h.a(((nq) (new nl(world, d1, d2, d3))));
         else
         if(s1 == "explode")
-            t.h.a(((nq) (new dp(k, d1, d2, d3, d4, d5, d6))));
+            t.h.a(((nq) (new dp(world, d1, d2, d3, d4, d5, d6))));
         else
         if(s1 == "flame")
-            t.h.a(((nq) (new jb(k, d1, d2, d3, d4, d5, d6))));
+            t.h.a(((nq) (new jb(world, d1, d2, d3, d4, d5, d6))));
         else
         if(s1 == "lava")
-            t.h.a(((nq) (new cq(k, d1, d2, d3))));
+            t.h.a(((nq) (new cq(world, d1, d2, d3))));
         else
         if(s1 == "splash")
-            t.h.a(((nq) (new kq(k, d1, d2, d3, d4, d5, d6))));
+            t.h.a(((nq) (new kq(world, d1, d2, d3, d4, d5, d6))));
         else
         if(s1 == "largesmoke")
-            t.h.a(((nq) (new nl(k, d1, d2, d3, 2.5F))));
+            t.h.a(((nq) (new nl(world, d1, d2, d3, 2.5F))));
         else
         if(s1 == "reddust")
-            t.h.a(((nq) (new en(k, d1, d2, d3))));
+            t.h.a(((nq) (new en(world, d1, d2, d3))));
         else
         if(s1 == "snowballpoof")
-            t.h.a(((nq) (new ig(k, d1, d2, d3, di.aB))));
+            t.h.a(((nq) (new ig(world, d1, d2, d3, di.aB))));
         else
         if(s1 == "slime")
-            t.h.a(((nq) (new ig(k, d1, d2, d3, di.aK))));
+            t.h.a(((nq) (new ig(world, d1, d2, d3, di.aK))));
     }
 
-    public void a(kh kh1)
+    public void a(Entity entity1)
     {
-        if(kh1.aY != null)
-            l.a(kh1.aY, ((hb) (new jr())));
+        if(entity1.aY != null)
+            l.a(entity1.aY, ((hb) (new jr())));
     }
 
-    public void b(kh kh1)
+    public void b(Entity entity1)
     {
-        if(kh1.aY != null)
-            l.b(kh1.aY);
+        if(entity1.aY != null)
+            l.b(entity1.aY);
     }
 
     public void e()
diff --git "a/temp\\src\\java/ec.java" "b/src\\main\\java/ec.java"
index 1536b7f..4dabaa0 100644
--- "a/temp\\src\\java/ec.java"
+++ "b/src\\main\\java/ec.java"
@@ -16,7 +16,7 @@ public class ec extends di
         aT = 1;
     }
 
-    public boolean a(ev ev1, Player player1, World world1, int i, int j, int k, int l)
+    public boolean a(ev ev1, EntityPlayer entityPlayer1, World world1, int i, int j, int k, int l)
     {
         if(l != 1)
             return false;
@@ -28,7 +28,7 @@ public class ec extends di
             ly1 = ly.aM;
         if(!ly1.a(world1, i, j, k))
             return false;
-        int i1 = eo.b((double)(((player1.aq + 180F) * 4F) / 360F) - 0.5D) & 3;
+        int i1 = MathLib.castIgnoringSign((double)(((entityPlayer1.yaw + 180F) * 4F) / 360F) - 0.5D) & 3;
         byte byte0 = 0;
         byte byte1 = 0;
         if(i1 == 0)
diff --git "a/temp\\src\\java/ed.java" "b/src\\main\\java/ed.java"
index bda0e97..083c8e8 100644
--- "a/temp\\src\\java/ed.java"
+++ "b/src\\main\\java/ed.java"
@@ -6,13 +6,13 @@
 public class ed
 {
 
-    public aj a;
+    public Vec3 a;
     public float b;
     public float c;
 
     public ed(float f, float f1, float f2, float f3, float f4)
     {
-        this(aj.a(f, f1, f2), f3, f4);
+        this(Vec3.create(f, f1, f2), f3, f4);
     }
 
     public ed a(float f, float f1)
@@ -27,9 +27,9 @@ public class ed
         c = f1;
     }
 
-    public ed(aj aj1, float f, float f1)
+    public ed(Vec3 vec31, float f, float f1)
     {
-        a = aj1;
+        a = vec31;
         b = f;
         c = f1;
     }
diff --git "a/temp\\src\\java/ee.java" "b/src\\main\\java/ee.java"
index 8d7d303..9fb1817 100644
--- "a/temp\\src\\java/ee.java"
+++ "b/src\\main\\java/ee.java"
@@ -197,12 +197,12 @@ public abstract class ee extends bh
                     bi bi1 = b.g;
                     if(i1 == 0)
                     {
-                        ((Player) (bi1)).a(eu1.e);
+                        ((EntityPlayer) (bi1)).a(eu1.e);
                         eu1.e = null;
                     }
                     if(i1 == 1)
                     {
-                        ((Player) (bi1)).a(eu1.e.a(1));
+                        ((EntityPlayer) (bi1)).a(eu1.e.a(1));
                         if(eu1.e.count == 0)
                             eu1.e = null;
                     }
diff --git "a/temp\\src\\java/ef.java" "b/src\\main\\java/ef.java"
index c0f03cc..cc36b59 100644
--- "a/temp\\src\\java/ef.java"
+++ "b/src\\main\\java/ef.java"
@@ -11,7 +11,7 @@ public class ef extends di
         super(i);
     }
 
-    public boolean a(ev ev1, Player player, World world1, int i, int j, int k, int l)
+    public boolean a(ev ev1, EntityPlayer entityPlayer, World world1, int i, int j, int k, int l)
     {
         if(l == 0)
             j--;
diff --git "a/temp\\src\\java/eg.java" "b/src\\main\\java/eg.java"
index b2b0e17..aad2a66 100644
--- "a/temp\\src\\java/eg.java"
+++ "b/src\\main\\java/eg.java"
@@ -31,8 +31,8 @@ public class eg extends z
             for(int i1 = 0; i1 < 16; i1++)
             {
                 float f = 0.0F;
-                int k1 = (int)(eo.a(((float)i1 * 3.141593F * 2.0F) / 16F) * 1.2F);
-                int l1 = (int)(eo.a(((float)l * 3.141593F * 2.0F) / 16F) * 1.2F);
+                int k1 = (int)(MathLib.sin(((float)i1 * 3.141593F * 2.0F) / 16F) * 1.2F);
+                int l1 = (int)(MathLib.sin(((float)l * 3.141593F * 2.0F) / 16F) * 1.2F);
                 for(int j2 = l - 1; j2 <= l + 1; j2++)
                 {
                     for(int l2 = i1 - 1; l2 <= i1 + 1; l2++)
diff --git "a/temp\\src\\java/ei.java" "b/src\\main\\java/ei.java"
index b8c437f..82bff83 100644
--- "a/temp\\src\\java/ei.java"
+++ "b/src\\main\\java/ei.java"
@@ -39,8 +39,8 @@ public class ei extends ak
         org.lwjgl.opengl.GL11.glPopMatrix();
     }
 
-    public void a(kh kh, double d, double d1, double d2, float f, float f1)
+    public void a(Entity entity, double d, double d1, double d2, float f, float f1)
     {
-        a((Snowball)kh, d, d1, d2, f, f1);
+        a((Snowball) entity, d, d1, d2, f, f1);
     }
 }
diff --git "a/temp\\src\\java/ej.java" "b/src\\main\\java/ej.java"
index ae230e0..1f0f394 100644
--- "a/temp\\src\\java/ej.java"
+++ "b/src\\main\\java/ej.java"
@@ -220,9 +220,9 @@ public class ej extends ik
         int k1 = 0;
         for(int l1 = ai2[j1] + byte3; k1 != l1; k1 += ((int) (byte3)))
         {
-            ai3[j1] = eo.b((double)(ai[j1] + k1) + 0.5D);
-            ai3[byte1] = eo.b((double)ai[byte1] + (double)k1 * d1 + 0.5D);
-            ai3[byte2] = eo.b((double)ai[byte2] + (double)k1 * d2 + 0.5D);
+            ai3[j1] = MathLib.castIgnoringSign((double)(ai[j1] + k1) + 0.5D);
+            ai3[byte1] = MathLib.castIgnoringSign((double)ai[byte1] + (double)k1 * d1 + 0.5D);
+            ai3[byte2] = MathLib.castIgnoringSign((double)ai[byte2] + (double)k1 * d2 + 0.5D);
             c.a(ai3[0], ai3[1], ai3[2], i1);
         }
 
diff --git "a/temp\\src\\java/em.java" "b/src\\main\\java/em.java"
index ddde8e4..0270f4d 100644
--- "a/temp\\src\\java/em.java"
+++ "b/src\\main\\java/em.java"
@@ -56,9 +56,9 @@ public class em extends fo
     {
         a.e = f4 / 57.29578F;
         a.d = f5 / 57.29578F;
-        d.d = eo.b(f1 * 0.6662F) * 1.4F * f2;
-        e.d = eo.b(f1 * 0.6662F + 3.141593F) * 1.4F * f2;
-        f.d = eo.b(f1 * 0.6662F + 3.141593F) * 1.4F * f2;
-        g.d = eo.b(f1 * 0.6662F) * 1.4F * f2;
+        d.d = MathLib.cos(f1 * 0.6662F) * 1.4F * f2;
+        e.d = MathLib.cos(f1 * 0.6662F + 3.141593F) * 1.4F * f2;
+        f.d = MathLib.cos(f1 * 0.6662F + 3.141593F) * 1.4F * f2;
+        g.d = MathLib.cos(f1 * 0.6662F) * 1.4F * f2;
     }
 }
diff --git "a/temp\\src\\java/en.java" "b/src\\main\\java/en.java"
index 315f021..a3154ad 100644
--- "a/temp\\src\\java/en.java"
+++ "b/src\\main\\java/en.java"
@@ -17,9 +17,9 @@ public class en extends nq
               float f)
     {
         super(world, d, d1, d2, 0.0D, 0.0D, 0.0D);
-        an *= 0.10000000149011612D;
-        ao *= 0.10000000149011612D;
-        ap *= 0.10000000149011612D;
+        motionX *= 0.10000000149011612D;
+        motionY *= 0.10000000149011612D;
+        motionZ *= 0.10000000149011612D;
         i = (float)(java.lang.Math.random() * 0.30000001192092896D) + 0.7F;
         j = k = (float)(java.lang.Math.random() * 0.10000000149011612D);
         g *= 0.75F;
@@ -43,25 +43,25 @@ public class en extends nq
 
     public void e_()
     {
-        ah = ak;
-        ai = al;
-        aj = am;
+        prevPosX = posX;
+        prevPosY = posY;
+        prevPosZ = posZ;
         if(e++ >= f)
             F();
         b = 7 - (e * 8) / f;
-        c(an, ao, ap);
-        if(al == ai)
+        c(motionX, motionY, motionZ);
+        if(posY == prevPosY)
         {
-            an *= 1.1000000000000001D;
-            ap *= 1.1000000000000001D;
+            motionX *= 1.1000000000000001D;
+            motionZ *= 1.1000000000000001D;
         }
-        an *= 0.95999997854232788D;
-        ao *= 0.95999997854232788D;
-        ap *= 0.95999997854232788D;
-        if(av)
+        motionX *= 0.95999997854232788D;
+        motionY *= 0.95999997854232788D;
+        motionZ *= 0.95999997854232788D;
+        if(onGround)
         {
-            an *= 0.69999998807907104D;
-            ap *= 0.69999998807907104D;
+            motionX *= 0.69999998807907104D;
+            motionZ *= 0.69999998807907104D;
         }
     }
 }
diff --git "a/temp\\src\\java/eq.java" "b/src\\main\\java/eq.java"
index 0351951..2078a96 100644
--- "a/temp\\src\\java/eq.java"
+++ "b/src\\main\\java/eq.java"
@@ -11,31 +11,31 @@ public class eq extends dn
         super(fo, f);
     }
 
-    public void a(Chicken chicken1, double d1, double d2, double d3,
+    public void a(EntityChicken entityChicken1, double d1, double d2, double d3,
                   float f, float f1)
     {
-        super.a(((Mob) (chicken1)), d1, d2, d3, f, f1);
+        super.a(((EntityMob) (entityChicken1)), d1, d2, d3, f, f1);
     }
 
-    protected float a(Chicken chicken1, float f)
+    protected float a(EntityChicken entityChicken1, float f)
     {
-        float f1 = chicken1.e + (chicken1.b - chicken1.e) * f;
-        float f2 = chicken1.d + (chicken1.c - chicken1.d) * f;
-        return (eo.a(f1) + 1.0F) * f2;
+        float f1 = entityChicken1.e + (entityChicken1.b - entityChicken1.e) * f;
+        float f2 = entityChicken1.d + (entityChicken1.c - entityChicken1.d) * f;
+        return (MathLib.sin(f1) + 1.0F) * f2;
     }
 
-    protected float d(Mob mob, float f)
+    protected float d(EntityMob entityMob, float f)
     {
-        return a((Chicken) mob, f);
+        return a((EntityChicken) entityMob, f);
     }
 
-    public void a(Mob mob, double d1, double d2, double d3, float f, float f1)
+    public void a(EntityMob entityMob, double d1, double d2, double d3, float f, float f1)
     {
-        a((Chicken) mob, d1, d2, d3, f, f1);
+        a((EntityChicken) entityMob, d1, d2, d3, f, f1);
     }
 
-    public void a(kh kh, double d1, double d2, double d3, float f, float f1)
+    public void a(Entity entity, double d1, double d2, double d3, float f, float f1)
     {
-        a((Chicken)kh, d1, d2, d3, f, f1);
+        a((EntityChicken) entity, d1, d2, d3, f, f1);
     }
 }
diff --git "a/temp\\src\\java/et.java" "b/src\\main\\java/et.java"
index cccf8e0..a6529a3 100644
--- "a/temp\\src\\java/et.java"
+++ "b/src\\main\\java/et.java"
@@ -35,14 +35,14 @@ public class et extends ar
         b.a(0, dw.a().a(ai));
     }
 
-    public void a(Player player1)
+    public void a(EntityPlayer entityPlayer1)
     {
-        super.a(player1);
+        super.a(entityPlayer1);
         for(int i = 0; i < 9; i++)
         {
             ev ev1 = a.c(i);
             if(ev1 != null)
-                player1.a(ev1);
+                entityPlayer1.a(ev1);
         }
 
     }
diff --git "a/temp\\src\\java/eu.java" "b/src\\main\\java/eu.java"
index b7f8b09..4f771a8 100644
--- "a/temp\\src\\java/eu.java"
+++ "b/src\\main\\java/eu.java"
@@ -11,18 +11,18 @@ public class eu
     public ev slots2[];
     public ev slots3[];
     public int d;
-    private Player g;
+    private EntityPlayer g;
     public ev e;
     public boolean f;
 
-    public eu(Player player1)
+    public eu(EntityPlayer entityPlayer1)
     {
         slots1 = new ev[37];
         slots2 = new ev[4];
         slots3 = new ev[4];
         d = 0;
         f = false;
-        g = player1;
+        g = entityPlayer1;
     }
 
     public ev a()
@@ -202,7 +202,7 @@ public class eu
                 TagCompound tagCompound1 = new TagCompound();
                 tagCompound1.set("Slot", (byte)slot);
                 slots1[slot].writeCompound(tagCompound1);
-                tagList1.a(((Tag) (tagCompound1)));
+                tagList1.add(((Tag) (tagCompound1)));
             }
 
         for(int slot = 0; slot < slots2.length; slot++)
@@ -211,7 +211,7 @@ public class eu
                 TagCompound tagCompound2 = new TagCompound();
                 tagCompound2.set("Slot", (byte)(slot + 100));
                 slots2[slot].writeCompound(tagCompound2);
-                tagList1.a(((Tag) (tagCompound2)));
+                tagList1.add(((Tag) (tagCompound2)));
             }
 
         for(int slot = 0; slot < slots3.length; slot++)
@@ -220,7 +220,7 @@ public class eu
                 TagCompound tagCompound3 = new TagCompound();
                 tagCompound3.set("Slot", (byte)(slot + 80));
                 slots3[slot].writeCompound(tagCompound3);
-                tagList1.a(((Tag) (tagCompound3)));
+                tagList1.add(((Tag) (tagCompound3)));
             }
 
         return tagList1;
@@ -231,9 +231,9 @@ public class eu
         slots1 = new ev[36];
         slots2 = new ev[4];
         slots3 = new ev[4];
-        for(int k = 0; k < tagList1.c(); k++)
+        for(int k = 0; k < tagList1.size(); k++)
         {
-            TagCompound tagCompound1 = (TagCompound) tagList1.a(k);
+            TagCompound tagCompound1 = (TagCompound) tagList1.get(k);
             int slot = tagCompound1.getByte("Slot") & 0xff;
             if(slot >= 0 && slot < slots1.length)
                 slots1[slot] = new ev(tagCompound1);
@@ -276,11 +276,11 @@ public class eu
         return 64;
     }
 
-    public int a(kh kh)
+    public int a(Entity entity)
     {
         ev ev1 = c(d);
         if(ev1 != null)
-            return ev1.a(kh);
+            return ev1.a(entity);
         else
             return 1;
     }
@@ -392,7 +392,7 @@ public class eu
 
     public eu i()
     {
-        eu eu1 = new eu(((Player) (null)));
+        eu eu1 = new eu(((EntityPlayer) (null)));
         for(int k = 0; k < slots1.length; k++)
             eu1.slots1[k] = slots1[k] == null ? null : slots1[k].e();
 
diff --git "a/temp\\src\\java/ev.java" "b/src\\main\\java/ev.java"
index 8f728f8..c9562cb 100644
--- "a/temp\\src\\java/ev.java"
+++ "b/src\\main\\java/ev.java"
@@ -73,9 +73,9 @@ public final class ev
         return a().a(this);
     }
 
-    public boolean a(Player player, World world, int i, int j, int k, int l)
+    public boolean a(EntityPlayer entityPlayer, World world, int i, int j, int k, int l)
     {
-        return a().a(this, player, world, i, j, k, l);
+        return a().a(this, entityPlayer, world, i, j, k, l);
     }
 
     public float a(ly ly1)
@@ -83,9 +83,9 @@ public final class ev
         return a().a(this, ly1);
     }
 
-    public ev a(World world, Player player)
+    public ev a(World world, EntityPlayer entityPlayer)
     {
-        return a().a(this, world, player);
+        return a().a(this, world, entityPlayer);
     }
 
     public TagCompound writeCompound(TagCompound tagCompound1)
@@ -125,9 +125,9 @@ public final class ev
         }
     }
 
-    public void a(Mob mob)
+    public void a(EntityMob entityMob)
     {
-        di.c[id].a(this, mob);
+        di.c[id].a(this, entityMob);
     }
 
     public void a(int i, int j, int k, int l)
@@ -135,9 +135,9 @@ public final class ev
         di.c[id].a(this, i, j, k, l);
     }
 
-    public int a(kh kh)
+    public int a(Entity entity)
     {
-        return di.c[id].a(kh);
+        return di.c[id].a(entity);
     }
 
     public boolean b(ly ly1)
@@ -145,13 +145,13 @@ public final class ev
         return di.c[id].a(ly1);
     }
 
-    public void a(Player player)
+    public void a(EntityPlayer entityPlayer)
     {
     }
 
-    public void b(Mob mob)
+    public void b(EntityMob entityMob)
     {
-        di.c[id].b(this, mob);
+        di.c[id].b(this, entityMob);
     }
 
     public ev e()
diff --git "a/temp\\src\\java/ew.java" "b/temp\\src\\java/ew.java"
deleted file mode 100644
index bf4a10f..0000000
--- "a/temp\\src\\java/ew.java"
+++ /dev/null
@@ -1,126 +0,0 @@
-// Jad home page: http://www.kpdus.com/jad.html
-// Decompiler options: fullnames deadcode fieldsfirst safe 
-// Source File Name:   SourceFile
-
-import java.util.HashMap;
-
-public class ew
-{
-
-    private static java.util.Map a = new HashMap();
-    private static java.util.Map b = new HashMap();
-    private static java.util.Map c = new HashMap();
-    private static java.util.Map d = new HashMap();
-
-    public ew()
-    {
-    }
-
-    private static void a(java.lang.Class class1, String s, int i)
-    {
-        a.put(((Object) (s)), ((Object) (class1)));
-        b.put(((Object) (class1)), ((Object) (s)));
-        c.put(((Object) (java.lang.Integer.valueOf(i))), ((Object) (class1)));
-        d.put(((Object) (class1)), ((Object) (java.lang.Integer.valueOf(i))));
-    }
-
-    public static kh a(String s, World world1)
-    {
-        kh kh1 = null;
-        try
-        {
-            java.lang.Class class1 = (java.lang.Class)a.get(((Object) (s)));
-            if(class1 != null)
-                kh1 = (kh)class1.getConstructor(new java.lang.Class[] {
-                    World.class
-                }).newInstance(new Object[] {
-                        world1
-                });
-        }
-        catch(java.lang.Exception exception)
-        {
-            exception.printStackTrace();
-        }
-        return kh1;
-    }
-
-    public static kh a(TagCompound tagCompound1, World world1)
-    {
-        kh kh1 = null;
-        try
-        {
-            java.lang.Class class1 = (java.lang.Class)a.get(((Object) (tagCompound1.getString("id"))));
-            if(class1 != null)
-                kh1 = (kh)class1.getConstructor(new java.lang.Class[] {
-                    World.class
-                }).newInstance(new Object[] {
-                        world1
-                });
-        }
-        catch(java.lang.Exception exception)
-        {
-            exception.printStackTrace();
-        }
-        if(kh1 != null)
-            kh1.e(tagCompound1);
-        else
-            java.lang.System.out.println((new StringBuilder()).append("Skipping Entity with id ").append(tagCompound1.getString("id")).toString());
-        return kh1;
-    }
-
-    public static kh a(int i, World world1)
-    {
-        kh kh1 = null;
-        try
-        {
-            java.lang.Class class1 = (java.lang.Class)c.get(((Object) (java.lang.Integer.valueOf(i))));
-            if(class1 != null)
-                kh1 = (kh)class1.getConstructor(new java.lang.Class[] {
-                    World.class
-                }).newInstance(new Object[] {
-                        world1
-                });
-        }
-        catch(java.lang.Exception exception)
-        {
-            exception.printStackTrace();
-        }
-        if(kh1 == null)
-            java.lang.System.out.println((new StringBuilder()).append("Skipping Entity with id ").append(i).toString());
-        return kh1;
-    }
-
-    public static int a(kh kh1)
-    {
-        return ((java.lang.Integer)d.get(((Object) (((Object) (kh1)).getClass())))).intValue();
-    }
-
-    public static String b(kh kh1)
-    {
-        return (String)b.get(((Object) (((Object) (kh1)).getClass())));
-    }
-
-    static 
-    {
-        ew.a(Arrow.class, "Arrow", 10);
-        ew.a(Snowball.class, "Snowball", 11);
-        ew.a(Item.class, "Item", 1);
-        ew.a(Painting.class, "Painting", 9);
-        ew.a(Mob.class, "Mob", 48);
-        ew.a(Monster.class, "Monster", 49);
-        ew.a(Creeper.class, "Creeper", 50);
-        ew.a(Skeleton.class, "Skeleton", 51);
-        ew.a(Spider.class, "Spider", 52);
-        ew.a(Giant.class, "Giant", 53);
-        ew.a(Zombie.class, "Zombie", 54);
-        ew.a(Slime.class, "Slime", 55);
-        ew.a(Pig.class, "Pig", 90);
-        ew.a(Sheep.class, "Sheep", 91);
-        ew.a(Cow.class, "Cow", 91);
-        ew.a(Chicken.class, "Chicken", 91);
-        ew.a(PrimedTnt.class, "PrimedTnt", 20);
-        ew.a(FallingSand.class, "FallingSand", 21);
-        ew.a(Minecart.class, "Minecart", 40);
-        ew.a(Boat.class, "Boat", 41);
-    }
-}
diff --git "a/temp\\src\\java/ez.java" "b/src\\main\\java/ez.java"
index 0e576f5..c5b32cf 100644
--- "a/temp\\src\\java/ez.java"
+++ "b/src\\main\\java/ez.java"
@@ -19,15 +19,15 @@ public class ez extends fn
     {
     }
 
-    public ez(Mob mob1)
+    public ez(EntityMob entityMob1)
     {
-        a = mob1.ab;
-        b = (byte)ew.a(((kh) (mob1)));
-        c = eo.b(mob1.ak * 32D);
-        d = eo.b(mob1.al * 32D);
-        e = eo.b(mob1.am * 32D);
-        f = (byte)(int)((mob1.aq * 256F) / 360F);
-        g = (byte)(int)((mob1.ar * 256F) / 360F);
+        a = entityMob1.ab;
+        b = (byte) EntityList.a(((Entity) (entityMob1)));
+        c = MathLib.castIgnoringSign(entityMob1.posX * 32D);
+        d = MathLib.castIgnoringSign(entityMob1.posY * 32D);
+        e = MathLib.castIgnoringSign(entityMob1.posZ * 32D);
+        f = (byte)(int)((entityMob1.yaw * 256F) / 360F);
+        g = (byte)(int)((entityMob1.pitch * 256F) / 360F);
     }
 
     public void a(java.io.DataInputStream datainputstream) throws IOException
diff --git "a/temp\\src\\java/fb.java" "b/src\\main\\java/fb.java"
index bdc7641..aa4ca8d 100644
--- "a/temp\\src\\java/fb.java"
+++ "b/src\\main\\java/fb.java"
@@ -6,11 +6,11 @@ public class fb
     implements java.util.Comparator
 {
 
-    private kh a;
+    private Entity a;
 
-    public fb(kh kh)
+    public fb(Entity entity)
     {
-        a = kh;
+        a = entity;
     }
 
     public int a(bn bn1, bn bn2)
diff --git "a/temp\\src\\java/fd.java" "b/src\\main\\java/fd.java"
index d426b8a..7122d30 100644
--- "a/temp\\src\\java/fd.java"
+++ "b/src\\main\\java/fd.java"
@@ -63,7 +63,7 @@ public class fd extends ly
         double d3 = (double)(world1.n.nextFloat() * f) + (double)(1.0F - f) * 0.5D;
         Item item1 = new Item(world1, (double)i + d1, (double)j + d2, (double)k + d3, new ev(i1));
         item1.c = 10;
-        world1.a(((kh) (item1)));
+        world1.a(((Entity) (item1)));
         world1.d(i, j, k, 0);
     }
 
diff --git "a/temp\\src\\java/fu.java" "b/src\\main\\java/fu.java"
index 45cd662..66a8b2e 100644
--- "a/temp\\src\\java/fu.java"
+++ "b/src\\main\\java/fu.java"
@@ -12,7 +12,7 @@ public class fu extends di
         aU = 32 << j;
     }
 
-    public boolean a(ev ev1, Player player, World world1, int i, int j, int k, int l)
+    public boolean a(ev ev1, EntityPlayer entityPlayer, World world1, int i, int j, int k, int l)
     {
         int i1 = world1.a(i, j, k);
         gb gb1 = world1.f(i, j + 1, k);
@@ -33,7 +33,7 @@ public class fu extends di
                     float f3 = world1.n.nextFloat() * f + (1.0F - f) * 0.5F;
                     Item item1 = new Item(world1, (float)i + f1, (float)j + f2, (float)k + f3, new ev(di.Q));
                     item1.c = 10;
-                    world1.a(((kh) (item1)));
+                    world1.a(((Entity) (item1)));
                 }
 
             }
diff --git "a/temp\\src\\java/fw.java" "b/src\\main\\java/fw.java"
index eb5c374..21a9b5b 100644
--- "a/temp\\src\\java/fw.java"
+++ "b/src\\main\\java/fw.java"
@@ -77,12 +77,12 @@ public class fw extends ly
             a(0.0F, 0.0F, 0.0F, f1, 1.0F, 1.0F);
     }
 
-    public void b(World world1, int i, int j, int k, Player player)
+    public void b(World world1, int i, int j, int k, EntityPlayer entityPlayer)
     {
-        a(world1, i, j, k, player);
+        a(world1, i, j, k, entityPlayer);
     }
 
-    public boolean a(World world1, int i, int j, int k, Player player)
+    public boolean a(World world1, int i, int j, int k, EntityPlayer entityPlayer)
     {
         if(bn == gb.e)
             return true;
@@ -90,7 +90,7 @@ public class fw extends ly
         if((l & 8) != 0)
         {
             if(world1.a(i, j - 1, k) == bc)
-                a(world1, i, j - 1, k, player);
+                a(world1, i, j - 1, k, entityPlayer);
             return true;
         }
         if(world1.a(i, j + 1, k) == bc)
@@ -171,10 +171,10 @@ public class fw extends ly
             return di.at.aS;
     }
 
-    public mf a(World world1, int i, int j, int k, aj aj, aj aj1)
+    public mf a(World world1, int i, int j, int k, Vec3 vec3, Vec3 vec31)
     {
         a(((nm) (world1)), i, j, k);
-        return super.a(world1, i, j, k, aj, aj1);
+        return super.a(world1, i, j, k, vec3, vec31);
     }
 
     public int c(int i)
diff --git "a/temp\\src\\java/fz.java" "b/src\\main\\java/fz.java"
index b6ff6c9..f685e31 100644
--- "a/temp\\src\\java/fz.java"
+++ "b/src\\main\\java/fz.java"
@@ -15,7 +15,7 @@ public class fz
     public static double d;
     public ey e;
     public World f;
-    public Player g;
+    public EntityPlayer g;
     public float h;
     public float i;
     public double j;
@@ -54,17 +54,17 @@ public class fz
         return a(((Object) (ic1)).getClass());
     }
 
-    public void a(World world1, ey ey, kd kd, Player player1, float f1)
+    public void a(World world1, ey ey, kd kd, EntityPlayer entityPlayer1, float f1)
     {
         f = world1;
         e = ey;
-        g = player1;
+        g = entityPlayer1;
         n = kd;
-        h = player1.as + (player1.aq - player1.as) * f1;
-        i = player1.at + (player1.ar - player1.at) * f1;
-        j = player1.aI + (player1.ak - player1.aI) * (double)f1;
-        k = player1.aJ + (player1.al - player1.aJ) * (double)f1;
-        l = player1.aK + (player1.am - player1.aK) * (double)f1;
+        h = entityPlayer1.prevYaw + (entityPlayer1.yaw - entityPlayer1.prevYaw) * f1;
+        i = entityPlayer1.prevPitch + (entityPlayer1.pitch - entityPlayer1.prevPitch) * f1;
+        j = entityPlayer1.aI + (entityPlayer1.posX - entityPlayer1.aI) * (double)f1;
+        k = entityPlayer1.aJ + (entityPlayer1.posY - entityPlayer1.aJ) * (double)f1;
+        l = entityPlayer1.aK + (entityPlayer1.posZ - entityPlayer1.aK) * (double)f1;
     }
 
     public void a(ic ic1, float f1)
diff --git "a/temp\\src\\java/gd.java" "b/src\\main\\java/gd.java"
index 1b32bd6..0a24f53 100644
--- "a/temp\\src\\java/gd.java"
+++ "b/src\\main\\java/gd.java"
@@ -41,7 +41,7 @@ public class gd extends lv
 
     }
 
-    public void a(Player player)
+    public void a(EntityPlayer entityPlayer)
     {
         a = 0.0F;
         b = 0.0F;
diff --git "a/temp\\src\\java/gf.java" "b/src\\main\\java/gf.java"
index deab95e..3956117 100644
--- "a/temp\\src\\java/gf.java"
+++ "b/src\\main\\java/gf.java"
@@ -14,7 +14,7 @@ public class gf extends di
         a = ly1.bc;
     }
 
-    public boolean a(ev ev1, Player player, World world1, int i, int j, int k, int l)
+    public boolean a(ev ev1, EntityPlayer entityPlayer, World world1, int i, int j, int k, int l)
     {
         if(world1.a(i, j, k) == ly.aT.bc)
         {
diff --git "a/temp\\src\\java/gj.java" "b/src\\main\\java/gj.java"
index 7e10205..bba4698 100644
--- "a/temp\\src\\java/gj.java"
+++ "b/src\\main\\java/gj.java"
@@ -9,11 +9,11 @@ public class gj extends ak
     {
     }
 
-    public void a(kh kh1, double d, double d1, double d2, 
-            float f, float f1)
+    public void a(Entity entity1, double d, double d1, double d2,
+                  float f, float f1)
     {
         org.lwjgl.opengl.GL11.glPushMatrix();
-        gj.a(kh1.au, d - kh1.aI, d1 - kh1.aJ, d2 - kh1.aK);
+        gj.a(entity1.au, d - entity1.aI, d1 - entity1.aJ, d2 - entity1.aK);
         org.lwjgl.opengl.GL11.glPopMatrix();
     }
 }
diff --git "a/temp\\src\\java/gk.java" "b/src\\main\\java/gk.java"
index cbd5727..668a14c 100644
--- "a/temp\\src\\java/gk.java"
+++ "b/src\\main\\java/gk.java"
@@ -15,8 +15,8 @@ public class gk extends ak
         a("/item/arrows.png");
         org.lwjgl.opengl.GL11.glPushMatrix();
         org.lwjgl.opengl.GL11.glTranslatef((float)d, (float)d1, (float)d2);
-        org.lwjgl.opengl.GL11.glRotatef((arrow1.as + (arrow1.aq - arrow1.as) * f1) - 90F, 0.0F, 1.0F, 0.0F);
-        org.lwjgl.opengl.GL11.glRotatef(arrow1.at + (arrow1.ar - arrow1.at) * f1, 0.0F, 0.0F, 1.0F);
+        org.lwjgl.opengl.GL11.glRotatef((arrow1.prevYaw + (arrow1.yaw - arrow1.prevYaw) * f1) - 90F, 0.0F, 1.0F, 0.0F);
+        org.lwjgl.opengl.GL11.glRotatef(arrow1.prevPitch + (arrow1.pitch - arrow1.prevPitch) * f1, 0.0F, 0.0F, 1.0F);
         ho ho1 = ho.a;
         int i = 0;
         float f2 = 0.0F;
@@ -32,7 +32,7 @@ public class gk extends ak
         float f11 = (float) arrow1.shake - f1;
         if(f11 > 0.0F)
         {
-            float f12 = -eo.a(f11 * 3F) * f11;
+            float f12 = -MathLib.sin(f11 * 3F) * f11;
             org.lwjgl.opengl.GL11.glRotatef(f12, 0.0F, 0.0F, 1.0F);
         }
         org.lwjgl.opengl.GL11.glRotatef(45F, 1.0F, 0.0F, 0.0F);
@@ -68,8 +68,8 @@ public class gk extends ak
         org.lwjgl.opengl.GL11.glPopMatrix();
     }
 
-    public void a(kh kh, double d, double d1, double d2, float f, float f1)
+    public void a(Entity entity, double d, double d1, double d2, float f, float f1)
     {
-        a((Arrow)kh, d, d1, d2, f, f1);
+        a((Arrow) entity, d, d1, d2, f, f1);
     }
 }
diff --git "a/temp\\src\\java/gl.java" "b/src\\main\\java/gl.java"
index eee9ecb..4081340 100644
--- "a/temp\\src\\java/gl.java"
+++ "b/src\\main\\java/gl.java"
@@ -6,11 +6,11 @@ public class gl
     implements java.util.Comparator
 {
 
-    private Player a;
+    private EntityPlayer a;
 
-    public gl(Player player)
+    public gl(EntityPlayer entityPlayer)
     {
-        a = player;
+        a = entityPlayer;
     }
 
     public int a(bn bn1, bn bn2)
@@ -22,7 +22,7 @@ public class gl
         if(flag1 && !flag)
             return -1;
         else
-            return bn1.a(((kh) (a))) > bn2.a(((kh) (a))) ? -1 : (bn1.a(((kh) (a))) < bn2.a(((kh) (a))) ? 1 : 0);
+            return bn1.a(((Entity) (a))) > bn2.a(((Entity) (a))) ? -1 : (bn1.a(((Entity) (a))) < bn2.a(((Entity) (a))) ? 1 : 0);
             //return bn1.a(((kh) (a))) >= bn2.a(((kh) (a))) ? -1 : 1;
     }
 
diff --git "a/temp\\src\\java/gm.java" "b/src\\main\\java/gm.java"
index fce5610..970aec3 100644
--- "a/temp\\src\\java/gm.java"
+++ "b/src\\main\\java/gm.java"
@@ -12,14 +12,14 @@ public class gm extends dn
         a(fo1);
     }
 
-    protected boolean a(Pig pig1, int i)
+    protected boolean a(EntityPig entityPig1, int i)
     {
         a("/mob/saddle.png");
-        return i == 0 && pig1.saddle;
+        return i == 0 && entityPig1.saddle;
     }
 
-    protected boolean a(Mob mob, int i)
+    protected boolean a(EntityMob entityMob, int i)
     {
-        return a((Pig) mob, i);
+        return a((EntityPig) entityMob, i);
     }
 }
diff --git "a/temp\\src\\java/gp.java" "b/src\\main\\java/gp.java"
index cfe848b..d873a22 100644
--- "a/temp\\src\\java/gp.java"
+++ "b/src\\main\\java/gp.java"
@@ -20,16 +20,16 @@ public class gp extends fn
     {
     }
 
-    public gp(Player player1)
+    public gp(EntityPlayer entityPlayer1)
     {
-        a = player1.ab;
-        b = player1.i;
-        c = eo.b(player1.ak * 32D);
-        d = eo.b(player1.al * 32D);
-        e = eo.b(player1.am * 32D);
-        f = (byte)(int)((player1.aq * 256F) / 360F);
-        g = (byte)(int)((player1.ar * 256F) / 360F);
-        ev ev1 = player1.b.a();
+        a = entityPlayer1.ab;
+        b = entityPlayer1.i;
+        c = MathLib.castIgnoringSign(entityPlayer1.posX * 32D);
+        d = MathLib.castIgnoringSign(entityPlayer1.posY * 32D);
+        e = MathLib.castIgnoringSign(entityPlayer1.posZ * 32D);
+        f = (byte)(int)((entityPlayer1.yaw * 256F) / 360F);
+        g = (byte)(int)((entityPlayer1.pitch * 256F) / 360F);
+        ev ev1 = entityPlayer1.b.a();
         h = ev1 != null ? ev1.id : 0;
     }
 
diff --git "a/temp\\src\\java/gq.java" "b/src\\main\\java/gq.java"
index 7b37c51..f8de401 100644
--- "a/temp\\src\\java/gq.java"
+++ "b/src\\main\\java/gq.java"
@@ -39,13 +39,13 @@ public class gq extends dn
         org.lwjgl.opengl.GL11.glScalef(f3 * f4, (1.0F / f3) * f4, f3 * f4);
     }
 
-    protected void a(Mob mob, float f1)
+    protected void a(EntityMob entityMob, float f1)
     {
-        a((Slime) mob, f1);
+        a((Slime) entityMob, f1);
     }
 
-    protected boolean a(Mob mob, int i)
+    protected boolean a(EntityMob entityMob, int i)
     {
-        return a((Slime) mob, i);
+        return a((Slime) entityMob, i);
     }
 }
diff --git "a/temp\\src\\java/gs.java" "b/src\\main\\java/gs.java"
index 0436646..eb5b9da 100644
--- "a/temp\\src\\java/gs.java"
+++ "b/src\\main\\java/gs.java"
@@ -43,8 +43,8 @@ public class gs extends World
         }
         for(int l = 0; l < 10 && !F.isEmpty(); l++)
         {
-            kh kh1 = (kh)F.iterator().next();
-            a(kh1);
+            Entity entity1 = (Entity)F.iterator().next();
+            a(entity1);
         }
 
         A.a();
@@ -108,57 +108,57 @@ public class gs extends World
             b(i * 16, 0, j * 16, i * 16 + 15, 128, j * 16 + 15);
     }
 
-    public boolean a(kh kh1)
+    public boolean a(Entity entity1)
     {
-        boolean flag = super.a(kh1);
-        if(kh1 instanceof bi)
-            E.add(((Object) (kh1)));
+        boolean flag = super.a(entity1);
+        if(entity1 instanceof bi)
+            E.add(((Object) (entity1)));
         return flag;
     }
 
-    public void d(kh kh1)
+    public void d(Entity entity1)
     {
-        super.d(kh1);
-        if(kh1 instanceof bi)
-            E.remove(((Object) (kh1)));
+        super.d(entity1);
+        if(entity1 instanceof bi)
+            E.remove(((Object) (entity1)));
     }
 
-    protected void b(kh kh1)
+    protected void b(Entity entity1)
     {
-        super.b(kh1);
-        if(F.contains(((Object) (kh1))))
-            F.remove(((Object) (kh1)));
+        super.b(entity1);
+        if(F.contains(((Object) (entity1))))
+            F.remove(((Object) (entity1)));
     }
 
-    protected void c(kh kh1)
+    protected void c(Entity entity1)
     {
-        super.c(kh1);
-        if(E.contains(((Object) (kh1))))
-            F.add(((Object) (kh1)));
+        super.c(entity1);
+        if(E.contains(((Object) (entity1))))
+            F.add(((Object) (entity1)));
     }
 
-    public void a(int i, kh kh1)
+    public void a(int i, Entity entity1)
     {
-        E.add(((Object) (kh1)));
-        if(!a(kh1))
-            F.add(((Object) (kh1)));
-        D.a(i, ((Object) (kh1)));
+        E.add(((Object) (entity1)));
+        if(!a(entity1))
+            F.add(((Object) (entity1)));
+        D.a(i, ((Object) (entity1)));
     }
 
-    public kh b(int i)
+    public Entity b(int i)
     {
-        return (kh)D.a(i);
+        return (Entity)D.a(i);
     }
 
-    public kh c(int i)
+    public Entity c(int i)
     {
-        kh kh1 = (kh)D.b(i);
-        if(kh1 != null)
+        Entity entity1 = (Entity)D.b(i);
+        if(entity1 != null)
         {
-            E.remove(((Object) (kh1)));
-            d(kh1);
+            E.remove(((Object) (entity1)));
+            d(entity1);
         }
-        return kh1;
+        return entity1;
     }
 
     public boolean c(int i, int j, int l, int i1)
diff --git "a/temp\\src\\java/gv.java" "b/src\\main\\java/gv.java"
index 49a5d49..90ba39a 100644
--- "a/temp\\src\\java/gv.java"
+++ "b/src\\main\\java/gv.java"
@@ -19,10 +19,10 @@ public class gv extends ik
         if(world1.f(i, j, k) != gb.f)
             return false;
         float f = random.nextFloat() * 3.141593F;
-        double d = (float)(i + 8) + (eo.a(f) * (float)b) / 8F;
-        double d1 = (float)(i + 8) - (eo.a(f) * (float)b) / 8F;
-        double d2 = (float)(k + 8) + (eo.b(f) * (float)b) / 8F;
-        double d3 = (float)(k + 8) - (eo.b(f) * (float)b) / 8F;
+        double d = (float)(i + 8) + (MathLib.sin(f) * (float)b) / 8F;
+        double d1 = (float)(i + 8) - (MathLib.sin(f) * (float)b) / 8F;
+        double d2 = (float)(k + 8) + (MathLib.cos(f) * (float)b) / 8F;
+        double d3 = (float)(k + 8) - (MathLib.cos(f) * (float)b) / 8F;
         double d4 = j + random.nextInt(3) + 2;
         double d5 = j + random.nextInt(3) + 2;
         for(int l = 0; l <= b; l++)
@@ -31,8 +31,8 @@ public class gv extends ik
             double d7 = d4 + ((d5 - d4) * (double)l) / (double)b;
             double d8 = d2 + ((d3 - d2) * (double)l) / (double)b;
             double d9 = (random.nextDouble() * (double)b) / 16D;
-            double d10 = (double)(eo.a(((float)l * 3.141593F) / (float)b) + 1.0F) * d9 + 1.0D;
-            double d11 = (double)(eo.a(((float)l * 3.141593F) / (float)b) + 1.0F) * d9 + 1.0D;
+            double d10 = (double)(MathLib.sin(((float)l * 3.141593F) / (float)b) + 1.0F) * d9 + 1.0D;
+            double d11 = (double)(MathLib.sin(((float)l * 3.141593F) / (float)b) + 1.0F) * d9 + 1.0D;
             for(int i1 = (int)(d6 - d10 / 2D); i1 <= (int)(d6 + d10 / 2D); i1++)
             {
                 for(int j1 = (int)(d7 - d11 / 2D); j1 <= (int)(d7 + d11 / 2D); j1++)
diff --git "a/temp\\src\\java/gy.java" "b/src\\main\\java/gy.java"
index defa9ed..237529a 100644
--- "a/temp\\src\\java/gy.java"
+++ "b/src\\main\\java/gy.java"
@@ -59,13 +59,13 @@ public class gy extends lb
         double d2 = (double)ha1.c / 32D;
         double d3 = (double)ha1.d / 32D;
         Item item1 = new Item(((World) (f)), d1, d2, d3, new ev(ha1.h, ha1.i));
-        item1.an = (double)ha1.e / 128D;
-        item1.ao = (double)ha1.f / 128D;
-        item1.ap = (double)ha1.g / 128D;
+        item1.motionX = (double)ha1.e / 128D;
+        item1.motionY = (double)ha1.f / 128D;
+        item1.motionZ = (double)ha1.g / 128D;
         item1.bd = ha1.b;
         item1.be = ha1.c;
         item1.bf = ha1.d;
-        f.a(ha1.a, ((kh) (item1)));
+        f.a(ha1.a, ((Entity) (item1)));
     }
 
     public void a(kj kj1)
@@ -73,7 +73,7 @@ public class gy extends lb
         double d1 = (double)kj1.b / 32D;
         double d2 = (double)kj1.c / 32D;
         double d3 = (double)kj1.d / 32D;
-        kh obj = null;
+        Entity obj = null;
         if(kj1.e == 10)
             obj = new Minecart(((World) (f)), d1, d2, d3, 0);
         if(kj1.e == 11)
@@ -87,10 +87,10 @@ public class gy extends lb
             obj.bd = kj1.b;
             obj.be = kj1.c;
             obj.bf = kj1.d;
-            obj.aq = 0.0F;
-            obj.ar = 0.0F;
+            obj.yaw = 0.0F;
+            obj.pitch = 0.0F;
             obj.ab = kj1.a;
-            f.a(kj1.a, ((kh) (obj)));
+            f.a(kj1.a, ((Entity) (obj)));
         }
     }
 
@@ -111,47 +111,47 @@ public class gy extends lb
         else
             nt1.b.slots1[nt1.b.d] = new ev(i);
         nt1.b(d1, d2, d3, f1, f2);
-        f.a(gp1.a, ((kh) (nt1)));
+        f.a(gp1.a, ((Entity) (nt1)));
     }
 
     public void a(jl jl1)
     {
-        kh kh1 = f.b(jl1.a);
-        if(kh1 == null)
+        Entity entity1 = f.b(jl1.a);
+        if(entity1 == null)
         {
             return;
         } else
         {
-            kh1.bd = jl1.b;
-            kh1.be = jl1.c;
-            kh1.bf = jl1.d;
-            double d1 = (double)kh1.bd / 32D;
-            double d2 = (double)kh1.be / 32D;
-            double d3 = (double)kh1.bf / 32D;
+            entity1.bd = jl1.b;
+            entity1.be = jl1.c;
+            entity1.bf = jl1.d;
+            double d1 = (double) entity1.bd / 32D;
+            double d2 = (double) entity1.be / 32D;
+            double d3 = (double) entity1.bf / 32D;
             float f1 = (float)(jl1.e * 360) / 256F;
             float f2 = (float)(jl1.f * 360) / 256F;
-            kh1.a(d1, d2, d3, f1, f2, 3);
+            entity1.a(d1, d2, d3, f1, f2, 3);
             return;
         }
     }
 
     public void a(lq lq1)
     {
-        kh kh1 = f.b(lq1.a);
-        if(kh1 == null)
+        Entity entity1 = f.b(lq1.a);
+        if(entity1 == null)
         {
             return;
         } else
         {
-            kh1.bd += ((int) (lq1.b));
-            kh1.be += ((int) (lq1.c));
-            kh1.bf += ((int) (lq1.d));
-            double d1 = (double)kh1.bd / 32D;
-            double d2 = (double)kh1.be / 32D;
-            double d3 = (double)kh1.bf / 32D;
-            float f1 = lq1.g ? (float)(lq1.e * 360) / 256F : kh1.aq;
-            float f2 = lq1.g ? (float)(lq1.f * 360) / 256F : kh1.ar;
-            kh1.a(d1, d2, d3, f1, f2, 3);
+            entity1.bd += ((int) (lq1.b));
+            entity1.be += ((int) (lq1.c));
+            entity1.bf += ((int) (lq1.d));
+            double d1 = (double) entity1.bd / 32D;
+            double d2 = (double) entity1.be / 32D;
+            double d3 = (double) entity1.bf / 32D;
+            float f1 = lq1.g ? (float)(lq1.e * 360) / 256F : entity1.yaw;
+            float f2 = lq1.g ? (float)(lq1.f * 360) / 256F : entity1.pitch;
+            entity1.a(d1, d2, d3, f1, f2, 3);
             return;
         }
     }
@@ -164,11 +164,11 @@ public class gy extends lb
     public void a(eh eh1)
     {
         bi bi1 = e.g;
-        double d1 = ((Player) (bi1)).ak;
-        double d2 = ((Player) (bi1)).al;
-        double d3 = ((Player) (bi1)).am;
-        float f1 = ((Player) (bi1)).aq;
-        float f2 = ((Player) (bi1)).ar;
+        double d1 = ((EntityPlayer) (bi1)).posX;
+        double d2 = ((EntityPlayer) (bi1)).posY;
+        double d3 = ((EntityPlayer) (bi1)).posZ;
+        float f1 = ((EntityPlayer) (bi1)).yaw;
+        float f2 = ((EntityPlayer) (bi1)).pitch;
         if(eh1.h)
         {
             d1 = eh1.a;
@@ -181,18 +181,18 @@ public class gy extends lb
             f2 = eh1.f;
         }
         bi1.aL = 0.0F;
-        bi1.an = bi1.ao = bi1.ap = 0.0D;
-        ((Player) (bi1)).b(d1, d2, d3, f1, f2);
-        eh1.a = ((Player) (bi1)).ak;
-        eh1.b = ((Player) (bi1)).au.b;
-        eh1.c = ((Player) (bi1)).am;
-        eh1.d = ((Player) (bi1)).al;
+        bi1.motionX = bi1.motionY = bi1.motionZ = 0.0D;
+        ((EntityPlayer) (bi1)).b(d1, d2, d3, f1, f2);
+        eh1.a = ((EntityPlayer) (bi1)).posX;
+        eh1.b = ((EntityPlayer) (bi1)).au.b;
+        eh1.c = ((EntityPlayer) (bi1)).posZ;
+        eh1.d = ((EntityPlayer) (bi1)).posY;
         d.a(((fn) (eh1)));
         if(!g)
         {
-            e.g.ah = e.g.ak;
-            e.g.ai = e.g.al;
-            e.g.aj = e.g.am;
+            e.g.prevPosX = e.g.posX;
+            e.g.prevPosY = e.g.posY;
+            e.g.prevPosZ = e.g.posZ;
             g = true;
             e.a(((bh) (null)));
         }
@@ -271,28 +271,28 @@ public class gy extends lb
     public void a(bm bm1)
     {
         Item item1 = (Item)f.b(bm1.a);
-        Object obj = ((Object) ((Mob)f.b(bm1.b)));
+        Object obj = ((Object) ((EntityMob)f.b(bm1.b)));
         if(obj == null)
             obj = ((Object) (e.g));
         if(item1 != null)
         {
-            f.a(((kh) (item1)), "random.pop", 0.2F, ((b.nextFloat() - b.nextFloat()) * 0.7F + 1.0F) * 2.0F);
-            e.h.a(((nq) (new cd(e.world, ((kh) (item1)), ((kh) (obj)), -0.5F))));
+            f.a(((Entity) (item1)), "random.pop", 0.2F, ((b.nextFloat() - b.nextFloat()) * 0.7F + 1.0F) * 2.0F);
+            e.h.a(((nq) (new cd(e.world, ((Entity) (item1)), ((Entity) (obj)), -0.5F))));
             f.c(bm1.a);
         }
     }
 
     public void a(dz dz1)
     {
-        kh kh1 = f.b(dz1.a);
-        if(kh1 == null)
+        Entity entity1 = f.b(dz1.a);
+        if(entity1 == null)
             return;
-        Player player1 = (Player)kh1;
+        EntityPlayer entityPlayer1 = (EntityPlayer) entity1;
         int i = dz1.b;
         if(i == 0)
-            player1.b.slots1[player1.b.d] = null;
+            entityPlayer1.b.slots1[entityPlayer1.b.d] = null;
         else
-            player1.b.slots1[player1.b.d] = new ev(i);
+            entityPlayer1.b.slots1[entityPlayer1.b.d] = new ev(i);
     }
 
     public void a(ij ij1)
@@ -302,14 +302,14 @@ public class gy extends lb
 
     public void a(hf hf1)
     {
-        kh kh1 = f.b(hf1.a);
-        if(kh1 == null)
+        Entity entity1 = f.b(hf1.a);
+        if(entity1 == null)
         {
             return;
         } else
         {
-            Player player1 = (Player)kh1;
-            player1.w();
+            EntityPlayer entityPlayer1 = (EntityPlayer) entity1;
+            entityPlayer1.w();
             return;
         }
     }
@@ -355,13 +355,13 @@ public class gy extends lb
         double d3 = (double)ez1.e / 32D;
         float f1 = (float)(ez1.f * 360) / 256F;
         float f2 = (float)(ez1.g * 360) / 256F;
-        Mob mob1 = (Mob)ew.a(((int) (ez1.b)), e.world);
-        mob1.bd = ez1.c;
-        mob1.be = ez1.d;
-        mob1.bf = ez1.e;
-        mob1.b(d1, d2, d3, f1, f2);
-        mob1.B = true;
-        f.a(ez1.a, ((kh) (mob1)));
+        EntityMob entityMob1 = (EntityMob) EntityList.a(((int) (ez1.b)), e.world);
+        entityMob1.bd = ez1.c;
+        entityMob1.be = ez1.d;
+        entityMob1.bf = ez1.e;
+        entityMob1.b(d1, d2, d3, f1, f2);
+        entityMob1.B = true;
+        f.a(ez1.a, ((Entity) (entityMob1)));
     }
 
     public void a(du du1)
@@ -373,11 +373,11 @@ public class gy extends lb
     {
         bi bi1 = e.g;
         if(m1.a == -1)
-            ((Player) (bi1)).b.slots1 = m1.b;
+            ((EntityPlayer) (bi1)).b.slots1 = m1.b;
         if(m1.a == -2)
-            ((Player) (bi1)).b.slots3 = m1.b;
+            ((EntityPlayer) (bi1)).b.slots3 = m1.b;
         if(m1.a == -3)
-            ((Player) (bi1)).b.slots2 = m1.b;
+            ((EntityPlayer) (bi1)).b.slots2 = m1.b;
     }
 
     public void a(ny ny1)
diff --git "a/temp\\src\\java/ha.java" "b/src\\main\\java/ha.java"
index fd0e54c..f4cd0cb 100644
--- "a/temp\\src\\java/ha.java"
+++ "b/src\\main\\java/ha.java"
@@ -26,12 +26,12 @@ public class ha extends fn
         a = item1.ab;
         h = item1.a.id;
         i = item1.a.count;
-        b = eo.b(item1.ak * 32D);
-        c = eo.b(item1.al * 32D);
-        d = eo.b(item1.am * 32D);
-        e = (byte)(int)(item1.an * 128D);
-        f = (byte)(int)(item1.ao * 128D);
-        g = (byte)(int)(item1.ap * 128D);
+        b = MathLib.castIgnoringSign(item1.posX * 32D);
+        c = MathLib.castIgnoringSign(item1.posY * 32D);
+        d = MathLib.castIgnoringSign(item1.posZ * 32D);
+        e = (byte)(int)(item1.motionX * 128D);
+        f = (byte)(int)(item1.motionY * 128D);
+        g = (byte)(int)(item1.motionZ * 128D);
     }
 
     public void a(java.io.DataInputStream datainputstream) throws IOException
diff --git "a/temp\\src\\java/hd.java" "b/src\\main\\java/hd.java"
index 13637da..20d11ea 100644
--- "a/temp\\src\\java/hd.java"
+++ "b/src\\main\\java/hd.java"
@@ -99,7 +99,7 @@ public class hd extends mq
                 float f4 = world1.n.nextFloat() * f1 + (1.0F - f1) * 0.5F;
                 Item item1 = new Item(world1, (float)j + f2, (float)k + f3, (float)l + f4, new ev(di.Q));
                 item1.c = 10;
-                world1.a(((kh) (item1)));
+                world1.a(((Entity) (item1)));
             }
 
     }
diff --git "a/temp\\src\\java/hf.java" "b/src\\main\\java/hf.java"
index 193874d..1e782dc 100644
--- "a/temp\\src\\java/hf.java"
+++ "b/src\\main\\java/hf.java"
@@ -14,9 +14,9 @@ public class hf extends fn
     {
     }
 
-    public hf(kh kh1, int i)
+    public hf(Entity entity1, int i)
     {
-        a = kh1.ab;
+        a = entity1.ab;
         b = i;
     }
 
diff --git "a/temp\\src\\java/hg.java" "b/src\\main\\java/hg.java"
index b240f9b..7cece2f 100644
--- "a/temp\\src\\java/hg.java"
+++ "b/src\\main\\java/hg.java"
@@ -51,9 +51,9 @@ public class hg extends fo
         d.d = -(f5 / 57.29578F);
         d.e = f4 / 57.29578F;
         e.d = 1.570796F;
-        f.d = eo.b(f1 * 0.6662F) * 1.4F * f2;
-        g.d = eo.b(f1 * 0.6662F + 3.141593F) * 1.4F * f2;
-        h.d = eo.b(f1 * 0.6662F + 3.141593F) * 1.4F * f2;
-        i.d = eo.b(f1 * 0.6662F) * 1.4F * f2;
+        f.d = MathLib.cos(f1 * 0.6662F) * 1.4F * f2;
+        g.d = MathLib.cos(f1 * 0.6662F + 3.141593F) * 1.4F * f2;
+        h.d = MathLib.cos(f1 * 0.6662F + 3.141593F) * 1.4F * f2;
+        i.d = MathLib.cos(f1 * 0.6662F) * 1.4F * f2;
     }
 }
diff --git "a/temp\\src\\java/hq.java" "b/src\\main\\java/hq.java"
index 1aecfbe..663ef5a 100644
--- "a/temp\\src\\java/hq.java"
+++ "b/src\\main\\java/hq.java"
@@ -57,7 +57,7 @@ public class hq
         return 5F;
     }
 
-    public void a(Player player)
+    public void a(EntityPlayer entityPlayer)
     {
     }
 
@@ -70,23 +70,23 @@ public class hq
         return true;
     }
 
-    public void b(Player player)
+    public void b(EntityPlayer entityPlayer)
     {
     }
 
-    public boolean a(Player player, World world1, ev ev1, int i, int j, int k, int l)
+    public boolean a(EntityPlayer entityPlayer, World world1, ev ev1, int i, int j, int k, int l)
     {
         int i1 = world1.a(i, j, k);
-        if(i1 > 0 && ly.n[i1].a(world1, i, j, k, player))
+        if(i1 > 0 && ly.n[i1].a(world1, i, j, k, entityPlayer))
             return true;
         if(ev1 == null)
             return false;
         else
-            return ev1.a(player, world1, i, j, k, l);
+            return ev1.a(entityPlayer, world1, i, j, k, l);
     }
 
-    public Player b(World world1)
+    public EntityPlayer b(World world1)
     {
-        return ((Player) (new bi(a, world1, a.i)));
+        return ((EntityPlayer) (new bi(a, world1, a.i)));
     }
 }
diff --git "a/temp\\src\\java/hu.java" "b/src\\main\\java/hu.java"
index d45a562..735f4a7 100644
--- "a/temp\\src\\java/hu.java"
+++ "b/src\\main\\java/hu.java"
@@ -133,12 +133,12 @@ public class hu extends ly
             a(0.5F - f2, f, 1.0F - f3, 0.5F + f2, f1, 1.0F);
     }
 
-    public void b(World world1, int i, int j, int k, Player player)
+    public void b(World world1, int i, int j, int k, EntityPlayer entityPlayer)
     {
-        a(world1, i, j, k, player);
+        a(world1, i, j, k, entityPlayer);
     }
 
-    public boolean a(World world1, int i, int j, int k, Player player)
+    public boolean a(World world1, int i, int j, int k, EntityPlayer entityPlayer)
     {
         int l = world1.e(i, j, k);
         int i1 = l & 7;
diff --git "a/temp\\src\\java/hw.java" "b/src\\main\\java/hw.java"
index 8df355c..8ac24e8 100644
--- "a/temp\\src\\java/hw.java"
+++ "b/src\\main\\java/hw.java"
@@ -49,8 +49,8 @@ public class hw extends ak
         org.lwjgl.opengl.GL11.glPopMatrix();
     }
 
-    public void a(kh kh, double d1, double d2, double d3, float f, float f1)
+    public void a(Entity entity, double d1, double d2, double d3, float f, float f1)
     {
-        a((PrimedTnt)kh, d1, d2, d3, f, f1);
+        a((PrimedTnt) entity, d1, d2, d3, f, f1);
     }
 }
diff --git "a/temp\\src\\java/hx.java" "b/src\\main\\java/hx.java"
index 8e731d3..17719a2 100644
--- "a/temp\\src\\java/hx.java"
+++ "b/src\\main\\java/hx.java"
@@ -36,7 +36,7 @@ public class hx extends ee
     public void h()
     {
         super.h();
-        j.a(((Player) (b.g)));
+        j.a(((EntityPlayer) (b.g)));
     }
 
     protected void j()
diff --git "a/temp\\src\\java/hy.java" "b/src\\main\\java/hy.java"
index 9fcef27..5f83f65 100644
--- "a/temp\\src\\java/hy.java"
+++ "b/src\\main\\java/hy.java"
@@ -104,8 +104,8 @@ public class hy extends ly
         }
     }
 
-    public void b(World world1, int i, int j, int k, kh kh1)
+    public void b(World world1, int i, int j, int k, Entity entity1)
     {
-        kh1.a(((kh) (null)), 1);
+        entity1.a(((Entity) (null)), 1);
     }
 }
diff --git "a/temp\\src\\java/i.java" "b/src\\main\\java/i.java"
index e1f633a..f4f7610 100644
--- "a/temp\\src\\java/i.java"
+++ "b/src\\main\\java/i.java"
@@ -29,13 +29,13 @@ public class i
         float f = 0.4F;
         float f1 = 0.6F;
         float f2 = 0.0F;
-        aj aj1 = aj.b(0.20000000298023224D, 1.0D, -0.69999998807907104D).b();
-        org.lwjgl.opengl.GL11.glLight(16384, 4611, i.a(aj1.a, aj1.b, aj1.c, 0.0D));
+        Vec3 vec31 = Vec3.recycle(0.20000000298023224D, 1.0D, -0.69999998807907104D).normalize();
+        org.lwjgl.opengl.GL11.glLight(16384, 4611, i.a(vec31.x, vec31.y, vec31.z, 0.0D));
         org.lwjgl.opengl.GL11.glLight(16384, 4609, i.a(f1, f1, f1, 1.0F));
         org.lwjgl.opengl.GL11.glLight(16384, 4608, i.a(0.0F, 0.0F, 0.0F, 1.0F));
         org.lwjgl.opengl.GL11.glLight(16384, 4610, i.a(f2, f2, f2, 1.0F));
-        aj1 = aj.b(-0.20000000298023224D, 1.0D, 0.69999998807907104D).b();
-        org.lwjgl.opengl.GL11.glLight(16385, 4611, i.a(aj1.a, aj1.b, aj1.c, 0.0D));
+        vec31 = Vec3.recycle(-0.20000000298023224D, 1.0D, 0.69999998807907104D).normalize();
+        org.lwjgl.opengl.GL11.glLight(16385, 4611, i.a(vec31.x, vec31.y, vec31.z, 0.0D));
         org.lwjgl.opengl.GL11.glLight(16385, 4609, i.a(f1, f1, f1, 1.0F));
         org.lwjgl.opengl.GL11.glLight(16385, 4608, i.a(0.0F, 0.0F, 0.0F, 1.0F));
         org.lwjgl.opengl.GL11.glLight(16385, 4610, i.a(f2, f2, f2, 1.0F));
diff --git "a/temp\\src\\java/ia.java" "b/src\\main\\java/ia.java"
index 7236e98..ae926c1 100644
--- "a/temp\\src\\java/ia.java"
+++ "b/src\\main\\java/ia.java"
@@ -28,16 +28,16 @@ public class ia extends hq
         h = 0.0F;
         i = 0;
         j = ((az) (new k(this, 200, co.class, new java.lang.Class[] {
-            Zombie.class, Skeleton.class, Creeper.class, Spider.class, Slime.class
+            EntityZombie.class, EntitySkeleton.class, EntityCreeper.class, EntitySpider.class, Slime.class
         })));
-        k = new az(15, Passive.class, new java.lang.Class[] {
-            Sheep.class, Pig.class, Cow.class, Chicken.class
+        k = new az(15, EntityPassive.class, new java.lang.Class[] {
+            EntitySheep.class, EntityPig.class, EntityCow.class, EntityChicken.class
         });
     }
 
-    public void a(Player player1)
+    public void a(EntityPlayer entityPlayer1)
     {
-        player1.aq = -180F;
+        entityPlayer1.yaw = -180F;
     }
 
     public boolean b(int l, int i1, int j1, int k1)
@@ -52,7 +52,7 @@ public class ia extends hq
             ev1.a(l1, l, i1, j1);
             if(ev1.count == 0)
             {
-                ev1.a(((Player) (a.g)));
+                ev1.a(((EntityPlayer) (a.g)));
                 a.g.u();
             }
         }
@@ -65,8 +65,8 @@ public class ia extends hq
     {
         int l1 = a.world.a(l, i1, j1);
         if(l1 > 0 && f == 0.0F)
-            ly.n[l1].b(a.world, l, i1, j1, ((Player) (a.g)));
-        if(l1 > 0 && ly.n[l1].a(((Player) (a.g))) >= 1.0F)
+            ly.n[l1].b(a.world, l, i1, j1, ((EntityPlayer) (a.g)));
+        if(l1 > 0 && ly.n[l1].a(((EntityPlayer) (a.g))) >= 1.0F)
             b(l, i1, j1, k1);
     }
 
@@ -89,7 +89,7 @@ public class ia extends hq
             if(l1 == 0)
                 return;
             ly ly1 = ly.n[l1];
-            f += ly1.a(((Player) (a.g)));
+            f += ly1.a(((EntityPlayer) (a.g)));
             if(h % 4F == 0.0F && ly1 != null)
                 a.A.b(ly1.bl.d(), (float)l + 0.5F, (float)i1 + 0.5F, (float)j1 + 0.5F, (ly1.bl.b() + 1.0F) / 8F, ly1.bl.c() * 0.5F);
             h++;
diff --git "a/temp\\src\\java/ie.java" "b/src\\main\\java/ie.java"
index da11f47..e50c1f6 100644
--- "a/temp\\src\\java/ie.java"
+++ "b/src\\main\\java/ie.java"
@@ -58,7 +58,7 @@ public class ie extends bh
         if(flag || h < 20)
         {
             float f1 = ((float)(h % 10) + f) / 10F;
-            f1 = eo.a(f1 * 3.141593F * 2.0F) * 0.2F + 0.8F;
+            f1 = MathLib.sin(f1 * 3.141593F * 2.0F) * 0.2F + 0.8F;
             int k = (int)(255F * f1);
             b(g, "Saving level..", 8, d - 16, k << 16 | k << 8 | k);
         }
diff --git "a/temp\\src\\java/iffix.java" "b/src\\main\\java/iffix.java"
index ed66d16..519a0b4 100644
--- "a/temp\\src\\java/iffix.java"
+++ "b/src\\main\\java/iffix.java"
@@ -21,10 +21,10 @@ public class iffix extends ly
         return false;
     }
 
-    public mf a(World world1, int i, int j, int k, aj aj, aj aj1)
+    public mf a(World world1, int i, int j, int k, Vec3 vec3, Vec3 vec31)
     {
         a(((nm) (world1)), i, j, k);
-        return super.a(world1, i, j, k, aj, aj1);
+        return super.a(world1, i, j, k, vec3, vec31);
     }
 
     public void a(nm nm1, int i, int j, int k)
diff --git "a/temp\\src\\java/ig.java" "b/src\\main\\java/ig.java"
index ddd4c10..ee76b63 100644
--- "a/temp\\src\\java/ig.java"
+++ "b/src\\main\\java/ig.java"
@@ -28,9 +28,9 @@ public class ig extends nq
         float f8 = ((float)(b / 16) + d / 4F) / 16F;
         float f9 = f8 + 0.01560938F;
         float f10 = 0.1F * g;
-        float f11 = (float)((ah + (ak - ah) * (double)f) - l);
-        float f12 = (float)((ai + (al - ai) * (double)f) - m);
-        float f13 = (float)((aj + (am - aj) * (double)f) - n);
+        float f11 = (float)((prevPosX + (posX - prevPosX) * (double)f) - l);
+        float f12 = (float)((prevPosY + (posY - prevPosY) * (double)f) - m);
+        float f13 = (float)((prevPosZ + (posZ - prevPosZ) * (double)f) - n);
         float f14 = a(f);
         ho1.a(f14 * i, f14 * j, f14 * k);
         ho1.a(f11 - f1 * f10 - f4 * f10, f12 - f2 * f10, f13 - f3 * f10 - f5 * f10, f6, f9);
diff --git "a/temp\\src\\java/il.java" "b/src\\main\\java/il.java"
index 9862097..84c64a5 100644
--- "a/temp\\src\\java/il.java"
+++ "b/src\\main\\java/il.java"
@@ -13,10 +13,10 @@ public class il extends hq
         b = true;
     }
 
-    public void b(Player player1)
+    public void b(EntityPlayer entityPlayer1)
     {
         for(int i = 0; i < 9; i++)
-            if(player1.b.slots1[i] == null)
+            if(entityPlayer1.b.slots1[i] == null)
                 a.g.b.slots1[i] = new ev(((ly)dl.a.get(i)).bc);
             else
                 a.g.b.slots1[i].count = 1;
diff --git "a/temp\\src\\java/im.java" "b/src\\main\\java/im.java"
index 0744028..a0000bf 100644
--- "a/temp\\src\\java/im.java"
+++ "b/src\\main\\java/im.java"
@@ -16,9 +16,9 @@ public interface im
     public abstract void a(String s, double d, double d1, double d2, 
             double d3, double d4, double d5);
 
-    public abstract void a(kh kh);
+    public abstract void a(Entity entity);
 
-    public abstract void b(kh kh);
+    public abstract void b(Entity entity);
 
     public abstract void e();
 
diff --git "a/temp\\src\\java/iq.java" "b/src\\main\\java/iq.java"
index 8d41caa..3063945 100644
--- "a/temp\\src\\java/iq.java"
+++ "b/src\\main\\java/iq.java"
@@ -13,7 +13,7 @@ public class iq
     private float i;
     public jh a;
     private int j;
-    private kh k;
+    private Entity k;
     private long l;
     private java.util.Random m;
     volatile int b;
@@ -41,7 +41,7 @@ public class iq
     public void a()
     {
         n = o;
-        float f1 = h.world.c(eo.b(h.g.ak), eo.b(h.g.al), eo.b(h.g.am));
+        float f1 = h.world.c(MathLib.castIgnoringSign(h.g.posX), MathLib.castIgnoringSign(h.g.posY), MathLib.castIgnoringSign(h.g.posZ));
         float f2 = (float)(3 - h.y.e) / 3F;
         float f3 = f1 * (1.0F - f2) + f2;
         o += (f3 - o) * 0.1F;
@@ -58,9 +58,9 @@ public class iq
         double d1 = h.b.b();
         h.x = h.g.a(d1, f1);
         double d2 = d1;
-        aj aj1 = h.g.e(f1);
+        Vec3 vec31 = h.g.e(f1);
         if(h.x != null)
-            d2 = h.x.f.c(aj1);
+            d2 = h.x.f.squareDistance(vec31);
         if(h.b instanceof il)
         {
             d2 = d1 = 32D;
@@ -70,25 +70,25 @@ public class iq
                 d2 = 3D;
             d1 = d2;
         }
-        aj aj2 = h.g.f(f1);
-        aj aj3 = aj1.c(aj2.a * d1, aj2.b * d1, aj2.c * d1);
+        Vec3 vec32 = h.g.f(f1);
+        Vec3 vec33 = vec31.add(vec32.x * d1, vec32.y * d1, vec32.z * d1);
         k = null;
-        java.util.List list = h.world.b(((kh) (h.g)), h.g.au.a(aj2.a * d1, aj2.b * d1, aj2.c * d1));
+        java.util.List list = h.world.b(((Entity) (h.g)), h.g.au.a(vec32.x * d1, vec32.y * d1, vec32.z * d1));
         double d3 = 0.0D;
         for(int i1 = 0; i1 < list.size(); i1++)
         {
-            kh kh1 = (kh)list.get(i1);
-            if(!kh1.c_())
+            Entity entity1 = (Entity)list.get(i1);
+            if(!entity1.c_())
                 continue;
             float f2 = 0.1F;
-            cf cf1 = kh1.au.b(f2, f2, f2);
-            mf mf1 = cf1.a(aj1, aj3);
+            cf cf1 = entity1.au.b(f2, f2, f2);
+            mf mf1 = cf1.a(vec31, vec33);
             if(mf1 == null)
                 continue;
-            double d4 = aj1.c(mf1.f);
+            double d4 = vec31.squareDistance(mf1.f);
             if(d4 < d3 || d3 == 0.0D)
             {
-                k = kh1;
+                k = entity1;
                 d3 = d4;
             }
         }
@@ -101,11 +101,11 @@ public class iq
     {
         bi bi1 = h.g;
         float f2 = 70F;
-        if(((Player) (bi1)).a(gb.f))
+        if(((EntityPlayer) (bi1)).a(gb.f))
             f2 = 60F;
-        if(((Player) (bi1)).health <= 0)
+        if(((EntityPlayer) (bi1)).health <= 0)
         {
-            float f3 = (float)((Player) (bi1)).deathTime + f1;
+            float f3 = (float)((EntityPlayer) (bi1)).deathTime + f1;
             f2 /= (1.0F - 500F / (f3 + 500F)) * 2.0F + 1.0F;
         }
         return f2;
@@ -114,10 +114,10 @@ public class iq
     private void e(float f1)
     {
         bi bi1 = h.g;
-        float f2 = (float)((Player) (bi1)).hurtTime - f1;
-        if(((Player) (bi1)).health <= 0)
+        float f2 = (float)((EntityPlayer) (bi1)).hurtTime - f1;
+        if(((EntityPlayer) (bi1)).health <= 0)
         {
-            float f3 = (float)((Player) (bi1)).deathTime + f1;
+            float f3 = (float)((EntityPlayer) (bi1)).deathTime + f1;
             org.lwjgl.opengl.GL11.glRotatef(40F - 8000F / (f3 + 200F), 0.0F, 0.0F, 1.0F);
         }
         if(f2 < 0.0F)
@@ -125,9 +125,9 @@ public class iq
             return;
         } else
         {
-            f2 /= ((Player) (bi1)).H;
-            f2 = eo.a(f2 * f2 * f2 * f2 * 3.141593F);
-            float f4 = ((Player) (bi1)).I;
+            f2 /= ((EntityPlayer) (bi1)).H;
+            f2 = MathLib.sin(f2 * f2 * f2 * f2 * 3.141593F);
+            float f4 = ((EntityPlayer) (bi1)).I;
             org.lwjgl.opengl.GL11.glRotatef(-f4, 0.0F, 1.0F, 0.0F);
             org.lwjgl.opengl.GL11.glRotatef(-f2 * 14F, 0.0F, 0.0F, 1.0F);
             org.lwjgl.opengl.GL11.glRotatef(f4, 0.0F, 1.0F, 0.0F);
@@ -143,13 +143,13 @@ public class iq
         } else
         {
             bi bi1 = h.g;
-            float f2 = ((Player) (bi1)).aF - ((Player) (bi1)).aE;
-            float f3 = ((Player) (bi1)).aF + f2 * f1;
-            float f4 = ((Player) (bi1)).e + (((Player) (bi1)).f - ((Player) (bi1)).e) * f1;
-            float f5 = ((Player) (bi1)).L + (((Player) (bi1)).M - ((Player) (bi1)).L) * f1;
-            org.lwjgl.opengl.GL11.glTranslatef(eo.a(f3 * 3.141593F) * f4 * 0.5F, -java.lang.Math.abs(eo.b(f3 * 3.141593F) * f4), 0.0F);
-            org.lwjgl.opengl.GL11.glRotatef(eo.a(f3 * 3.141593F) * f4 * 3F, 0.0F, 0.0F, 1.0F);
-            org.lwjgl.opengl.GL11.glRotatef(java.lang.Math.abs(eo.b(f3 * 3.141593F + 0.2F) * f4) * 5F, 1.0F, 0.0F, 0.0F);
+            float f2 = ((EntityPlayer) (bi1)).aF - ((EntityPlayer) (bi1)).aE;
+            float f3 = ((EntityPlayer) (bi1)).aF + f2 * f1;
+            float f4 = ((EntityPlayer) (bi1)).e + (((EntityPlayer) (bi1)).f - ((EntityPlayer) (bi1)).e) * f1;
+            float f5 = ((EntityPlayer) (bi1)).L + (((EntityPlayer) (bi1)).M - ((EntityPlayer) (bi1)).L) * f1;
+            org.lwjgl.opengl.GL11.glTranslatef(MathLib.sin(f3 * 3.141593F) * f4 * 0.5F, -java.lang.Math.abs(MathLib.cos(f3 * 3.141593F) * f4), 0.0F);
+            org.lwjgl.opengl.GL11.glRotatef(MathLib.sin(f3 * 3.141593F) * f4 * 3F, 0.0F, 0.0F, 1.0F);
+            org.lwjgl.opengl.GL11.glRotatef(java.lang.Math.abs(MathLib.cos(f3 * 3.141593F + 0.2F) * f4) * 5F, 1.0F, 0.0F, 0.0F);
             org.lwjgl.opengl.GL11.glRotatef(f5, 1.0F, 0.0F, 0.0F);
             return;
         }
@@ -158,17 +158,17 @@ public class iq
     private void g(float f1)
     {
         bi bi1 = h.g;
-        double d1 = ((Player) (bi1)).ah + (((Player) (bi1)).ak - ((Player) (bi1)).ah) * (double)f1;
-        double d2 = ((Player) (bi1)).ai + (((Player) (bi1)).al - ((Player) (bi1)).ai) * (double)f1;
-        double d3 = ((Player) (bi1)).aj + (((Player) (bi1)).am - ((Player) (bi1)).aj) * (double)f1;
+        double d1 = ((EntityPlayer) (bi1)).prevPosX + (((EntityPlayer) (bi1)).posX - ((EntityPlayer) (bi1)).prevPosX) * (double)f1;
+        double d2 = ((EntityPlayer) (bi1)).prevPosY + (((EntityPlayer) (bi1)).posY - ((EntityPlayer) (bi1)).prevPosY) * (double)f1;
+        double d3 = ((EntityPlayer) (bi1)).prevPosZ + (((EntityPlayer) (bi1)).posZ - ((EntityPlayer) (bi1)).prevPosZ) * (double)f1;
         if(h.y.x)
         {
             double d4 = 4D;
-            float f2 = ((Player) (bi1)).aq;
-            float f3 = ((Player) (bi1)).ar;
-            double d5 = (double)(-eo.a((f2 / 180F) * 3.141593F) * eo.b((f3 / 180F) * 3.141593F)) * d4;
-            double d6 = (double)(eo.b((f2 / 180F) * 3.141593F) * eo.b((f3 / 180F) * 3.141593F)) * d4;
-            double d7 = (double)(-eo.a((f3 / 180F) * 3.141593F)) * d4;
+            float f2 = ((EntityPlayer) (bi1)).yaw;
+            float f3 = ((EntityPlayer) (bi1)).pitch;
+            double d5 = (double)(-MathLib.sin((f2 / 180F) * 3.141593F) * MathLib.cos((f3 / 180F) * 3.141593F)) * d4;
+            double d6 = (double)(MathLib.cos((f2 / 180F) * 3.141593F) * MathLib.cos((f3 / 180F) * 3.141593F)) * d4;
+            double d7 = (double)(-MathLib.sin((f3 / 180F) * 3.141593F)) * d4;
             for(int i1 = 0; i1 < 8; i1++)
             {
                 float f4 = (i1 & 1) * 2 - 1;
@@ -177,25 +177,25 @@ public class iq
                 f4 *= 0.1F;
                 f5 *= 0.1F;
                 f6 *= 0.1F;
-                mf mf1 = h.world.a(aj.b(d1 + (double)f4, d2 + (double)f5, d3 + (double)f6), aj.b((d1 - d5) + (double)f4 + (double)f6, (d2 - d7) + (double)f5, (d3 - d6) + (double)f6));
+                mf mf1 = h.world.a(Vec3.recycle(d1 + (double)f4, d2 + (double)f5, d3 + (double)f6), Vec3.recycle((d1 - d5) + (double)f4 + (double)f6, (d2 - d7) + (double)f5, (d3 - d6) + (double)f6));
                 if(mf1 == null)
                     continue;
-                double d8 = mf1.f.c(aj.b(d1, d2, d3));
+                double d8 = mf1.f.squareDistance(Vec3.recycle(d1, d2, d3));
                 if(d8 < d4)
                     d4 = d8;
             }
 
-            org.lwjgl.opengl.GL11.glRotatef(((Player) (bi1)).ar - f3, 1.0F, 0.0F, 0.0F);
-            org.lwjgl.opengl.GL11.glRotatef(((Player) (bi1)).aq - f2, 0.0F, 1.0F, 0.0F);
+            org.lwjgl.opengl.GL11.glRotatef(((EntityPlayer) (bi1)).pitch - f3, 1.0F, 0.0F, 0.0F);
+            org.lwjgl.opengl.GL11.glRotatef(((EntityPlayer) (bi1)).yaw - f2, 0.0F, 1.0F, 0.0F);
             org.lwjgl.opengl.GL11.glTranslatef(0.0F, 0.0F, (float)(-d4));
-            org.lwjgl.opengl.GL11.glRotatef(f2 - ((Player) (bi1)).aq, 0.0F, 1.0F, 0.0F);
-            org.lwjgl.opengl.GL11.glRotatef(f3 - ((Player) (bi1)).ar, 1.0F, 0.0F, 0.0F);
+            org.lwjgl.opengl.GL11.glRotatef(f2 - ((EntityPlayer) (bi1)).yaw, 0.0F, 1.0F, 0.0F);
+            org.lwjgl.opengl.GL11.glRotatef(f3 - ((EntityPlayer) (bi1)).pitch, 1.0F, 0.0F, 0.0F);
         } else
         {
             org.lwjgl.opengl.GL11.glTranslatef(0.0F, 0.0F, -0.1F);
         }
-        org.lwjgl.opengl.GL11.glRotatef(((Player) (bi1)).at + (((Player) (bi1)).ar - ((Player) (bi1)).at) * f1, 1.0F, 0.0F, 0.0F);
-        org.lwjgl.opengl.GL11.glRotatef(((Player) (bi1)).as + (((Player) (bi1)).aq - ((Player) (bi1)).as) * f1 + 180F, 0.0F, 1.0F, 0.0F);
+        org.lwjgl.opengl.GL11.glRotatef(((EntityPlayer) (bi1)).prevPitch + (((EntityPlayer) (bi1)).pitch - ((EntityPlayer) (bi1)).prevPitch) * f1, 1.0F, 0.0F, 0.0F);
+        org.lwjgl.opengl.GL11.glRotatef(((EntityPlayer) (bi1)).prevYaw + (((EntityPlayer) (bi1)).yaw - ((EntityPlayer) (bi1)).prevYaw) * f1 + 180F, 0.0F, 1.0F, 0.0F);
     }
 
     private void a(float f1, int i1)
@@ -295,9 +295,9 @@ public class iq
         bi bi1 = h.g;
         e e1 = h.f;
         bq bq1 = h.h;
-        double d1 = ((Player) (bi1)).aI + (((Player) (bi1)).ak - ((Player) (bi1)).aI) * (double)f1;
-        double d2 = ((Player) (bi1)).aJ + (((Player) (bi1)).al - ((Player) (bi1)).aJ) * (double)f1;
-        double d3 = ((Player) (bi1)).aK + (((Player) (bi1)).am - ((Player) (bi1)).aK) * (double)f1;
+        double d1 = ((EntityPlayer) (bi1)).aI + (((EntityPlayer) (bi1)).posX - ((EntityPlayer) (bi1)).aI) * (double)f1;
+        double d2 = ((EntityPlayer) (bi1)).aJ + (((EntityPlayer) (bi1)).posY - ((EntityPlayer) (bi1)).aJ) * (double)f1;
+        double d3 = ((EntityPlayer) (bi1)).aK + (((EntityPlayer) (bi1)).posZ - ((EntityPlayer) (bi1)).aK) * (double)f1;
         for(int i1 = 0; i1 < 2; i1++)
         {
             if(h.y.g)
@@ -321,23 +321,23 @@ public class iq
             kl kl1 = new kl();
             ((oe) (kl1)).a(d1, d2, d3);
             h.f.a(((oe) (kl1)), f1);
-            h.f.a(((Player) (bi1)), false);
+            h.f.a(((EntityPlayer) (bi1)), false);
             a(0);
             org.lwjgl.opengl.GL11.glEnable(2912);
             org.lwjgl.opengl.GL11.glBindTexture(3553, h.n.a("/terrain.png"));
             ((i)null).a();
-            e1.a(((Player) (bi1)), 0, f1);
+            e1.a(((EntityPlayer) (bi1)), 0, f1);
             ((i)null).b();
-            e1.a(((Player) (bi1)).e(f1), ((oe) (kl1)), f1);
-            bq1.b(((kh) (bi1)), f1);
+            e1.a(((EntityPlayer) (bi1)).e(f1), ((oe) (kl1)), f1);
+            bq1.b(((Entity) (bi1)), f1);
             ((i)null).a();
             a(0);
-            bq1.a(((kh) (bi1)), f1);
-            if(h.x != null && ((Player) (bi1)).a(gb.f))
+            bq1.a(((Entity) (bi1)), f1);
+            if(h.x != null && ((EntityPlayer) (bi1)).a(gb.f))
             {
                 org.lwjgl.opengl.GL11.glDisable(3008);
-                e1.a(((Player) (bi1)), h.x, 0, ((Player) (bi1)).b.a(), f1);
-                e1.b(((Player) (bi1)), h.x, 0, ((Player) (bi1)).b.a(), f1);
+                e1.a(((EntityPlayer) (bi1)), h.x, 0, ((EntityPlayer) (bi1)).b.a(), f1);
+                e1.b(((EntityPlayer) (bi1)), h.x, 0, ((EntityPlayer) (bi1)).b.a(), f1);
                 org.lwjgl.opengl.GL11.glEnable(3008);
             }
             org.lwjgl.opengl.GL11.glBlendFunc(770, 771);
@@ -348,7 +348,7 @@ public class iq
             if(h.y.i)
             {
                 org.lwjgl.opengl.GL11.glColorMask(false, false, false, false);
-                int j1 = e1.a(((Player) (bi1)), 1, f1);
+                int j1 = e1.a(((EntityPlayer) (bi1)), 1, f1);
                 org.lwjgl.opengl.GL11.glColorMask(true, true, true, true);
                 if(h.y.g)
                     if(i1 == 0)
@@ -359,16 +359,16 @@ public class iq
                     e1.a(1, f1);
             } else
             {
-                e1.a(((Player) (bi1)), 1, f1);
+                e1.a(((EntityPlayer) (bi1)), 1, f1);
             }
             org.lwjgl.opengl.GL11.glDepthMask(true);
             org.lwjgl.opengl.GL11.glEnable(2884);
             org.lwjgl.opengl.GL11.glDisable(3042);
-            if(h.x != null && !((Player) (bi1)).a(gb.f))
+            if(h.x != null && !((EntityPlayer) (bi1)).a(gb.f))
             {
                 org.lwjgl.opengl.GL11.glDisable(3008);
-                e1.a(((Player) (bi1)), h.x, 0, ((Player) (bi1)).b.a(), f1);
-                e1.b(((Player) (bi1)), h.x, 0, ((Player) (bi1)).b.a(), f1);
+                e1.a(((EntityPlayer) (bi1)), h.x, 0, ((EntityPlayer) (bi1)).b.a(), f1);
+                e1.b(((EntityPlayer) (bi1)), h.x, 0, ((EntityPlayer) (bi1)).b.a(), f1);
                 org.lwjgl.opengl.GL11.glEnable(3008);
             }
             org.lwjgl.opengl.GL11.glDisable(2912);
@@ -395,9 +395,9 @@ public class iq
             return;
         bi bi1 = h.g;
         World world1 = h.world;
-        int i1 = eo.b(((Player) (bi1)).ak);
-        int j1 = eo.b(((Player) (bi1)).al);
-        int k1 = eo.b(((Player) (bi1)).am);
+        int i1 = MathLib.castIgnoringSign(((EntityPlayer) (bi1)).posX);
+        int j1 = MathLib.castIgnoringSign(((EntityPlayer) (bi1)).posY);
+        int k1 = MathLib.castIgnoringSign(((EntityPlayer) (bi1)).posZ);
         byte byte0 = 16;
         for(int l1 = 0; l1 < 150; l1++)
         {
@@ -419,18 +419,18 @@ public class iq
     {
         bi bi1 = h.g;
         World world1 = h.world;
-        int i1 = eo.b(((Player) (bi1)).ak);
-        int j1 = eo.b(((Player) (bi1)).al);
-        int k1 = eo.b(((Player) (bi1)).am);
+        int i1 = MathLib.castIgnoringSign(((EntityPlayer) (bi1)).posX);
+        int j1 = MathLib.castIgnoringSign(((EntityPlayer) (bi1)).posY);
+        int k1 = MathLib.castIgnoringSign(((EntityPlayer) (bi1)).posZ);
         ho ho1 = ho.a;
         org.lwjgl.opengl.GL11.glDisable(2884);
         org.lwjgl.opengl.GL11.glNormal3f(0.0F, 1.0F, 0.0F);
         org.lwjgl.opengl.GL11.glEnable(3042);
         org.lwjgl.opengl.GL11.glBlendFunc(770, 771);
         org.lwjgl.opengl.GL11.glBindTexture(3553, h.n.a("/snow.png"));
-        double d1 = ((Player) (bi1)).aI + (((Player) (bi1)).ak - ((Player) (bi1)).aI) * (double)f1;
-        double d2 = ((Player) (bi1)).aJ + (((Player) (bi1)).al - ((Player) (bi1)).aJ) * (double)f1;
-        double d3 = ((Player) (bi1)).aK + (((Player) (bi1)).am - ((Player) (bi1)).aK) * (double)f1;
+        double d1 = ((EntityPlayer) (bi1)).aI + (((EntityPlayer) (bi1)).posX - ((EntityPlayer) (bi1)).aI) * (double)f1;
+        double d2 = ((EntityPlayer) (bi1)).aJ + (((EntityPlayer) (bi1)).posY - ((EntityPlayer) (bi1)).aJ) * (double)f1;
+        double d3 = ((EntityPlayer) (bi1)).aK + (((EntityPlayer) (bi1)).posZ - ((EntityPlayer) (bi1)).aK) * (double)f1;
         int l1 = 5;
         if(h.y.i)
             l1 = 10;
@@ -455,9 +455,9 @@ public class iq
                     float f4 = ((float)(j & 0x1ff) + f1) / 512F;
                     float f5 = m.nextFloat() + f3 * 0.01F * (float)m.nextGaussian();
                     float f6 = m.nextFloat() + f3 * (float)m.nextGaussian() * 0.001F;
-                    double d4 = (double)((float)i2 + 0.5F) - ((Player) (bi1)).ak;
-                    double d5 = (double)((float)j2 + 0.5F) - ((Player) (bi1)).am;
-                    float f7 = eo.a(d4 * d4 + d5 * d5) / (float)l1;
+                    double d4 = (double)((float)i2 + 0.5F) - ((EntityPlayer) (bi1)).posX;
+                    double d5 = (double)((float)j2 + 0.5F) - ((EntityPlayer) (bi1)).posZ;
+                    float f7 = MathLib.sqrt(d4 * d4 + d5 * d5) / (float)l1;
                     ho1.b();
                     float f8 = world1.c(i2, 128, j2);
                     org.lwjgl.opengl.GL11.glColor4f(f8, f8, f8, (1.0F - f7 * f7) * 0.7F);
@@ -501,24 +501,24 @@ public class iq
         bi bi1 = h.g;
         float f2 = 1.0F / (float)(4 - h.y.e);
         f2 = 1.0F - (float)java.lang.Math.pow(f2, 0.25D);
-        aj aj1 = world1.b(f1);
-        float f3 = (float)aj1.a;
-        float f4 = (float)aj1.b;
-        float f5 = (float)aj1.c;
-        aj aj2 = world1.e(f1);
-        e = (float)aj2.a;
-        f = (float)aj2.b;
-        g = (float)aj2.c;
+        Vec3 vec31 = world1.b(f1);
+        float f3 = (float) vec31.x;
+        float f4 = (float) vec31.y;
+        float f5 = (float) vec31.z;
+        Vec3 vec32 = world1.e(f1);
+        e = (float) vec32.x;
+        f = (float) vec32.y;
+        g = (float) vec32.z;
         e += (f3 - e) * f2;
         f += (f4 - f) * f2;
         g += (f5 - g) * f2;
-        if(((Player) (bi1)).a(gb.f))
+        if(((EntityPlayer) (bi1)).a(gb.f))
         {
             e = 0.02F;
             f = 0.02F;
             g = 0.2F;
         } else
-        if(((Player) (bi1)).a(gb.g))
+        if(((EntityPlayer) (bi1)).a(gb.g))
         {
             e = 0.6F;
             f = 0.1F;
@@ -546,7 +546,7 @@ public class iq
         org.lwjgl.opengl.GL11.glFog(2918, a(e, f, g, 1.0F));
         org.lwjgl.opengl.GL11.glNormal3f(0.0F, -1F, 0.0F);
         org.lwjgl.opengl.GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-        if(((Player) (bi1)).a(gb.f))
+        if(((EntityPlayer) (bi1)).a(gb.f))
         {
             org.lwjgl.opengl.GL11.glFogi(2917, 2048);
             org.lwjgl.opengl.GL11.glFogf(2914, 0.1F);
@@ -563,7 +563,7 @@ public class iq
                 f5 = f11;
             }
         } else
-        if(((Player) (bi1)).a(gb.g))
+        if(((EntityPlayer) (bi1)).a(gb.g))
         {
             org.lwjgl.opengl.GL11.glFogi(2917, 2048);
             org.lwjgl.opengl.GL11.glFogf(2914, 2.0F);
diff --git "a/temp\\src\\java/iu.java" "b/src\\main\\java/iu.java"
index 61ae47f..5072404 100644
--- "a/temp\\src\\java/iu.java"
+++ "b/src\\main\\java/iu.java"
@@ -23,7 +23,7 @@ public class iu extends di
         return 1.5F;
     }
 
-    public void a(ev ev1, Mob mob)
+    public void a(ev ev1, EntityMob entityMob)
     {
         ev1.b(1);
     }
@@ -33,7 +33,7 @@ public class iu extends di
         ev1.b(2);
     }
 
-    public int a(kh kh)
+    public int a(Entity entity)
     {
         return a;
     }
diff --git "a/temp\\src\\java/iw.java" "b/src\\main\\java/iw.java"
index 60f73ee..9292730 100644
--- "a/temp\\src\\java/iw.java"
+++ "b/src\\main\\java/iw.java"
@@ -28,9 +28,9 @@ public class iw extends nq
         float f8 = ((float)(b / 16) + d / 4F) / 16F;
         float f9 = f8 + 0.01560938F;
         float f10 = 0.1F * g;
-        float f11 = (float)((ah + (ak - ah) * (double)f) - l);
-        float f12 = (float)((ai + (al - ai) * (double)f) - m);
-        float f13 = (float)((aj + (am - aj) * (double)f) - n);
+        float f11 = (float)((prevPosX + (posX - prevPosX) * (double)f) - l);
+        float f12 = (float)((prevPosY + (posY - prevPosY) * (double)f) - m);
+        float f13 = (float)((prevPosZ + (posZ - prevPosZ) * (double)f) - n);
         float f14 = a(f);
         ho1.a(f14 * i, f14 * j, f14 * k);
         ho1.a(f11 - f1 * f10 - f4 * f10, f12 - f2 * f10, f13 - f3 * f10 - f5 * f10, f6, f9);
diff --git "a/temp\\src\\java/iz.java" "b/src\\main\\java/iz.java"
index d90ed98..6a684e1 100644
--- "a/temp\\src\\java/iz.java"
+++ "b/src\\main\\java/iz.java"
@@ -125,8 +125,8 @@ public class iz extends hi
         bb = b + (flag ? 0 : 1);
     }
 
-    public void a(World world1, int j, int k, int l, kh kh)
+    public void a(World world1, int j, int k, int l, Entity entity)
     {
-        super.a(world1, j, k, l, kh);
+        super.a(world1, j, k, l, entity);
     }
 }
diff --git "a/temp\\src\\java/j.java" "b/src\\main\\java/j.java"
index a9547db..aa84082 100644
--- "a/temp\\src\\java/j.java"
+++ "b/src\\main\\java/j.java"
@@ -25,7 +25,7 @@ public class j extends bt
 
     private void a(float af[][], int i)
     {
-        float f1 = eo.c(af[i][0] * af[i][0] + af[i][1] * af[i][1] + af[i][2] * af[i][2]);
+        float f1 = MathLib.sqrt(af[i][0] * af[i][0] + af[i][1] * af[i][1] + af[i][2] * af[i][2]);
         af[i][0] /= f1;
         af[i][1] /= f1;
         af[i][2] /= f1;
diff --git "a/temp\\src\\java/jb.java" "b/src\\main\\java/jb.java"
index dde5377..c73be9d 100644
--- "a/temp\\src\\java/jb.java"
+++ "b/src\\main\\java/jb.java"
@@ -11,12 +11,12 @@ public class jb extends nq
               double d3, double d4, double d5)
     {
         super(world, d, d1, d2, d3, d4, d5);
-        an = an * 0.0099999997764825821D + d3;
-        ao = ao * 0.0099999997764825821D + d4;
-        ap = ap * 0.0099999997764825821D + d5;
-        d += (aQ.nextFloat() - aQ.nextFloat()) * 0.05F;
-        d1 += (aQ.nextFloat() - aQ.nextFloat()) * 0.05F;
-        d2 += (aQ.nextFloat() - aQ.nextFloat()) * 0.05F;
+        motionX = motionX * 0.0099999997764825821D + d3;
+        motionY = motionY * 0.0099999997764825821D + d4;
+        motionZ = motionZ * 0.0099999997764825821D + d5;
+        d += (rnd.nextFloat() - rnd.nextFloat()) * 0.05F;
+        d1 += (rnd.nextFloat() - rnd.nextFloat()) * 0.05F;
+        d2 += (rnd.nextFloat() - rnd.nextFloat()) * 0.05F;
         a = g;
         i = j = k = 1.0F;
         f = (int)(8D / (java.lang.Math.random() * 0.80000000000000004D + 0.20000000000000001D)) + 4;
@@ -44,19 +44,19 @@ public class jb extends nq
 
     public void e_()
     {
-        ah = ak;
-        ai = al;
-        aj = am;
+        prevPosX = posX;
+        prevPosY = posY;
+        prevPosZ = posZ;
         if(e++ >= f)
             F();
-        c(an, ao, ap);
-        an *= 0.95999997854232788D;
-        ao *= 0.95999997854232788D;
-        ap *= 0.95999997854232788D;
-        if(av)
+        c(motionX, motionY, motionZ);
+        motionX *= 0.95999997854232788D;
+        motionY *= 0.95999997854232788D;
+        motionZ *= 0.95999997854232788D;
+        if(onGround)
         {
-            an *= 0.69999998807907104D;
-            ap *= 0.69999998807907104D;
+            motionX *= 0.69999998807907104D;
+            motionZ *= 0.69999998807907104D;
         }
     }
 }
diff --git "a/temp\\src\\java/je.java" "b/src\\main\\java/je.java"
index be8fbe8..dd072e5 100644
--- "a/temp\\src\\java/je.java"
+++ "b/src\\main\\java/je.java"
@@ -12,7 +12,7 @@ public class je
     {
     }
 
-    public void a(World world1, kh kh1, double d, double d1, double d2, float f)
+    public void a(World world1, Entity entity1, double d, double d1, double d2, float f)
     {
         world1.a(d, d1, d2, "random.explode", 4F, (1.0F + (world1.n.nextFloat() - world1.n.nextFloat()) * 0.2F) * 0.7F);
         java.util.HashSet hashset = new HashSet();
@@ -43,12 +43,12 @@ label0:
                     {
                         if(f2 <= 0.0F)
                             continue label0;
-                        int j4 = eo.b(d8);
-                        int k4 = eo.b(d10);
-                        int l4 = eo.b(d12);
+                        int j4 = MathLib.castIgnoringSign(d8);
+                        int k4 = MathLib.castIgnoringSign(d10);
+                        int l4 = MathLib.castIgnoringSign(d12);
                         int i5 = world1.a(j4, k4, l4);
                         if(i5 > 0)
-                            f2 -= (ly.n[i5].a(kh1) + 0.3F) * f3;
+                            f2 -= (ly.n[i5].a(entity1) + 0.3F) * f3;
                         if(f2 > 0.0F)
                             ((java.util.Set) (hashset)).add(((Object) (new mt(j4, k4, l4))));
                         d8 += d3 * (double)f3;
@@ -63,34 +63,34 @@ label0:
         }
 
         f *= 2.0F;
-        int k = eo.b(d - (double)f - 1.0D);
-        int i1 = eo.b(d + (double)f + 1.0D);
-        int k1 = eo.b(d1 - (double)f - 1.0D);
-        int l1 = eo.b(d1 + (double)f + 1.0D);
-        int i2 = eo.b(d2 - (double)f - 1.0D);
-        int j2 = eo.b(d2 + (double)f + 1.0D);
-        java.util.List list = world1.b(kh1, cf.b(k, k1, i2, i1, l1, j2));
-        aj aj1 = aj.b(d, d1, d2);
+        int k = MathLib.castIgnoringSign(d - (double)f - 1.0D);
+        int i1 = MathLib.castIgnoringSign(d + (double)f + 1.0D);
+        int k1 = MathLib.castIgnoringSign(d1 - (double)f - 1.0D);
+        int l1 = MathLib.castIgnoringSign(d1 + (double)f + 1.0D);
+        int i2 = MathLib.castIgnoringSign(d2 - (double)f - 1.0D);
+        int j2 = MathLib.castIgnoringSign(d2 + (double)f + 1.0D);
+        java.util.List list = world1.b(entity1, cf.b(k, k1, i2, i1, l1, j2));
+        Vec3 vec31 = Vec3.recycle(d, d1, d2);
         for(int k2 = 0; k2 < list.size(); k2++)
         {
-            kh kh2 = (kh)list.get(k2);
-            double d7 = kh2.e(d, d1, d2) / (double)f;
+            Entity entity2 = (Entity)list.get(k2);
+            double d7 = entity2.squareDistance(d, d1, d2) / (double)f;
             if(d7 <= 1.0D)
             {
-                double d9 = kh2.ak - d;
-                double d11 = kh2.al - d1;
-                double d13 = kh2.am - d2;
-                double d15 = eo.a(d9 * d9 + d11 * d11 + d13 * d13);
+                double d9 = entity2.posX - d;
+                double d11 = entity2.posY - d1;
+                double d13 = entity2.posZ - d2;
+                double d15 = MathLib.sqrt(d9 * d9 + d11 * d11 + d13 * d13);
                 d9 /= d15;
                 d11 /= d15;
                 d13 /= d15;
-                double d17 = world1.a(aj1, kh2.au);
+                double d17 = world1.a(vec31, entity2.au);
                 double d19 = (1.0D - d7) * d17;
-                kh2.a(kh1, (int)(((d19 * d19 + d19) / 2D) * 8D * (double)f + 1.0D));
+                entity2.a(entity1, (int)(((d19 * d19 + d19) / 2D) * 8D * (double)f + 1.0D));
                 double d21 = d19;
-                kh2.an += d9 * d21;
-                kh2.ao += d11 * d21;
-                kh2.ap += d13 * d21;
+                entity2.motionX += d9 * d21;
+                entity2.motionY += d11 * d21;
+                entity2.motionZ += d13 * d21;
             }
         }
 
@@ -112,7 +112,7 @@ label0:
                 double d20 = d14 - d;
                 double d22 = d16 - d1;
                 double d23 = d18 - d2;
-                double d24 = eo.a(d20 * d20 + d22 * d22 + d23 * d23);
+                double d24 = MathLib.sqrt(d20 * d20 + d22 * d22 + d23 * d23);
                 d20 /= d24;
                 d22 /= d24;
                 d23 /= d24;
diff --git "a/temp\\src\\java/jg.java" "b/src\\main\\java/jg.java"
index 7798400..3d5a908 100644
--- "a/temp\\src\\java/jg.java"
+++ "b/src\\main\\java/jg.java"
@@ -11,12 +11,12 @@ public class jg extends di
         aT = 1;
     }
 
-    public ev a(ev ev, World world1, Player player1)
+    public ev a(ev ev, World world1, EntityPlayer entityPlayer1)
     {
-        if(player1.b.b(di.j.aS))
+        if(entityPlayer1.b.b(di.j.aS))
         {
-            world1.a(((kh) (player1)), "random.bow", 1.0F, 1.0F / (b.nextFloat() * 0.4F + 0.8F));
-            world1.a(((kh) (new Arrow(world1, ((Mob) (player1))))));
+            world1.a(((Entity) (entityPlayer1)), "random.bow", 1.0F, 1.0F / (b.nextFloat() * 0.4F + 0.8F));
+            world1.a(((Entity) (new Arrow(world1, ((EntityMob) (entityPlayer1))))));
         }
         return ev;
     }
diff --git "a/temp\\src\\java/jh.java" "b/src\\main\\java/jh.java"
index d528fab..c0c0411 100644
--- "a/temp\\src\\java/jh.java"
+++ "b/src\\main\\java/jh.java"
@@ -131,26 +131,26 @@ public class jh
         float f1 = d + (c - d) * f;
         bi bi1 = a.g;
         org.lwjgl.opengl.GL11.glPushMatrix();
-        org.lwjgl.opengl.GL11.glRotatef(((Player) (bi1)).at + (((Player) (bi1)).ar - ((Player) (bi1)).at) * f, 1.0F, 0.0F, 0.0F);
-        org.lwjgl.opengl.GL11.glRotatef(((Player) (bi1)).as + (((Player) (bi1)).aq - ((Player) (bi1)).as) * f, 0.0F, 1.0F, 0.0F);
+        org.lwjgl.opengl.GL11.glRotatef(((EntityPlayer) (bi1)).prevPitch + (((EntityPlayer) (bi1)).pitch - ((EntityPlayer) (bi1)).prevPitch) * f, 1.0F, 0.0F, 0.0F);
+        org.lwjgl.opengl.GL11.glRotatef(((EntityPlayer) (bi1)).prevYaw + (((EntityPlayer) (bi1)).yaw - ((EntityPlayer) (bi1)).prevYaw) * f, 0.0F, 1.0F, 0.0F);
         i.b();
         org.lwjgl.opengl.GL11.glPopMatrix();
-        float f2 = a.world.c(eo.b(((Player) (bi1)).ak), eo.b(((Player) (bi1)).al), eo.b(((Player) (bi1)).am));
+        float f2 = a.world.c(MathLib.castIgnoringSign(((EntityPlayer) (bi1)).posX), MathLib.castIgnoringSign(((EntityPlayer) (bi1)).posY), MathLib.castIgnoringSign(((EntityPlayer) (bi1)).posZ));
         org.lwjgl.opengl.GL11.glColor4f(f2, f2, f2, 1.0F);
         if(b != null)
         {
             org.lwjgl.opengl.GL11.glPushMatrix();
             float f3 = 0.8F;
-            float f5 = ((Player) (bi1)).d(f);
-            float f7 = eo.a(f5 * 3.141593F);
-            float f9 = eo.a(eo.c(f5) * 3.141593F);
-            org.lwjgl.opengl.GL11.glTranslatef(-f9 * 0.4F, eo.a(eo.c(f5) * 3.141593F * 2.0F) * 0.2F, -f7 * 0.2F);
+            float f5 = ((EntityPlayer) (bi1)).d(f);
+            float f7 = MathLib.sin(f5 * 3.141593F);
+            float f9 = MathLib.sin(MathLib.sqrt(f5) * 3.141593F);
+            org.lwjgl.opengl.GL11.glTranslatef(-f9 * 0.4F, MathLib.sin(MathLib.sqrt(f5) * 3.141593F * 2.0F) * 0.2F, -f7 * 0.2F);
             org.lwjgl.opengl.GL11.glTranslatef(0.7F * f3, -0.65F * f3 - (1.0F - f1) * 0.6F, -0.9F * f3);
             org.lwjgl.opengl.GL11.glRotatef(45F, 0.0F, 1.0F, 0.0F);
             org.lwjgl.opengl.GL11.glEnable(32826);
-            f5 = ((Player) (bi1)).d(f);
-            f7 = eo.a(f5 * f5 * 3.141593F);
-            f9 = eo.a(eo.c(f5) * 3.141593F);
+            f5 = ((EntityPlayer) (bi1)).d(f);
+            f7 = MathLib.sin(f5 * f5 * 3.141593F);
+            f9 = MathLib.sin(MathLib.sqrt(f5) * 3.141593F);
             org.lwjgl.opengl.GL11.glRotatef(-f7 * 20F, 0.0F, 1.0F, 0.0F);
             org.lwjgl.opengl.GL11.glRotatef(-f9 * 20F, 0.0F, 0.0F, 1.0F);
             org.lwjgl.opengl.GL11.glRotatef(-f9 * 80F, 1.0F, 0.0F, 0.0F);
@@ -162,26 +162,26 @@ public class jh
         {
             org.lwjgl.opengl.GL11.glPushMatrix();
             float f4 = 0.8F;
-            float f6 = ((Player) (bi1)).d(f);
-            float f8 = eo.a(f6 * 3.141593F);
-            float f10 = eo.a(eo.c(f6) * 3.141593F);
-            org.lwjgl.opengl.GL11.glTranslatef(-f10 * 0.3F, eo.a(eo.c(f6) * 3.141593F * 2.0F) * 0.4F, -f8 * 0.4F);
+            float f6 = ((EntityPlayer) (bi1)).d(f);
+            float f8 = MathLib.sin(f6 * 3.141593F);
+            float f10 = MathLib.sin(MathLib.sqrt(f6) * 3.141593F);
+            org.lwjgl.opengl.GL11.glTranslatef(-f10 * 0.3F, MathLib.sin(MathLib.sqrt(f6) * 3.141593F * 2.0F) * 0.4F, -f8 * 0.4F);
             org.lwjgl.opengl.GL11.glTranslatef(0.8F * f4, -0.75F * f4 - (1.0F - f1) * 0.6F, -0.9F * f4);
             org.lwjgl.opengl.GL11.glRotatef(45F, 0.0F, 1.0F, 0.0F);
             org.lwjgl.opengl.GL11.glEnable(32826);
-            f6 = ((Player) (bi1)).d(f);
-            f8 = eo.a(f6 * f6 * 3.141593F);
-            f10 = eo.a(eo.c(f6) * 3.141593F);
+            f6 = ((EntityPlayer) (bi1)).d(f);
+            f8 = MathLib.sin(f6 * f6 * 3.141593F);
+            f10 = MathLib.sin(MathLib.sqrt(f6) * 3.141593F);
             org.lwjgl.opengl.GL11.glRotatef(f10 * 70F, 0.0F, 1.0F, 0.0F);
             org.lwjgl.opengl.GL11.glRotatef(-f8 * 20F, 0.0F, 0.0F, 1.0F);
-            org.lwjgl.opengl.GL11.glBindTexture(3553, a.n.a(a.g.aY, a.g.x()));
+            org.lwjgl.opengl.GL11.glBindTexture(3553, a.n.a(a.g.aY, a.g.getTexture()));
             org.lwjgl.opengl.GL11.glTranslatef(-1F, 3.6F, 3.5F);
             org.lwjgl.opengl.GL11.glRotatef(120F, 0.0F, 0.0F, 1.0F);
             org.lwjgl.opengl.GL11.glRotatef(200F, 1.0F, 0.0F, 0.0F);
             org.lwjgl.opengl.GL11.glRotatef(-135F, 0.0F, 1.0F, 0.0F);
             org.lwjgl.opengl.GL11.glScalef(1.0F, 1.0F, 1.0F);
             org.lwjgl.opengl.GL11.glTranslatef(5.6F, 0.0F, 0.0F);
-            ak ak = kx.a.a(((kh) (a.g)));
+            ak ak = kx.a.a(((Entity) (a.g)));
             bu bu1 = (bu)ak;
             f10 = 1.0F;
             org.lwjgl.opengl.GL11.glScalef(f10, f10, f10);
@@ -195,7 +195,7 @@ public class jh
     public void b(float f)
     {
         org.lwjgl.opengl.GL11.glDisable(3008);
-        if(a.g.aT > 0)
+        if(a.g.fire > 0)
         {
             int j = a.n.a("/terrain.png");
             org.lwjgl.opengl.GL11.glBindTexture(3553, j);
@@ -203,9 +203,9 @@ public class jh
         }
         if(a.g.I())
         {
-            int k = eo.b(a.g.ak);
-            int i1 = eo.b(a.g.al);
-            int j1 = eo.b(a.g.am);
+            int k = MathLib.castIgnoringSign(a.g.posX);
+            int i1 = MathLib.castIgnoringSign(a.g.posY);
+            int j1 = MathLib.castIgnoringSign(a.g.posZ);
             int k1 = a.n.a("/terrain.png");
             org.lwjgl.opengl.GL11.glBindTexture(3553, k1);
             int l1 = a.world.a(k, i1, j1);
@@ -262,8 +262,8 @@ public class jh
         float f5 = -1F;
         float f6 = 1.0F;
         float f7 = -0.5F;
-        float f8 = -a.g.aq / 64F;
-        float f9 = a.g.ar / 64F;
+        float f8 = -a.g.yaw / 64F;
+        float f9 = a.g.pitch / 64F;
         ho1.b();
         ho1.a(f3, f5, f7, f2 + f8, f2 + f9);
         ho1.a(f4, f5, f7, 0.0F + f8, f2 + f9);
@@ -316,7 +316,7 @@ public class jh
     {
         d = c;
         bi bi1 = a.g;
-        ev ev1 = ((Player) (bi1)).b.a();
+        ev ev1 = ((EntityPlayer) (bi1)).b.a();
         ev ev2 = ev1;
         float f = 0.4F;
         float f1 = ev2 != b ? 0.0F : 1.0F;
diff --git "a/temp\\src\\java/jl.java" "b/src\\main\\java/jl.java"
index 59e48d8..02a8ad4 100644
--- "a/temp\\src\\java/jl.java"
+++ "b/src\\main\\java/jl.java"
@@ -18,14 +18,14 @@ public class jl extends fn
     {
     }
 
-    public jl(kh kh1)
+    public jl(Entity entity1)
     {
-        a = kh1.ab;
-        b = eo.b(kh1.ak * 32D);
-        c = eo.b(kh1.al * 32D);
-        d = eo.b(kh1.am * 32D);
-        e = (byte)(int)((kh1.aq * 256F) / 360F);
-        f = (byte)(int)((kh1.ar * 256F) / 360F);
+        a = entity1.ab;
+        b = MathLib.castIgnoringSign(entity1.posX * 32D);
+        c = MathLib.castIgnoringSign(entity1.posY * 32D);
+        d = MathLib.castIgnoringSign(entity1.posZ * 32D);
+        e = (byte)(int)((entity1.yaw * 256F) / 360F);
+        f = (byte)(int)((entity1.pitch * 256F) / 360F);
     }
 
     public void a(java.io.DataInputStream datainputstream) throws IOException
diff --git "a/temp\\src\\java/jn.java" "b/src\\main\\java/jn.java"
index 0f93f6e..5138daa 100644
--- "a/temp\\src\\java/jn.java"
+++ "b/src\\main\\java/jn.java"
@@ -14,7 +14,7 @@ public class jn extends di
         a = j;
     }
 
-    public boolean a(ev ev1, Player player, World world1, int i, int j, int k, int l)
+    public boolean a(ev ev1, EntityPlayer entityPlayer, World world1, int i, int j, int k, int l)
     {
         if(l != 1)
             return false;
diff --git "a/temp\\src\\java/jo.java" "b/src\\main\\java/jo.java"
index 7e0d8b5..9de9237 100644
--- "a/temp\\src\\java/jo.java"
+++ "b/src\\main\\java/jo.java"
@@ -15,12 +15,12 @@ public class jo extends di
         a = j;
     }
 
-    public boolean a(ev ev1, Player player, World world1, int i, int j, int k, int l)
+    public boolean a(ev ev1, EntityPlayer entityPlayer, World world1, int i, int j, int k, int l)
     {
         int i1 = world1.a(i, j, k);
         if(i1 == ly.aH.bc)
         {
-            world1.a(((kh) (new Minecart(world1, (float)i + 0.5F, (float)j + 0.5F, (float)k + 0.5F, a))));
+            world1.a(((Entity) (new Minecart(world1, (float)i + 0.5F, (float)j + 0.5F, (float)k + 0.5F, a))));
             ev1.count--;
             return true;
         } else
diff --git "a/temp\\src\\java/jp.java" "b/src\\main\\java/jp.java"
index 6160da5..e99a1fd 100644
--- "a/temp\\src\\java/jp.java"
+++ "b/src\\main\\java/jp.java"
@@ -101,9 +101,9 @@ public abstract class jp extends ly
         return 0;
     }
 
-    private aj e(nm nm1, int k, int l, int i1)
+    private Vec3 e(nm nm1, int k, int l, int i1)
     {
-        aj aj1 = ((aj)null).b(0.0D, 0.0D, 0.0D);
+        Vec3 vec31 = ((Vec3)null).recycle(0.0D, 0.0D, 0.0D);
         int j1 = b(nm1, k, l, i1);
         for(int k1 = 0; k1 < 4; k1++)
         {
@@ -127,14 +127,14 @@ public abstract class jp extends ly
                 if(k2 >= 0)
                 {
                     int l2 = k2 - (j1 - 8);
-                    aj1 = aj1.c((l1 - k) * l2, (i2 - l) * l2, (j2 - i1) * l2);
+                    vec31 = vec31.add((l1 - k) * l2, (i2 - l) * l2, (j2 - i1) * l2);
                 }
                 continue;
             }
             if(k2 >= 0)
             {
                 int i3 = k2 - j1;
-                aj1 = aj1.c((l1 - k) * i3, (i2 - l) * i3, (j2 - i1) * i3);
+                vec31 = vec31.add((l1 - k) * i3, (i2 - l) * i3, (j2 - i1) * i3);
             }
         }
 
@@ -158,18 +158,18 @@ public abstract class jp extends ly
             if(flag || c(nm1, k + 1, l + 1, i1, 5))
                 flag = true;
             if(flag)
-                aj1 = aj1.b().c(0.0D, -6D, 0.0D);
+                vec31 = vec31.normalize().add(0.0D, -6D, 0.0D);
         }
-        aj1 = aj1.b();
-        return aj1;
+        vec31 = vec31.normalize();
+        return vec31;
     }
 
-    public void a(World world1, int k, int l, int i1, kh kh, aj aj1)
+    public void a(World world1, int k, int l, int i1, Entity entity, Vec3 vec31)
     {
-        aj aj2 = e(((nm) (world1)), k, l, i1);
-        aj1.a += aj2.a;
-        aj1.b += aj2.b;
-        aj1.c += aj2.c;
+        Vec3 vec32 = e(((nm) (world1)), k, l, i1);
+        vec31.x += vec32.x;
+        vec31.y += vec32.y;
+        vec31.z += vec32.z;
     }
 
     public int a()
@@ -215,15 +215,15 @@ public abstract class jp extends ly
 
     public static double a(nm nm1, int k, int l, int i1, gb gb1)
     {
-        aj aj1 = null;
+        Vec3 vec31 = null;
         if(gb1 == gb.f)
-            aj1 = ((jp)ly.B).e(nm1, k, l, i1);
+            vec31 = ((jp)ly.B).e(nm1, k, l, i1);
         if(gb1 == gb.g)
-            aj1 = ((jp)ly.D).e(nm1, k, l, i1);
-        if(aj1.a == 0.0D && aj1.c == 0.0D)
+            vec31 = ((jp)ly.D).e(nm1, k, l, i1);
+        if(vec31.x == 0.0D && vec31.z == 0.0D)
             return -1000D;
         else
-            return java.lang.Math.atan2(aj1.c, aj1.a) - 1.5707963267948966D;
+            return java.lang.Math.atan2(vec31.z, vec31.x) - 1.5707963267948966D;
     }
 
     public void e(World world1, int k, int l, int i1)
diff --git "a/temp\\src\\java/jw.java" "b/src\\main\\java/jw.java"
index 339ff27..689cea5 100644
--- "a/temp\\src\\java/jw.java"
+++ "b/src\\main\\java/jw.java"
@@ -13,21 +13,21 @@ public class jw extends di
         aU = 64;
     }
 
-    public void b(ev ev1, Mob mob)
+    public void b(ev ev1, EntityMob entityMob)
     {
-        if(mob instanceof Pig)
+        if(entityMob instanceof EntityPig)
         {
-            Pig pig1 = (Pig) mob;
-            if(!pig1.saddle)
+            EntityPig entityPig1 = (EntityPig) entityMob;
+            if(!entityPig1.saddle)
             {
-                pig1.saddle = true;
+                entityPig1.saddle = true;
                 ev1.count--;
             }
         }
     }
 
-    public void a(ev ev1, Mob mob)
+    public void a(ev ev1, EntityMob entityMob)
     {
-        b(ev1, mob);
+        b(ev1, entityMob);
     }
 }
diff --git "a/temp\\src\\java/jy.java" "b/src\\main\\java/jy.java"
index d9e0f5e..ed28d9e 100644
--- "a/temp\\src\\java/jy.java"
+++ "b/src\\main\\java/jy.java"
@@ -96,14 +96,14 @@ public class jy extends fo
         i.e = f9 * 1.0F - f8;
         j.e = -f9 * 2.0F + f8;
         m.e = f9 * 2.0F - f8;
-        float f10 = -(eo.b(f1 * 0.6662F * 2.0F + 0.0F) * 0.4F) * f2;
-        float f11 = -(eo.b(f1 * 0.6662F * 2.0F + 3.141593F) * 0.4F) * f2;
-        float f12 = -(eo.b(f1 * 0.6662F * 2.0F + 1.570796F) * 0.4F) * f2;
-        float f13 = -(eo.b(f1 * 0.6662F * 2.0F + 4.712389F) * 0.4F) * f2;
-        float f14 = java.lang.Math.abs(eo.a(f1 * 0.6662F + 0.0F) * 0.4F) * f2;
-        float f15 = java.lang.Math.abs(eo.a(f1 * 0.6662F + 3.141593F) * 0.4F) * f2;
-        float f16 = java.lang.Math.abs(eo.a(f1 * 0.6662F + 1.570796F) * 0.4F) * f2;
-        float f17 = java.lang.Math.abs(eo.a(f1 * 0.6662F + 4.712389F) * 0.4F) * f2;
+        float f10 = -(MathLib.cos(f1 * 0.6662F * 2.0F + 0.0F) * 0.4F) * f2;
+        float f11 = -(MathLib.cos(f1 * 0.6662F * 2.0F + 3.141593F) * 0.4F) * f2;
+        float f12 = -(MathLib.cos(f1 * 0.6662F * 2.0F + 1.570796F) * 0.4F) * f2;
+        float f13 = -(MathLib.cos(f1 * 0.6662F * 2.0F + 4.712389F) * 0.4F) * f2;
+        float f14 = java.lang.Math.abs(MathLib.sin(f1 * 0.6662F + 0.0F) * 0.4F) * f2;
+        float f15 = java.lang.Math.abs(MathLib.sin(f1 * 0.6662F + 3.141593F) * 0.4F) * f2;
+        float f16 = java.lang.Math.abs(MathLib.sin(f1 * 0.6662F + 1.570796F) * 0.4F) * f2;
+        float f17 = java.lang.Math.abs(MathLib.sin(f1 * 0.6662F + 4.712389F) * 0.4F) * f2;
         d.e += f10;
         e.e += -f10;
         f.e += f11;
diff --git "a/temp\\src\\java/kh.java" "b/temp\\src\\java/kh.java"
deleted file mode 100644
index 75f3a60..0000000
--- "a/temp\\src\\java/kh.java"
+++ /dev/null
@@ -1,879 +0,0 @@
-// Jad home page: http://www.kpdus.com/jad.html
-// Decompiler options: fullnames deadcode fieldsfirst safe 
-// Source File Name:   SourceFile
-
-import java.util.Random;
-
-public abstract class kh
-{
-
-    private static int a = 0;
-    public int ab;
-    public double ac;
-    public boolean ad;
-    public kh ae;
-    public kh af;
-    protected World ag;
-    public double ah;
-    public double ai;
-    public double aj;
-    public double ak;
-    public double al;
-    public double am;
-    public double an;
-    public double ao;
-    public double ap;
-    public float aq;
-    public float ar;
-    public float as;
-    public float at;
-    public final cf au = cf.a(0.0D, 0.0D, 0.0D, 0.0D, 0.0D, 0.0D);
-    public boolean av;
-    public boolean aw;
-    public boolean ax;
-    public boolean ay;
-    public boolean az;
-    public boolean aA;
-    public float aB;
-    public float aC;
-    public float aD;
-    public float aE;
-    public float aF;
-    protected boolean aG;
-    protected float aH;
-    private int b;
-    public double aI;
-    public double aJ;
-    public double aK;
-    public float aL;
-    public float aM;
-    public boolean aN;
-    public float aO;
-    public boolean aP;
-    protected java.util.Random aQ;
-    public int aR;
-    public int aS;
-    public int aT;
-    protected int aU;
-    protected boolean aV;
-    public int aW;
-    public int aX;
-    private boolean c;
-    public String aY;
-    private double d;
-    private double e;
-    public boolean aZ;
-    public int ba;
-    public int bb;
-    public int bc;
-    public int bd;
-    public int be;
-    public int bf;
-
-    public kh(World world1)
-    {
-        ab = a++;
-        ac = 1.0D;
-        ad = false;
-        av = false;
-        ay = false;
-        az = true;
-        aA = false;
-        aB = 0.0F;
-        aC = 0.6F;
-        aD = 1.8F;
-        aE = 0.0F;
-        aF = 0.0F;
-        aG = true;
-        aH = 0.0F;
-        b = 1;
-        aL = 0.0F;
-        aM = 0.0F;
-        aN = false;
-        aO = 0.0F;
-        aP = false;
-        aQ = new Random();
-        aR = 0;
-        aS = 1;
-        aT = 0;
-        aU = 300;
-        aV = false;
-        aW = 0;
-        aX = 300;
-        c = true;
-        aZ = false;
-        ag = world1;
-        a(0.0D, 0.0D, 0.0D);
-    }
-
-    public boolean equals(Object obj)
-    {
-        if(obj instanceof kh)
-            return ((kh)obj).ab == ab;
-        else
-            return false;
-    }
-
-    public int hashCode()
-    {
-        return ab;
-    }
-
-    protected void q()
-    {
-        if(ag == null)
-            return;
-        do
-        {
-            if(al <= 0.0D)
-                break;
-            a(ak, al, am);
-            if(ag.a(this, au).size() == 0)
-                break;
-            al++;
-        } while(true);
-        an = ao = ap = 0.0D;
-        ar = 0.0F;
-    }
-
-    public void F()
-    {
-        aA = true;
-    }
-
-    protected void a(float f1, float f2)
-    {
-        aC = f1;
-        aD = f2;
-    }
-
-    protected void c(float f1, float f2)
-    {
-        aq = f1;
-        ar = f2;
-    }
-
-    public void a(double d1, double d2, double d3)
-    {
-        ak = d1;
-        al = d2;
-        am = d3;
-        float f1 = aC / 2.0F;
-        float f2 = aD;
-        au.c(d1 - (double)f1, (d2 - (double)aB) + (double)aL, d3 - (double)f1, d1 + (double)f1, (d2 - (double)aB) + (double)aL + (double)f2, d3 + (double)f1);
-    }
-
-    public void d(float f1, float f2)
-    {
-        float f3 = ar;
-        float f4 = aq;
-        aq += ((float) ((double)f1 * 0.14999999999999999D));
-        ar -= ((float) ((double)f2 * 0.14999999999999999D));
-        if(ar < -90F)
-            ar = -90F;
-        if(ar > 90F)
-            ar = 90F;
-        at += ar - f3;
-        as += aq - f4;
-    }
-
-    public void e_()
-    {
-        y();
-    }
-
-    public void y()
-    {
-        if(af != null && af.aA)
-            af = null;
-        aR++;
-        aE = aF;
-        ah = ak;
-        ai = al;
-        aj = am;
-        at = ar;
-        as = aq;
-        if(g_())
-        {
-            if(!aV && !c)
-            {
-                float f1 = eo.a(an * an * 0.20000000298023224D + ao * ao + ap * ap * 0.20000000298023224D) * 0.2F;
-                if(f1 > 1.0F)
-                    f1 = 1.0F;
-                ag.a(this, "random.splash", f1, 1.0F + (aQ.nextFloat() - aQ.nextFloat()) * 0.4F);
-                float f2 = eo.b(au.b);
-                for(int i = 0; (float)i < 1.0F + aC * 20F; i++)
-                {
-                    float f3 = (aQ.nextFloat() * 2.0F - 1.0F) * aC;
-                    float f5 = (aQ.nextFloat() * 2.0F - 1.0F) * aC;
-                    ag.a("bubble", ak + (double)f3, f2 + 1.0F, am + (double)f5, an, ao - (double)(aQ.nextFloat() * 0.2F), ap);
-                }
-
-                for(int j = 0; (float)j < 1.0F + aC * 20F; j++)
-                {
-                    float f4 = (aQ.nextFloat() * 2.0F - 1.0F) * aC;
-                    float f6 = (aQ.nextFloat() * 2.0F - 1.0F) * aC;
-                    ag.a("splash", ak + (double)f4, f2 + 1.0F, am + (double)f6, an, ao, ap);
-                }
-
-            }
-            aH = 0.0F;
-            aV = true;
-            aT = 0;
-        } else
-        {
-            aV = false;
-        }
-        if(aT > 0)
-        {
-            if(aT % 20 == 0)
-                a(((kh) (null)), 1);
-            aT--;
-        }
-        if(G())
-        {
-            a(((kh) (null)), 10);
-            aT = 600;
-        }
-        if(al < -64D)
-            E();
-        c = false;
-    }
-
-    protected void E()
-    {
-        F();
-    }
-
-    public boolean b(double d1, double d2, double d3)
-    {
-        cf cf1 = au.c(d1, d2, d3);
-        java.util.List list = ag.a(this, cf1);
-        if(list.size() > 0)
-            return false;
-        return !ag.b(cf1);
-    }
-
-    public void c(double d1, double d2, double d3)
-    {
-        if(aN)
-        {
-            au.d(d1, d2, d3);
-            ak = (au.a + au.d) / 2D;
-            al = (au.b + (double)aB) - (double)aL;
-            am = (au.c + au.f) / 2D;
-            return;
-        }
-        double d4 = ak;
-        double d5 = am;
-        double d6 = d1;
-        double d7 = d2;
-        double d8 = d3;
-        cf cf1 = au.c();
-        boolean flag = av && o();
-        if(flag)
-        {
-            double d9 = 0.050000000000000003D;
-            for(; d1 != 0.0D && ag.a(this, au.c(d1, -1D, 0.0D)).size() == 0; d6 = d1)
-            {
-                if(d1 < d9 && d1 >= -d9)
-                {
-                    d1 = 0.0D;
-                    continue;
-                }
-                if(d1 > 0.0D)
-                    d1 -= d9;
-                else
-                    d1 += d9;
-            }
-
-            for(; d3 != 0.0D && ag.a(this, au.c(0.0D, -1D, d3)).size() == 0; d8 = d3)
-            {
-                if(d3 < d9 && d3 >= -d9)
-                {
-                    d3 = 0.0D;
-                    continue;
-                }
-                if(d3 > 0.0D)
-                    d3 -= d9;
-                else
-                    d3 += d9;
-            }
-
-        }
-        java.util.List list = ag.a(this, au.a(d1, d2, d3));
-        for(int i = 0; i < list.size(); i++)
-            d2 = ((cf)list.get(i)).b(au, d2);
-
-        au.d(0.0D, d2, 0.0D);
-        if(!az && d7 != d2)
-            d1 = d2 = d3 = 0.0D;
-        boolean flag1 = av || d7 != d2 && d7 < 0.0D;
-        for(int j = 0; j < list.size(); j++)
-            d1 = ((cf)list.get(j)).a(au, d1);
-
-        au.d(d1, 0.0D, 0.0D);
-        if(!az && d6 != d1)
-            d1 = d2 = d3 = 0.0D;
-        for(int k = 0; k < list.size(); k++)
-            d3 = ((cf)list.get(k)).c(au, d3);
-
-        au.d(0.0D, 0.0D, d3);
-        if(!az && d8 != d3)
-            d1 = d2 = d3 = 0.0D;
-        if(aM > 0.0F && flag1 && aL < 0.05F && (d6 != d1 || d8 != d3))
-        {
-            double d10 = d1;
-            double d12 = d2;
-            double d14 = d3;
-            d1 = d6;
-            d2 = aM;
-            d3 = d8;
-            cf cf2 = au.c();
-            au.b(cf1);
-            java.util.List list1 = ag.a(this, au.a(d1, d2, d3));
-            for(int j2 = 0; j2 < list1.size(); j2++)
-                d2 = ((cf)list1.get(j2)).b(au, d2);
-
-            au.d(0.0D, d2, 0.0D);
-            if(!az && d7 != d2)
-                d1 = d2 = d3 = 0.0D;
-            for(int k2 = 0; k2 < list1.size(); k2++)
-                d1 = ((cf)list1.get(k2)).a(au, d1);
-
-            au.d(d1, 0.0D, 0.0D);
-            if(!az && d6 != d1)
-                d1 = d2 = d3 = 0.0D;
-            for(int l2 = 0; l2 < list1.size(); l2++)
-                d3 = ((cf)list1.get(l2)).c(au, d3);
-
-            au.d(0.0D, 0.0D, d3);
-            if(!az && d8 != d3)
-                d1 = d2 = d3 = 0.0D;
-            if(d10 * d10 + d14 * d14 >= d1 * d1 + d3 * d3)
-            {
-                d1 = d10;
-                d2 = d12;
-                d3 = d14;
-                au.b(cf2);
-            } else
-            {
-                aL += 0.5D;
-            }
-        }
-        ak = (au.a + au.d) / 2D;
-        al = (au.b + (double)aB) - (double)aL;
-        am = (au.c + au.f) / 2D;
-        aw = d6 != d1 || d8 != d3;
-        ax = d7 != d2;
-        av = d7 != d2 && d7 < 0.0D;
-        ay = aw || ax;
-        if(av)
-        {
-            if(aH > 0.0F)
-            {
-                c(aH);
-                aH = 0.0F;
-            }
-        } else
-        if(d2 < 0.0D)
-            aH -= ((float) (d2));
-        if(d6 != d1)
-            an = 0.0D;
-        if(d7 != d2)
-            ao = 0.0D;
-        if(d8 != d3)
-            ap = 0.0D;
-        double d11 = ak - d4;
-        double d13 = am - d5;
-        aF += ((float) ((double)eo.a(d11 * d11 + d13 * d13) * 0.59999999999999998D));
-        if(aG && !flag)
-        {
-            int l = eo.b(ak);
-            int j1 = eo.b(al - 0.20000000298023224D - (double)aB);
-            int l1 = eo.b(am);
-            int i3 = ag.a(l, j1, l1);
-            if(aF > (float)b && i3 > 0)
-            {
-                b++;
-                bb bb1 = ly.n[i3].bl;
-                if(ag.a(l, j1 + 1, l1) == ly.aT.bc)
-                {
-                    bb1 = ly.aT.bl;
-                    ag.a(this, bb1.d(), bb1.b() * 0.15F, bb1.c());
-                } else
-                if(!ly.n[i3].bn.d())
-                    ag.a(this, bb1.d(), bb1.b() * 0.15F, bb1.c());
-                ly.n[i3].a(ag, l, j1, l1, this);
-            }
-        }
-        int i1 = eo.b(au.a);
-        int k1 = eo.b(au.b);
-        int i2 = eo.b(au.c);
-        int j3 = eo.b(au.d);
-        int k3 = eo.b(au.e);
-        int l3 = eo.b(au.f);
-        for(int i4 = i1; i4 <= j3; i4++)
-        {
-            for(int j4 = k1; j4 <= k3; j4++)
-            {
-                for(int k4 = i2; k4 <= l3; k4++)
-                {
-                    int l4 = ag.a(i4, j4, k4);
-                    if(l4 > 0)
-                        ly.n[l4].b(ag, i4, j4, k4, this);
-                }
-
-            }
-
-        }
-
-        aL *= 0.4F;
-        boolean flag2 = g_();
-        if(ag.c(au))
-        {
-            a(1);
-            if(!flag2)
-            {
-                aT++;
-                if(aT == 0)
-                    aT = 300;
-            }
-        } else
-        if(aT <= 0)
-            aT = -aS;
-        if(flag2 && aT > 0)
-        {
-            ag.a(this, "random.fizz", 0.7F, 1.6F + (aQ.nextFloat() - aQ.nextFloat()) * 0.4F);
-            aT = -aS;
-        }
-    }
-
-    public boolean o()
-    {
-        return false;
-    }
-
-    public cf f_()
-    {
-        return null;
-    }
-
-    protected void a(int i)
-    {
-        a(((kh) (null)), i);
-    }
-
-    protected void c(float f1)
-    {
-    }
-
-    public boolean g_()
-    {
-        return ag.a(au.b(0.0D, -0.40000000596046448D, 0.0D), gb.f, this);
-    }
-
-    public boolean a(gb gb1)
-    {
-        double d1 = al + (double)s();
-        int i = eo.b(ak);
-        int j = eo.d(eo.b(d1));
-        int k = eo.b(am);
-        int l = ag.a(i, j, k);
-        if(l != 0 && ly.n[l].bn == gb1)
-        {
-            float f1 = jp.b(ag.e(i, j, k)) - 0.1111111F;
-            float f2 = (float)(j + 1) - f1;
-            return d1 < (double)f2;
-        } else
-        {
-            return false;
-        }
-    }
-
-    protected float s()
-    {
-        return 0.0F;
-    }
-
-    public boolean G()
-    {
-        return ag.a(au.b(0.0D, -0.40000000596046448D, 0.0D), gb.g);
-    }
-
-    public void a(float f1, float f2, float f3)
-    {
-        float f4 = eo.c(f1 * f1 + f2 * f2);
-        if(f4 < 0.01F)
-            return;
-        if(f4 < 1.0F)
-            f4 = 1.0F;
-        f4 = f3 / f4;
-        f1 *= f4;
-        f2 *= f4;
-        float f5 = eo.a((aq * 3.141593F) / 180F);
-        float f6 = eo.b((aq * 3.141593F) / 180F);
-        an += f1 * f6 - f2 * f5;
-        ap += f2 * f6 + f1 * f5;
-    }
-
-    public float a(float f1)
-    {
-        int i = eo.b(ak);
-        double d1 = (au.e - au.b) * 0.66000000000000003D;
-        int j = eo.b((al - (double)aB) + d1);
-        int k = eo.b(am);
-        return ag.c(i, j, k);
-    }
-
-    public void a(World world1)
-    {
-        ag = world1;
-    }
-
-    public void b(double d1, double d2, double d3, float f1, 
-            float f2)
-    {
-        ah = ak = d1;
-        ai = al = d2;
-        aj = am = d3;
-        aq = f1;
-        ar = f2;
-        aL = 0.0F;
-        double d4 = as - f1;
-        if(d4 < -180D)
-            as += 360F;
-        if(d4 >= 180D)
-            as -= 360F;
-        a(ak, al, am);
-    }
-
-    public void c(double d1, double d2, double d3, float f1, 
-            float f2)
-    {
-        ah = ak = d1;
-        ai = al = d2 + (double)aB;
-        aj = am = d3;
-        aq = f1;
-        ar = f2;
-        a(ak, al, am);
-    }
-
-    public float d(kh kh1)
-    {
-        float f1 = (float)(ak - kh1.ak);
-        float f2 = (float)(al - kh1.al);
-        float f3 = (float)(am - kh1.am);
-        return eo.c(f1 * f1 + f2 * f2 + f3 * f3);
-    }
-
-    public double d(double d1, double d2, double d3)
-    {
-        double d4 = ak - d1;
-        double d5 = al - d2;
-        double d6 = am - d3;
-        return d4 * d4 + d5 * d5 + d6 * d6;
-    }
-
-    public double e(double d1, double d2, double d3)
-    {
-        double d4 = ak - d1;
-        double d5 = al - d2;
-        double d6 = am - d3;
-        return (double)eo.a(d4 * d4 + d5 * d5 + d6 * d6);
-    }
-
-    public double e(kh kh1)
-    {
-        double d1 = ak - kh1.ak;
-        double d2 = al - kh1.al;
-        double d3 = am - kh1.am;
-        return d1 * d1 + d2 * d2 + d3 * d3;
-    }
-
-    public void b(Player player)
-    {
-    }
-
-    public void f(kh kh1)
-    {
-        if(kh1.ae == this || kh1.af == this)
-            return;
-        double d1 = kh1.ak - ak;
-        double d2 = kh1.am - am;
-        double d3 = eo.a(d1, d2);
-        if(d3 >= 0.0099999997764825821D)
-        {
-            d3 = eo.a(d3);
-            d1 /= d3;
-            d2 /= d3;
-            double d4 = 1.0D / d3;
-            if(d4 > 1.0D)
-                d4 = 1.0D;
-            d1 *= d4;
-            d2 *= d4;
-            d1 *= 0.05000000074505806D;
-            d2 *= 0.05000000074505806D;
-            d1 *= 1.0F - aO;
-            d2 *= 1.0F - aO;
-            f(-d1, 0.0D, -d2);
-            kh1.f(d1, 0.0D, d2);
-        }
-    }
-
-    public void f(double d1, double d2, double d3)
-    {
-        an += d1;
-        ao += d2;
-        ap += d3;
-    }
-
-    public boolean a(kh kh1, int i)
-    {
-        return false;
-    }
-
-    public boolean c_()
-    {
-        return false;
-    }
-
-    public boolean d_()
-    {
-        return false;
-    }
-
-    public void b(kh kh1, int i)
-    {
-    }
-
-    public boolean a(aj aj1)
-    {
-        double d1 = ak - aj1.a;
-        double d2 = al - aj1.b;
-        double d3 = am - aj1.c;
-        double d4 = d1 * d1 + d2 * d2 + d3 * d3;
-        return a(d4);
-    }
-
-    public boolean a(double d1)
-    {
-        double d2 = au.b();
-        d2 *= 64D * ac;
-        return d1 < d2 * d2;
-    }
-
-    public String x()
-    {
-        return null;
-    }
-
-    public boolean c(TagCompound tagCompound1)
-    {
-        String s1 = H();
-        if(aA || s1 == null)
-        {
-            return false;
-        } else
-        {
-            tagCompound1.set("id", s1);
-            d(tagCompound1);
-            return true;
-        }
-    }
-
-    public void d(TagCompound tagCompound1)
-    {
-        tagCompound1.set("Pos", ((Tag) (a(new double[] {
-            ak, al, am
-        }))));
-        tagCompound1.set("Motion", ((Tag) (a(new double[] {
-            an, ao, ap
-        }))));
-        tagCompound1.set("Rotation", ((Tag) (a(new float[] {
-            aq, ar
-        }))));
-        tagCompound1.set("FallDistance", aH);
-        tagCompound1.set("Fire", (short)aT);
-        tagCompound1.set("Air", (short)aX);
-        tagCompound1.set("OnGround", av);
-        a(tagCompound1);
-    }
-
-    public void e(TagCompound tagCompound1)
-    {
-        TagList tagList1 = tagCompound1.l("Pos");
-        TagList tagList2 = tagCompound1.l("Motion");
-        TagList tagList3 = tagCompound1.l("Rotation");
-        a(0.0D, 0.0D, 0.0D);
-        an = ((TagDouble) tagList2.a(0)).a;
-        ao = ((TagDouble) tagList2.a(1)).a;
-        ap = ((TagDouble) tagList2.a(2)).a;
-        ah = aI = ak = ((TagDouble) tagList1.a(0)).a;
-        ai = aJ = al = ((TagDouble) tagList1.a(1)).a;
-        aj = aK = am = ((TagDouble) tagList1.a(2)).a;
-        as = aq = ((TagFloat) tagList3.a(0)).a;
-        at = ar = ((TagFloat) tagList3.a(1)).a;
-        aH = tagCompound1.getFloat("FallDistance");
-        aT = ((int) (tagCompound1.getShort("Fire")));
-        aX = ((int) (tagCompound1.getShort("Air")));
-        av = tagCompound1.isTrueByte("OnGround");
-        a(ak, al, am);
-        b(tagCompound1);
-    }
-
-    protected final String H()
-    {
-        return ew.b(this);
-    }
-
-    protected abstract void b(TagCompound tagCompound1);
-
-    protected abstract void a(TagCompound tagCompound1);
-
-    protected TagList a(double ad1[])
-    {
-        TagList tagList1 = new TagList();
-        double ad2[] = ad1;
-        int i = ad2.length;
-        for(int j = 0; j < i; j++)
-        {
-            double d1 = ad2[j];
-            tagList1.a(((Tag) (new TagDouble(d1))));
-        }
-
-        return tagList1;
-    }
-
-    protected TagList a(float af1[])
-    {
-        TagList tagList1 = new TagList();
-        float af2[] = af1;
-        int i = af2.length;
-        for(int j = 0; j < i; j++)
-        {
-            float f1 = af2[j];
-            tagList1.a(((Tag) (new TagFloat(f1))));
-        }
-
-        return tagList1;
-    }
-
-    public float h_()
-    {
-        return aD / 2.0F;
-    }
-
-    public Item b(int i, int j)
-    {
-        return a(i, j, 0.0F);
-    }
-
-    public Item a(int i, int j, float f1)
-    {
-        Item item1 = new Item(ag, ak, al + (double)f1, am, new ev(i, j));
-        item1.c = 10;
-        ag.a(((kh) (item1)));
-        return item1;
-    }
-
-    public boolean B()
-    {
-        return !aA;
-    }
-
-    public boolean I()
-    {
-        int i = eo.b(ak);
-        int j = eo.b(al + (double)s());
-        int k = eo.b(am);
-        return ag.g(i, j, k);
-    }
-
-    public boolean a(Player player)
-    {
-        return false;
-    }
-
-    public cf b_(kh kh1)
-    {
-        return null;
-    }
-
-    public void p()
-    {
-        if(af.aA)
-        {
-            af = null;
-            return;
-        }
-        an = 0.0D;
-        ao = 0.0D;
-        ap = 0.0D;
-        e_();
-        af.i_();
-        e += af.aq - af.as;
-        d += af.ar - af.at;
-        for(; e >= 180D; e -= 360D);
-        for(; e < -180D; e += 360D);
-        for(; d >= 180D; d -= 360D);
-        for(; d < -180D; d += 360D);
-        double d1 = e * 0.5D;
-        double d2 = d * 0.5D;
-        float f1 = 10F;
-        if(d1 > (double)f1)
-            d1 = f1;
-        if(d1 < (double)(-f1))
-            d1 = -f1;
-        if(d2 > (double)f1)
-            d2 = f1;
-        if(d2 < (double)(-f1))
-            d2 = -f1;
-        e -= d1;
-        d -= d2;
-        aq += ((float) (d1));
-        ar += ((float) (d2));
-    }
-
-    protected void i_()
-    {
-        ae.a(ak, al + h() + ae.v(), am);
-    }
-
-    public double v()
-    {
-        return (double)aB;
-    }
-
-    public double h()
-    {
-        return (double)aD * 0.75D;
-    }
-
-    public void g(kh kh1)
-    {
-        d = 0.0D;
-        e = 0.0D;
-        if(af == kh1)
-        {
-            af.ae = null;
-            af = null;
-            c(kh1.ak, kh1.au.b + (double)kh1.aD, kh1.am, aq, ar);
-            return;
-        }
-        if(af != null)
-            af.ae = null;
-        if(kh1.ae != null)
-            kh1.ae.af = null;
-        af = kh1;
-        kh1.ae = this;
-    }
-
-    public void a(double d1, double d2, double d3, float f1, 
-            float f2, int i)
-    {
-        a(d1, d2, d3);
-        c(f1, f2);
-    }
-
-}
diff --git "a/temp\\src\\java/kk.java" "b/src\\main\\java/kk.java"
index 9d1d8cb..cda3a93 100644
--- "a/temp\\src\\java/kk.java"
+++ "b/src\\main\\java/kk.java"
@@ -41,13 +41,13 @@ public class kk extends cy
         boolean flag1 = random.nextInt(6) == 0;
         for(; k < l; k++)
         {
-            double d6 = 1.5D + (double)(eo.a(((float)k * 3.141593F) / (float)l) * f * 1.0F);
+            double d6 = 1.5D + (double)(MathLib.sin(((float)k * 3.141593F) / (float)l) * f * 1.0F);
             double d7 = d6 * d3;
-            float f5 = eo.b(f2);
-            float f6 = eo.a(f2);
-            d += eo.b(f1) * f5;
+            float f5 = MathLib.cos(f2);
+            float f6 = MathLib.sin(f2);
+            d += MathLib.cos(f1) * f5;
             d1 += f6;
-            d2 += eo.a(f1) * f5;
+            d2 += MathLib.sin(f1) * f5;
             if(flag1)
                 f2 *= 0.92F;
             else
@@ -74,12 +74,12 @@ public class kk extends cy
                 return;
             if(d < d4 - 16D - d6 * 2D || d2 < d5 - 16D - d6 * 2D || d > d4 + 16D + d6 * 2D || d2 > d5 + 16D + d6 * 2D)
                 continue;
-            d8 = ((double) (eo.b(d - d6) - i * 16 - 1));
-            int k1 = (eo.b(d + d6) - i * 16) + 1;
-            d9 = ((double) (eo.b(d1 - d7) - 1));
-            int l1 = eo.b(d1 + d7) + 1;
-            d10 = ((double) (eo.b(d2 - d6) - j * 16 - 1));
-            int i2 = (eo.b(d2 + d6) - j * 16) + 1;
+            d8 = ((double) (MathLib.castIgnoringSign(d - d6) - i * 16 - 1));
+            int k1 = (MathLib.castIgnoringSign(d + d6) - i * 16) + 1;
+            d9 = ((double) (MathLib.castIgnoringSign(d1 - d7) - 1));
+            int l1 = MathLib.castIgnoringSign(d1 + d7) + 1;
+            d10 = ((double) (MathLib.castIgnoringSign(d2 - d6) - j * 16 - 1));
+            int i2 = (MathLib.castIgnoringSign(d2 + d6) - j * 16) + 1;
             if(d8 < 0)
                 d8 = 0;
             if(k1 > 16)
diff --git "a/temp\\src\\java/km.java" "b/src\\main\\java/km.java"
index 1fc92dc..3998310 100644
--- "a/temp\\src\\java/km.java"
+++ "b/src\\main\\java/km.java"
@@ -150,9 +150,9 @@ public class km extends ly
         a.b(world1, k, l, i1, random);
     }
 
-    public void b(World world1, int k, int l, int i1, Player player)
+    public void b(World world1, int k, int l, int i1, EntityPlayer entityPlayer)
     {
-        a.b(world1, k, l, i1, player);
+        a.b(world1, k, l, i1, entityPlayer);
     }
 
     public void b(World world1, int k, int l, int i1, int j1)
@@ -165,9 +165,9 @@ public class km extends ly
         return a.c(nm, k, l, i1);
     }
 
-    public float a(kh kh)
+    public float a(Entity entity)
     {
-        return a.a(kh);
+        return a.a(entity);
     }
 
     public int g()
@@ -210,9 +210,9 @@ public class km extends ly
         return a.f(world1, k, l, i1);
     }
 
-    public void a(World world1, int k, int l, int i1, kh kh, aj aj)
+    public void a(World world1, int k, int l, int i1, Entity entity, Vec3 vec3)
     {
-        a.a(world1, k, l, i1, kh, aj);
+        a.a(world1, k, l, i1, entity, vec3);
     }
 
     public boolean h()
@@ -251,9 +251,9 @@ public class km extends ly
         a.b_(world1, k, l, i1, j1);
     }
 
-    public void a(World world1, int k, int l, int i1, kh kh)
+    public void a(World world1, int k, int l, int i1, Entity entity)
     {
-        a.a(world1, k, l, i1, kh);
+        a.a(world1, k, l, i1, entity);
     }
 
     public void a(World world1, int k, int l, int i1, java.util.Random random)
@@ -261,9 +261,9 @@ public class km extends ly
         a.a(world1, k, l, i1, random);
     }
 
-    public boolean a(World world1, int k, int l, int i1, Player player)
+    public boolean a(World world1, int k, int l, int i1, EntityPlayer entityPlayer)
     {
-        return a.a(world1, k, l, i1, player);
+        return a.a(world1, k, l, i1, entityPlayer);
     }
 
     public void c(World world1, int k, int l, int i1)
diff --git "a/temp\\src\\java/kq.java" "b/src\\main\\java/kq.java"
index bc7b01f..77ad3b3 100644
--- "a/temp\\src\\java/kq.java"
+++ "b/src\\main\\java/kq.java"
@@ -14,9 +14,9 @@ public class kq extends nf
         b++;
         if(d4 == 0.0D && (d3 != 0.0D || d5 != 0.0D))
         {
-            an = d3;
-            ao = d4 + 0.10000000000000001D;
-            ap = d5;
+            motionX = d3;
+            motionY = d4 + 0.10000000000000001D;
+            motionZ = d5;
         }
     }
 }
diff --git "a/temp\\src\\java/kt.java" "b/src\\main\\java/kt.java"
index ef77293..d4965d7 100644
--- "a/temp\\src\\java/kt.java"
+++ "b/src\\main\\java/kt.java"
@@ -17,29 +17,29 @@ public class kt extends ak
                   float f, float f1)
     {
         org.lwjgl.opengl.GL11.glPushMatrix();
-        double d4 = minecart1.aI + (minecart1.ak - minecart1.aI) * (double)f1;
-        double d5 = minecart1.aJ + (minecart1.al - minecart1.aJ) * (double)f1;
-        double d6 = minecart1.aK + (minecart1.am - minecart1.aK) * (double)f1;
+        double d4 = minecart1.aI + (minecart1.posX - minecart1.aI) * (double)f1;
+        double d5 = minecart1.aJ + (minecart1.posY - minecart1.aJ) * (double)f1;
+        double d6 = minecart1.aK + (minecart1.posZ - minecart1.aK) * (double)f1;
         double d7 = 0.30000001192092896D;
-        aj aj1 = minecart1.g(d4, d5, d6);
-        float f2 = minecart1.at + (minecart1.ar - minecart1.at) * f1;
-        if(aj1 != null)
+        Vec3 vec31 = minecart1.g(d4, d5, d6);
+        float f2 = minecart1.prevPitch + (minecart1.pitch - minecart1.prevPitch) * f1;
+        if(vec31 != null)
         {
-            aj aj2 = minecart1.a(d4, d5, d6, d7);
-            aj aj3 = minecart1.a(d4, d5, d6, -d7);
-            if(aj2 == null)
-                aj2 = aj1;
-            if(aj3 == null)
-                aj3 = aj1;
-            d1 += aj1.a - d4;
-            d2 += (aj2.b + aj3.b) / 2D - d5;
-            d3 += aj1.c - d6;
-            aj aj4 = aj3.c(-aj2.a, -aj2.b, -aj2.c);
-            if(aj4.c() != 0.0D)
+            Vec3 vec32 = minecart1.a(d4, d5, d6, d7);
+            Vec3 vec33 = minecart1.a(d4, d5, d6, -d7);
+            if(vec32 == null)
+                vec32 = vec31;
+            if(vec33 == null)
+                vec33 = vec31;
+            d1 += vec31.x - d4;
+            d2 += (vec32.y + vec33.y) / 2D - d5;
+            d3 += vec31.z - d6;
+            Vec3 vec34 = vec33.add(-vec32.x, -vec32.y, -vec32.z);
+            if(vec34.magnitude() != 0.0D)
             {
-                aj4 = aj4.b();
-                f = (float)((java.lang.Math.atan2(aj4.c, aj4.a) * 180D) / 3.1415926535897931D);
-                f2 = (float)(java.lang.Math.atan(aj4.b) * 73D);
+                vec34 = vec34.normalize();
+                f = (float)((java.lang.Math.atan2(vec34.z, vec34.x) * 180D) / 3.1415926535897931D);
+                f2 = (float)(java.lang.Math.atan(vec34.y) * 73D);
             }
         }
         org.lwjgl.opengl.GL11.glTranslatef((float)d1, (float)d2, (float)d3);
@@ -50,7 +50,7 @@ public class kt extends ak
         if(f4 < 0.0F)
             f4 = 0.0F;
         if(f3 > 0.0F)
-            org.lwjgl.opengl.GL11.glRotatef(((eo.a(f3) * f3 * f4) / 10F) * (float) minecart1.c, 1.0F, 0.0F, 0.0F);
+            org.lwjgl.opengl.GL11.glRotatef(((MathLib.sin(f3) * f3 * f4) / 10F) * (float) minecart1.c, 1.0F, 0.0F, 0.0F);
         if(minecart1.type != 0)
         {
             a("/terrain.png");
@@ -73,8 +73,8 @@ public class kt extends ak
         org.lwjgl.opengl.GL11.glPopMatrix();
     }
 
-    public void a(kh kh, double d1, double d2, double d3, float f, float f1)
+    public void a(Entity entity, double d1, double d2, double d3, float f, float f1)
     {
-        a((Minecart)kh, d1, d2, d3, f, f1);
+        a((Minecart) entity, d1, d2, d3, f, f1);
     }
 }
diff --git "a/temp\\src\\java/ku.java" "b/src\\main\\java/ku.java"
index 72c3426..005715f 100644
--- "a/temp\\src\\java/ku.java"
+++ "b/src\\main\\java/ku.java"
@@ -102,10 +102,10 @@ public class ku extends jt
             return bb;
     }
 
-    public boolean a(World world1, int i, int j, int k, Player player1)
+    public boolean a(World world1, int i, int j, int k, EntityPlayer entityPlayer1)
     {
         Furnace furnace1 = (Furnace) world1.b(i, j, k);
-        player1.a(furnace1);
+        entityPlayer1.a(furnace1);
         return true;
     }
 
diff --git "a/temp\\src\\java/kv.java" "b/src\\main\\java/kv.java"
index e0972d3..08c27f5 100644
--- "a/temp\\src\\java/kv.java"
+++ "b/src\\main\\java/kv.java"
@@ -66,8 +66,8 @@ public class kv extends fo
         h.d = a.d;
         h.e = a.e;
         b.d = 1.570796F;
-        c.d = eo.b(f1 * 0.6662F) * 1.4F * f2;
-        d.d = eo.b(f1 * 0.6662F + 3.141593F) * 1.4F * f2;
+        c.d = MathLib.cos(f1 * 0.6662F) * 1.4F * f2;
+        d.d = MathLib.cos(f1 * 0.6662F + 3.141593F) * 1.4F * f2;
         e.f = f3;
         f.f = -f3;
     }
diff --git "a/temp\\src\\java/kx.java" "b/src\\main\\java/kx.java"
index 44f2eb8..f57dcb8 100644
--- "a/temp\\src\\java/kx.java"
+++ "b/src\\main\\java/kx.java"
@@ -16,7 +16,7 @@ public class kx
     public ey e;
     public jh f;
     public World g;
-    public Player h;
+    public EntityPlayer h;
     public float i;
     public float j;
     public fr k;
@@ -27,19 +27,19 @@ public class kx
     private kx()
     {
         o = ((java.util.Map) (new HashMap()));
-        o.put(Spider.class, ((Object) (new ok())));
-        o.put(Pig.class, ((Object) (new gm(((fo) (new ca())), ((fo) (new ca(0.5F))), 0.7F))));
-        o.put(Sheep.class, ((Object) (new ns(((fo) (new gx())), ((fo) (new bx())), 0.7F))));
-        o.put(Cow.class, ((Object) (new mc(((fo) (new dv())), 0.7F))));
-        o.put(Chicken.class, ((Object) (new eq(((fo) (new kv())), 0.3F))));
-        o.put(Creeper.class, ((Object) (new d())));
-        o.put(Skeleton.class, ((Object) (new dn(((fo) (new fv())), 0.5F))));
-        o.put(Zombie.class, ((Object) (new dn(((fo) (new cb())), 0.5F))));
+        o.put(EntitySpider.class, ((Object) (new ok())));
+        o.put(EntityPig.class, ((Object) (new gm(((fo) (new ca())), ((fo) (new ca(0.5F))), 0.7F))));
+        o.put(EntitySheep.class, ((Object) (new ns(((fo) (new gx())), ((fo) (new bx())), 0.7F))));
+        o.put(EntityCow.class, ((Object) (new mc(((fo) (new dv())), 0.7F))));
+        o.put(EntityChicken.class, ((Object) (new eq(((fo) (new kv())), 0.3F))));
+        o.put(EntityCreeper.class, ((Object) (new d())));
+        o.put(EntitySkeleton.class, ((Object) (new dn(((fo) (new fv())), 0.5F))));
+        o.put(EntityZombie.class, ((Object) (new dn(((fo) (new cb())), 0.5F))));
         o.put(Slime.class, ((Object) (new gq(((fo) (new hh(16))), ((fo) (new hh(0))), 0.25F))));
-        o.put(Player.class, ((Object) (new bu())));
-        o.put(Giant.class, ((Object) (new nz(((fo) (new cb())), 0.5F, 6F))));
-        o.put(Mob.class, ((Object) (new dn(((fo) (new cr())), 0.5F))));
-        o.put(kh.class, ((Object) (new gj())));
+        o.put(EntityPlayer.class, ((Object) (new bu())));
+        o.put(EntityGiantZombie.class, ((Object) (new nz(((fo) (new cb())), 0.5F, 6F))));
+        o.put(EntityMob.class, ((Object) (new dn(((fo) (new cr())), 0.5F))));
+        o.put(Entity.class, ((Object) (new gj())));
         o.put(Painting.class, ((Object) (new bw())));
         o.put(Arrow.class, ((Object) (new gk())));
         o.put(Snowball.class, ((Object) (new ei())));
@@ -57,7 +57,7 @@ public class kx
     public ak a(java.lang.Class class1)
     {
         ak ak1 = (ak)o.get(((Object) (class1)));
-        if(ak1 == null && class1 != kh.class)
+        if(ak1 == null && class1 != Entity.class)
         {
             ak1 = a(class1.getSuperclass());
             o.put(((Object) (class1)), ((Object) (ak1)));
@@ -65,44 +65,44 @@ public class kx
         return ak1;
     }
 
-    public ak a(kh kh1)
+    public ak a(Entity entity1)
     {
-        return a(((Object) (kh1)).getClass());
+        return a(((Object) (entity1)).getClass());
     }
 
-    public void a(World world, ey ey, kd kd, Player player1, fr fr, float f1)
+    public void a(World world, ey ey, kd kd, EntityPlayer entityPlayer1, fr fr, float f1)
     {
         g = world;
         e = ey;
         k = fr;
-        h = player1;
+        h = entityPlayer1;
         p = kd;
-        i = player1.as + (player1.aq - player1.as) * f1;
-        j = player1.at + (player1.ar - player1.at) * f1;
-        l = player1.aI + (player1.ak - player1.aI) * (double)f1;
-        m = player1.aJ + (player1.al - player1.aJ) * (double)f1;
-        n = player1.aK + (player1.am - player1.aK) * (double)f1;
+        i = entityPlayer1.prevYaw + (entityPlayer1.yaw - entityPlayer1.prevYaw) * f1;
+        j = entityPlayer1.prevPitch + (entityPlayer1.pitch - entityPlayer1.prevPitch) * f1;
+        l = entityPlayer1.aI + (entityPlayer1.posX - entityPlayer1.aI) * (double)f1;
+        m = entityPlayer1.aJ + (entityPlayer1.posY - entityPlayer1.aJ) * (double)f1;
+        n = entityPlayer1.aK + (entityPlayer1.posZ - entityPlayer1.aK) * (double)f1;
     }
 
-    public void a(kh kh1, float f1)
+    public void a(Entity entity1, float f1)
     {
-        double d1 = kh1.aI + (kh1.ak - kh1.aI) * (double)f1;
-        double d2 = kh1.aJ + (kh1.al - kh1.aJ) * (double)f1;
-        double d3 = kh1.aK + (kh1.am - kh1.aK) * (double)f1;
-        float f2 = kh1.as + (kh1.aq - kh1.as) * f1;
-        float f3 = kh1.a(f1);
+        double d1 = entity1.aI + (entity1.posX - entity1.aI) * (double)f1;
+        double d2 = entity1.aJ + (entity1.posY - entity1.aJ) * (double)f1;
+        double d3 = entity1.aK + (entity1.posZ - entity1.aK) * (double)f1;
+        float f2 = entity1.prevYaw + (entity1.yaw - entity1.prevYaw) * f1;
+        float f3 = entity1.a(f1);
         org.lwjgl.opengl.GL11.glColor3f(f3, f3, f3);
-        a(kh1, d1 - b, d2 - c, d3 - d, f2, f1);
+        a(entity1, d1 - b, d2 - c, d3 - d, f2, f1);
     }
 
-    public void a(kh kh1, double d1, double d2, double d3, 
-            float f1, float f2)
+    public void a(Entity entity1, double d1, double d2, double d3,
+                  float f1, float f2)
     {
-        ak ak1 = a(kh1);
+        ak ak1 = a(entity1);
         if(ak1 != null)
         {
-            ak1.a(kh1, d1, d2, d3, f1, f2);
-            ak1.b(kh1, d1, d2, d3, f1, f2);
+            ak1.a(entity1, d1, d2, d3, f1, f2);
+            ak1.b(entity1, d1, d2, d3, f1, f2);
         }
     }
 
diff --git "a/temp\\src\\java/la.java" "b/src\\main\\java/la.java"
index a480e94..fbe7a19 100644
--- "a/temp\\src\\java/la.java"
+++ "b/src\\main\\java/la.java"
@@ -21,7 +21,7 @@ public class la extends bi
     {
         super(minecraft, world, dl);
         bh = 0;
-        bo = new eu(((Player) (null)));
+        bo = new eu(((EntityPlayer) (null)));
         bg = gy1;
     }
 
@@ -49,35 +49,35 @@ public class la extends bi
             }
             bh = 0;
         }
-        double d = ak - bi;
+        double d = posX - bi;
         double d1 = au.b - bj;
-        double d2 = al - bk;
-        double d3 = am - bl;
-        double d4 = aq - bm;
-        double d5 = ar - bn;
+        double d2 = posY - bk;
+        double d3 = posZ - bl;
+        double d4 = yaw - bm;
+        double d5 = pitch - bn;
         boolean flag = d1 != 0.0D || d2 != 0.0D || d != 0.0D || d3 != 0.0D;
         boolean flag1 = d4 != 0.0D || d5 != 0.0D;
         if(flag && flag1)
-            bg.a(((fn) (new ch(ak, au.b, al, am, aq, ar, av))));
+            bg.a(((fn) (new ch(posX, au.b, posY, posZ, yaw, pitch, onGround))));
         else
         if(flag)
-            bg.a(((fn) (new s(ak, au.b, al, am, av))));
+            bg.a(((fn) (new s(posX, au.b, posY, posZ, onGround))));
         else
         if(flag1)
-            bg.a(((fn) (new mh(aq, ar, av))));
+            bg.a(((fn) (new mh(yaw, pitch, onGround))));
         else
-            bg.a(((fn) (new eh(av))));
+            bg.a(((fn) (new eh(onGround))));
         if(flag)
         {
-            bi = ak;
+            bi = posX;
             bj = au.b;
-            bk = al;
-            bl = am;
+            bk = posY;
+            bl = posZ;
         }
         if(flag1)
         {
-            bm = aq;
-            bn = ar;
+            bm = yaw;
+            bn = pitch;
         }
     }
 
@@ -86,12 +86,12 @@ public class la extends bi
         java.lang.System.out.println("Dropping?");
         ha ha1 = new ha(item1);
         bg.a(((fn) (ha1)));
-        item1.ak = (double)ha1.b / 32D;
-        item1.al = (double)ha1.c / 32D;
-        item1.am = (double)ha1.d / 32D;
-        item1.an = (double)ha1.e / 128D;
-        item1.ao = (double)ha1.f / 128D;
-        item1.ap = (double)ha1.g / 128D;
+        item1.posX = (double)ha1.b / 32D;
+        item1.posY = (double)ha1.c / 32D;
+        item1.posZ = (double)ha1.d / 32D;
+        item1.motionX = (double)ha1.e / 128D;
+        item1.motionY = (double)ha1.f / 128D;
+        item1.motionZ = (double)ha1.g / 128D;
     }
 
     public void a(String s1)
@@ -102,6 +102,6 @@ public class la extends bi
     public void w()
     {
         super.w();
-        bg.a(((fn) (new hf(((kh) (this)), 1))));
+        bg.a(((fn) (new hf(((Entity) (this)), 1))));
     }
 }
diff --git "a/temp\\src\\java/le.java" "b/src\\main\\java/le.java"
index 94a12bd..db571a1 100644
--- "a/temp\\src\\java/le.java"
+++ "b/src\\main\\java/le.java"
@@ -59,18 +59,18 @@ public class le
             java.lang.System.out.println((new StringBuilder()).append("Chunk file at ").append(i).append(",").append(j).append(" is missing level data, skipping").toString());
             return null;
         }
-        if(!tagCompound1.k("Level").b("Blocks"))
+        if(!tagCompound1.getCompound("Level").b("Blocks"))
         {
             java.lang.System.out.println((new StringBuilder()).append("Chunk file at ").append(i).append(",").append(j).append(" is missing block data, skipping").toString());
             return null;
         }
-            Chunk chunk1 = le.a(world1, tagCompound1.k("Level"));
+            Chunk chunk1 = le.a(world1, tagCompound1.getCompound("Level"));
             if(!chunk1.a(i, j))
             {
                 java.lang.System.out.println((new StringBuilder()).append("Chunk file at ").append(i).append(",").append(j).append(" is in the wrong location; relocating. (Expected ").append(i).append(", ").append(j).append(", got ").append(chunk1.j).append(", ").append(chunk1.k).append(")").toString());
                 tagCompound1.set("xPos", i);
                 tagCompound1.set("zPos", j);
-                chunk1 = le.a(world1, tagCompound1.k("Level"));
+                chunk1 = le.a(world1, tagCompound1.getCompound("Level"));
             }
             return chunk1;
         }
@@ -131,18 +131,18 @@ label0:
             {
                 if(!iterator.hasNext())
                     continue label0;
-                kh kh1 = (kh)iterator.next();
+                Entity entity1 = (Entity)iterator.next();
                 chunk1.r = true;
                 TagCompound tagCompound2 = new TagCompound();
-                if(kh1.c(tagCompound2))
-                    tagList1.a(((Tag) (tagCompound2)));
+                if(entity1.c(tagCompound2))
+                    tagList1.add(((Tag) (tagCompound2)));
             } while(true);
         }
 
         tagCompound1.set("Entities", ((Tag) (tagList1)));
         TagList tagList2 = new TagList();
         TagCompound tagCompound3;
-        for(java.util.Iterator iterator1 = chunk1.l.values().iterator(); iterator1.hasNext(); tagList2.a(((Tag) (tagCompound3))))
+        for(java.util.Iterator iterator1 = chunk1.l.values().iterator(); iterator1.hasNext(); tagList2.add(((Tag) (tagCompound3))))
         {
             ic ic1 = (ic)iterator1.next();
             tagCompound3 = new TagCompound();
@@ -176,25 +176,25 @@ label0:
             chunk1.g = new mu(chunk1.b.length);
             chunk1.a();
         }
-        TagList tagList1 = tagCompound1.l("Entities");
+        TagList tagList1 = tagCompound1.getList("Entities");
         if(tagList1 != null)
         {
-            for(int k = 0; k < tagList1.c(); k++)
+            for(int k = 0; k < tagList1.size(); k++)
             {
-                TagCompound tagCompound2 = (TagCompound) tagList1.a(k);
-                kh kh1 = ew.a(tagCompound2, world1);
+                TagCompound tagCompound2 = (TagCompound) tagList1.get(k);
+                Entity entity1 = EntityList.a(tagCompound2, world1);
                 chunk1.r = true;
-                if(kh1 != null)
-                    chunk1.a(kh1);
+                if(entity1 != null)
+                    chunk1.a(entity1);
             }
 
         }
-        TagList tagList2 = tagCompound1.l("TileEntities");
+        TagList tagList2 = tagCompound1.getList("TileEntities");
         if(tagList2 != null)
         {
-            for(int l = 0; l < tagList2.c(); l++)
+            for(int l = 0; l < tagList2.size(); l++)
             {
-                TagCompound tagCompound3 = (TagCompound) tagList2.a(l);
+                TagCompound tagCompound3 = (TagCompound) tagList2.get(l);
                 ic ic1 = ic.c(tagCompound3);
                 if(ic1 != null)
                     chunk1.a(ic1);
diff --git "a/temp\\src\\java/lg.java" "b/src\\main\\java/lg.java"
index bc81900..3a599b3 100644
--- "a/temp\\src\\java/lg.java"
+++ "b/src\\main\\java/lg.java"
@@ -15,7 +15,7 @@ public class lg extends di
         aT = 1;
     }
 
-    public boolean a(ev ev1, Player player, World world1, int i, int j, int k, int l)
+    public boolean a(ev ev1, EntityPlayer entityPlayer, World world1, int i, int j, int k, int l)
     {
         if(world1.a(i, j, k) == ly.aZ.bc && world1.e(i, j, k) == 0)
         {
diff --git "a/temp\\src\\java/ll.java" "b/src\\main\\java/ll.java"
index fc01827..8ae41d5 100644
--- "a/temp\\src\\java/ll.java"
+++ "b/src\\main\\java/ll.java"
@@ -40,18 +40,18 @@ public class ll
 
     public void a(ho ho1, float f)
     {
-        aj aj1 = a[1].a.a(a[0].a);
-        aj aj2 = a[1].a.a(a[2].a);
-        aj aj3 = aj2.b(aj1).b();
+        Vec3 vec31 = a[1].a.subtract(a[0].a);
+        Vec3 vec32 = a[1].a.subtract(a[2].a);
+        Vec3 vec33 = vec32.crossProduct(vec31).normalize();
         ho1.b();
         if(c)
-            ho1.b(-(float)aj3.a, -(float)aj3.b, -(float)aj3.c);
+            ho1.b(-(float) vec33.x, -(float) vec33.y, -(float) vec33.z);
         else
-            ho1.b((float)aj3.a, (float)aj3.b, (float)aj3.c);
+            ho1.b((float) vec33.x, (float) vec33.y, (float) vec33.z);
         for(int i = 0; i < 4; i++)
         {
             ed ed1 = a[i];
-            ho1.a((float)ed1.a.a * f, (float)ed1.a.b * f, (float)ed1.a.c * f, ed1.b, ed1.c);
+            ho1.a((float)ed1.a.x * f, (float)ed1.a.y * f, (float)ed1.a.z * f, ed1.b, ed1.c);
         }
 
         ho1.a();
diff --git "a/temp\\src\\java/lo.java" "b/src\\main\\java/lo.java"
index f466320..4e48228 100644
--- "a/temp\\src\\java/lo.java"
+++ "b/src\\main\\java/lo.java"
@@ -70,8 +70,8 @@ public class lo extends ee
         org.lwjgl.opengl.GL11.glScalef(-f1, f1, f1);
         org.lwjgl.opengl.GL11.glRotatef(180F, 0.0F, 0.0F, 1.0F);
         float f2 = b.g.n;
-        float f3 = b.g.aq;
-        float f4 = b.g.ar;
+        float f3 = b.g.yaw;
+        float f4 = b.g.pitch;
         float f5 = (float)(i1 + 51) - l;
         float f6 = (float)((j1 + 75) - 50) - m;
         org.lwjgl.opengl.GL11.glRotatef(135F, 0.0F, 1.0F, 0.0F);
@@ -79,13 +79,13 @@ public class lo extends ee
         org.lwjgl.opengl.GL11.glRotatef(-135F, 0.0F, 1.0F, 0.0F);
         org.lwjgl.opengl.GL11.glRotatef(-(float)java.lang.Math.atan(f6 / 40F) * 20F, 1.0F, 0.0F, 0.0F);
         b.g.n = (float)java.lang.Math.atan(f5 / 40F) * 20F;
-        b.g.aq = (float)java.lang.Math.atan(f5 / 40F) * 40F;
-        b.g.ar = -(float)java.lang.Math.atan(f6 / 40F) * 20F;
+        b.g.yaw = (float)java.lang.Math.atan(f5 / 40F) * 40F;
+        b.g.pitch = -(float)java.lang.Math.atan(f6 / 40F) * 20F;
         org.lwjgl.opengl.GL11.glTranslatef(0.0F, b.g.aB, 0.0F);
-        kx.a.a(((kh) (b.g)), 0.0D, 0.0D, 0.0D, 0.0F, 1.0F);
+        kx.a.a(((Entity) (b.g)), 0.0D, 0.0D, 0.0D, 0.0F, 1.0F);
         b.g.n = f2;
-        b.g.aq = f3;
-        b.g.ar = f4;
+        b.g.yaw = f3;
+        b.g.pitch = f4;
         org.lwjgl.opengl.GL11.glPopMatrix();
         ((i)null).a();
         org.lwjgl.opengl.GL11.glDisable(32826);
diff --git "a/temp\\src\\java/lu.java" "b/src\\main\\java/lu.java"
index 2045733..2bbdc21 100644
--- "a/temp\\src\\java/lu.java"
+++ "b/src\\main\\java/lu.java"
@@ -98,8 +98,8 @@ public class lu extends lm
 
             if(g.g.a(gb.f))
             {
-                int i3 = (int)java.lang.Math.ceil(((double)(g.g.aX - 2) * 10D) / 300D);
-                int i4 = (int)java.lang.Math.ceil(((double)g.g.aX * 10D) / 300D) - i3;
+                int i3 = (int)java.lang.Math.ceil(((double)(g.g.air - 2) * 10D) / 300D);
+                int i4 = (int)java.lang.Math.ceil(((double)g.g.air * 10D) / 300D) - i3;
                 for(int l5 = 0; l5 < i3 + i4; l5++)
                     if(l5 < i3)
                         b((i1 / 2 - 91) + l5 * 8, j1 - 32 - 9, 16, 18, 9, 9);
diff --git "a/temp\\src\\java/lv.java" "b/src\\main\\java/lv.java"
index 850b208..bb6bc1e 100644
--- "a/temp\\src\\java/lv.java"
+++ "b/src\\main\\java/lv.java"
@@ -21,7 +21,7 @@ public class lv
         e = false;
     }
 
-    public void a(Player player)
+    public void a(EntityPlayer entityPlayer)
     {
     }
 
diff --git "a/temp\\src\\java/ly.java" "b/src\\main\\java/ly.java"
index 3021aa5..8647d36 100644
--- "a/temp\\src\\java/ly.java"
+++ "b/src\\main\\java/ly.java"
@@ -320,14 +320,14 @@ public class ly
         return bc;
     }
 
-    public float a(Player player1)
+    public float a(EntityPlayer entityPlayer1)
     {
         if(bd < 0.0F)
             return 0.0F;
-        if(!player1.b(this))
+        if(!entityPlayer1.b(this))
             return 1.0F / bd / 100F;
         else
-            return player1.a(this) / bd / 30F;
+            return entityPlayer1.a(this) / bd / 30F;
     }
 
     public void b_(World world1, int i1, int j1, int k1, int l1)
@@ -353,93 +353,93 @@ public class ly
                 double d3 = (double)(world1.n.nextFloat() * f2) + (double)(1.0F - f2) * 0.5D;
                 Item item1 = new Item(world1, (double)i1 + d1, (double)j1 + d2, (double)k1 + d3, new ev(k2));
                 item1.c = 10;
-                world1.a(((kh) (item1)));
+                world1.a(((Entity) (item1)));
             }
         }
 
     }
 
-    public float a(kh kh)
+    public float a(Entity entity)
     {
         return be / 5F;
     }
 
-    public mf a(World world1, int i1, int j1, int k1, aj aj1, aj aj2)
+    public mf a(World world1, int i1, int j1, int k1, Vec3 vec31, Vec3 vec32)
     {
         a(((nm) (world1)), i1, j1, k1);
-        aj1 = aj1.c(-i1, -j1, -k1);
-        aj2 = aj2.c(-i1, -j1, -k1);
-        aj aj3 = aj1.a(aj2, bf);
-        aj aj4 = aj1.a(aj2, bi);
-        aj aj5 = aj1.b(aj2, bg);
-        aj aj6 = aj1.b(aj2, bj);
-        aj aj7 = aj1.c(aj2, bh);
-        aj aj8 = aj1.c(aj2, bk);
-        if(!a(aj3))
-            aj3 = null;
-        if(!a(aj4))
-            aj4 = null;
-        if(!b(aj5))
-            aj5 = null;
-        if(!b(aj6))
-            aj6 = null;
-        if(!c(aj7))
-            aj7 = null;
-        if(!c(aj8))
-            aj8 = null;
-        aj aj9 = null;
-        if(aj3 != null && (aj9 == null || aj1.c(aj3) < aj1.c(aj9)))
-            aj9 = aj3;
-        if(aj4 != null && (aj9 == null || aj1.c(aj4) < aj1.c(aj9)))
-            aj9 = aj4;
-        if(aj5 != null && (aj9 == null || aj1.c(aj5) < aj1.c(aj9)))
-            aj9 = aj5;
-        if(aj6 != null && (aj9 == null || aj1.c(aj6) < aj1.c(aj9)))
-            aj9 = aj6;
-        if(aj7 != null && (aj9 == null || aj1.c(aj7) < aj1.c(aj9)))
-            aj9 = aj7;
-        if(aj8 != null && (aj9 == null || aj1.c(aj8) < aj1.c(aj9)))
-            aj9 = aj8;
-        if(aj9 == null)
+        vec31 = vec31.add(-i1, -j1, -k1);
+        vec32 = vec32.add(-i1, -j1, -k1);
+        Vec3 vec33 = vec31.getIntermediateWithXValue(vec32, bf);
+        Vec3 vec34 = vec31.getIntermediateWithXValue(vec32, bi);
+        Vec3 vec35 = vec31.getIntermediateWithYValue(vec32, bg);
+        Vec3 vec36 = vec31.getIntermediateWithYValue(vec32, bj);
+        Vec3 vec37 = vec31.getIntermediateWithZValue(vec32, bh);
+        Vec3 vec38 = vec31.getIntermediateWithZValue(vec32, bk);
+        if(!a(vec33))
+            vec33 = null;
+        if(!a(vec34))
+            vec34 = null;
+        if(!b(vec35))
+            vec35 = null;
+        if(!b(vec36))
+            vec36 = null;
+        if(!c(vec37))
+            vec37 = null;
+        if(!c(vec38))
+            vec38 = null;
+        Vec3 vec39 = null;
+        if(vec33 != null && (vec39 == null || vec31.squareDistance(vec33) < vec31.squareDistance(vec39)))
+            vec39 = vec33;
+        if(vec34 != null && (vec39 == null || vec31.squareDistance(vec34) < vec31.squareDistance(vec39)))
+            vec39 = vec34;
+        if(vec35 != null && (vec39 == null || vec31.squareDistance(vec35) < vec31.squareDistance(vec39)))
+            vec39 = vec35;
+        if(vec36 != null && (vec39 == null || vec31.squareDistance(vec36) < vec31.squareDistance(vec39)))
+            vec39 = vec36;
+        if(vec37 != null && (vec39 == null || vec31.squareDistance(vec37) < vec31.squareDistance(vec39)))
+            vec39 = vec37;
+        if(vec38 != null && (vec39 == null || vec31.squareDistance(vec38) < vec31.squareDistance(vec39)))
+            vec39 = vec38;
+        if(vec39 == null)
             return null;
         byte byte0 = -1;
-        if(aj9 == aj3)
+        if(vec39 == vec33)
             byte0 = 4;
-        if(aj9 == aj4)
+        if(vec39 == vec34)
             byte0 = 5;
-        if(aj9 == aj5)
+        if(vec39 == vec35)
             byte0 = 0;
-        if(aj9 == aj6)
+        if(vec39 == vec36)
             byte0 = 1;
-        if(aj9 == aj7)
+        if(vec39 == vec37)
             byte0 = 2;
-        if(aj9 == aj8)
+        if(vec39 == vec38)
             byte0 = 3;
-        return new mf(i1, j1, k1, ((int) (byte0)), aj9.c(i1, j1, k1));
+        return new mf(i1, j1, k1, ((int) (byte0)), vec39.add(i1, j1, k1));
     }
 
-    private boolean a(aj aj1)
+    private boolean a(Vec3 vec31)
     {
-        if(aj1 == null)
+        if(vec31 == null)
             return false;
         else
-            return aj1.b >= bg && aj1.b <= bj && aj1.c >= bh && aj1.c <= bk;
+            return vec31.y >= bg && vec31.y <= bj && vec31.z >= bh && vec31.z <= bk;
     }
 
-    private boolean b(aj aj1)
+    private boolean b(Vec3 vec31)
     {
-        if(aj1 == null)
+        if(vec31 == null)
             return false;
         else
-            return aj1.a >= bf && aj1.a <= bi && aj1.c >= bh && aj1.c <= bk;
+            return vec31.x >= bf && vec31.x <= bi && vec31.z >= bh && vec31.z <= bk;
     }
 
-    private boolean c(aj aj1)
+    private boolean c(Vec3 vec31)
     {
-        if(aj1 == null)
+        if(vec31 == null)
             return false;
         else
-            return aj1.a >= bf && aj1.a <= bi && aj1.b >= bg && aj1.b <= bj;
+            return vec31.x >= bf && vec31.x <= bi && vec31.y >= bg && vec31.y <= bj;
     }
 
     public void c(World world1, int i1, int j1, int k1)
@@ -457,12 +457,12 @@ public class ly
         return l1 == 0 || n[l1].bn.d();
     }
 
-    public boolean a(World world1, int i1, int j1, int k1, Player player1)
+    public boolean a(World world1, int i1, int j1, int k1, EntityPlayer entityPlayer1)
     {
         return false;
     }
 
-    public void a(World world1, int i1, int j1, int k1, kh kh)
+    public void a(World world1, int i1, int j1, int k1, Entity entity)
     {
     }
 
@@ -470,11 +470,11 @@ public class ly
     {
     }
 
-    public void b(World world1, int i1, int j1, int k1, Player player1)
+    public void b(World world1, int i1, int j1, int k1, EntityPlayer entityPlayer1)
     {
     }
 
-    public void a(World world1, int i1, int j1, int k1, kh kh, aj aj1)
+    public void a(World world1, int i1, int j1, int k1, Entity entity, Vec3 vec31)
     {
     }
 
@@ -497,7 +497,7 @@ public class ly
         return false;
     }
 
-    public void b(World world1, int i1, int j1, int k1, kh kh)
+    public void b(World world1, int i1, int j1, int k1, Entity entity)
     {
     }
 
diff --git "a/temp\\src\\java/mc.java" "b/src\\main\\java/mc.java"
index 47e89b9..f43db20 100644
--- "a/temp\\src\\java/mc.java"
+++ "b/src\\main\\java/mc.java"
@@ -11,19 +11,19 @@ public class mc extends dn
         super(fo, f);
     }
 
-    public void a(Cow cow1, double d, double d1, double d2,
+    public void a(EntityCow entityCow1, double d, double d1, double d2,
                   float f, float f1)
     {
-        super.a(((Mob) (cow1)), d, d1, d2, f, f1);
+        super.a(((EntityMob) (entityCow1)), d, d1, d2, f, f1);
     }
 
-    public void a(Mob mob, double d, double d1, double d2, float f, float f1)
+    public void a(EntityMob entityMob, double d, double d1, double d2, float f, float f1)
     {
-        a((Cow) mob, d, d1, d2, f, f1);
+        a((EntityCow) entityMob, d, d1, d2, f, f1);
     }
 
-    public void a(kh kh, double d, double d1, double d2, float f, float f1)
+    public void a(Entity entity, double d, double d1, double d2, float f, float f1)
     {
-        a((Cow)kh, d, d1, d2, f, f1);
+        a((EntityCow) entity, d, d1, d2, f, f1);
     }
 }
diff --git "a/temp\\src\\java/md.java" "b/src\\main\\java/md.java"
index 8d10787..67860db 100644
--- "a/temp\\src\\java/md.java"
+++ "b/src\\main\\java/md.java"
@@ -13,7 +13,7 @@ public class md extends di
         aT = 1;
     }
 
-    public boolean a(ev ev1, Player player1, World world1, int i, int j, int k, int l)
+    public boolean a(ev ev1, EntityPlayer entityPlayer1, World world1, int i, int j, int k, int l)
     {
         if(l == 0)
             return false;
@@ -32,11 +32,11 @@ public class md extends di
         if(!ly.aE.a(world1, i, j, k))
             return false;
         if(l == 1)
-            world1.b(i, j, k, ly.aE.bc, eo.b((double)(((player1.aq + 180F) * 16F) / 360F) + 0.5D) & 0xf);
+            world1.b(i, j, k, ly.aE.bc, MathLib.castIgnoringSign((double)(((entityPlayer1.yaw + 180F) * 16F) / 360F) + 0.5D) & 0xf);
         else
             world1.b(i, j, k, ly.aJ.bc, l);
         ev1.count--;
-        player1.a((Sign) world1.b(i, j, k));
+        entityPlayer1.a((Sign) world1.b(i, j, k));
         return true;
     }
 }
diff --git "a/temp\\src\\java/me.java" "b/src\\main\\java/me.java"
index b336b8e..197ab04 100644
--- "a/temp\\src\\java/me.java"
+++ "b/src\\main\\java/me.java"
@@ -12,25 +12,25 @@ public class me extends di
         aT = 1;
     }
 
-    public ev a(ev ev1, World world1, Player player1)
+    public ev a(ev ev1, World world1, EntityPlayer entityPlayer1)
     {
         float f = 1.0F;
-        float f1 = player1.at + (player1.ar - player1.at) * f;
-        float f2 = player1.as + (player1.aq - player1.as) * f;
-        double d = player1.ah + (player1.ak - player1.ah) * (double)f;
-        double d1 = player1.ai + (player1.al - player1.ai) * (double)f;
-        double d2 = player1.aj + (player1.am - player1.aj) * (double)f;
-        aj aj1 = ((aj)null).b(d, d1, d2);
-        float f3 = eo.b(-f2 * 0.01745329F - 3.141593F);
-        float f4 = eo.a(-f2 * 0.01745329F - 3.141593F);
-        float f5 = -eo.b(-f1 * 0.01745329F);
-        float f6 = eo.a(-f1 * 0.01745329F);
+        float f1 = entityPlayer1.prevPitch + (entityPlayer1.pitch - entityPlayer1.prevPitch) * f;
+        float f2 = entityPlayer1.prevYaw + (entityPlayer1.yaw - entityPlayer1.prevYaw) * f;
+        double d = entityPlayer1.prevPosX + (entityPlayer1.posX - entityPlayer1.prevPosX) * (double)f;
+        double d1 = entityPlayer1.prevPosY + (entityPlayer1.posY - entityPlayer1.prevPosY) * (double)f;
+        double d2 = entityPlayer1.prevPosZ + (entityPlayer1.posZ - entityPlayer1.prevPosZ) * (double)f;
+        Vec3 vec31 = ((Vec3)null).recycle(d, d1, d2);
+        float f3 = MathLib.cos(-f2 * 0.01745329F - 3.141593F);
+        float f4 = MathLib.sin(-f2 * 0.01745329F - 3.141593F);
+        float f5 = -MathLib.cos(-f1 * 0.01745329F);
+        float f6 = MathLib.sin(-f1 * 0.01745329F);
         float f7 = f4 * f5;
         float f8 = f6;
         float f9 = f3 * f5;
         double d3 = 5D;
-        aj aj2 = aj1.c((double)f7 * d3, (double)f8 * d3, (double)f9 * d3);
-        mf mf1 = world1.a(aj1, aj2, true);
+        Vec3 vec32 = vec31.add((double)f7 * d3, (double)f8 * d3, (double)f9 * d3);
+        mf mf1 = world1.a(vec31, vec32, true);
         if(mf1 == null)
             return ev1;
         if(mf1.a == 0)
@@ -38,7 +38,7 @@ public class me extends di
             int i = mf1.b;
             int j = mf1.c;
             int k = mf1.d;
-            world1.a(((kh) (new Boat(world1, (float)i + 0.5F, (float)j + 1.5F, (float)k + 0.5F))));
+            world1.a(((Entity) (new Boat(world1, (float)i + 0.5F, (float)j + 1.5F, (float)k + 0.5F))));
             ev1.count--;
         }
         return ev1;
diff --git "a/temp\\src\\java/mf.java" "b/src\\main\\java/mf.java"
index 25d828a..f77d514 100644
--- "a/temp\\src\\java/mf.java"
+++ "b/src\\main\\java/mf.java"
@@ -11,23 +11,23 @@ public class mf
     public int c;
     public int d;
     public int e;
-    public aj f;
-    public kh g;
+    public Vec3 f;
+    public Entity g;
 
-    public mf(int i, int j, int k, int l, aj aj1)
+    public mf(int i, int j, int k, int l, Vec3 vec31)
     {
         a = 0;
         b = i;
         c = j;
         d = k;
         e = l;
-        f = aj.b(aj1.a, aj1.b, aj1.c);
+        f = Vec3.recycle(vec31.x, vec31.y, vec31.z);
     }
 
-    public mf(kh kh1)
+    public mf(Entity entity1)
     {
         a = 1;
-        g = kh1;
-        f = aj.b(kh1.ak, kh1.al, kh1.am);
+        g = entity1;
+        f = Vec3.recycle(entity1.posX, entity1.posY, entity1.posZ);
     }
 }
diff --git "a/temp\\src\\java/mi.java" "b/src\\main\\java/mi.java"
index 9001f9e..c42143e 100644
--- "a/temp\\src\\java/mi.java"
+++ "b/src\\main\\java/mi.java"
@@ -56,7 +56,7 @@ public class mi extends ly
             }
     }
 
-    public void a(World world1, int j, int k, int l, kh kh)
+    public void a(World world1, int j, int k, int l, Entity entity)
     {
         if(world1.n.nextInt(4) == 0)
             world1.d(j, k, l, ly.w.bc);
diff --git "a/temp\\src\\java/mj.java" "b/src\\main\\java/mj.java"
index e394f1a..03a5110 100644
--- "a/temp\\src\\java/mj.java"
+++ "b/src\\main\\java/mj.java"
@@ -123,7 +123,7 @@ public class mj extends ly
         }
     }
 
-    public mf a(World world1, int i, int j, int k, aj aj, aj aj1)
+    public mf a(World world1, int i, int j, int k, Vec3 vec3, Vec3 vec31)
     {
         int l = world1.e(i, j, k) & 7;
         float f1 = 0.15F;
@@ -144,7 +144,7 @@ public class mj extends ly
             float f2 = 0.1F;
             a(0.5F - f2, 0.0F, 0.5F - f2, 0.5F + f2, 0.6F, 0.5F + f2);
         }
-        return super.a(world1, i, j, k, aj, aj1);
+        return super.a(world1, i, j, k, vec3, vec31);
     }
 
     public void b(World world1, int i, int j, int k, java.util.Random random)
diff --git "a/temp\\src\\java/n.java" "b/src\\main\\java/n.java"
index 6792d98..e456456 100644
--- "a/temp\\src\\java/n.java"
+++ "b/src\\main\\java/n.java"
@@ -38,14 +38,14 @@ public class n extends ar
         b.a(0, dw.a().a(ai));
     }
 
-    public void a(Player player1)
+    public void a(EntityPlayer entityPlayer1)
     {
-        super.a(player1);
+        super.a(entityPlayer1);
         for(int i = 0; i < 9; i++)
         {
             ev ev1 = a.c(i);
             if(ev1 != null)
-                player1.a(ev1);
+                entityPlayer1.a(ev1);
         }
 
     }
diff --git "a/temp\\src\\java/nf.java" "b/src\\main\\java/nf.java"
index d0d87e1..9ae785d 100644
--- "a/temp\\src\\java/nf.java"
+++ "b/src\\main\\java/nf.java"
@@ -8,13 +8,13 @@ public class nf extends nq
     public nf(World world1, double d, double d1, double d2)
     {
         super(world1, d, d1, d2, 0.0D, 0.0D, 0.0D);
-        an *= 0.30000001192092896D;
-        ao = (float)java.lang.Math.random() * 0.2F + 0.1F;
-        ap *= 0.30000001192092896D;
+        motionX *= 0.30000001192092896D;
+        motionY = (float)java.lang.Math.random() * 0.2F + 0.1F;
+        motionZ *= 0.30000001192092896D;
         i = 1.0F;
         j = 1.0F;
         k = 1.0F;
-        b = 19 + aQ.nextInt(4);
+        b = 19 + rnd.nextInt(4);
         a(0.01F, 0.01F);
         h = 0.06F;
         f = (int)(8D / (java.lang.Math.random() * 0.80000000000000004D + 0.20000000000000001D));
@@ -27,28 +27,28 @@ public class nf extends nq
 
     public void e_()
     {
-        ah = ak;
-        ai = al;
-        aj = am;
-        ao -= h;
-        c(an, ao, ap);
-        an *= 0.98000001907348633D;
-        ao *= 0.98000001907348633D;
-        ap *= 0.98000001907348633D;
+        prevPosX = posX;
+        prevPosY = posY;
+        prevPosZ = posZ;
+        motionY -= h;
+        c(motionX, motionY, motionZ);
+        motionX *= 0.98000001907348633D;
+        motionY *= 0.98000001907348633D;
+        motionZ *= 0.98000001907348633D;
         if(f-- <= 0)
             F();
-        if(av)
+        if(onGround)
         {
             if(java.lang.Math.random() < 0.5D)
                 F();
-            an *= 0.69999998807907104D;
-            ap *= 0.69999998807907104D;
+            motionX *= 0.69999998807907104D;
+            motionZ *= 0.69999998807907104D;
         }
-        gb gb1 = ag.f(eo.b(ak), eo.b(al), eo.b(am));
+        gb gb1 = ag.f(MathLib.castIgnoringSign(posX), MathLib.castIgnoringSign(posY), MathLib.castIgnoringSign(posZ));
         if(gb1.d() || gb1.a())
         {
-            double d = (float)(eo.b(al) + 1) - jp.b(ag.e(eo.b(ak), eo.b(al), eo.b(am)));
-            if(al < d)
+            double d = (float)(MathLib.castIgnoringSign(posY) + 1) - jp.b(ag.e(MathLib.castIgnoringSign(posX), MathLib.castIgnoringSign(posY), MathLib.castIgnoringSign(posZ)));
+            if(posY < d)
                 F();
         }
     }
diff --git "a/temp\\src\\java/nj.java" "b/src\\main\\java/nj.java"
index 1ef2816..62323dd 100644
--- "a/temp\\src\\java/nj.java"
+++ "b/src\\main\\java/nj.java"
@@ -33,9 +33,9 @@ public class nj extends hq
         k = gy1;
     }
 
-    public void a(Player player1)
+    public void a(EntityPlayer entityPlayer1)
     {
-        player1.aq = -180F;
+        entityPlayer1.yaw = -180F;
     }
 
     public boolean b(int i1, int j1, int k1, int l1)
@@ -50,7 +50,7 @@ public class nj extends hq
             ev1.a(i2, i1, j1, k1);
             if(ev1.count == 0)
             {
-                ev1.a(((Player) (a.g)));
+                ev1.a(((EntityPlayer) (a.g)));
                 a.g.u();
             }
         }
@@ -65,8 +65,8 @@ public class nj extends hq
         k.a(((fn) (new fg(0, i1, j1, k1, l1))));
         int i2 = a.world.a(i1, j1, k1);
         if(i2 > 0 && f == 0.0F)
-            ly.n[i2].b(a.world, i1, j1, k1, ((Player) (a.g)));
-        if(i2 > 0 && ly.n[i2].a(((Player) (a.g))) >= 1.0F)
+            ly.n[i2].b(a.world, i1, j1, k1, ((EntityPlayer) (a.g)));
+        if(i2 > 0 && ly.n[i2].a(((EntityPlayer) (a.g))) >= 1.0F)
             b(i1, j1, k1, l1);
     }
 
@@ -101,7 +101,7 @@ public class nj extends hq
             if(i2 == 0)
                 return;
             ly ly1 = ly.n[i2];
-            f += ly1.a(((Player) (a.g)));
+            f += ly1.a(((EntityPlayer) (a.g)));
             if(h % 4F == 0.0F && ly1 != null)
                 a.A.b(ly1.bl.d(), (float)i1 + 0.5F, (float)j1 + 0.5F, (float)k1 + 0.5F, (ly1.bl.b() + 1.0F) / 8F, ly1.bl.c() * 0.5F);
             h++;
@@ -167,15 +167,15 @@ public class nj extends hq
         }
     }
 
-    public boolean a(Player player1, World world1, ev ev1, int i1, int j1, int k1, int l1)
+    public boolean a(EntityPlayer entityPlayer1, World world1, ev ev1, int i1, int j1, int k1, int l1)
     {
         e();
         k.a(((fn) (new dofix(ev1 == null ? -1 : ev1.id, i1, j1, k1, l1))));
-        return super.a(player1, world1, ev1, i1, j1, k1, l1);
+        return super.a(entityPlayer1, world1, ev1, i1, j1, k1, l1);
     }
 
-    public Player b(World world1)
+    public EntityPlayer b(World world1)
     {
-        return ((Player) (new la(a, world1, a.i, k)));
+        return ((EntityPlayer) (new la(a, world1, a.i, k)));
     }
 }
diff --git "a/temp\\src\\java/nl.java" "b/src\\main\\java/nl.java"
index e7cd797..a4d3228 100644
--- "a/temp\\src\\java/nl.java"
+++ "b/src\\main\\java/nl.java"
@@ -17,9 +17,9 @@ public class nl extends nq
               float f)
     {
         super(world, d, d1, d2, 0.0D, 0.0D, 0.0D);
-        an *= 0.10000000149011612D;
-        ao *= 0.10000000149011612D;
-        ap *= 0.10000000149011612D;
+        motionX *= 0.10000000149011612D;
+        motionY *= 0.10000000149011612D;
+        motionZ *= 0.10000000149011612D;
         i = j = k = (float)(java.lang.Math.random() * 0.30000001192092896D);
         g *= 0.75F;
         g *= f;
@@ -42,26 +42,26 @@ public class nl extends nq
 
     public void e_()
     {
-        ah = ak;
-        ai = al;
-        aj = am;
+        prevPosX = posX;
+        prevPosY = posY;
+        prevPosZ = posZ;
         if(e++ >= f)
             F();
         b = 7 - (e * 8) / f;
-        ao += 0.0040000000000000001D;
-        c(an, ao, ap);
-        if(al == ai)
+        motionY += 0.0040000000000000001D;
+        c(motionX, motionY, motionZ);
+        if(posY == prevPosY)
         {
-            an *= 1.1000000000000001D;
-            ap *= 1.1000000000000001D;
+            motionX *= 1.1000000000000001D;
+            motionZ *= 1.1000000000000001D;
         }
-        an *= 0.95999997854232788D;
-        ao *= 0.95999997854232788D;
-        ap *= 0.95999997854232788D;
-        if(av)
+        motionX *= 0.95999997854232788D;
+        motionY *= 0.95999997854232788D;
+        motionZ *= 0.95999997854232788D;
+        if(onGround)
         {
-            an *= 0.69999998807907104D;
-            ap *= 0.69999998807907104D;
+            motionX *= 0.69999998807907104D;
+            motionZ *= 0.69999998807907104D;
         }
     }
 }
diff --git "a/temp\\src\\java/no.java" "b/src\\main\\java/no.java"
index 53a598d..f56722f 100644
--- "a/temp\\src\\java/no.java"
+++ "b/src\\main\\java/no.java"
@@ -140,12 +140,12 @@ public class no extends ly
         }
     }
 
-    public void b(World world1, int i, int j, int k, Player player)
+    public void b(World world1, int i, int j, int k, EntityPlayer entityPlayer)
     {
-        a(world1, i, j, k, player);
+        a(world1, i, j, k, entityPlayer);
     }
 
-    public boolean a(World world1, int i, int j, int k, Player player)
+    public boolean a(World world1, int i, int j, int k, EntityPlayer entityPlayer)
     {
         int l = world1.e(i, j, k);
         int i1 = l & 7;
diff --git "a/temp\\src\\java/nq.java" "b/src\\main\\java/nq.java"
index e37fe07..7346392 100644
--- "a/temp\\src\\java/nq.java"
+++ "b/src\\main\\java/nq.java"
@@ -2,7 +2,7 @@
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-public class nq extends kh
+public class nq extends Entity
 {
 
     protected int b;
@@ -27,29 +27,29 @@ public class nq extends kh
         f = 0;
         a(0.2F, 0.2F);
         aB = aD / 2.0F;
-        a(d1, d2, d3);
+        setPosition(d1, d2, d3);
         i = j = k = 1.0F;
-        an = d4 + (double)((float)(java.lang.Math.random() * 2D - 1.0D) * 0.4F);
-        ao = d5 + (double)((float)(java.lang.Math.random() * 2D - 1.0D) * 0.4F);
-        ap = d6 + (double)((float)(java.lang.Math.random() * 2D - 1.0D) * 0.4F);
+        motionX = d4 + (double)((float)(java.lang.Math.random() * 2D - 1.0D) * 0.4F);
+        motionY = d5 + (double)((float)(java.lang.Math.random() * 2D - 1.0D) * 0.4F);
+        motionZ = d6 + (double)((float)(java.lang.Math.random() * 2D - 1.0D) * 0.4F);
         float f1 = (float)(java.lang.Math.random() + java.lang.Math.random() + 1.0D) * 0.15F;
-        float f2 = eo.a(an * an + ao * ao + ap * ap);
-        an = (an / (double)f2) * (double)f1 * 0.40000000596046448D;
-        ao = (ao / (double)f2) * (double)f1 * 0.40000000596046448D + 0.10000000149011612D;
-        ap = (ap / (double)f2) * (double)f1 * 0.40000000596046448D;
-        c = aQ.nextFloat() * 3F;
-        d = aQ.nextFloat() * 3F;
-        g = (aQ.nextFloat() * 0.5F + 0.5F) * 2.0F;
-        f = (int)(4F / (aQ.nextFloat() * 0.9F + 0.1F));
+        float f2 = MathLib.sqrt(motionX * motionX + motionY * motionY + motionZ * motionZ);
+        motionX = (motionX / (double)f2) * (double)f1 * 0.40000000596046448D;
+        motionY = (motionY / (double)f2) * (double)f1 * 0.40000000596046448D + 0.10000000149011612D;
+        motionZ = (motionZ / (double)f2) * (double)f1 * 0.40000000596046448D;
+        c = rnd.nextFloat() * 3F;
+        d = rnd.nextFloat() * 3F;
+        g = (rnd.nextFloat() * 0.5F + 0.5F) * 2.0F;
+        f = (int)(4F / (rnd.nextFloat() * 0.9F + 0.1F));
         e = 0;
         aG = false;
     }
 
     public nq b(float f1)
     {
-        an *= f1;
-        ao = (ao - 0.10000000149011612D) * (double)f1 + 0.10000000149011612D;
-        ap *= f1;
+        motionX *= f1;
+        motionY = (motionY - 0.10000000149011612D) * (double)f1 + 0.10000000149011612D;
+        motionZ *= f1;
         return this;
     }
 
@@ -62,20 +62,20 @@ public class nq extends kh
 
     public void e_()
     {
-        ah = ak;
-        ai = al;
-        aj = am;
+        prevPosX = posX;
+        prevPosY = posY;
+        prevPosZ = posZ;
         if(e++ >= f)
             F();
-        ao -= 0.040000000000000001D * (double)h;
-        c(an, ao, ap);
-        an *= 0.98000001907348633D;
-        ao *= 0.98000001907348633D;
-        ap *= 0.98000001907348633D;
-        if(av)
+        motionY -= 0.040000000000000001D * (double)h;
+        c(motionX, motionY, motionZ);
+        motionX *= 0.98000001907348633D;
+        motionY *= 0.98000001907348633D;
+        motionZ *= 0.98000001907348633D;
+        if(onGround)
         {
-            an *= 0.69999998807907104D;
-            ap *= 0.69999998807907104D;
+            motionX *= 0.69999998807907104D;
+            motionZ *= 0.69999998807907104D;
         }
     }
 
@@ -86,9 +86,9 @@ public class nq extends kh
         float f9 = (float)(b / 16) / 16F;
         float f10 = f9 + 0.0624375F;
         float f11 = 0.1F * g;
-        float f12 = (float)((ah + (ak - ah) * (double)f1) - l);
-        float f13 = (float)((ai + (al - ai) * (double)f1) - m);
-        float f14 = (float)((aj + (am - aj) * (double)f1) - n);
+        float f12 = (float)((prevPosX + (posX - prevPosX) * (double)f1) - l);
+        float f13 = (float)((prevPosY + (posY - prevPosY) * (double)f1) - m);
+        float f14 = (float)((prevPosZ + (posZ - prevPosZ) * (double)f1) - n);
         float f15 = a(f1);
         ho1.a(i * f15, j * f15, k * f15);
         ho1.a(f12 - f2 * f11 - f5 * f11, f13 - f3 * f11, f14 - f4 * f11 - f6 * f11, f7, f10);
@@ -102,11 +102,11 @@ public class nq extends kh
         return 0;
     }
 
-    public void a(TagCompound tagCompound)
+    public void writeToTag(TagCompound tagCompound)
     {
     }
 
-    public void b(TagCompound tagCompound)
+    public void readFromTag(TagCompound tagCompound)
     {
     }
 }
diff --git "a/temp\\src\\java/ns.java" "b/src\\main\\java/ns.java"
index db7173b..8563771 100644
--- "a/temp\\src\\java/ns.java"
+++ "b/src\\main\\java/ns.java"
@@ -12,14 +12,14 @@ public class ns extends dn
         a(fo1);
     }
 
-    protected boolean a(Sheep sheep1, int i)
+    protected boolean a(EntitySheep entitySheep1, int i)
     {
         a("/mob/sheep_fur.png");
-        return i == 0 && !sheep1.sheared;
+        return i == 0 && !entitySheep1.sheared;
     }
 
-    protected boolean a(Mob mob, int i)
+    protected boolean a(EntityMob entityMob, int i)
     {
-        return a((Sheep) mob, i);
+        return a((EntitySheep) entityMob, i);
     }
 }
diff --git "a/temp\\src\\java/nt.java" "b/src\\main\\java/nt.java"
index 34527f2..0346583 100644
--- "a/temp\\src\\java/nt.java"
+++ "b/src\\main\\java/nt.java"
@@ -2,7 +2,7 @@
 // Decompiler options: fullnames deadcode fieldsfirst safe 
 // Source File Name:   SourceFile
 
-public class nt extends Player
+public class nt extends EntityPlayer
 {
 
     private int bg;
@@ -29,7 +29,7 @@ public class nt extends Player
         ac = 10D;
     }
 
-    public boolean a(kh kh, int i)
+    public boolean a(Entity entity, int i)
     {
         return true;
     }
@@ -50,9 +50,9 @@ public class nt extends Player
     {
         super.e_();
         Q = R;
-        double d = ak - ah;
-        double d1 = am - aj;
-        float f = eo.a(d * d + d1 * d1) * 4F;
+        double d = posX - prevPosX;
+        double d1 = posZ - prevPosZ;
+        float f = MathLib.sqrt(d * d + d1 * d1) * 4F;
         if(f > 1.0F)
             f = 1.0F;
         R += (f - R) * 0.4F;
@@ -69,26 +69,26 @@ public class nt extends Player
         super.b_();
         if(bg > 0)
         {
-            double d = ak + (bh - ak) / (double)bg;
-            double d1 = al + (bi - al) / (double)bg;
-            double d2 = am + (bj - am) / (double)bg;
+            double d = posX + (bh - posX) / (double)bg;
+            double d1 = posY + (bi - posY) / (double)bg;
+            double d2 = posZ + (bj - posZ) / (double)bg;
             double d3;
-            for(d3 = bk - (double)aq; d3 < -180D; d3 += 360D);
+            for(d3 = bk - (double) yaw; d3 < -180D; d3 += 360D);
             for(; d3 >= 180D; d3 -= 360D);
-            aq += ((float) (d3 / (double)bg));
-            ar += ((float) ((bl - (double)ar) / (double)bg));
+            yaw += ((float) (d3 / (double)bg));
+            pitch += ((float) ((bl - (double) pitch) / (double)bg));
             bg--;
-            a(d, d1, d2);
-            c(aq, ar);
+            setPosition(d, d1, d2);
+            c(yaw, pitch);
         }
         e = this.f;
-        float f = eo.a(an * an + ap * ap);
-        float f1 = (float)java.lang.Math.atan(-ao * 0.20000000298023224D) * 15F;
+        float f = MathLib.sqrt(motionX * motionX + motionZ * motionZ);
+        float f1 = (float)java.lang.Math.atan(-motionY * 0.20000000298023224D) * 15F;
         if(f > 0.1F)
             f = 0.1F;
-        if(!av || health <= 0)
+        if(!onGround || health <= 0)
             f = 0.0F;
-        if(av || health <= 0)
+        if(onGround || health <= 0)
             f1 = 0.0F;
         this.f += (f - this.f) * 0.4F;
         M += (f1 - M) * 0.8F;
diff --git "a/temp\\src\\java/nx.java" "b/src\\main\\java/nx.java"
index 2db362f..b267eb3 100644
--- "a/temp\\src\\java/nx.java"
+++ "b/src\\main\\java/nx.java"
@@ -12,7 +12,7 @@ public class nx extends di
         aU = 64;
     }
 
-    public boolean a(ev ev1, Player player, World world1, int i, int j, int k, int l)
+    public boolean a(ev ev1, EntityPlayer entityPlayer, World world1, int i, int j, int k, int l)
     {
         if(l == 0)
             j--;
diff --git "a/temp\\src\\java/nz.java" "b/src\\main\\java/nz.java"
index 4a43acd..a783e84 100644
--- "a/temp\\src\\java/nz.java"
+++ "b/src\\main\\java/nz.java"
@@ -13,13 +13,13 @@ public class nz extends dn
         f = f2;
     }
 
-    protected void a(Giant giant1, float f1)
+    protected void a(EntityGiantZombie entityGiantZombie1, float f1)
     {
         org.lwjgl.opengl.GL11.glScalef(f, f, f);
     }
 
-    protected void a(Mob mob, float f1)
+    protected void a(EntityMob entityMob, float f1)
     {
-        a((Giant) mob, f1);
+        a((EntityGiantZombie) entityMob, f1);
     }
 }
diff --git "a/temp\\src\\java/od.java" "b/src\\main\\java/od.java"
index fb3defd..3585f87 100644
--- "a/temp\\src\\java/od.java"
+++ "b/src\\main\\java/od.java"
@@ -12,7 +12,7 @@ public class od extends di
         aU = 64;
     }
 
-    public boolean a(ev ev1, Player player, World world1, int i, int j, int k, int l)
+    public boolean a(ev ev1, EntityPlayer entityPlayer, World world1, int i, int j, int k, int l)
     {
         if(l == 0)
             return false;
@@ -28,7 +28,7 @@ public class od extends di
         Painting painting1 = new Painting(world1, i, j, k, ((int) (byte0)));
         if(painting1.i())
         {
-            world1.a(((kh) (painting1)));
+            world1.a(((Entity) (painting1)));
             ev1.count--;
         }
         return true;
diff --git "a/temp\\src\\java/of.java" "b/src\\main\\java/of.java"
index 5875405..c7fd22d 100644
--- "a/temp\\src\\java/of.java"
+++ "b/src\\main\\java/of.java"
@@ -118,21 +118,21 @@ public class of
         }
     }
 
-    public void a(Mob mob1, float f1)
+    public void a(EntityMob entityMob1, float f1)
     {
         if(!g || f.b == 0.0F)
             return;
-        if(mob1 == null)
+        if(entityMob1 == null)
         {
             return;
         } else
         {
-            float f2 = mob1.as + (mob1.aq - mob1.as) * f1;
-            double d1 = mob1.ah + (mob1.ak - mob1.ah) * (double)f1;
-            double d2 = mob1.ai + (mob1.al - mob1.ai) * (double)f1;
-            double d3 = mob1.aj + (mob1.am - mob1.aj) * (double)f1;
-            float f3 = eo.b(-f2 * 0.01745329F - 3.141593F);
-            float f4 = eo.a(-f2 * 0.01745329F - 3.141593F);
+            float f2 = entityMob1.prevYaw + (entityMob1.yaw - entityMob1.prevYaw) * f1;
+            double d1 = entityMob1.prevPosX + (entityMob1.posX - entityMob1.prevPosX) * (double)f1;
+            double d2 = entityMob1.prevPosY + (entityMob1.posY - entityMob1.prevPosY) * (double)f1;
+            double d3 = entityMob1.prevPosZ + (entityMob1.posZ - entityMob1.prevPosZ) * (double)f1;
+            float f3 = MathLib.cos(-f2 * 0.01745329F - 3.141593F);
+            float f4 = MathLib.sin(-f2 * 0.01745329F - 3.141593F);
             float f5 = -f4;
             float f6 = 0.0F;
             float f7 = -f3;
diff --git "a/temp\\src\\java/oj.java" "b/src\\main\\java/oj.java"
index 680a15b..16c5119 100644
--- "a/temp\\src\\java/oj.java"
+++ "b/src\\main\\java/oj.java"
@@ -15,10 +15,10 @@ public class oj extends di
         aT = 1;
     }
 
-    public ev a(ev ev1, World world, Player player1)
+    public ev a(ev ev1, World world, EntityPlayer entityPlayer1)
     {
         ev1.count--;
-        player1.b(a);
+        entityPlayer1.b(a);
         return ev1;
     }
 }
diff --git "a/temp\\src\\java/ok.java" "b/src\\main\\java/ok.java"
index a871097..18725e9 100644
--- "a/temp\\src\\java/ok.java"
+++ "b/src\\main\\java/ok.java"
@@ -11,12 +11,12 @@ public class ok extends dn
         a(((fo) (new jy())));
     }
 
-    protected float a(Spider spider1)
+    protected float a(EntitySpider entitySpider1)
     {
         return 180F;
     }
 
-    protected boolean a(Spider spider1, int i)
+    protected boolean a(EntitySpider entitySpider1, int i)
     {
         if(i != 0)
             return false;
@@ -26,7 +26,7 @@ public class ok extends dn
         } else
         {
             a("/mob/spider_eyes.png");
-            float f = (1.0F - spider1.a(1.0F)) * 0.5F;
+            float f = (1.0F - entitySpider1.a(1.0F)) * 0.5F;
             org.lwjgl.opengl.GL11.glEnable(3042);
             org.lwjgl.opengl.GL11.glDisable(3008);
             org.lwjgl.opengl.GL11.glBlendFunc(770, 771);
@@ -35,13 +35,13 @@ public class ok extends dn
         }
     }
 
-    protected float a(Mob mob)
+    protected float a(EntityMob entityMob)
     {
-        return a((Spider) mob);
+        return a((EntitySpider) entityMob);
     }
 
-    protected boolean a(Mob mob, int i)
+    protected boolean a(EntityMob entityMob, int i)
     {
-        return a((Spider) mob, i);
+        return a((EntitySpider) entityMob, i);
     }
 }
diff --git "a/temp\\src\\java/q.java" "b/src\\main\\java/q.java"
index b5d7e4d..14727d6 100644
--- "a/temp\\src\\java/q.java"
+++ "b/src\\main\\java/q.java"
@@ -38,13 +38,13 @@ public class q extends ly
     {
         PrimedTnt primedTnt1 = new PrimedTnt(world1, (float)i + 0.5F, (float)j + 0.5F, (float)k + 0.5F);
         primedTnt1.a = world1.n.nextInt(primedTnt1.a / 4) + primedTnt1.a / 8;
-        world1.a(((kh) (primedTnt1)));
+        world1.a(((Entity) (primedTnt1)));
     }
 
     public void b(World world1, int i, int j, int k, int l)
     {
         PrimedTnt primedTnt1 = new PrimedTnt(world1, (float)i + 0.5F, (float)j + 0.5F, (float)k + 0.5F);
-        world1.a(((kh) (primedTnt1)));
-        world1.a(((kh) (primedTnt1)), "random.fuse", 1.0F, 1.0F);
+        world1.a(((Entity) (primedTnt1)));
+        world1.a(((Entity) (primedTnt1)), "random.fuse", 1.0F, 1.0F);
     }
 }
diff --git "a/temp\\src\\java/r.java" "b/src\\main\\java/r.java"
index a5ca561..ff2d305 100644
--- "a/temp\\src\\java/r.java"
+++ "b/src\\main\\java/r.java"
@@ -19,23 +19,23 @@ public class r extends ex
     {
         org.lwjgl.opengl.GL11.glPushMatrix();
         org.lwjgl.opengl.GL11.glTranslatef((float)d + 0.5F, (float)d1, (float)d2 + 0.5F);
-        kh kh1 = (kh)b.get(((Object) (mobSpawner1.entityId)));
-        if(kh1 == null)
+        Entity entity1 = (Entity)b.get(((Object) (mobSpawner1.entityId)));
+        if(entity1 == null)
         {
-            kh1 = ew.a(mobSpawner1.entityId, ((World) (null)));
-            b.put(((Object) (mobSpawner1.entityId)), ((Object) (kh1)));
+            entity1 = EntityList.a(mobSpawner1.entityId, ((World) (null)));
+            b.put(((Object) (mobSpawner1.entityId)), ((Object) (entity1)));
         }
-        if(kh1 != null)
+        if(entity1 != null)
         {
-            kh1.a(mobSpawner1.e);
+            entity1.a(mobSpawner1.e);
             float f1 = 0.4375F;
             org.lwjgl.opengl.GL11.glTranslatef(0.0F, 0.4F, 0.0F);
             org.lwjgl.opengl.GL11.glRotatef((float)(mobSpawner1.d + (mobSpawner1.c - mobSpawner1.d) * (double)f) * 10F, 0.0F, 1.0F, 0.0F);
             org.lwjgl.opengl.GL11.glRotatef(-30F, 1.0F, 0.0F, 0.0F);
             org.lwjgl.opengl.GL11.glTranslatef(0.0F, -0.4F, 0.0F);
             org.lwjgl.opengl.GL11.glScalef(f1, f1, f1);
-            kh1.c(d, d1, d2, 0.0F, 0.0F);
-            kx.a.a(kh1, 0.0D, 0.0D, 0.0D, 0.0F, f);
+            entity1.c(d, d1, d2, 0.0F, 0.0F);
+            kx.a.a(entity1, 0.0D, 0.0D, 0.0D, 0.0F, f);
         }
         org.lwjgl.opengl.GL11.glPopMatrix();
     }
diff --git "a/temp\\src\\java/x.java" "b/src\\main\\java/x.java"
index 1c7fcbd..171274a 100644
--- "a/temp\\src\\java/x.java"
+++ "b/src\\main\\java/x.java"
@@ -79,7 +79,7 @@ public class x
 
     public static TagCompound a(java.io.DataInput datainput) throws IOException
     {
-        Tag el1 = Tag.b(datainput);
+        Tag el1 = Tag.deserialize(datainput);
         if(el1 instanceof TagCompound)
             return (TagCompound)el1;
         else
@@ -88,6 +88,6 @@ public class x
 
     public static void a(TagCompound tagCompound1, java.io.DataOutput dataoutput) throws IOException
     {
-        Tag.a(((Tag) (tagCompound1)), dataoutput);
+        Tag.serialize(((Tag) (tagCompound1)), dataoutput);
     }
 }
